With timestamps:

00:00 - hi everyone if you're there with us
00:04 - apologies we started a little bit
00:07 - related
00:08 - to technical difficulties but we're on
00:10 - now hey
00:12 - uh welcome to codecademy live
00:16 - where we're streaming visualize data
00:17 - with python our skill path
00:20 - um and we're currently on to panda
00:23 - data frames which is really exciting i'm
00:26 - marielle i'm a senior curriculum
00:27 - developer
00:28 - at codecademy i'm out quarantining in
00:31 - massachusetts right now although i'm
00:34 - normally based in new york
00:36 - and here with me is my colleague
00:39 - hi everyone my name is ian i am a data
00:42 - scientist here at codecademy i'm super
00:44 - excited to be
00:46 - working with you all today to discuss uh
00:48 - diving into pandas a little bit more a
00:50 - super
00:51 - helpful and great tool for data analysis
00:53 - for all of you python
00:54 - uh users so thanks for bearing with us
00:57 - on a little bit of a late start
00:58 - um and we're excited to uh get into
01:00 - things here today with you all
01:03 - absolutely so i'm about to share my
01:05 - screen
01:08 - and if you want to and along i'm about
01:11 - to throw
01:12 - a link into the chat so as marielle is
01:14 - walking through the lesson on your
01:16 - screen uh you can continue
01:18 - along at the same time
01:24 - excellent
01:27 - exactly so i'm about to share my screen
01:30 - ian i think i'm getting your audio
01:33 - a little bit of your audio feedback uh
01:36 - but hopefully everyone can see my screen
01:38 - now
01:38 - um and we're gonna walk through this
01:42 - lesson
01:42 - together without further ado
01:46 - yes um and so everyone um
01:50 - i'm having a little bit of issues of
01:51 - pacing in this uh
01:54 - i'm gonna i'm gonna throw it in so no
01:56 - worries
01:57 - boom mario cool um
02:03 - anywho without further ado here's the
02:05 - lesson
02:07 - want to start us off yes um so
02:10 - if you've been following us along with
02:12 - us um so far
02:14 - you've had an introduction to pandas
02:16 - which is a really helpful
02:18 - package for working with data
02:21 - in python and essentially lets us
02:25 - model or organize our data into data
02:27 - frames
02:28 - uh which are table like structures
02:30 - similar to maybe a google sheet
02:32 - or an excel file that you might have
02:34 - worked with before
02:36 - and today we are going to talk a little
02:39 - bit about how to modify
02:40 - these data frames so when we have
02:42 - information stored in a table
02:44 - with columns representing maybe
02:46 - different variables of
02:48 - data we've collected and rows that maybe
02:51 - represent um
02:52 - individual um kind of accounts or
02:55 - um or observations um how can we make
02:59 - changes to the data that we have here
03:01 - um and so on the right hand side of the
03:03 - screen you can see
03:04 - that we have a jupiter notebook file
03:08 - um another tool that i really love for
03:10 - data analysis
03:11 - um and uh we are in this file
03:15 - um loading the pandas package um as
03:18 - marielle is highlighting
03:19 - and then reading in some data from a csv
03:22 - um typically when working with data
03:23 - frames we'll
03:24 - we'll maybe load in our data from a csv
03:27 - um
03:28 - we do a really quick analysis here where
03:30 - we're just looking at the data using
03:32 - the head function um seeing what's going
03:35 - on
03:36 - and it looks like we're working in this
03:38 - example with some data
03:40 - um from a store that is selling shoes
03:44 - and we're seeing that some of this data
03:45 - is a little bit messy
03:47 - um if we're looking at that shoe type
03:49 - column we're seeing that
03:50 - some values are lower case um
03:53 - some are fully upper case uh it's not
03:55 - consistent and with data
03:57 - something that we really like and strive
03:58 - for is consistency
04:00 - um and um you know in
04:03 - the rest of this notebook we can see
04:06 - that we are
04:07 - using pandas and some functions from
04:09 - pandas
04:10 - to do some data manipulations and to
04:13 - modify this data
04:14 - frame and right here we are taking a
04:16 - function lowercase
04:17 - that is going to lower case a text
04:20 - string for us
04:21 - and we're applying that function um to
04:24 - our shoe type column of our data frame
04:28 - and what that's doing for us is we look
04:30 - at this data frame that's been modified
04:32 - we can see that all of our shoe type
04:34 - values are now lower case
04:36 - so this is a quick example of what we
04:38 - can do
04:39 - with data frames and pandas um so don't
04:42 - worry if
04:43 - um that seemed like a lot really fast or
04:46 - if you're maybe
04:47 - not too familiar with pandas i will
04:49 - spend uh the next
04:50 - uh you know 45 50 minutes showing you
04:53 - how you can use pandas to do a
04:56 - modification just like this awesome
04:59 - thank you so much
05:01 - uh so in the meantime if you have
05:04 - questions about pandas
05:05 - uh we're gonna take break points that uh
05:09 - you know a few times throughout this
05:12 - lesson
05:13 - and um we'll be able to answer some of
05:15 - your questions that pop up in the chat
05:18 - all right so we're gonna move on to
05:20 - exercise two
05:22 - adding a column um
05:25 - so sometimes we want to add a column to
05:27 - an existing data frame we
05:29 - might uh might want to add new
05:30 - information or perform a calculation
05:33 - based on data that we already have
05:34 - so what can we do
05:38 - ian you want to walk us through this
05:40 - yeah um
05:41 - so in this example we have a hardware
05:44 - store called the handy woman
05:46 - um and uh there's a data frame here that
05:49 - represents inventory
05:51 - information um and so if you're a store
05:54 - and you want to keep track of all the
05:56 - items and the products that you have
05:58 - a data frame can be a really useful
06:00 - business tool
06:01 - for keeping track and organizing on what
06:04 - you have in stock um
06:06 - so if we take a look at this table we
06:07 - can see some information
06:10 - um so we have a product id column
06:13 - which seems to be a unique identifier
06:15 - for
06:16 - the different products that the store
06:18 - offers um there's also a product
06:20 - description
06:21 - which seems to be explaining what that
06:23 - product is
06:24 - um so we have a screw and a nail a
06:27 - hammer screwdriver
06:28 - all your hardware store essentials um
06:31 - and then we have
06:32 - two columns that give us some
06:34 - information
06:35 - um some numeric information about these
06:37 - products so we have cost to manufacture
06:40 - um and the price
06:43 - uh so um with this information
06:46 - um we are able to have an understanding
06:48 - of what's going on in our store
06:50 - um but it seems that we're missing some
06:53 - information
06:54 - um and in this case that is the actual
06:56 - quantity of each product
06:58 - um in the warehouse so how much of each
07:00 - of those individual products does the
07:01 - store have
07:03 - and so we're able to add a new column to
07:06 - our data frame
07:07 - with this information using the syntax
07:09 - that you see right here
07:12 - and so we're using the name of our data
07:14 - frame
07:15 - df and we are creating a new column
07:18 - which we are indicating within these
07:20 - brackets and
07:21 - um with the string quantity so that's
07:24 - the name we want to give to that new
07:25 - column
07:26 - and we're able to give values to this
07:28 - column by assigning a list of values
07:31 - uh to that column name
07:34 - if we look at that table right below we
07:37 - can see that we now have a new quantity
07:39 - column
07:39 - with these new values so something that
07:42 - is important to note here
07:44 - is that we had four rows in our data
07:46 - frame representing four
07:48 - different uh products um
07:51 - but um and and so when we wanted to go
07:53 - and add a new column we want to make
07:55 - sure that we're
07:56 - using the same um you're assigning a
08:00 - list of the same length
08:01 - otherwise we might have um some problems
08:03 - so if we only have three values to fill
08:05 - in here
08:05 - um when we try and assign that list of
08:08 - three values
08:09 - um we might run into some some
08:11 - difficulty
08:13 - uh yeah so um now that we kind of have a
08:17 - little bit of a basis
08:18 - of what to do we can go ahead and try
08:21 - and put this into action um i can't wait
08:27 - all right so let's check it out
08:30 - the data frame df contains information
08:33 - on products sold at a hardware store add
08:36 - a column to df called sold in
08:40 - bulk so i'm just going to copy that
08:43 - which indicates if the product is sold
08:45 - in bulk or individually
08:47 - the final table should look like this
08:51 - so we can see the sold in bulk part
08:54 - has yes yes no
08:57 - no so i i think we
09:01 - start by choosing
09:04 - our table name and
09:08 - selecting the column in here so
09:12 - i have to put this in a string right
09:14 - yeah always good to put that in the
09:16 - string there
09:17 - there is another way to access columns
09:20 - of a data frame which some of you
09:21 - watching might be familiar with
09:23 - um where you use a dot notation where
09:26 - you have first
09:26 - the data frame name dot and then the
09:29 - column name
09:30 - but when you have spaces in your
09:34 - column names um that syntax method
09:37 - won't work so um we will definitely like
09:40 - to access the
09:41 - uh data frame column as you've done
09:43 - right here
09:44 - excellent all right so we want to set
09:46 - this equal to
09:48 - we have yes yes no no
09:51 - all right so can i just type yes without
09:54 - just like that so we won't want to do
09:58 - that here we will
10:00 - sort of include strings around our
10:04 - um got it our code yeah um just because
10:07 - these are
10:08 - string variables that we are or the
10:11 - strings that we are
10:12 - um indicating here um if we just left it
10:16 - as
10:16 - yes that might be referring to a
10:17 - variable that we had declared called yes
10:20 - but we don't have one here yet this
10:22 - actually makes me think there's another
10:24 - data type we could have used um you know
10:27 - if the tests were set up differently
10:29 - this seems to be indicating
10:31 - boolean values of true and false in a
10:33 - way right
10:35 - definitely um that could be an
10:37 - alternative way of storing this data
10:39 - um and there could be like uh possible
10:42 - like
10:42 - benefits of storing data that way as
10:44 - well um so
10:46 - um yeah i feel like whenever there is
10:48 - kind of that binary question of
10:50 - is this yes or no or true or false um
10:53 - booleans can often be
10:54 - the way to go excellent all right so
10:57 - let's run this code
10:59 - and see how it does all right
11:02 - running and boom we got it
11:06 - and you can see over here we have sold
11:09 - in bulk
11:09 - has been added and we have the yes yes
11:13 - no no
11:14 - excellent awesome
11:18 - our store is already getting better at
11:20 - keeping track of
11:23 - all their information definitely
11:26 - right so we can also add a new column
11:30 - uh for all rows so we can we can add
11:35 - some value if if the value is the same
11:37 - in every single row
11:40 - it would be really tedious to build out
11:42 - a list
11:43 - where you're just constantly writing
11:45 - true true
11:46 - true true true true true ad nauseam you
11:50 - know it can go on for ages
11:52 - so if it's all the same value there's
11:54 - actually
11:55 - a trick so that's pretty exciting
11:59 - um yeah this is super cool and i kind of
12:02 - almost think of this
12:03 - as like if you're working in a google
12:05 - sheet or excel
12:06 - and you put a value in one of the cells
12:09 - and then you drag it
12:10 - down um to like fill in all the other
12:13 - cells if you've ever done that i feel
12:14 - like this is kind of like the coding
12:15 - version
12:16 - of that same approach
12:19 - but yeah what you can do is
12:22 - go ahead and access that uh column that
12:26 - you want to either create or
12:28 - update um using the notation we were
12:30 - talking about before
12:31 - so for this example right here um if we
12:33 - wanted to update
12:34 - a or create a new column called in stock
12:37 - that indicated whether we had that
12:38 - product in stock
12:40 - um we would access that using the data
12:42 - frame name
12:43 - and the column name and then we would
12:46 - just
12:46 - set it equal to the value that we want
12:48 - for every row
12:50 - in this case um we're assuming that
12:52 - right now we have every item in stock
12:54 - so we are gonna use a boolean like we
12:55 - were talking about um
12:57 - just before um and set all those values
12:59 - to true which we can see in that data
13:01 - frame
13:01 - below yeah and i see in the chat
13:05 - uh sammy said a boolean that's
13:07 - absolutely on point
13:08 - yep all right
13:11 - so ready for our instructions
13:16 - should we choose to accept them add a
13:18 - column to
13:19 - df called is taxed
13:22 - which indicates whether or not to
13:24 - collect sales tax on the product
13:26 - it should be yes for all rows now i just
13:29 - want to demonstrate that it's actually
13:30 - possible to do this
13:32 - in two different ways because
13:35 - we can either do
13:39 - this where you know we have one two
13:42 - three let me see actually we don't know
13:45 - what is taxed oh yes we do it's already
13:48 - over here
13:50 - it is one two three four uh
13:54 - products in there so we can say yes
14:00 - yes yes
14:04 - we can already see this is getting a
14:05 - little tedious
14:08 - now it should work
14:12 - but if we really want to do this
14:15 - in the easy way we can get rid of all
14:18 - that code
14:19 - and we can just say yes
14:25 - and it will also give us the same result
14:28 - same result same answer
14:31 - um so so yeah you can do it either way i
14:33 - i think this way
14:34 - ends up being um a little a little bit
14:37 - simpler save some more time
14:38 - um but some of the flexibility of pandas
14:41 - um is one of the things that i like
14:42 - about it too
14:44 - nice all right let's move on let's see
14:47 - what else we can do
14:48 - another way to add a column
14:51 - so much flexibility here i know pandas
14:55 - is sort of
14:55 - magical yeah um
14:59 - so this kind of way of adding a column
15:01 - it has a different use case but i think
15:02 - this is where
15:03 - it can get a little more creative with
15:06 - what you can do
15:07 - um and uh yeah just gives you more
15:10 - more possibilities um and so
15:14 - um kind of continuing on this idea of
15:17 - taxes
15:18 - um we can see here that
15:22 - we can take um the value of
15:25 - one column and perform some sort of
15:28 - operation on it
15:30 - to get the values of a new column
15:33 - and this idea is a pretty pretty
15:35 - powerful one um given
15:37 - that we often do find relationships
15:39 - between the different
15:40 - columns or variables of of our data
15:43 - frame or just like in any information
15:45 - that we're storing
15:46 - in a table um and so in this example
15:48 - here
15:49 - we're trying to create a new column that
15:51 - represents the sales tax
15:53 - on on an item um and so from beforehand
15:56 - we had
15:58 - a column price that indicated the actual
16:00 - price
16:01 - of the product itself um
16:05 - and what we can do is if we know what
16:07 - the sales tax is for our state
16:10 - um and in this example we're using a
16:12 - sales tax of 7.5 percent
16:15 - um we can take that 7.5 percent multiply
16:18 - it by our price column
16:20 - and then get a new column or a new um
16:24 - list of variable of values that
16:26 - represents
16:27 - um how much sales tax we are charging on
16:29 - each of those
16:31 - products um so if we take a look
16:34 - at the code right here we are saying
16:36 - let's create a new column
16:38 - uh sales tax and our data frame df and
16:41 - let's
16:41 - set it equal to the price times the
16:44 - sales tax
16:45 - and here when we access price we are
16:47 - using that dot notation
16:49 - to access that price variable
16:52 - or sorry the price column um and then
16:54 - we're representing 7.5 percent
16:56 - um in decimal format so we're just going
16:58 - to move the decimal over two places to
17:01 - get
17:01 - point zero seven five um and this will
17:04 - give us our sales sacks which we can see
17:05 - in the table below
17:12 - yeah so now we can go ahead and try
17:15 - and use that same concept to calculate
17:17 - another really helpful
17:18 - metric for a business to track
17:22 - which is revenue
17:25 - wanna go ahead and give it a shot mario
17:27 - let's do it
17:29 - all right so we're going to
17:34 - add a column to df
17:37 - called revenue now can i just do
17:40 - df.revenue
17:41 - like this um
17:44 - yeah that should that should work for us
17:47 - okay
17:48 - let's give it a shot and we're gonna set
17:50 - it equal to
17:51 - the difference between the price
17:54 - so df.price
17:57 - and the cost to manufacture now cost to
18:00 - manufacture
18:01 - has to be a string because
18:05 - we have to use bracket notation because
18:07 - uh
18:09 - it has spaces in it right yes okay
18:13 - those spaces we're gonna use that
18:14 - bracket notation um but we will be
18:17 - circling
18:17 - later on to another pandas method that
18:20 - will help us
18:21 - um make sure all of our uh column names
18:25 - are
18:26 - um written in a way that enables us to
18:28 - use that dot notation
18:29 - so great point so what i'm hoping to see
18:32 - here
18:33 - is another column to the right called
18:36 - revenue that is equal to
18:40 - this column minus this column each time
18:43 - so it should be
18:44 - 0.75 minus 0.5 0.25
18:48 - minus 0.1 uh 5.5 minus
18:52 - 3.0 and 3.0 minus
18:55 - 2.5 so we should see something like 0.25
19:00 - uh 0.15
19:03 - um 2.5 and
19:06 - 1.5 or sorry 0.5 here
19:10 - all right fantastic so let's try and run
19:13 - this code
19:14 - shot let's see what we get
19:20 - sure you added the column revenue so
19:23 - that didn't work
19:25 - so maybe maybe there is an issue with us
19:27 - um adding the revenue column in that way
19:29 - so let's try doing the other notation
19:33 - see i love experimenting like this i
19:36 - think it's really fun even when it
19:38 - doesn't work
19:39 - because you learn something from it
19:41 - always
19:42 - always good too to try something out
19:44 - give it a shot
19:45 - see if the code runs and go from there
19:47 - and there we go
19:48 - now we got it awesome we got the values
19:52 - i was talking about
19:53 - whoo so we got what we expected yes
19:56 - i'm fantastic here from from yeah
19:59 - i was going to say this might be a good
20:00 - stopping point to look at some of the
20:03 - questions in the chat yeah um and so
20:06 - eric is asking
20:08 - what if you wanted to do a count instead
20:10 - of using a boolean
20:11 - for a new column so counting by five or
20:14 - ten could we use
20:15 - plus equals um and so i think there's a
20:20 - few different questions
20:21 - kind of uh hidden in there um what we
20:25 - can do is we can use the plus equals
20:27 - for for setting the values of
20:30 - a column um so maybe we can give um a
20:33 - try for that mario like let's say
20:37 - say their um
20:40 - is um maybe costs are going up for
20:45 - for the company and they want to raise
20:46 - the price of all of their products
20:49 - um by a dollar okay right
20:53 - um so let's update that price column
20:57 - um and so yeah let's try that price like
21:00 - that format and do
21:01 - dear price and um
21:04 - do we want a plus equals right there
21:06 - yeah let's try let's try a plus
21:08 - equals and and do one here
21:12 - just one just one yeah just uh let's see
21:15 - what happens fine we can do a little bit
21:17 - of experimentation because i'm not
21:19 - i'm not exactly sure what will happen
21:21 - here
21:22 - oh and there we go yeah it works awesome
21:26 - there we go um we can use it before
21:29 - um incrementing that is a fantastic
21:32 - question by the way
21:34 - yeah um and so similarly um
21:37 - i would imagine that we can use the
21:38 - minus equals or the times equals
21:41 - um operators um so divided by equals
21:47 - yeah yeah um i don't know exponential
21:50 - equals but yeah that's a good question
21:53 - i'm not totally sure um
21:57 - ananya was asking can you please do live
21:58 - videos for c plus also so
22:01 - i personally would love to do that uh
22:04 - sunny and i built out the c
22:05 - plus course and it is um
22:09 - it's something we both care deeply about
22:12 - uh
22:12 - and i mean i can i can definitely push
22:15 - for it we'll see
22:16 - a lot of this has to do with uh learner
22:18 - demand
22:19 - so make yourselves heard demand c plus
22:21 - plus
22:24 - um and then we have another question
22:26 - from
22:27 - faith uh can i get the
22:30 - video for a beginner doing coding
22:36 - so do you mean just do you want to just
22:39 - see beginners
22:41 - learning to code what it what are you
22:43 - thinking faith
22:44 - there's a lot of videos out there of
22:47 - different folks
22:48 - that are either experienced programmers
22:51 - who want to
22:53 - showcase themselves learning a totally
22:55 - new language
22:56 - but then there are also people who like
22:59 - to
23:01 - live code even though they've never
23:03 - coded before
23:04 - and i don't think we have any of them
23:07 - up on codecademy's platform but i'm sure
23:10 - if you check out the codecademy forums
23:12 - there will definitely be people who do
23:14 - that
23:16 - oh thank you diego diego says love these
23:19 - videos keep them coming
23:21 - thank you for coming and watching us um
23:24 - yeah thank you for joining
23:26 - we're so excited to have you you helped
23:28 - make it happen so
23:29 - yes thank you so much a bit off topic
23:32 - but would you guys say
23:33 - finishing the data science path can help
23:35 - get a job as a data analyst at least
23:38 - i would definitely say so and uh i don't
23:41 - know if this is
23:42 - top secret but we are making some
23:44 - changes to the data science
23:45 - career path and i think that that will
23:50 - make it even uh easier
23:53 - at that point to get some sort of
23:55 - position
23:56 - i think that the more you learn uh and
23:59 - the more that you build out your
24:00 - portfolio
24:02 - the more that you're going to be able to
24:03 - showcase to
24:05 - someone a potential employer that you
24:07 - are
24:08 - at a level that um means that you can
24:11 - start out in that field
24:14 - um sami is asking how will you be able
24:17 - to increment the
24:19 - um price by five each time so
24:22 - row one would be five row two would be
24:24 - ten etc
24:26 - oh that's interesting that is an
24:29 - interesting question
24:30 - um and off the top of my head
24:34 - there is a kind of like a workaround
24:36 - that i would
24:37 - i would do um and so we actually are
24:39 - very set up for that workaround in this
24:41 - example
24:42 - um but are you thinking of lambda
24:45 - functions
24:47 - well no oh okay
24:50 - really cool and very helpful um
24:54 - that might be like a little bit out of
24:55 - scope for for today's lesson
24:57 - um but i would say the the kind of
25:01 - workaround of top of my head would be to
25:04 - have a column
25:05 - where the value in that column is almost
25:08 - like the row number in this case
25:10 - um where the first row would be have the
25:13 - value one and then
25:14 - maybe row five would have value five row
25:17 - timer value ten
25:18 - and then you currently network for
25:20 - product id and so in this case we have
25:22 - the product id like that
25:24 - um so if we wanted to um then go ahead
25:28 - and have maybe a new column where the
25:30 - first value is five
25:32 - for the first row the second value is
25:34 - ten we could take this product id column
25:36 - and multiply it by five um and we would
25:40 - get that
25:40 - uh progression of counting by fives so
25:43 - maybe
25:44 - we could do something like df uh
25:47 - new price equals
25:51 - df dot
25:55 - price times
25:59 - or not price right it would be
26:02 - oh right it is df.price times
26:07 - uh five times the product id is that
26:11 - right
26:12 - or no that's not quite right plus it
26:14 - would be plus
26:16 - so it depends what we're trying to
26:18 - calculate because i i i don't know if
26:19 - there's like a clear
26:20 - we have a clear idea of necessarily what
26:22 - we want to calculate but um
26:24 - i think if like the the question was if
26:26 - we wanted to
26:28 - have like just some column of values
26:30 - that
26:31 - goes up by fives how would we what would
26:34 - we do that how would we do that so
26:36 - um this should work in terms of bringing
26:39 - the it should be plus five for the first
26:42 - column
26:42 - plus ten for the second etc yeah yeah so
26:45 - this should increase our price
26:47 - five five for the first one ten for the
26:50 - second row
26:51 - 15 for the third row yeah 20 for the
26:53 - fourth row see that
26:55 - yeah um
26:58 - i love that so many cool things
27:02 - that you can do with pandas when it
27:03 - comes to manipulating data and
27:05 - today we are just highlighting kind of a
27:08 - few of the core
27:10 - pandas methods that allow us to modify
27:13 - data frames
27:14 - but for whatever specific use case you
27:17 - might have
27:18 - for changing data modifying it
27:21 - manipulating it there are like so many
27:24 - pandas methods out there that you can go
27:25 - and explore
27:26 - um and as with most things in coding
27:29 - going to the documentation is a really
27:31 - great way to
27:32 - yes learn about what is available to you
27:35 - and what is accessible to you
27:37 - um and so maybe you know you go through
27:40 - the codecademy lessons
27:42 - and uh you have a good foundation but
27:44 - there's something that you want to do
27:45 - that you just
27:46 - can't quite figure out with um with what
27:48 - you've learned
27:49 - the documentation will be helpful for um
27:52 - helping you achieve that um i'm actually
27:55 - going to pop this documentation right
27:57 - into the chat
27:58 - so folks can take a look if they're
28:00 - interested and if we just look
28:02 - over here on the left hand side we can
28:03 - see um
28:05 - all of these different um like
28:08 - methods of a data frame object so all
28:11 - the things that information we can get
28:12 - from it
28:12 - or things that we can do to a data frame
28:15 - object
28:16 - um and you can see that there is a time
28:18 - and we
28:19 - only begin to scrape the surface of
28:21 - these and in our codecademy lessons
28:24 - yep there is so much to learn
28:28 - always but also like something to always
28:31 - keep in mind
28:32 - is that there is not one data scientist
28:35 - who knows all of those functions methods
28:39 - on the top of their head
28:40 - everyone is always going back and
28:42 - learning more and referencing
28:44 - documentation
28:45 - um and so don't feel like you need to
28:48 - memorize all these things in order to
28:51 - um feel like you know pandas well enough
28:54 - um
28:55 - it's for me like i i sometimes maybe
28:58 - have a little bit of time away from it
28:59 - like i'll forget certain functions and
29:01 - i'll just go back to the documentation
29:03 - and figure out what it is that i need
29:05 - so yeah definitely yeah documentation is
29:08 - so helpful
29:09 - love it all right should we move on to
29:13 - the next exercise
29:19 - ready yeah let's do it
29:22 - all right performing column operations
29:27 - yeah um this this is a fun one um so
29:30 - before
29:31 - we were going ahead um
29:34 - and just adding new columns
29:38 - to to our data frame um and maybe
29:41 - taking a few different columns and
29:42 - performing um some calculations on them
29:46 - um to get a new column um but there's a
29:48 - little more that we can do when we're
29:50 - maybe um adding a new column or wanting
29:52 - to change a column
29:54 - um and so let's take a look at some
29:56 - customer data
29:57 - that we might encounter um so
30:00 - in this case we can see we have a data
30:02 - frame with a name
30:04 - column and an email column and in the
30:06 - name column we're seeing some names
30:08 - that are all capitalized and other names
30:12 - that have some capitalization on the uh
30:15 - first
30:16 - letter of the first name and last name
30:18 - and then we have another name
30:19 - that has no capitalization at all it's
30:21 - all lowercase
30:22 - um and once again this consistency or
30:24 - lack of consistency is something that we
30:26 - try and avoid when we're we have data um
30:29 - we want everything to
30:30 - be formatted in a similar way since that
30:32 - helps um
30:33 - typically with analyses i'm um just
30:36 - having everything
30:37 - organized so if we wanted to go ahead
30:42 - and standardize the formatting of our
30:44 - names here
30:46 - we can use a handy
30:49 - method in pandas called the apply
30:52 - function
30:54 - and what the apply function does is
30:57 - it allows us to apply
31:00 - a function that we pass into it so we're
31:03 - going to actually pass
31:04 - in another function as an argument to
31:06 - this function
31:08 - and it will take that function and apply
31:10 - it
31:11 - to each value in the data frame column
31:15 - that we tell that we give to it um
31:18 - and so um this is really
31:22 - neat because it's gonna basically go
31:25 - and it's almost like almost like doing a
31:27 - loop essentially
31:28 - where it's looping through all the
31:31 - values in a column
31:33 - and then applying that function to those
31:35 - values to get a new value
31:37 - so let's take a look at this example
31:38 - right here um so we want to go ahead
31:40 - and uppercase um all of the names
31:44 - in our name column we just wanted
31:46 - everything to be upper case
31:47 - um so we define a really quick function
31:50 - right here called uppercase that
31:52 - will take in some string value and it
31:55 - just returns that string
31:57 - in all uppercase and we're using the
31:59 - string method dot upper here
32:01 - um to get that value so we could go
32:03 - ahead and call this uppercase function
32:05 - on individual strings um if i pass in a
32:07 - lowercase
32:08 - marielle string as an argument to this
32:11 - function
32:12 - i'd get back marielle and all caps
32:15 - um so what we're going to do now though
32:18 - is let's say we have our whole list of
32:20 - names we want to go and apply that
32:22 - uppercase function to all of those
32:25 - values
32:26 - in the dataframe column so what we're
32:28 - going to do is
32:29 - say here that we want to update the name
32:33 - column
32:34 - um and we're going to access that using
32:36 - that same notation as before
32:38 - we're going to say let's update this
32:40 - column to be equal to
32:42 - an expression and in this expression
32:44 - we're taking our old data frame
32:46 - column um same way of accessing it
32:50 - and we're going to um use the apply
32:52 - function
32:54 - um dot apply right after the the column
32:56 - name
32:57 - um and we're going to apply that
32:59 - uppercase function
33:01 - um so what we get when we do this
33:05 - um application of uppercase is we get
33:06 - this below dataframe
33:08 - where if you remember from up top john
33:11 - smith was
33:12 - all uppercase so it stays all uppercase
33:15 - um
33:15 - jane doe where with the capital j and
33:17 - the capital d
33:18 - we uppercase all letters of jane doe now
33:21 - and joe schmo goes from all lower case
33:24 - to
33:25 - all uppercase um so we essentially just
33:28 - loops through that list of names
33:29 - applying that uppercase function
33:31 - to each value in that column
33:35 - all right you think we are ready to go
33:37 - ahead and give this a shot mario
33:39 - yeah i think i accidentally already left
33:43 - my
33:44 - code in here but we're gonna start over
33:47 - happens just doing some doing some
33:50 - practice
33:52 - all right so let's do it uh apply the
33:54 - function lowercase to all names in
33:57 - column name in df all right
34:00 - so first let's do this
34:04 - df
34:08 - all names in column names so we're going
34:10 - to have name
34:11 - or we could have done df.name probably
34:15 - either should work all right um
34:18 - and we're doing dot apply
34:23 - and we're using this function that was
34:26 - built out for us
34:28 - lowercase i'm going to write lowercase
34:33 - and we're assigning these new names to a
34:37 - new column
34:38 - of df called lowercase names so i'm
34:40 - going to just grab
34:41 - that we're going to say
34:44 - df and
34:50 - lowercase name equals dfname dot apply
34:54 - lowercase and i think this should work
34:57 - so what we should see here we have
34:59 - lowercase name
35:02 - uh i guess this already ran
35:06 - from my previous code but this should
35:08 - stay the same now okay
35:10 - yeah here i'm going to comment this out
35:12 - so we can see the difference
35:15 - so we had name and we had email address
35:19 - and now we're going to add in this new
35:22 - column
35:23 - called lowercase name and we can see it
35:26 - in action over here
35:28 - awesome um and the thing i really like
35:31 - about apply is that we can throw
35:34 - any function in there
35:37 - um but not not necessarily any function
35:39 - but we can do
35:40 - more complicated um manipulations or
35:43 - changes
35:44 - in that function um that we can then
35:46 - apply to each value
35:47 - in um whatever column it is that we want
35:50 - to apply those to
35:51 - so there's a lot of flexibility here um
35:54 - and
35:54 - it can be a really really helpful
35:57 - and so i'm seeing a question in the chat
36:02 - from juan mega um asking
36:05 - um is pandas the latest version of
36:08 - python or
36:09 - um maybe is it like a separate package
36:11 - for manipulating data
36:13 - um and so i think that's a great great
36:14 - question um and so
36:16 - the pandas package is separate from from
36:19 - the actual
36:20 - python language that we're using um so
36:23 - python
36:24 - has some tools for working with with
36:27 - data
36:27 - um but it is missing certain abilities
36:31 - that the pandas package is able to
36:33 - provide for us
36:35 - um so it is a separate distinct package
36:37 - that you if you're working on your own
36:39 - computer
36:39 - you'll need to download download pandas
36:43 - um using a python package installer
36:46 - um so that you're able to utilize all
36:49 - the helpful
36:49 - methods and functions that we have here
36:53 - uh
36:54 - but yeah and so we are using um python
36:58 - three
36:58 - also just to throw that out there which
37:00 - is the newer version
37:02 - of python um there are some distinct
37:04 - versions of python three within that
37:06 - um but typically most of the python 3
37:08 - versions
37:09 - have most of the same core functionality
37:12 - awesome great question
37:18 - all right so let's move on to renaming
37:21 - columns and i'm going to make sure
37:24 - that i have
37:28 - everything set up yeah
37:34 - um so um
37:39 - previously in this lesson um we've
37:42 - seen some different scenarios where we
37:44 - were accessing columns of a data frame
37:46 - using
37:47 - one of two different types of notation
37:49 - so sometimes
37:50 - we were uh using the bracket notation
37:54 - where we um use the data frame name and
37:58 - we access the column
38:01 - by using a string hit the column that we
38:04 - want to
38:04 - take or access
38:07 - but then we've also seen this other
38:09 - notation where we use a dot
38:11 - and we say data frame name dot column
38:14 - name
38:16 - and it can be helpful to use that dot
38:19 - notation
38:20 - um for for a few reasons one if you're
38:23 - working
38:24 - in an ide or an interactive development
38:26 - environment
38:27 - you will often get um tab completion
38:30 - ability
38:30 - with the dot notation so if you're
38:33 - starting to type out a variable name you
38:34 - can click the tab
38:35 - and it'll know that oh i know that this
38:38 - variable
38:38 - name is a column of your data frame so
38:41 - it'll auto complete it for you
38:43 - um but it can also just be easier to
38:45 - type you don't have to type any
38:47 - quotes or anything like that um
38:51 - and also it is there's uh you can have
38:55 - variables or column names in a more
38:56 - standardized format which is typically
38:59 - um with individual words separated by
39:02 - underscores
39:03 - and keeping to those standards can often
39:05 - be helpful when you're sharing your code
39:07 - with others
39:08 - just because they'll be more used to the
39:10 - formatting of your code
39:12 - um so but often when we load data from a
39:16 - csv
39:17 - or if we scrape data from the internet
39:19 - or wherever we've gotten it from
39:21 - um it often doesn't come in that format
39:23 - that we desire
39:24 - which can be you know
39:27 - underscore name something like that um
39:30 - but not to worry we are able to go ahead
39:33 - and change uh
39:34 - column names um and in this exercise
39:37 - we'll
39:37 - walk through one method of doing this
39:40 - which is
39:41 - using the columns property of a data
39:44 - frame
39:46 - um and so if you just wanted to go ahead
39:48 - and actually see
39:50 - the columns of your data frame listed
39:53 - you can use this
39:55 - columns property so maybe we can just go
39:57 - ahead and like
39:58 - um here like in the uh workspace we can
40:02 - print out um df.columns and we'll see
40:07 - oh you know we might not actually be
40:08 - able to see it right here
40:10 - oh right an output terminal um
40:13 - but if you were working locally on your
40:16 - own computer
40:17 - um and uh you were
40:20 - um you're running a python file on the
40:22 - terminal
40:24 - and you ran the statement print
40:26 - df.columns and you had a data frame
40:28 - what you would get is i believe it's a
40:30 - list of
40:31 - all the columns of your data frame so in
40:34 - this example
40:35 - we have in the narrative we have a data
40:37 - frame like we're creating
40:39 - and it has um two columns
40:42 - name and age and when we do df.columns
40:46 - we should get a list that would just
40:48 - have those two strings
40:49 - name and age um but we can also use this
40:53 - property
40:54 - to set the columns of a data frame so
40:57 - if we wanted to update the name column
40:59 - to first name to be a bit more
41:01 - descriptive
41:02 - of the type of data that we're working
41:03 - with and if we wanted to update the age
41:06 - column to be
41:07 - capitalized um we could go and use that
41:10 - df.columns
41:11 - property and set it equal to a list
41:15 - um that is the same length of the number
41:17 - of columns that we have
41:18 - and in order update the column names to
41:22 - their new values
41:23 - so since name is the first column of our
41:25 - data frame and age is the second
41:27 - we would have the new value for the name
41:30 - column be that first value in the list
41:32 - so first name and then we will have the
41:34 - new value for the
41:35 - lowercase h column as the second value
41:38 - since that was the second
41:40 - uh column in the data frame so that
41:42 - second value is going to be
41:44 - age and we can see we get a new
41:47 - or we we get a data frame here that has
41:50 - um that updated
41:54 - names for the column so first name is
41:56 - our new first column and
41:57 - age is the second new column and it
42:00 - updates that
42:00 - data frame in place so we're we're not
42:03 - getting a new data frame we're just
42:04 - updating our existing data frame
42:07 - uh so let's go ahead and maybe give this
42:10 - a shot
42:12 - excellent all right let's try this out
42:16 - so the data frame df contains data about
42:19 - movies from imdb um
42:23 - we want to present this data to some
42:24 - film producers right now
42:26 - our column names are in lowercase and
42:28 - not very descriptive
42:29 - let's modify df using the dot columns
42:32 - attribute to make the following changes
42:34 - to the columns so
42:38 - we are going to do and let's take a look
42:40 - at the example code again
42:42 - we may do df
42:46 - equals pd
42:49 - dot data frame
42:53 - and we're opening did you sorry i
42:57 - wasn't sure if you had a comment here
42:58 - ian yeah so
43:00 - so we don't need to create a new data
43:02 - frame here i mean we could amazing
43:04 - [Laughter]
43:06 - like um you know we could uh i mean
43:10 - maybe maybe with some different movies
43:12 - we can just jump right into
43:13 - df.com of avatar jurassic world
43:17 - um but since we have a data frame loaded
43:19 - here from a csv
43:20 - um we can just go ahead and work with
43:22 - that directly rather than creating a new
43:24 - one
43:24 - um so yeah we could just go ahead and
43:25 - call that df.columns property
43:27 - um and we'll set that equal to a list of
43:30 - our new
43:31 - uh column values um and we can reference
43:34 - this table that we have here on the
43:35 - bottom
43:36 - for what we want those new new columns
43:39 - to be
43:40 - so we can see we have the left-hand side
43:42 - we have the old values
43:43 - of those column names and then on the
43:45 - right-hand side we have the new values
43:47 - got it so we're not naming the columns
43:49 - old and new then
43:51 - uh no no no yeah so okay there's a
43:53 - little like inception going on where we
43:55 - have a
43:56 - a date frame or table
43:59 - of data frame column names
44:02 - of all the new variety um but
44:06 - but yeah so what we're doing here is um
44:08 - if we look on the right hand side of the
44:09 - screen we can see our existing data
44:11 - frame as is
44:12 - um and we can see that we have id and
44:16 - lowercase
44:17 - um we have name of the movie and
44:19 - lowercase we have
44:20 - genre year um and imdb rating and these
44:24 - are all lowercase
44:25 - um and we want to go ahead and change
44:27 - these to uppercase
44:29 - um in this example so what we can do is
44:32 - just pass in a list
44:34 - of these new uppercase titles
44:38 - what happens if i put these in a
44:40 - different order will
44:42 - pandas know to put them in the right
44:44 - order we can try putting them in
44:46 - different order and let's see what
44:47 - happens
44:48 - um okay so if i want to do reading
44:52 - and then uh category
44:56 - and then gear release
45:01 - i wonder what's gonna happen go ahead
45:03 - and run this
45:04 - okay let's go ahead
45:09 - so now we go look at our columns okay
45:13 - i id looks good name looked good but now
45:16 - we have a rating column and all of our
45:18 - values are
45:19 - action which doesn't seem to be matching
45:22 - up as we might expect
45:23 - um and so one of the tricky things with
45:25 - updating columns this way
45:27 - um is we need to keep the order um the
45:30 - same
45:30 - so the order of our columns needs to be
45:32 - the same as the order of our original
45:34 - columns
45:35 - all right so i'm going to go ahead and
45:37 - change this around
45:40 - especially because i see we have
45:41 - categories and we have years
45:43 - and i don't want any category 20 movies
45:46 - i want to make skittles
45:48 - i want i just want so
45:54 - all right looks like we got this and we
45:57 - can see now
45:58 - your released is correct category
46:01 - says action which is actually a category
46:03 - of movie and
46:04 - reading is actual greetings
46:07 - and if anyone's a fan of any of these
46:08 - movies let us know in the chat
46:10 - so we can catch up on any ones that we
46:13 - might have missed
46:16 - all right so you can also rename
46:18 - individual columns by using the rename
46:20 - method
46:21 - so not just columns you can actually do
46:23 - dot rename
46:25 - so you pass a dictionary like the one
46:27 - below to the columns
46:29 - keyword argument interesting
46:34 - and this method really helps
46:38 - kind of solve the problem that um you
46:41 - brought up in the last exercise mario
46:43 - where
46:44 - um when you're making these updates and
46:46 - changes
46:47 - you don't always like when you're just
46:50 - having the whole list of things you
46:51 - don't
46:52 - maybe not gonna put in the right order
46:53 - um so what we are able to do here
46:56 - with the rename um method is be explicit
47:00 - about what is the old column name um in
47:03 - our original table
47:04 - and what do we want to update that
47:05 - specific column to in our new table
47:07 - so we're not leaving things up to order
47:09 - which can be unclear
47:11 - um we're saying write out this is the
47:13 - old column this is the new column
47:15 - update it to that value so we can
47:17 - actually do
47:18 - the columns out of order this time then
47:21 - yeah so we can we won't run into
47:23 - issues we're just since we have those um
47:26 - key value pairs from our python
47:29 - dictionary
47:30 - um we can go however we please
47:33 - all right so can you tell me a little
47:35 - bit about what's going on with
47:36 - this line right here um so
47:39 - yeah we kind of snuck in this in place
47:42 - into
47:43 - uh this this exercise um and so
47:47 - um basically um let's just quickly first
47:49 - take a look at the rename function
47:51 - so what we're doing here is we're saying
47:54 - let's call the rename function on our
47:56 - data frame df
47:57 - and we're going to pass in as an
47:58 - argument um this keyword argument
48:01 - columns
48:02 - and columns will take a dictionary where
48:05 - the key value pairs are those old
48:07 - values or sorry the old names as the key
48:10 - and the new names as the values
48:11 - so we're going to update name to first
48:13 - name and age to age
48:15 - and we can switch that order um if we
48:17 - wanted to update you know age first and
48:19 - then name
48:19 - that's fine um but we do see this in
48:22 - place equals true here
48:24 - um and what this is outside of the
48:27 - dictionary
48:28 - yes outside the dictionary second
48:31 - argument
48:31 - to the rename function or the second
48:34 - keyword argument to the rename function
48:36 - and what this says is it lets pandas
48:40 - know that we want to update our table
48:43 - in place and when we are working with a
48:46 - lot of these
48:46 - pandas methods um what actually happens
48:50 - is we create a new data frame
48:53 - um elsewhere in memory so we have our
48:56 - original data frame
48:58 - and we create basically a new data frame
49:00 - and what you've been seeing in a lot of
49:02 - our
49:03 - exercises is that we've been reassigning
49:06 - um this new data frame to like point
49:09 - back to our old one so we're kind of re
49:11 - writing over it um but we don't
49:14 - necessarily have to
49:16 - use that reassignment um if we use this
49:18 - in place equals true
49:20 - keyword argument it's gonna go ahead and
49:22 - just create that
49:24 - um updated data frame in the same place
49:27 - so we don't need to go reassign it back
49:29 - to our df so you'll see here what do we
49:31 - call
49:32 - rename we're not reassigning that back
49:35 - to our
49:36 - our df got it so this
49:39 - um doing all of this or really this line
49:44 - um takes the place of us saying df
49:47 - equals
49:48 - df dot rename this exactly
49:51 - okay and so we can we can go do it both
49:55 - ways when we jump
49:56 - into um the the workspace um i think
50:00 - it's helpful to see
50:01 - you see both in action um
50:04 - so oh this is pretty cool too it says
50:06 - here that you can rename
50:08 - only one column also you don't have to
50:11 - rename all of the columns at the same
50:13 - time
50:14 - yeah that's another huge advantage over
50:16 - um using the columns property to update
50:18 - the
50:19 - the column names is that there's just
50:21 - one that you need to fix for whatever
50:23 - reason
50:23 - you're able to just focus in on that one
50:26 - and not spend your time
50:27 - writing out all the the other column
50:30 - names that you want to say the same
50:31 - got it so we want to do
50:35 - rename and we want to use the in place
50:38 - uh keyword argument here
50:41 - mm-hmm yeah okay so um we're gonna
50:44 - scroll down
50:45 - to the checkpoint we can confirm what
50:47 - we're asking for here
50:48 - so in this case we just want to go and
50:51 - work with the same data frame from
50:52 - before but we want to update the name
50:54 - column to movie title and that's it um
50:58 - so yeah copy that same code from up
51:00 - above or we can write it out
51:03 - either way so we're going to say
51:06 - df dot rename
51:13 - and then i think we start with
51:17 - is it column columns okay
51:22 - [Music]
51:28 - and then we're going to now pass in a
51:29 - few keys and values to our dictionary
51:32 - where the key
51:32 - is the old name and the value is the new
51:35 - name
51:36 - and actually we're just going to do one
51:37 - layer here
51:40 - we're renaming name
51:43 - and we're turning it into
51:47 - a movie title
51:50 - right yep and that still has to be
51:55 - a string right or could i just say movie
51:58 - title is not a string
51:59 - so if we ha actually i think it needs to
52:02 - be string it needs to be a string yeah
52:04 - if we had the title as a variable
52:06 - somewhere
52:07 - and that variable had a value of some
52:09 - string you could put movie title as like
52:11 - a variable there but we want to be
52:13 - explicit but that's a string
52:15 - okay and then now we want to add in
52:19 - in place equals
52:22 - true so that we're not just creating a
52:26 - copy that exists somewhere in the
52:27 - universe without actually
52:29 - being a df that gets renamed right
52:34 - okay so let's run this code
52:37 - let's see how it does all right we got
52:40 - movie title up here
52:41 - that looks good you see that new movie
52:43 - title and so i think
52:45 - one thing we can do quickly before we
52:46 - move on to the next exercise is if you
52:48 - take
52:48 - out that in place equals true and rerun
52:51 - the code
52:55 - um because i will often do this i will
52:58 - write df.rename and i'm like wait why
53:01 - isn't this working why isn't my data
53:02 - frame updating
53:03 - yeah it didn't rename it
53:06 - we're creating this new data frame but
53:08 - we're not assigning it to any location
53:11 - um and so so we're not updating our
53:14 - original data frame
53:15 - so the two options we have are is we
53:17 - could add that in place equals true
53:19 - um keyword argument or we could just say
53:23 - let df equal this new data frame
53:27 - and now when we run ah yeah right hour
53:30 - no it's working again all right so it
53:32 - looks like we have about two minutes
53:34 - left
53:35 - um i think the next exercise is just
53:37 - review anyway
53:39 - um so we can use the remaining couple
53:41 - minutes if folks have
53:42 - questions throw them in the chat we're
53:45 - super excited to talk about pandas with
53:47 - you
53:48 - um also for those of you in the pro
53:50 - community uh
53:52 - ian unfortunately can't make it on
53:54 - thursday but i will be there along with
53:57 - uh g1 who has just joined the curriculum
54:00 - team who has a lot of experience with
54:01 - data visualization so you can throw your
54:03 - database
54:04 - questions at us
54:08 - yeah um so hey if you have any remaining
54:12 - questions about pandas definitely feel
54:14 - free to throw them in the chat right now
54:15 - in our remaining time
54:17 - um but just one more time i wanted to
54:18 - say that this is a great foundation
54:20 - that you now have for working and
54:22 - manipulating data
54:24 - um and i would recommend just trying to
54:27 - go find
54:28 - some data that is interesting to you um
54:31 - whether it's related to your job or to a
54:33 - hobby that you have
54:34 - or a business that you run or whatever
54:38 - it is finding something that
54:39 - is interesting and meaningful to you and
54:41 - going ahead and
54:43 - i'm just trying to load some data from
54:46 - from that interest
54:46 - into a data frame and seeing what you
54:48 - can do with it um
54:50 - all right sweet we have some we have
54:52 - about one minute left and it looks like
54:53 - we have a
54:54 - few questions in the chat so sammy's
54:57 - asking so does the
54:58 - rename function return a new data frame
55:01 - unless you write
55:02 - in place equals true and from my
55:04 - understanding now
55:06 - is it's yes it does
55:10 - that's correct creates a copy um
55:13 - so franco says i'm at 40 of the data
55:15 - science career path at the moment super
55:17 - engaged and really enjoying the
55:18 - curriculum you did a great job
55:20 - we are always always happy to hear that
55:23 - thank you
55:23 - so much franco that we do this for you
55:27 - uh how fast can i pick up pandas
55:29 - starting from scratch with basic levels
55:32 - of python
55:35 - so i think there are a few like
55:38 - fundamentals of python that you should
55:40 - know before moving into pandas but it's
55:42 - not it's not too much
55:43 - um you know if you're comfortable
55:45 - working with strings
55:47 - and um you're comfortable working with
55:50 - functions
55:52 - and conditionals
55:55 - and boolean types i think that's a
55:58 - pretty good foundation for going ahead
56:00 - and working or learning pandas
56:04 - um so i would work on getting those kind
56:06 - of core foundations
56:07 - uh done first um but then the world of
56:10 - pandas i think is pretty open and
56:11 - accessible to you
56:16 - so i just popped a rename
56:20 - the documentation on rename into the
56:22 - chat uh
56:24 - and i know that we're about a minute
56:25 - over so we're going to hop off but thank
56:28 - you so much
56:28 - everyone and look forward to chatting
56:32 - with at least some of you on thursday
56:34 - the rest of you uh some folks from our
56:37 - team are going to be back next week
56:39 - thanks so much wow thank you so much
56:41 - everyone have a great rest of your day

Cleaned transcript:

hi everyone if you're there with us apologies we started a little bit related to technical difficulties but we're on now hey uh welcome to codecademy live where we're streaming visualize data with python our skill path um and we're currently on to panda data frames which is really exciting i'm marielle i'm a senior curriculum developer at codecademy i'm out quarantining in massachusetts right now although i'm normally based in new york and here with me is my colleague hi everyone my name is ian i am a data scientist here at codecademy i'm super excited to be working with you all today to discuss uh diving into pandas a little bit more a super helpful and great tool for data analysis for all of you python uh users so thanks for bearing with us on a little bit of a late start um and we're excited to uh get into things here today with you all absolutely so i'm about to share my screen and if you want to and along i'm about to throw a link into the chat so as marielle is walking through the lesson on your screen uh you can continue along at the same time excellent exactly so i'm about to share my screen ian i think i'm getting your audio a little bit of your audio feedback uh but hopefully everyone can see my screen now um and we're gonna walk through this lesson together without further ado yes um and so everyone um i'm having a little bit of issues of pacing in this uh i'm gonna i'm gonna throw it in so no worries boom mario cool um anywho without further ado here's the lesson want to start us off yes um so if you've been following us along with us um so far you've had an introduction to pandas which is a really helpful package for working with data in python and essentially lets us model or organize our data into data frames uh which are table like structures similar to maybe a google sheet or an excel file that you might have worked with before and today we are going to talk a little bit about how to modify these data frames so when we have information stored in a table with columns representing maybe different variables of data we've collected and rows that maybe represent um individual um kind of accounts or um or observations um how can we make changes to the data that we have here um and so on the right hand side of the screen you can see that we have a jupiter notebook file um another tool that i really love for data analysis um and uh we are in this file um loading the pandas package um as marielle is highlighting and then reading in some data from a csv um typically when working with data frames we'll we'll maybe load in our data from a csv um we do a really quick analysis here where we're just looking at the data using the head function um seeing what's going on and it looks like we're working in this example with some data um from a store that is selling shoes and we're seeing that some of this data is a little bit messy um if we're looking at that shoe type column we're seeing that some values are lower case um some are fully upper case uh it's not consistent and with data something that we really like and strive for is consistency um and um you know in the rest of this notebook we can see that we are using pandas and some functions from pandas to do some data manipulations and to modify this data frame and right here we are taking a function lowercase that is going to lower case a text string for us and we're applying that function um to our shoe type column of our data frame and what that's doing for us is we look at this data frame that's been modified we can see that all of our shoe type values are now lower case so this is a quick example of what we can do with data frames and pandas um so don't worry if um that seemed like a lot really fast or if you're maybe not too familiar with pandas i will spend uh the next uh you know 45 50 minutes showing you how you can use pandas to do a modification just like this awesome thank you so much uh so in the meantime if you have questions about pandas uh we're gonna take break points that uh you know a few times throughout this lesson and um we'll be able to answer some of your questions that pop up in the chat all right so we're gonna move on to exercise two adding a column um so sometimes we want to add a column to an existing data frame we might uh might want to add new information or perform a calculation based on data that we already have so what can we do ian you want to walk us through this yeah um so in this example we have a hardware store called the handy woman um and uh there's a data frame here that represents inventory information um and so if you're a store and you want to keep track of all the items and the products that you have a data frame can be a really useful business tool for keeping track and organizing on what you have in stock um so if we take a look at this table we can see some information um so we have a product id column which seems to be a unique identifier for the different products that the store offers um there's also a product description which seems to be explaining what that product is um so we have a screw and a nail a hammer screwdriver all your hardware store essentials um and then we have two columns that give us some information um some numeric information about these products so we have cost to manufacture um and the price uh so um with this information um we are able to have an understanding of what's going on in our store um but it seems that we're missing some information um and in this case that is the actual quantity of each product um in the warehouse so how much of each of those individual products does the store have and so we're able to add a new column to our data frame with this information using the syntax that you see right here and so we're using the name of our data frame df and we are creating a new column which we are indicating within these brackets and um with the string quantity so that's the name we want to give to that new column and we're able to give values to this column by assigning a list of values uh to that column name if we look at that table right below we can see that we now have a new quantity column with these new values so something that is important to note here is that we had four rows in our data frame representing four different uh products um but um and and so when we wanted to go and add a new column we want to make sure that we're using the same um you're assigning a list of the same length otherwise we might have um some problems so if we only have three values to fill in here um when we try and assign that list of three values um we might run into some some difficulty uh yeah so um now that we kind of have a little bit of a basis of what to do we can go ahead and try and put this into action um i can't wait all right so let's check it out the data frame df contains information on products sold at a hardware store add a column to df called sold in bulk so i'm just going to copy that which indicates if the product is sold in bulk or individually the final table should look like this so we can see the sold in bulk part has yes yes no no so i i think we start by choosing our table name and selecting the column in here so i have to put this in a string right yeah always good to put that in the string there there is another way to access columns of a data frame which some of you watching might be familiar with um where you use a dot notation where you have first the data frame name dot and then the column name but when you have spaces in your column names um that syntax method won't work so um we will definitely like to access the uh data frame column as you've done right here excellent all right so we want to set this equal to we have yes yes no no all right so can i just type yes without just like that so we won't want to do that here we will sort of include strings around our um got it our code yeah um just because these are string variables that we are or the strings that we are um indicating here um if we just left it as yes that might be referring to a variable that we had declared called yes but we don't have one here yet this actually makes me think there's another data type we could have used um you know if the tests were set up differently this seems to be indicating boolean values of true and false in a way right definitely um that could be an alternative way of storing this data um and there could be like uh possible like benefits of storing data that way as well um so um yeah i feel like whenever there is kind of that binary question of is this yes or no or true or false um booleans can often be the way to go excellent all right so let's run this code and see how it does all right running and boom we got it and you can see over here we have sold in bulk has been added and we have the yes yes no no excellent awesome our store is already getting better at keeping track of all their information definitely right so we can also add a new column uh for all rows so we can we can add some value if if the value is the same in every single row it would be really tedious to build out a list where you're just constantly writing true true true true true true true ad nauseam you know it can go on for ages so if it's all the same value there's actually a trick so that's pretty exciting um yeah this is super cool and i kind of almost think of this as like if you're working in a google sheet or excel and you put a value in one of the cells and then you drag it down um to like fill in all the other cells if you've ever done that i feel like this is kind of like the coding version of that same approach but yeah what you can do is go ahead and access that uh column that you want to either create or update um using the notation we were talking about before so for this example right here um if we wanted to update a or create a new column called in stock that indicated whether we had that product in stock um we would access that using the data frame name and the column name and then we would just set it equal to the value that we want for every row in this case um we're assuming that right now we have every item in stock so we are gonna use a boolean like we were talking about um just before um and set all those values to true which we can see in that data frame below yeah and i see in the chat uh sammy said a boolean that's absolutely on point yep all right so ready for our instructions should we choose to accept them add a column to df called is taxed which indicates whether or not to collect sales tax on the product it should be yes for all rows now i just want to demonstrate that it's actually possible to do this in two different ways because we can either do this where you know we have one two three let me see actually we don't know what is taxed oh yes we do it's already over here it is one two three four uh products in there so we can say yes yes yes we can already see this is getting a little tedious now it should work but if we really want to do this in the easy way we can get rid of all that code and we can just say yes and it will also give us the same result same result same answer um so so yeah you can do it either way i i think this way ends up being um a little a little bit simpler save some more time um but some of the flexibility of pandas um is one of the things that i like about it too nice all right let's move on let's see what else we can do another way to add a column so much flexibility here i know pandas is sort of magical yeah um so this kind of way of adding a column it has a different use case but i think this is where it can get a little more creative with what you can do um and uh yeah just gives you more more possibilities um and so um kind of continuing on this idea of taxes um we can see here that we can take um the value of one column and perform some sort of operation on it to get the values of a new column and this idea is a pretty pretty powerful one um given that we often do find relationships between the different columns or variables of of our data frame or just like in any information that we're storing in a table um and so in this example here we're trying to create a new column that represents the sales tax on on an item um and so from beforehand we had a column price that indicated the actual price of the product itself um and what we can do is if we know what the sales tax is for our state um and in this example we're using a sales tax of 7.5 percent um we can take that 7.5 percent multiply it by our price column and then get a new column or a new um list of variable of values that represents um how much sales tax we are charging on each of those products um so if we take a look at the code right here we are saying let's create a new column uh sales tax and our data frame df and let's set it equal to the price times the sales tax and here when we access price we are using that dot notation to access that price variable or sorry the price column um and then we're representing 7.5 percent um in decimal format so we're just going to move the decimal over two places to get point zero seven five um and this will give us our sales sacks which we can see in the table below yeah so now we can go ahead and try and use that same concept to calculate another really helpful metric for a business to track which is revenue wanna go ahead and give it a shot mario let's do it all right so we're going to add a column to df called revenue now can i just do df.revenue like this um yeah that should that should work for us okay let's give it a shot and we're gonna set it equal to the difference between the price so df.price and the cost to manufacture now cost to manufacture has to be a string because we have to use bracket notation because uh it has spaces in it right yes okay those spaces we're gonna use that bracket notation um but we will be circling later on to another pandas method that will help us um make sure all of our uh column names are um written in a way that enables us to use that dot notation so great point so what i'm hoping to see here is another column to the right called revenue that is equal to this column minus this column each time so it should be 0.75 minus 0.5 0.25 minus 0.1 uh 5.5 minus 3.0 and 3.0 minus 2.5 so we should see something like 0.25 uh 0.15 um 2.5 and 1.5 or sorry 0.5 here all right fantastic so let's try and run this code shot let's see what we get sure you added the column revenue so that didn't work so maybe maybe there is an issue with us um adding the revenue column in that way so let's try doing the other notation see i love experimenting like this i think it's really fun even when it doesn't work because you learn something from it always always good too to try something out give it a shot see if the code runs and go from there and there we go now we got it awesome we got the values i was talking about whoo so we got what we expected yes i'm fantastic here from from yeah i was going to say this might be a good stopping point to look at some of the questions in the chat yeah um and so eric is asking what if you wanted to do a count instead of using a boolean for a new column so counting by five or ten could we use plus equals um and so i think there's a few different questions kind of uh hidden in there um what we can do is we can use the plus equals for for setting the values of a column um so maybe we can give um a try for that mario like let's say say their um is um maybe costs are going up for for the company and they want to raise the price of all of their products um by a dollar okay right um so let's update that price column um and so yeah let's try that price like that format and do dear price and um do we want a plus equals right there yeah let's try let's try a plus equals and and do one here just one just one yeah just uh let's see what happens fine we can do a little bit of experimentation because i'm not i'm not exactly sure what will happen here oh and there we go yeah it works awesome there we go um we can use it before um incrementing that is a fantastic question by the way yeah um and so similarly um i would imagine that we can use the minus equals or the times equals um operators um so divided by equals yeah yeah um i don't know exponential equals but yeah that's a good question i'm not totally sure um ananya was asking can you please do live videos for c plus also so i personally would love to do that uh sunny and i built out the c plus course and it is um it's something we both care deeply about uh and i mean i can i can definitely push for it we'll see a lot of this has to do with uh learner demand so make yourselves heard demand c plus plus um and then we have another question from faith uh can i get the video for a beginner doing coding so do you mean just do you want to just see beginners learning to code what it what are you thinking faith there's a lot of videos out there of different folks that are either experienced programmers who want to showcase themselves learning a totally new language but then there are also people who like to live code even though they've never coded before and i don't think we have any of them up on codecademy's platform but i'm sure if you check out the codecademy forums there will definitely be people who do that oh thank you diego diego says love these videos keep them coming thank you for coming and watching us um yeah thank you for joining we're so excited to have you you helped make it happen so yes thank you so much a bit off topic but would you guys say finishing the data science path can help get a job as a data analyst at least i would definitely say so and uh i don't know if this is top secret but we are making some changes to the data science career path and i think that that will make it even uh easier at that point to get some sort of position i think that the more you learn uh and the more that you build out your portfolio the more that you're going to be able to showcase to someone a potential employer that you are at a level that um means that you can start out in that field um sami is asking how will you be able to increment the um price by five each time so row one would be five row two would be ten etc oh that's interesting that is an interesting question um and off the top of my head there is a kind of like a workaround that i would i would do um and so we actually are very set up for that workaround in this example um but are you thinking of lambda functions well no oh okay really cool and very helpful um that might be like a little bit out of scope for for today's lesson um but i would say the the kind of workaround of top of my head would be to have a column where the value in that column is almost like the row number in this case um where the first row would be have the value one and then maybe row five would have value five row timer value ten and then you currently network for product id and so in this case we have the product id like that um so if we wanted to um then go ahead and have maybe a new column where the first value is five for the first row the second value is ten we could take this product id column and multiply it by five um and we would get that uh progression of counting by fives so maybe we could do something like df uh new price equals df dot price times or not price right it would be oh right it is df.price times uh five times the product id is that right or no that's not quite right plus it would be plus so it depends what we're trying to calculate because i i i don't know if there's like a clear we have a clear idea of necessarily what we want to calculate but um i think if like the the question was if we wanted to have like just some column of values that goes up by fives how would we what would we do that how would we do that so um this should work in terms of bringing the it should be plus five for the first column plus ten for the second etc yeah yeah so this should increase our price five five for the first one ten for the second row 15 for the third row yeah 20 for the fourth row see that yeah um i love that so many cool things that you can do with pandas when it comes to manipulating data and today we are just highlighting kind of a few of the core pandas methods that allow us to modify data frames but for whatever specific use case you might have for changing data modifying it manipulating it there are like so many pandas methods out there that you can go and explore um and as with most things in coding going to the documentation is a really great way to yes learn about what is available to you and what is accessible to you um and so maybe you know you go through the codecademy lessons and uh you have a good foundation but there's something that you want to do that you just can't quite figure out with um with what you've learned the documentation will be helpful for um helping you achieve that um i'm actually going to pop this documentation right into the chat so folks can take a look if they're interested and if we just look over here on the left hand side we can see um all of these different um like methods of a data frame object so all the things that information we can get from it or things that we can do to a data frame object um and you can see that there is a time and we only begin to scrape the surface of these and in our codecademy lessons yep there is so much to learn always but also like something to always keep in mind is that there is not one data scientist who knows all of those functions methods on the top of their head everyone is always going back and learning more and referencing documentation um and so don't feel like you need to memorize all these things in order to um feel like you know pandas well enough um it's for me like i i sometimes maybe have a little bit of time away from it like i'll forget certain functions and i'll just go back to the documentation and figure out what it is that i need so yeah definitely yeah documentation is so helpful love it all right should we move on to the next exercise ready yeah let's do it all right performing column operations yeah um this this is a fun one um so before we were going ahead um and just adding new columns to to our data frame um and maybe taking a few different columns and performing um some calculations on them um to get a new column um but there's a little more that we can do when we're maybe um adding a new column or wanting to change a column um and so let's take a look at some customer data that we might encounter um so in this case we can see we have a data frame with a name column and an email column and in the name column we're seeing some names that are all capitalized and other names that have some capitalization on the uh first letter of the first name and last name and then we have another name that has no capitalization at all it's all lowercase um and once again this consistency or lack of consistency is something that we try and avoid when we're we have data um we want everything to be formatted in a similar way since that helps um typically with analyses i'm um just having everything organized so if we wanted to go ahead and standardize the formatting of our names here we can use a handy method in pandas called the apply function and what the apply function does is it allows us to apply a function that we pass into it so we're going to actually pass in another function as an argument to this function and it will take that function and apply it to each value in the data frame column that we tell that we give to it um and so um this is really neat because it's gonna basically go and it's almost like almost like doing a loop essentially where it's looping through all the values in a column and then applying that function to those values to get a new value so let's take a look at this example right here um so we want to go ahead and uppercase um all of the names in our name column we just wanted everything to be upper case um so we define a really quick function right here called uppercase that will take in some string value and it just returns that string in all uppercase and we're using the string method dot upper here um to get that value so we could go ahead and call this uppercase function on individual strings um if i pass in a lowercase marielle string as an argument to this function i'd get back marielle and all caps um so what we're going to do now though is let's say we have our whole list of names we want to go and apply that uppercase function to all of those values in the dataframe column so what we're going to do is say here that we want to update the name column um and we're going to access that using that same notation as before we're going to say let's update this column to be equal to an expression and in this expression we're taking our old data frame column um same way of accessing it and we're going to um use the apply function um dot apply right after the the column name um and we're going to apply that uppercase function um so what we get when we do this um application of uppercase is we get this below dataframe where if you remember from up top john smith was all uppercase so it stays all uppercase um jane doe where with the capital j and the capital d we uppercase all letters of jane doe now and joe schmo goes from all lower case to all uppercase um so we essentially just loops through that list of names applying that uppercase function to each value in that column all right you think we are ready to go ahead and give this a shot mario yeah i think i accidentally already left my code in here but we're gonna start over happens just doing some doing some practice all right so let's do it uh apply the function lowercase to all names in column name in df all right so first let's do this df all names in column names so we're going to have name or we could have done df.name probably either should work all right um and we're doing dot apply and we're using this function that was built out for us lowercase i'm going to write lowercase and we're assigning these new names to a new column of df called lowercase names so i'm going to just grab that we're going to say df and lowercase name equals dfname dot apply lowercase and i think this should work so what we should see here we have lowercase name uh i guess this already ran from my previous code but this should stay the same now okay yeah here i'm going to comment this out so we can see the difference so we had name and we had email address and now we're going to add in this new column called lowercase name and we can see it in action over here awesome um and the thing i really like about apply is that we can throw any function in there um but not not necessarily any function but we can do more complicated um manipulations or changes in that function um that we can then apply to each value in um whatever column it is that we want to apply those to so there's a lot of flexibility here um and it can be a really really helpful and so i'm seeing a question in the chat from juan mega um asking um is pandas the latest version of python or um maybe is it like a separate package for manipulating data um and so i think that's a great great question um and so the pandas package is separate from from the actual python language that we're using um so python has some tools for working with with data um but it is missing certain abilities that the pandas package is able to provide for us um so it is a separate distinct package that you if you're working on your own computer you'll need to download download pandas um using a python package installer um so that you're able to utilize all the helpful methods and functions that we have here uh but yeah and so we are using um python three also just to throw that out there which is the newer version of python um there are some distinct versions of python three within that um but typically most of the python 3 versions have most of the same core functionality awesome great question all right so let's move on to renaming columns and i'm going to make sure that i have everything set up yeah um so um previously in this lesson um we've seen some different scenarios where we were accessing columns of a data frame using one of two different types of notation so sometimes we were uh using the bracket notation where we um use the data frame name and we access the column by using a string hit the column that we want to take or access but then we've also seen this other notation where we use a dot and we say data frame name dot column name and it can be helpful to use that dot notation um for for a few reasons one if you're working in an ide or an interactive development environment you will often get um tab completion ability with the dot notation so if you're starting to type out a variable name you can click the tab and it'll know that oh i know that this variable name is a column of your data frame so it'll auto complete it for you um but it can also just be easier to type you don't have to type any quotes or anything like that um and also it is there's uh you can have variables or column names in a more standardized format which is typically um with individual words separated by underscores and keeping to those standards can often be helpful when you're sharing your code with others just because they'll be more used to the formatting of your code um so but often when we load data from a csv or if we scrape data from the internet or wherever we've gotten it from um it often doesn't come in that format that we desire which can be you know underscore name something like that um but not to worry we are able to go ahead and change uh column names um and in this exercise we'll walk through one method of doing this which is using the columns property of a data frame um and so if you just wanted to go ahead and actually see the columns of your data frame listed you can use this columns property so maybe we can just go ahead and like um here like in the uh workspace we can print out um df.columns and we'll see oh you know we might not actually be able to see it right here oh right an output terminal um but if you were working locally on your own computer um and uh you were um you're running a python file on the terminal and you ran the statement print df.columns and you had a data frame what you would get is i believe it's a list of all the columns of your data frame so in this example we have in the narrative we have a data frame like we're creating and it has um two columns name and age and when we do df.columns we should get a list that would just have those two strings name and age um but we can also use this property to set the columns of a data frame so if we wanted to update the name column to first name to be a bit more descriptive of the type of data that we're working with and if we wanted to update the age column to be capitalized um we could go and use that df.columns property and set it equal to a list um that is the same length of the number of columns that we have and in order update the column names to their new values so since name is the first column of our data frame and age is the second we would have the new value for the name column be that first value in the list so first name and then we will have the new value for the lowercase h column as the second value since that was the second uh column in the data frame so that second value is going to be age and we can see we get a new or we we get a data frame here that has um that updated names for the column so first name is our new first column and age is the second new column and it updates that data frame in place so we're we're not getting a new data frame we're just updating our existing data frame uh so let's go ahead and maybe give this a shot excellent all right let's try this out so the data frame df contains data about movies from imdb um we want to present this data to some film producers right now our column names are in lowercase and not very descriptive let's modify df using the dot columns attribute to make the following changes to the columns so we are going to do and let's take a look at the example code again we may do df equals pd dot data frame and we're opening did you sorry i wasn't sure if you had a comment here ian yeah so so we don't need to create a new data frame here i mean we could amazing [Laughter] like um you know we could uh i mean maybe maybe with some different movies we can just jump right into df.com of avatar jurassic world um but since we have a data frame loaded here from a csv um we can just go ahead and work with that directly rather than creating a new one um so yeah we could just go ahead and call that df.columns property um and we'll set that equal to a list of our new uh column values um and we can reference this table that we have here on the bottom for what we want those new new columns to be so we can see we have the lefthand side we have the old values of those column names and then on the righthand side we have the new values got it so we're not naming the columns old and new then uh no no no yeah so okay there's a little like inception going on where we have a a date frame or table of data frame column names of all the new variety um but but yeah so what we're doing here is um if we look on the right hand side of the screen we can see our existing data frame as is um and we can see that we have id and lowercase um we have name of the movie and lowercase we have genre year um and imdb rating and these are all lowercase um and we want to go ahead and change these to uppercase um in this example so what we can do is just pass in a list of these new uppercase titles what happens if i put these in a different order will pandas know to put them in the right order we can try putting them in different order and let's see what happens um okay so if i want to do reading and then uh category and then gear release i wonder what's gonna happen go ahead and run this okay let's go ahead so now we go look at our columns okay i id looks good name looked good but now we have a rating column and all of our values are action which doesn't seem to be matching up as we might expect um and so one of the tricky things with updating columns this way um is we need to keep the order um the same so the order of our columns needs to be the same as the order of our original columns all right so i'm going to go ahead and change this around especially because i see we have categories and we have years and i don't want any category 20 movies i want to make skittles i want i just want so all right looks like we got this and we can see now your released is correct category says action which is actually a category of movie and reading is actual greetings and if anyone's a fan of any of these movies let us know in the chat so we can catch up on any ones that we might have missed all right so you can also rename individual columns by using the rename method so not just columns you can actually do dot rename so you pass a dictionary like the one below to the columns keyword argument interesting and this method really helps kind of solve the problem that um you brought up in the last exercise mario where um when you're making these updates and changes you don't always like when you're just having the whole list of things you don't maybe not gonna put in the right order um so what we are able to do here with the rename um method is be explicit about what is the old column name um in our original table and what do we want to update that specific column to in our new table so we're not leaving things up to order which can be unclear um we're saying write out this is the old column this is the new column update it to that value so we can actually do the columns out of order this time then yeah so we can we won't run into issues we're just since we have those um key value pairs from our python dictionary um we can go however we please all right so can you tell me a little bit about what's going on with this line right here um so yeah we kind of snuck in this in place into uh this this exercise um and so um basically um let's just quickly first take a look at the rename function so what we're doing here is we're saying let's call the rename function on our data frame df and we're going to pass in as an argument um this keyword argument columns and columns will take a dictionary where the key value pairs are those old values or sorry the old names as the key and the new names as the values so we're going to update name to first name and age to age and we can switch that order um if we wanted to update you know age first and then name that's fine um but we do see this in place equals true here um and what this is outside of the dictionary yes outside the dictionary second argument to the rename function or the second keyword argument to the rename function and what this says is it lets pandas know that we want to update our table in place and when we are working with a lot of these pandas methods um what actually happens is we create a new data frame um elsewhere in memory so we have our original data frame and we create basically a new data frame and what you've been seeing in a lot of our exercises is that we've been reassigning um this new data frame to like point back to our old one so we're kind of re writing over it um but we don't necessarily have to use that reassignment um if we use this in place equals true keyword argument it's gonna go ahead and just create that um updated data frame in the same place so we don't need to go reassign it back to our df so you'll see here what do we call rename we're not reassigning that back to our our df got it so this um doing all of this or really this line um takes the place of us saying df equals df dot rename this exactly okay and so we can we can go do it both ways when we jump into um the the workspace um i think it's helpful to see you see both in action um so oh this is pretty cool too it says here that you can rename only one column also you don't have to rename all of the columns at the same time yeah that's another huge advantage over um using the columns property to update the the column names is that there's just one that you need to fix for whatever reason you're able to just focus in on that one and not spend your time writing out all the the other column names that you want to say the same got it so we want to do rename and we want to use the in place uh keyword argument here mmhmm yeah okay so um we're gonna scroll down to the checkpoint we can confirm what we're asking for here so in this case we just want to go and work with the same data frame from before but we want to update the name column to movie title and that's it um so yeah copy that same code from up above or we can write it out either way so we're going to say df dot rename and then i think we start with is it column columns okay and then we're going to now pass in a few keys and values to our dictionary where the key is the old name and the value is the new name and actually we're just going to do one layer here we're renaming name and we're turning it into a movie title right yep and that still has to be a string right or could i just say movie title is not a string so if we ha actually i think it needs to be string it needs to be a string yeah if we had the title as a variable somewhere and that variable had a value of some string you could put movie title as like a variable there but we want to be explicit but that's a string okay and then now we want to add in in place equals true so that we're not just creating a copy that exists somewhere in the universe without actually being a df that gets renamed right okay so let's run this code let's see how it does all right we got movie title up here that looks good you see that new movie title and so i think one thing we can do quickly before we move on to the next exercise is if you take out that in place equals true and rerun the code um because i will often do this i will write df.rename and i'm like wait why isn't this working why isn't my data frame updating yeah it didn't rename it we're creating this new data frame but we're not assigning it to any location um and so so we're not updating our original data frame so the two options we have are is we could add that in place equals true um keyword argument or we could just say let df equal this new data frame and now when we run ah yeah right hour no it's working again all right so it looks like we have about two minutes left um i think the next exercise is just review anyway um so we can use the remaining couple minutes if folks have questions throw them in the chat we're super excited to talk about pandas with you um also for those of you in the pro community uh ian unfortunately can't make it on thursday but i will be there along with uh g1 who has just joined the curriculum team who has a lot of experience with data visualization so you can throw your database questions at us yeah um so hey if you have any remaining questions about pandas definitely feel free to throw them in the chat right now in our remaining time um but just one more time i wanted to say that this is a great foundation that you now have for working and manipulating data um and i would recommend just trying to go find some data that is interesting to you um whether it's related to your job or to a hobby that you have or a business that you run or whatever it is finding something that is interesting and meaningful to you and going ahead and i'm just trying to load some data from from that interest into a data frame and seeing what you can do with it um all right sweet we have some we have about one minute left and it looks like we have a few questions in the chat so sammy's asking so does the rename function return a new data frame unless you write in place equals true and from my understanding now is it's yes it does that's correct creates a copy um so franco says i'm at 40 of the data science career path at the moment super engaged and really enjoying the curriculum you did a great job we are always always happy to hear that thank you so much franco that we do this for you uh how fast can i pick up pandas starting from scratch with basic levels of python so i think there are a few like fundamentals of python that you should know before moving into pandas but it's not it's not too much um you know if you're comfortable working with strings and um you're comfortable working with functions and conditionals and boolean types i think that's a pretty good foundation for going ahead and working or learning pandas um so i would work on getting those kind of core foundations uh done first um but then the world of pandas i think is pretty open and accessible to you so i just popped a rename the documentation on rename into the chat uh and i know that we're about a minute over so we're going to hop off but thank you so much everyone and look forward to chatting with at least some of you on thursday the rest of you uh some folks from our team are going to be back next week thanks so much wow thank you so much everyone have a great rest of your day
