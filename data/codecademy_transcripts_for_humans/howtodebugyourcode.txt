With timestamps:

00:00 - hey my name is Mike I'm a developer from
00:01 - Philadelphia and in this video I want to
00:03 - talk to you about debugging your code
00:05 - now as you go along and your programming
00:07 - inevitably you're gonna get to a point
00:09 - where you run into little errors or
00:11 - little inconsistencies or what we like
00:13 - to call bugs in your program and so how
00:16 - do you go about addressing these how do
00:18 - you go about fixing bugs in the best way
00:20 - possible well in this video I'm gonna
00:22 - give you a bunch of tips and tricks for
00:24 - fixing bugs and I'll give you some
00:26 - different strategies you can use to
00:27 - address different types of bugs so it's
00:30 - not further ado let's get into the video
00:31 - and we'll get started learning how to
00:33 - debug your program and so today we'll
00:35 - cover print statements air-handling
00:37 - commenting things out debugging tools
00:39 - tests and asking other developers and
00:42 - all of these are great techniques and
00:43 - strategies as we attempt to debug our
00:46 - code so let's talk about how to debug
00:48 - your code and we'll start with print
00:51 - statements so the simplest way to tell
00:53 - what's going on in a program is that the
00:54 - computer tell you itself for many bugs a
00:57 - print statement is an easy way to see
00:59 - what's going on in the program what data
01:01 - is being used or whether or not a
01:02 - function is being called correctly print
01:04 - statements are also available in just
01:06 - about every programming language and
01:08 - generally their output is able to be
01:09 - formatted in useful ways this means that
01:12 - they can be used as a reliable debugging
01:14 - tool in just about any environment they
01:16 - don't rely on any one specific debugging
01:18 - interface platform or IDE many
01:21 - developers will use print statements as
01:23 - an initial method for debugging a piece
01:25 - of code and in many cases just seeing
01:27 - the value of a variable or the result of
01:29 - a function call printed out can point to
01:31 - the problem nowadays many programming
01:33 - environments will increase the power of
01:35 - print statements by giving developers
01:36 - useful interfaces for searching through
01:39 - complex data structures like objects or
01:41 - lists Google Chrome for example is known
01:43 - for its great debugging interface when
01:46 - you print out an object in JavaScript it
01:48 - will display the object in a nest able
01:51 - and searchable structure the next way to
01:53 - debug your code would be error handling
01:55 - many programming languages provide a way
01:58 - of catching common errors and programs
02:00 - so a program throws an error instead of
02:02 - crashing it will be caught and then some
02:04 - code can be executed which responds to
02:06 - the air now these try-catch blocks as
02:08 - they're often called
02:09 - are an invaluable resource for finding a
02:11 - bug if your program keeps crashing at a
02:13 - particular
02:13 - but try surrounding that code with
02:15 - try-catch blocks and investigating the
02:17 - error object that gets returned now
02:20 - try-catch blocks are especially useful
02:21 - for catching errors that don't occur
02:23 - very often you can let the program run
02:25 - and only be notified when it actually
02:26 - breaks these structures are also useful
02:29 - for logging bugs and problems in a
02:30 - production environment many applications
02:33 - will add the error log caught by a
02:34 - try-catch to a database along with the
02:36 - relevant state of the application and
02:38 - then these logs can be looked over later
02:40 - to identify common bugs the third way of
02:43 - debugging your program would be
02:45 - commenting things out and this is one of
02:47 - my favorite debugging methods which is
02:49 - commenting out code that you think might
02:51 - be a problem so if you know a bug is in
02:53 - a block of code you're working with but
02:54 - you're not sure which line or which part
02:56 - it can be helpful to comment out the
02:58 - entire block and then start adding lines
03:01 - of code back in one by one until the bug
03:03 - resurfaces now I use this technique a
03:05 - lot when working on websites if there's
03:07 - a part of the website code which seems
03:09 - to be breaking I'll comment it all out
03:11 - and then slowly add pieces back in until
03:13 - I find the culprit and this is most
03:15 - useful when you've identified the
03:16 - general area where a bug lives but
03:18 - you're not sure exactly what's causing
03:20 - it now the fourth way of debugging your
03:22 - code is by using debugging tools and
03:24 - it's by far the most sophisticated
03:26 - method that we're going to talk about
03:27 - now a lot of these debugging tools are
03:30 - provided by your integrated development
03:32 - environment your text editor or a web
03:34 - browser like Chrome or Firefox now
03:36 - debugging tools like this allow
03:38 - developers to add breaks to places in
03:40 - their code they can then run their code
03:42 - in a debugging mode and the program will
03:44 - stop when it hits the break developers
03:47 - can then step through their programs
03:48 - line by line examining the values of all
03:51 - variables the inputs to functions and
03:52 - the code that's getting executed
03:54 - different IDs and environments have
03:56 - different debugging tools but generally
03:58 - they all do pretty much the same thing
03:59 - when something like a print statement
04:01 - doesn't do the trick it's often
04:02 - necessary to dive into the code and
04:04 - really take advantage of tools like this
04:06 - and debugging in this way is super
04:08 - effective but can have a bit of a
04:10 - learning curve associated to it so it's
04:11 - useful to practice whenever possible the
04:14 - next way to catch bugs and to debug your
04:16 - programs is through tests this is a more
04:18 - passive way of spotting and fixing bugs
04:20 - in the code base oftentimes developers
04:23 - will unknowingly create new bugs in a
04:25 - program as
04:26 - I defect of making changes or adding new
04:28 - features in many cases pre-existing
04:30 - tests can pick up on these new bugs and
04:32 - indicate that something is wrong now in
04:34 - my opinion a good suite of tests is the
04:36 - absolute best way to debug a program on
04:38 - a large scale because it helps catch
04:41 - bugs as they're created and the last
04:44 - technique for debugging your programs is
04:46 - simply just to ask other developers when
04:48 - all else fails it's good to ask another
04:50 - developer for help and often times when
04:52 - trying to debug something for a while
04:53 - you can get too close to the problem or
04:55 - you can go down a wrong road and getting
04:57 - a second pair of eyes on the project can
04:59 - bring a fresh new perspective and help
05:01 - resolve tricky bugs quicker it's
05:03 - important to realize that especially on
05:04 - a professional development team it's
05:06 - better to bring someone else in to help
05:08 - fix something than to waste hours of
05:10 - time by looking for the answer yourself
05:12 - two heads are often better than one and
05:14 - the last thing you want to do is waste
05:16 - time on a silly bug so there you go
05:19 - those are some common ways of debugging
05:21 - your code whenever you have a tricky bug
05:23 - that's messing things up you can try
05:25 - print statements you can try error
05:27 - handling commenting things out look into
05:29 - your debugging tools run some tests or
05:32 - ask other developers for help hey thanks
05:35 - for watching I hope you enjoyed the
05:36 - video feel free to subscribe to this
05:38 - channel leave a like or drop a comment
05:40 - below and if you're ready to take your
05:42 - skills to the next level you can start
05:43 - learning at code academy today

Cleaned transcript:

hey my name is Mike I'm a developer from Philadelphia and in this video I want to talk to you about debugging your code now as you go along and your programming inevitably you're gonna get to a point where you run into little errors or little inconsistencies or what we like to call bugs in your program and so how do you go about addressing these how do you go about fixing bugs in the best way possible well in this video I'm gonna give you a bunch of tips and tricks for fixing bugs and I'll give you some different strategies you can use to address different types of bugs so it's not further ado let's get into the video and we'll get started learning how to debug your program and so today we'll cover print statements airhandling commenting things out debugging tools tests and asking other developers and all of these are great techniques and strategies as we attempt to debug our code so let's talk about how to debug your code and we'll start with print statements so the simplest way to tell what's going on in a program is that the computer tell you itself for many bugs a print statement is an easy way to see what's going on in the program what data is being used or whether or not a function is being called correctly print statements are also available in just about every programming language and generally their output is able to be formatted in useful ways this means that they can be used as a reliable debugging tool in just about any environment they don't rely on any one specific debugging interface platform or IDE many developers will use print statements as an initial method for debugging a piece of code and in many cases just seeing the value of a variable or the result of a function call printed out can point to the problem nowadays many programming environments will increase the power of print statements by giving developers useful interfaces for searching through complex data structures like objects or lists Google Chrome for example is known for its great debugging interface when you print out an object in JavaScript it will display the object in a nest able and searchable structure the next way to debug your code would be error handling many programming languages provide a way of catching common errors and programs so a program throws an error instead of crashing it will be caught and then some code can be executed which responds to the air now these trycatch blocks as they're often called are an invaluable resource for finding a bug if your program keeps crashing at a particular but try surrounding that code with trycatch blocks and investigating the error object that gets returned now trycatch blocks are especially useful for catching errors that don't occur very often you can let the program run and only be notified when it actually breaks these structures are also useful for logging bugs and problems in a production environment many applications will add the error log caught by a trycatch to a database along with the relevant state of the application and then these logs can be looked over later to identify common bugs the third way of debugging your program would be commenting things out and this is one of my favorite debugging methods which is commenting out code that you think might be a problem so if you know a bug is in a block of code you're working with but you're not sure which line or which part it can be helpful to comment out the entire block and then start adding lines of code back in one by one until the bug resurfaces now I use this technique a lot when working on websites if there's a part of the website code which seems to be breaking I'll comment it all out and then slowly add pieces back in until I find the culprit and this is most useful when you've identified the general area where a bug lives but you're not sure exactly what's causing it now the fourth way of debugging your code is by using debugging tools and it's by far the most sophisticated method that we're going to talk about now a lot of these debugging tools are provided by your integrated development environment your text editor or a web browser like Chrome or Firefox now debugging tools like this allow developers to add breaks to places in their code they can then run their code in a debugging mode and the program will stop when it hits the break developers can then step through their programs line by line examining the values of all variables the inputs to functions and the code that's getting executed different IDs and environments have different debugging tools but generally they all do pretty much the same thing when something like a print statement doesn't do the trick it's often necessary to dive into the code and really take advantage of tools like this and debugging in this way is super effective but can have a bit of a learning curve associated to it so it's useful to practice whenever possible the next way to catch bugs and to debug your programs is through tests this is a more passive way of spotting and fixing bugs in the code base oftentimes developers will unknowingly create new bugs in a program as I defect of making changes or adding new features in many cases preexisting tests can pick up on these new bugs and indicate that something is wrong now in my opinion a good suite of tests is the absolute best way to debug a program on a large scale because it helps catch bugs as they're created and the last technique for debugging your programs is simply just to ask other developers when all else fails it's good to ask another developer for help and often times when trying to debug something for a while you can get too close to the problem or you can go down a wrong road and getting a second pair of eyes on the project can bring a fresh new perspective and help resolve tricky bugs quicker it's important to realize that especially on a professional development team it's better to bring someone else in to help fix something than to waste hours of time by looking for the answer yourself two heads are often better than one and the last thing you want to do is waste time on a silly bug so there you go those are some common ways of debugging your code whenever you have a tricky bug that's messing things up you can try print statements you can try error handling commenting things out look into your debugging tools run some tests or ask other developers for help hey thanks for watching I hope you enjoyed the video feel free to subscribe to this channel leave a like or drop a comment below and if you're ready to take your skills to the next level you can start learning at code academy today
