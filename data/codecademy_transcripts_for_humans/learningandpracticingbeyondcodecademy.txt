With timestamps:

00:00 - hi my name is Stephanie I'm a software
00:02 - developer based in Baltimore at this
00:04 - point you've been learning with coke
00:05 - atom II for a while and so you're ready
00:07 - to test out your new coding charms but
00:09 - you don't quite know where to start does
00:12 - the situation sound familiar
00:13 - well don't worry we've got you covered
00:15 - in this video I'll go over some general
00:18 - things that I've used to get that extra
00:20 - bit of practice in and some places you
00:22 - can hit up where you can expand your
00:23 - learning as we go along I'll also
00:26 - include links in the video and the
00:27 - description below on all the resources
00:29 - that I'm mentioning when you finish a
00:32 - code Academy courses you set out to
00:33 - learn you may feel like you have this
00:35 - arsenal of knowledge ready to go at any
00:38 - given moment and that's great and I'm
00:39 - glad you're able to pick down whatever
00:41 - code Academy was throwing down but
00:44 - there's a bit of a hitch with that coke
00:46 - atom e is a great starting point for
00:47 - learning different programming languages
00:49 - and introducing concepts but there's
00:52 - only so much you can cover in a course a
00:54 - good chunk of mastering the language is
00:56 - learning through experience for example
00:58 - I was writing some code in this
01:00 - programming language called go and I
01:03 - have been working with it for about half
01:04 - a year and at that point I could
01:06 - confidently say that I knew how to
01:08 - concatenate or combine two strings
01:11 - together but then this go experts went
01:14 - by and told me that there's a more
01:15 - efficient way to concatenate strings
01:17 - together and it blew my mind to the
01:20 - point where now every time I concatenate
01:22 - strings in the new language I have to
01:24 - double check to make sure I'm doing it
01:26 - in the most efficient way when I first
01:28 - came across this I was thinking how the
01:30 - heck is anyone supposed to figure this
01:32 - out and this is really where having a
01:35 - solid foundation comes in you don't have
01:37 - to go so far as to know all of the
01:39 - languages optimization algorithms but
01:41 - just having a better understanding of
01:43 - how the language works can help you
01:45 - build that foundation to figure out new
01:46 - questions and you can get this through
01:48 - experience there have been so many times
01:51 - in interviews in some code I'm trying to
01:53 - write in a meeting where I've been
01:55 - caught off guard not knowing the answer
01:56 - immediately but when I gather together
01:59 - the things I do know I can piece it
02:01 - together and build a solution just like
02:03 - any speaking language fluency comes with
02:05 - practice and repetition as you complete
02:08 - more challenges it'll become muscle
02:10 - memory for you one thing I would also
02:12 - recommend
02:13 - is to try looking things up online or in
02:15 - the documentation for the language
02:17 - you're working in the code Kadim e
02:19 - forums and Stack Overflow have a lot of
02:21 - great questions and answers from people
02:23 - of all levels and you'd be surprised by
02:25 - why Docs you can pick up when you go
02:27 - straight to the documentation like when
02:29 - I was looking at the documentation for
02:31 - some of the JavaScript functions for
02:33 - arrays I found that the find function
02:36 - isn't compatible on Internet Explorer
02:39 - but when I scroll back through the API
02:41 - and looked at each of the available
02:43 - functions I found that there is a sum
02:46 - function not just some function well yes
02:49 - some function but it's some function
02:51 - called sum that is compatible with ie
02:53 - and could be used as an alternative to
02:56 - find
02:57 - I also recommend that you sharpen your
03:00 - coding chops with daily challenges these
03:02 - are good ways to keep your
03:03 - problem-solving skills in check and are
03:05 - also helpful long term since they can
03:07 - help you prepare for job interviews some
03:09 - good ones are code Wars project Euler
03:12 - and code CAD amigo
03:14 - Coke ad amigo is great in particular
03:16 - because you have a place to review
03:18 - concepts and work through some practice
03:20 - problems on the go what's really neat is
03:23 - that there are also quick stories you
03:24 - can read that can give you more insight
03:26 - into other people's coding journeys plus
03:29 - the design is definitely on Team Q I
03:31 - mean look at the ninja I dare you to
03:34 - tell me it's not cute you may also want
03:37 - to go back through the course and jot
03:38 - down some notes you can do by hand or
03:41 - type it up somewhere just so you have
03:43 - some way to reinforce and reabsorb the
03:45 - material you'll be surprised by the
03:47 - number of things you missed on the first
03:49 - pass I've also talked to a lot of people
03:51 - that don't quite feel ready to
03:53 - transition from code Academy courses to
03:56 - developing on their own local machine so
03:58 - I suggest starting with coke atom ease
04:00 - command-line course there you can learn
04:03 - how to use the terminal which is what
04:04 - you'll need in order to run your
04:06 - programs what's neat is that every
04:08 - computer comes with one so there's no
04:10 - need to do any additional installation
04:12 - unless you're on Windows and want to use
04:15 - bash we have some resources that can
04:17 - explain the terminal further there's
04:20 - also the git course if you're feeling
04:21 - adventurous and you'll also want to
04:24 - select an editor which is a place for
04:25 - you to write out your code depending on
04:28 - your editor it can come with some
04:29 - extensions that will identify syntax
04:31 - errors or highlight reserved words to
04:34 - make development much easier sublime and
04:37 - atom are really popular but let's be
04:39 - real vias code for the win am i right I
04:41 - really like the high customized ability
04:44 - and have found that it performs pretty
04:45 - darn well we've also got some in-depth
04:48 - articles that will walk you through
04:50 - setting up your editor on both Macs and
04:52 - Windows now all that's left is for you
04:55 - to get your language of choice set up
04:56 - and you guessed it we've got
04:58 - walkthroughs for that don't forget that
05:01 - all of these resources are in the
05:02 - description below if you want to get
05:05 - some practice working locally here's a
05:07 - good opportunity to work on that project
05:08 - you've been sitting on for
05:10 - months or if you don't quite feel ready
05:13 - to jump straight in you can also try
05:15 - recreating the coke atom II projects on
05:17 - your local machine so that you reinforce
05:19 - what you've learned in the course while
05:21 - focusing on navigating through your
05:23 - local setup also I'd like to point out
05:26 - that a lot of my examples seem to be web
05:28 - development focused but they still apply
05:30 - to other aspects of software development
05:33 - as well not just web dev if you're
05:36 - having trouble coming up with ideas on
05:37 - what to make we've got some other videos
05:39 - lined up like how to build a portfolio
05:41 - that can hopefully spark some ideas for
05:44 - you one thing I recommend is to tackle
05:47 - something that's interesting to you
05:49 - because remember you're going to be
05:51 - stuck with it for a while
05:54 - a friend who is just looming react and
05:56 - he started with a to-do list it was
05:58 - pretty straightforward didn't really
05:59 - have a lot of bells and whistles but
06:01 - among my friends we loved to play this
06:04 - obscure Chinese card game but couldn't
06:06 - find a good app that will let us play it
06:08 - online so he built it on react and it
06:10 - was phenomenal yes it took him a lot
06:13 - longer to flesh out but the end product
06:15 - was amazing and he ended up exploring
06:18 - react a lot more than he did with his
06:19 - first project one thing that I've also
06:22 - seen happen pretty often is that people
06:25 - will often get stuck and then abandon
06:27 - the project entirely don't give up it's
06:30 - natural to get stuck and to get stuck
06:32 - often this is why building a solid
06:34 - foundation is really important it will
06:36 - help you know where and how to break
06:38 - things down into bite-sized pieces
06:40 - also as a friendly reminder you can look
06:42 - things up online because chances are
06:45 - someone else is in the same boat as you
06:46 - and if you don't see the question then
06:49 - ask it the Koch Adam II forums are a
06:51 - great place to start even though you've
06:53 - finished all the courses you're still
06:55 - learning
06:56 - it's just that in these kinds of
06:57 - situations you're learning a different
06:59 - side of development that doesn't have as
07:01 - clear of a structure as the courses on
07:03 - Koch Adam II because at this point
07:06 - you've come really far and so now you're
07:08 - learning how to build and debug your
07:10 - solutions and don't worry if you feel
07:13 - like it's incredibly hard the first time
07:15 - you ever do anything is gonna be hard I
07:17 - remember the first time I tried to stop
07:19 - a program in the terminal I ended up
07:22 - crashing my computer
07:23 - oops there was another time where I was
07:26 - just running a program in the terminal
07:28 - and then I crashed my computer and
07:30 - another time where I was running too
07:32 - many programs and then I crashed my
07:34 - computer so the moral the story is that
07:37 - just like your computer you too can get
07:40 - back up again and don't be shy
07:42 - contributing to open source projects is
07:44 - also a way to get more exposure to the
07:46 - developer community there are a lot of
07:48 - great projects out there that need
07:50 - someone to dust off the cobwebs you'll
07:53 - get to learn other people's coding
07:54 - styles and pick up some coding arms
07:56 - along the way there's a lot of talk out
07:59 - there about how great diversity is
08:00 - particularly with coding and one of the
08:03 - reasons is because you gain exposure to
08:05 - so many more perspectives and he learned
08:08 - different ways of looking at something
08:09 - for example I was working on a reactor
08:12 - with a team with two other people and
08:14 - all three of us had a very different
08:16 - approach to organizing the components
08:19 - the best approach that we ended up
08:21 - taking was none of them but rather a new
08:23 - approach that the three of us had worked
08:25 - on together when you work with other
08:27 - people you end up learning more from
08:29 - each other than you could from a
08:30 - textbook you gain valuable team
08:33 - experience and you also recognize the
08:35 - strengths that you yourself contribute
08:37 - to the team I mean I could go on for
08:39 - miles about developing in a team but
08:41 - I'll save my soapbox for another day
08:42 - ultimately you come out a stronger
08:45 - programmer for professional developers
08:47 - these team skills are incredibly
08:49 - valuable if you're wondering where to go
08:51 - to build your network you don't have to
08:53 - look very far code kata me has a
08:55 - dedicated pro community that have a ton
08:58 - of resources and spaces that are focused
09:00 - on connecting learners with each other
09:02 - you can find a group to hop on a project
09:04 - with or build out your own the forums
09:07 - and Facebook page are a great place to
09:09 - meet other developers going to local
09:11 - meetups will also help you practice talk
09:14 - in the talk meaning you have a chance
09:16 - getting used to the developer jargon and
09:18 - recognize how it's used in an enterprise
09:20 - setting it also helps you with solidify
09:23 - your understanding of key concepts on a
09:24 - high level but whatever you end up doing
09:27 - remember to also make time for yourself
09:30 - so you don't burn out sometimes it's
09:32 - easier to find a solution when you take
09:34 - a break and give your brain some time to
09:36 - digest and breathe and then come back
09:38 - later thanks so much for watching
09:40 - please join the conversation by dropping
09:43 - a comment below and subscribing to this
09:45 - channel and if you want to take your
09:46 - skills to the next level you can start
09:49 - learning on coke atom II today

Cleaned transcript:

hi my name is Stephanie I'm a software developer based in Baltimore at this point you've been learning with coke atom II for a while and so you're ready to test out your new coding charms but you don't quite know where to start does the situation sound familiar well don't worry we've got you covered in this video I'll go over some general things that I've used to get that extra bit of practice in and some places you can hit up where you can expand your learning as we go along I'll also include links in the video and the description below on all the resources that I'm mentioning when you finish a code Academy courses you set out to learn you may feel like you have this arsenal of knowledge ready to go at any given moment and that's great and I'm glad you're able to pick down whatever code Academy was throwing down but there's a bit of a hitch with that coke atom e is a great starting point for learning different programming languages and introducing concepts but there's only so much you can cover in a course a good chunk of mastering the language is learning through experience for example I was writing some code in this programming language called go and I have been working with it for about half a year and at that point I could confidently say that I knew how to concatenate or combine two strings together but then this go experts went by and told me that there's a more efficient way to concatenate strings together and it blew my mind to the point where now every time I concatenate strings in the new language I have to double check to make sure I'm doing it in the most efficient way when I first came across this I was thinking how the heck is anyone supposed to figure this out and this is really where having a solid foundation comes in you don't have to go so far as to know all of the languages optimization algorithms but just having a better understanding of how the language works can help you build that foundation to figure out new questions and you can get this through experience there have been so many times in interviews in some code I'm trying to write in a meeting where I've been caught off guard not knowing the answer immediately but when I gather together the things I do know I can piece it together and build a solution just like any speaking language fluency comes with practice and repetition as you complete more challenges it'll become muscle memory for you one thing I would also recommend is to try looking things up online or in the documentation for the language you're working in the code Kadim e forums and Stack Overflow have a lot of great questions and answers from people of all levels and you'd be surprised by why Docs you can pick up when you go straight to the documentation like when I was looking at the documentation for some of the JavaScript functions for arrays I found that the find function isn't compatible on Internet Explorer but when I scroll back through the API and looked at each of the available functions I found that there is a sum function not just some function well yes some function but it's some function called sum that is compatible with ie and could be used as an alternative to find I also recommend that you sharpen your coding chops with daily challenges these are good ways to keep your problemsolving skills in check and are also helpful long term since they can help you prepare for job interviews some good ones are code Wars project Euler and code CAD amigo Coke ad amigo is great in particular because you have a place to review concepts and work through some practice problems on the go what's really neat is that there are also quick stories you can read that can give you more insight into other people's coding journeys plus the design is definitely on Team Q I mean look at the ninja I dare you to tell me it's not cute you may also want to go back through the course and jot down some notes you can do by hand or type it up somewhere just so you have some way to reinforce and reabsorb the material you'll be surprised by the number of things you missed on the first pass I've also talked to a lot of people that don't quite feel ready to transition from code Academy courses to developing on their own local machine so I suggest starting with coke atom ease commandline course there you can learn how to use the terminal which is what you'll need in order to run your programs what's neat is that every computer comes with one so there's no need to do any additional installation unless you're on Windows and want to use bash we have some resources that can explain the terminal further there's also the git course if you're feeling adventurous and you'll also want to select an editor which is a place for you to write out your code depending on your editor it can come with some extensions that will identify syntax errors or highlight reserved words to make development much easier sublime and atom are really popular but let's be real vias code for the win am i right I really like the high customized ability and have found that it performs pretty darn well we've also got some indepth articles that will walk you through setting up your editor on both Macs and Windows now all that's left is for you to get your language of choice set up and you guessed it we've got walkthroughs for that don't forget that all of these resources are in the description below if you want to get some practice working locally here's a good opportunity to work on that project you've been sitting on for months or if you don't quite feel ready to jump straight in you can also try recreating the coke atom II projects on your local machine so that you reinforce what you've learned in the course while focusing on navigating through your local setup also I'd like to point out that a lot of my examples seem to be web development focused but they still apply to other aspects of software development as well not just web dev if you're having trouble coming up with ideas on what to make we've got some other videos lined up like how to build a portfolio that can hopefully spark some ideas for you one thing I recommend is to tackle something that's interesting to you because remember you're going to be stuck with it for a while a friend who is just looming react and he started with a todo list it was pretty straightforward didn't really have a lot of bells and whistles but among my friends we loved to play this obscure Chinese card game but couldn't find a good app that will let us play it online so he built it on react and it was phenomenal yes it took him a lot longer to flesh out but the end product was amazing and he ended up exploring react a lot more than he did with his first project one thing that I've also seen happen pretty often is that people will often get stuck and then abandon the project entirely don't give up it's natural to get stuck and to get stuck often this is why building a solid foundation is really important it will help you know where and how to break things down into bitesized pieces also as a friendly reminder you can look things up online because chances are someone else is in the same boat as you and if you don't see the question then ask it the Koch Adam II forums are a great place to start even though you've finished all the courses you're still learning it's just that in these kinds of situations you're learning a different side of development that doesn't have as clear of a structure as the courses on Koch Adam II because at this point you've come really far and so now you're learning how to build and debug your solutions and don't worry if you feel like it's incredibly hard the first time you ever do anything is gonna be hard I remember the first time I tried to stop a program in the terminal I ended up crashing my computer oops there was another time where I was just running a program in the terminal and then I crashed my computer and another time where I was running too many programs and then I crashed my computer so the moral the story is that just like your computer you too can get back up again and don't be shy contributing to open source projects is also a way to get more exposure to the developer community there are a lot of great projects out there that need someone to dust off the cobwebs you'll get to learn other people's coding styles and pick up some coding arms along the way there's a lot of talk out there about how great diversity is particularly with coding and one of the reasons is because you gain exposure to so many more perspectives and he learned different ways of looking at something for example I was working on a reactor with a team with two other people and all three of us had a very different approach to organizing the components the best approach that we ended up taking was none of them but rather a new approach that the three of us had worked on together when you work with other people you end up learning more from each other than you could from a textbook you gain valuable team experience and you also recognize the strengths that you yourself contribute to the team I mean I could go on for miles about developing in a team but I'll save my soapbox for another day ultimately you come out a stronger programmer for professional developers these team skills are incredibly valuable if you're wondering where to go to build your network you don't have to look very far code kata me has a dedicated pro community that have a ton of resources and spaces that are focused on connecting learners with each other you can find a group to hop on a project with or build out your own the forums and Facebook page are a great place to meet other developers going to local meetups will also help you practice talk in the talk meaning you have a chance getting used to the developer jargon and recognize how it's used in an enterprise setting it also helps you with solidify your understanding of key concepts on a high level but whatever you end up doing remember to also make time for yourself so you don't burn out sometimes it's easier to find a solution when you take a break and give your brain some time to digest and breathe and then come back later thanks so much for watching please join the conversation by dropping a comment below and subscribing to this channel and if you want to take your skills to the next level you can start learning on coke atom II today
