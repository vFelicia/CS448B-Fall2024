With timestamps:

00:00 - and we're live welcome everyone we're
00:03 - celebrating National coding week with
00:05 - live coding lessons throughout the week
00:06 - I'm Mariana Community manager at code
00:09 - academy and this is Ben senior
00:11 - curriculum developer at codecademy and
00:13 - you may remember him from part one today
00:15 - Ben is going to teach you how to make
00:17 - your technical portfolio interactive
00:19 - using JavaScript this is building on the
00:21 - first live stream of the week which was
00:23 - on Monday uh when Ben showed you how you
00:25 - can build a basic Tech portfolio using
00:27 - just HTML and CSS if you haven't watched
00:30 - that one yet we do recommend you go back
00:32 - and watch it especially if you're not
00:33 - familiar with HTML and CSS this one will
00:37 - be recorded and it will be available for
00:39 - Replay for more details on our national
00:41 - coding week live streams check out the
00:42 - link in our YouTube description on
00:44 - Friday we're actually going to be
00:45 - teaching you how to build out one of our
00:47 - most popular portfolio projects that
00:49 - explores NBA data so you can check out
00:51 - our portfolio projects page on
00:53 - codeacademy.com for more
00:55 - as usual ask questions in the chat
00:57 - curriculum developer Lucas and I will be
00:59 - here to answer any questions as they
01:01 - come up during Ben's lesson and will
01:03 - also save some time at the end for a
01:04 - little bit of q a this live stream again
01:06 - will be recorded so it will be available
01:08 - for you and I will hand it over to Ben
01:10 - on to you Ben
01:12 - hey everyone super excited to be back
01:14 - here talking about adding interactivity
01:16 - to our portfolio so I'm going to go
01:18 - ahead and share my screen here so we can
01:20 - go ahead and get started and we're going
01:23 - to pick off from where we left off at
01:25 - the end of the first live stream plus a
01:27 - little bit extra content that we put in
01:29 - uh from some HTML and CSS so looking
01:32 - over we'll see that we have the same
01:33 - core components before we've got our bio
01:35 - we've got our reactivity so that it
01:39 - adjusts to different sizing we've just
01:41 - added another couple articles here flesh
01:44 - it out and then added this header footer
01:46 - along with this very tempting dark mode
01:48 - button uh this dark mode button does not
01:51 - do anything quite yet we will be
01:53 - learning over the course of the lesson
01:54 - today how to make that button work and
01:57 - how it's interactive I'm going to go
01:58 - ahead and share this link here of our
02:00 - starting point in chat so that anyone
02:03 - who is following along can see exactly
02:05 - where we are starting
02:07 - just looking at Post-its and chat right
02:10 - here so this is the workspace that I am
02:13 - starting with right now and that will be
02:15 - building off of today
02:17 - so
02:18 - before we go and add this interactivity
02:21 - and get right into figuring out how to
02:23 - make this dark mode button do something
02:24 - we're going to want to take a little bit
02:26 - of a step back and go over how
02:28 - JavaScript Works which is one of the
02:30 - building blocks of the web
02:33 - um over the course of the live stream
02:35 - today we're going to go over what
02:38 - JavaScript is how to use variables and
02:40 - conditionals and loops and functions in
02:43 - JavaScript to make things appear on a
02:46 - website that you're building we'll then
02:48 - take that foundational knowledge and use
02:50 - it to add in some more of that complex
02:52 - features like adding in that dark mode
02:55 - toggle and if we have time maybe we'll
02:57 - add another feature to kind of make this
02:59 - image fade away as we scroll down but
03:01 - we'll see what we're able to get to over
03:02 - the course of the live stream today so
03:05 - let's Get Right started we're going to
03:06 - come back to actually building in this
03:08 - this functionality for dark mode we're
03:10 - actually going to mess around just with
03:12 - adding elements to the top of this page
03:14 - here to get a sense of what that
03:15 - interactivity should look like
03:17 - so
03:19 - as we look at our file right here we can
03:22 - see right at the bottom is this script
03:24 - tag inside the script tag you can write
03:27 - JavaScript code or you can have this
03:29 - source that says when your website loads
03:32 - go ahead and execute any of the code
03:35 - that's found inside the script file
03:37 - right now it's empty so it's running but
03:40 - not we're not telling anything to happen
03:42 - when we start our website the simplest
03:45 - way you can add some kind of
03:46 - interactivity is with what's called an
03:48 - alert
03:49 - an alert we'll just go and make
03:51 - something appear as a pop-up window on
03:54 - the screen so we can make something
03:56 - appear in here by having an alert and
03:58 - then put in inside these parentheses
04:00 - what we want to be appearing so we can
04:03 - say hello live stream and now when we
04:06 - click save and run a window pops up that
04:09 - says hello live stream this message here
04:11 - is text that we can control this one up
04:14 - here is the title that we can't control
04:15 - because it's a little bit of a security
04:17 - future to make sure that we're looking
04:19 - at so that we know what the source of
04:21 - the message is
04:23 - so we've added something to add some
04:26 - interactivity
04:28 - um and this here is by using what's
04:29 - called a string so anytime you have this
04:32 - quotation mark content that's called a
04:34 - string and that's one thing that you can
04:36 - be displaying or having a part of
04:38 - JavaScript other things you can display
04:40 - are things like numbers so if you wanted
04:42 - to just have the number four and display
04:43 - that that works fine as well
04:47 - now these are some of the building
04:49 - blocks and then within numbers you can
04:51 - also use JavaScript to do things like
04:53 - arithmetic so I could add say two plus
04:56 - three
04:57 - and then that result would display up
04:59 - here the JavaScript is very powerful
05:01 - we'll see a lot of different things we
05:03 - can do with it some of the simplest
05:04 - things it can do are things like
05:05 - arithmetic and then just displaying
05:07 - texts
05:10 - moving on from just some of those basic
05:12 - operations we can also use JavaScript to
05:16 - be storing values that we might want to
05:17 - use later
05:19 - so instead of just adding two and three
05:21 - here we can make a variable and then
05:24 - refer to that variable later on so we
05:26 - could say have some number of apples and
05:29 - some number of bananas
05:31 - and then refer to those variables inside
05:34 - an alert
05:37 - and that here is going to then still
05:39 - display the same thing but it's going to
05:42 - be using these stored variables the
05:44 - advantage of that is we can then do
05:46 - operations as we're working on our logic
05:50 - and I'm told that the alerts aren't
05:52 - actually coming up on the screen chair
05:53 - so that is good information uh there are
05:57 - alerts coming up on that so let me just
05:58 - reshare to show where they're coming
06:00 - from that is a good piece of information
06:02 - okay that's what the alerts look like as
06:06 - they're coming up we have this alert
06:07 - that pops up and shows here
06:10 - so
06:11 - we have alerts that are showing up when
06:13 - we go through these and then we're also
06:15 - able to edit these variables to make
06:17 - something else show up so if we have
06:19 - apples say we could then change to a
06:21 - different value and say we don't have
06:23 - two apples we only have one apple
06:25 - and alert then is going to pop up that
06:28 - shows that we have four remaining or
06:30 - four now instead of five because we lost
06:32 - one apple
06:34 - there are two main ways that we can be
06:36 - three main ways really we can be
06:38 - declaring variables and JavaScript we
06:40 - can be using these let's which is a way
06:42 - of having a variable that can change we
06:45 - can also Define something that's called
06:46 - the const which is a variable that's not
06:49 - supposed to change
06:50 - we'll notice if we're making a variable
06:54 - that is a const and we try to change it
06:57 - now nothing happens we don't get an
06:59 - alert pop-up is now we don't get an
07:01 - alert that pops up at all here so what
07:04 - we can do is figure out why is it that
07:07 - this isn't working why is something
07:08 - happening that's wrong why is nothing
07:10 - showing up
07:11 - we can use with a very powerful tool
07:13 - which is this inspect button which will
07:15 - bring up what's called the developer
07:17 - panel here now there's a wealth of
07:19 - information and it's a little bit
07:20 - overwhelming but we're just going to
07:22 - look at one piece of it this here is the
07:24 - elements which is as you know from our
07:26 - session on Monday is HTML that describes
07:30 - this website which is the website we're
07:32 - using to build a website it's a very
07:34 - meta then inside this console
07:37 - is a lot of error messages nice little
07:40 - thing up at the top pointing to our
07:41 - careers page and then down here is a
07:43 - place for any result where any uh
07:46 - anything that goes wrong from JavaScript
07:48 - as we can see a bunch of stuff here will
07:50 - show up in this console so when we go
07:52 - run this it's going to tell us that
07:54 - there is some error this uncaught type
07:57 - error that's telling us what we did
07:58 - wrong we tried to assign something to a
08:01 - constant variable and constant variables
08:03 - aren't allowed to change
08:05 - so if we fix this by turning it back to
08:07 - a let
08:09 - then our alert will show up again so
08:11 - this console is a great way to be
08:12 - debugging code we might come back there
08:14 - if there's something that we're working
08:16 - on a JavaScript that isn't rendering
08:18 - correctly and we can go fix and figure
08:20 - out what's happening there
08:22 - okay so we have variables that we're
08:25 - able to go and edit here now that's all
08:28 - well and good uh but this doesn't do
08:31 - anything yet right we've seen that we
08:32 - can be having alerts come up we can also
08:35 - be logging things directly it's not just
08:37 - errors that kind of show up in the
08:39 - console you can decide for debugging
08:41 - purposes if you want to make something
08:43 - appear just in the console and not as
08:46 - some alert we can see that Tech show up
08:47 - here now
08:49 - that is one good strategy but it doesn't
08:52 - actually edit our website and having
08:54 - those pop-ups come up isn't a great
08:56 - learner experience or a great user
08:58 - experience because that's you know very
08:59 - pop-up spam kind of thing that you might
09:02 - have seen in the web like 10 years ago
09:03 - if you have a virus so we want to add
09:05 - some more interactivity that makes text
09:07 - appear and allows us to manipulate a
09:10 - website with our JavaScript
09:13 - how do we do that we're going to go
09:15 - ahead and start by just adding a a
09:18 - paragraph some new text up to the top of
09:21 - our page
09:22 - the way we're going to do that is by
09:24 - accessing the document this is an object
09:28 - which is another building block of
09:30 - JavaScript which is kind of like a thing
09:32 - a unit some languages is called like a
09:34 - dictionary but it's an object it's a
09:36 - thing that we can use that has a lot of
09:38 - really useful properties and methods
09:40 - which are all different ways that we can
09:43 - be accessing things inside of this
09:45 - document
09:47 - so every document has a way that you we
09:50 - can be generating new information so if
09:53 - we want to create a new paragraph tag we
09:56 - can do that by using this create element
09:59 - method
10:01 - this is a method or a function in
10:04 - JavaScript and so we'll go in a little
10:06 - bit later and figure out how to define
10:08 - them on ourselves by ourselves but for
10:11 - now we know that we can use this dot to
10:13 - talk about something useful that we can
10:15 - do on this document and then the useful
10:17 - thing we're going to do is we're going
10:19 - to create an element these open and
10:21 - close parentheses signify different
10:24 - arguments that we can put in the
10:25 - parentheses in this case it's what do we
10:28 - want to create what kind of elements
10:31 - we're just going to put some text right
10:32 - up at the top so we can do that by
10:34 - making a P tag this para now if we just
10:38 - run this here
10:40 - and get rid of this log nothing's going
10:42 - to happen because we haven't told it to
10:44 - do anything this is what's called
10:46 - imperative programming it just executes
10:48 - top down and the only things that happen
10:50 - are exactly the things that you say
10:52 - should happen so we have just made this
10:55 - element but we haven't done anything
10:57 - with it the first thing we're going to
10:59 - want to do is store it somewhere so
11:01 - we're going to use a const because we're
11:03 - not going to change it once we made it
11:04 - and then assign it somewhere so that we
11:07 - can refer to it later more easily
11:10 - now that we have this new paragraph
11:12 - element here we're going to want to give
11:15 - it some texts so it can actually show up
11:17 - so we're going to take this new
11:19 - paragraph
11:20 - and then we're going to assign its text
11:22 - contents to be something
11:25 - this text content is a property inside
11:28 - of this element in the same way that in
11:31 - the index.html we had all of these
11:33 - different attributes like a div could
11:35 - have a class inside of it or these
11:38 - anchor links had ahrefs this is another
11:41 - way that we can be specifying additional
11:43 - information about something the
11:45 - javascripty way of doing that is to be
11:47 - using what's called here is a property
11:50 - which is kind of digging in a little bit
11:52 - further onto that element to get some
11:55 - more information about it
11:57 - okay so now we can go ahead and add text
12:01 - content something like this is a this is
12:04 - new text
12:07 - now that we have our text we actually
12:09 - need to do something with it because
12:11 - it's not going to show up unless we go
12:12 - ahead and actually edit uh some more
12:15 - information so we'll go ahead then and
12:18 - then add this new paragraph to our body
12:22 - so the easiest way to do that is to take
12:25 - this document object one of its
12:27 - properties is the body and then we can
12:30 - use a prepend method which will go ahead
12:33 - and just add some new element right up
12:36 - at the top of whatever that HTML element
12:38 - is we can then go ahead and prepend the
12:42 - new paragraph
12:43 - when we run this year we'll see that
12:45 - this text now appears right up at the
12:47 - top of the screen and that's because
12:49 - we've gone and done all the steps we've
12:51 - made something new we've said what tech
12:53 - should be inside it and we've gone and
12:55 - added to the top fantastic so this isn't
12:59 - interactivity yet but it's getting us to
13:01 - the right tools that we need in order to
13:04 - be editing and managing content
13:07 - okay so now that we have the ability to
13:11 - add one piece of text we can go even
13:13 - further
13:14 - because you might be looking at this and
13:16 - wondering well I could just do this very
13:17 - simply by going into the index and then
13:20 - just adding a paragraph tag myself
13:22 - what's the point of doing it from this
13:25 - file right here
13:26 - we can take advantage of powerful
13:28 - features from JavaScript like Loops or
13:32 - control flow to specify things laid out
13:36 - differently let's imagine instead of
13:38 - just having one piece of text we wanted
13:40 - to make 10 of them
13:42 - we could do that by either inside the
13:45 - index.html or here doing a lot of
13:47 - copying and pasting we could try to copy
13:49 - and paste this except we'll get an error
13:52 - because our variables need to have the
13:53 - same they can't have the same name so
13:55 - we'd have to go and change this here and
13:58 - we could go and copy and we could go and
14:00 - paste again and we could go change and
14:03 - update this here to have another
14:04 - paragraph and we could repeat this
14:06 - another seven times to end up with 10
14:08 - elements and that would work but it'd be
14:11 - kind of a pain it'd be a little bit
14:12 - exhausting to have to go through the
14:14 - process and figure that out so one thing
14:17 - that we can do that'll make life a lot
14:18 - easier is instead of and see we even
14:22 - forgot to copy and paste something here
14:23 - so it's really not a good practice to
14:25 - get into
14:27 - so something that's a much better use
14:29 - case is instead to be using what's
14:32 - called a loop
14:34 - I'm going to be going over a lot of
14:36 - Concepts from JavaScript here and I'll
14:37 - just preface this to say if you're new
14:39 - to JavaScript this might be coming very
14:41 - quickly and that's okay you should think
14:43 - of this more of a as a survey of what
14:45 - you could do with JavaScript and we have
14:47 - a lot more information for what you can
14:49 - do inside of our content so everything
14:52 - that we're talking about here we have an
14:54 - entire lesson just on creating variables
14:56 - an entire lesson just on Loops so I'm
14:59 - summarizing a lot of information that's
15:01 - really valuable
15:03 - um but we have an in-depth look at that
15:05 - with a lot more practice opportunities
15:07 - on our platform
15:08 - so with that we can make a loop by using
15:12 - the four syntax
15:14 - and then specify a variable that we want
15:16 - to start from our iteration some I some
15:19 - just variable that we want to start off
15:21 - as
15:22 - we then specify when should we stop
15:24 - iterating we say we want it to stop once
15:27 - it's 10 and how much should I go up each
15:30 - time this syntax is the same thing as
15:33 - saying that I should be assigned to
15:35 - whatever it was before plus one more
15:38 - with this Loop syntax whatever is inside
15:41 - here is going to run 10 times so we can
15:44 - take this same code and just embed it in
15:47 - this Loop
15:48 - and now we have 10 of these appearing
15:51 - the power of that is that if we wanted
15:54 - to have a hundred pieces of text appear
15:56 - at the top instead of copying and
15:58 - pasting something 90 times it's a single
16:00 - keystroke that will then have a hundred
16:03 - pieces of text appearing right up at the
16:04 - top
16:05 - so even though we're still working
16:07 - towards adding to that some of that
16:09 - interactivity this clearly is a very
16:11 - powerful way that we can make lots of
16:13 - changes to code for how we're setting it
16:15 - up without having to copy and paste
16:18 - things a lot
16:19 - we can also use an additional feature of
16:22 - JavaScript called conditionals which is
16:24 - there in every language in order to
16:27 - specify uh some more information about
16:29 - how this section look let's say we
16:31 - wanted some of the texts to be green and
16:34 - some of it to be blue red and blue and
16:36 - we want it to be alternating how could
16:38 - we structure that
16:39 - well we can say that if it's an even
16:43 - thing we want it to show up as one color
16:45 - say red and if it's an odd thing we want
16:48 - it to show up as blue so then as we go
16:50 - we'll have this is the zero up thing so
16:53 - that could be red then blue then red
16:55 - then blue and so on and so forth how
16:57 - could we do that we can use a
16:59 - conditional and say that if
17:02 - the number is even and what does even
17:05 - mean we can use a neat operator in
17:07 - JavaScript called the modulo operator
17:09 - which is this percent sign which means
17:13 - take the remainder from division
17:15 - so this expression here says if when you
17:19 - divide a number by two there's nothing
17:21 - left over
17:22 - another way of saying that is if the
17:24 - number is even
17:26 - if it's even then we want to be taking
17:29 - all this stuff but we want to do
17:32 - something we want to change its style
17:34 - well how do we do that
17:37 - uh
17:38 - we can access the style property on this
17:41 - just like we can access the text content
17:43 - so we can take this new paragraph that
17:46 - we've created and we can call this set
17:49 - property method which will then take one
17:52 - of its properties but we'll take this
17:54 - new paragraph excuse me we'll go into
17:55 - its style and then we'll set its
17:58 - property we'll set its color to be
18:01 - something like say red
18:04 - and then once we go and execute this
18:07 - we'll be alternating between things that
18:10 - are unstyled that have no specified
18:12 - color and things that that should be
18:14 - read now we can see that everything went
18:16 - away now if everything goes away at once
18:19 - that means that you did something wrong
18:20 - with the JavaScript one way of figuring
18:22 - out what that is is to take a look at
18:24 - the console and then see if there's
18:26 - anything that is displayed as an error
18:28 - and we can see right here that this says
18:30 - there's a uncut piece of synth there's a
18:33 - syntax error we have some missing uh
18:35 - parentheses after a given line so we can
18:38 - take a look at the line and say that
18:39 - that's on line 11. we can look at it and
18:42 - say that oh okay so what we've done
18:45 - wrong here is that this here takes two
18:47 - separate arguments we just try to kind
18:49 - of use the same CSS syntax the temp
18:52 - property actually wants two separate
18:53 - arguments not just one thing that looks
18:56 - like CSS
18:57 - and then when we run this again we'll
19:00 - see that we have that alternating colors
19:02 - now that was actually just a mistake I
19:04 - made but I think that's really important
19:05 - to go through is a developers make
19:07 - mistakes all the time and B using the
19:10 - console to figure out what that mistake
19:12 - was is a hugely important part of the
19:14 - development process I expect we'll see
19:16 - other things that are kind of minor
19:17 - syntax things that crop up but being
19:19 - able to open the console and look at
19:21 - what went wrong is a critical step about
19:24 - building websites with interactivity
19:26 - with javascripts Okay so we've gone and
19:30 - set these alternating things as red we
19:33 - could then go and set if things are not
19:35 - even then they're odd so we could go
19:38 - ahead and set those to be blue
19:42 - and now we have text that's nicely
19:43 - alternating here instead
19:46 - okay uh quick question from Chad I saw
19:50 - which is that some people use VAR
19:51 - instead of let doesn't make a difference
19:53 - it's a great question and we've got a
19:56 - lot more information about that in our
19:57 - variables course the kind of short
19:59 - answer is that constant let are both a
20:03 - little bit newer that behave more like
20:05 - other languages VAR is a way of creating
20:08 - something that can exist in a lot of
20:10 - different Scopes well get to that when
20:12 - we talk about functions but the short
20:14 - answer is that vars can exist in
20:16 - surprising places and constant lets will
20:19 - behave a little bit more like they do in
20:20 - other languages if you're just using
20:23 - constant let for everything you really
20:25 - can't go wrong uh but if you have some
20:27 - specific behavior that you're trying to
20:29 - work on then maybe adding a VAR might
20:31 - make sense
20:33 - okay so now that we've added this text
20:36 - here that's all well and good but we
20:39 - don't want to just you know have a bunch
20:42 - of text up here we want to get into that
20:43 - interactivity kind of the the real goal
20:46 - of where we started with this now to add
20:49 - interactivity we might want to click a
20:51 - button and then have the text appear so
20:53 - we don't want it to all show up at once
20:54 - we want to click on a button and then
20:56 - have more stuff show up every time we
20:58 - click on that button that would be real
21:00 - interactivity now how can we get that
21:03 - accomplished well what we can do is we
21:05 - can instead of having this in a for Loop
21:07 - we can wrap it inside of a function we
21:10 - talked a little about functions here
21:12 - let's create elements is a function that
21:14 - takes in this P arguments the set
21:16 - property is a function that takes in
21:18 - what property uh we want to set and then
21:22 - the value we want to send it to so we
21:24 - can also build our own functions so
21:27 - we're going to make all of this be
21:29 - wrapped in a function that we're going
21:31 - to call add text
21:33 - to top
21:35 - and that's just going to add some new
21:37 - text to the top
21:39 - you'll note also we're still talking
21:41 - about this eye but it actually doesn't
21:43 - exist anymore since we got rid of the
21:44 - for Loop so what we can do is we can
21:46 - just Define the eye right up here and
21:49 - set it up equal to zero
21:51 - and then once we execute this we'll just
21:54 - go and increment I so it's going up by
21:56 - one
21:57 - minor node on this you'll see a lot of
21:59 - syntax differences between people
22:01 - writing JavaScript you can have
22:04 - semicolons at the end of lines and
22:05 - JavaScript and you will find many style
22:07 - guides that encourage you to do that it
22:09 - doesn't actually make a difference for
22:10 - the code executing so as long as you're
22:13 - consistent you can go ahead and then use
22:16 - whichever you prefer you can use those
22:18 - semicolons or not use them okay so now
22:21 - we have this function which will if we
22:23 - run we're not executing the function so
22:25 - nothing will happen if we want this to
22:28 - actually run we'll need to make sure
22:30 - we're calling the function
22:33 - and we can see that we have now
22:35 - abstracted this in a function so we can
22:37 - call it and as we call it it does the
22:39 - alternating colors and puts the text
22:40 - right up at the top
22:42 - okay
22:43 - now that's all again well and good but
22:46 - we don't want to call this function we
22:48 - want a button to show up so let's
22:49 - finally get to adding some of that great
22:51 - interactivity the first thing we're
22:53 - going to want to do is make a new button
22:56 - which we'll just call button and we'll
22:58 - use the same syntax the way we write
23:00 - things up here to make a button
23:05 - so our button right here is going to
23:08 - also have some text inside of it we can
23:10 - say that it's text content should be
23:12 - something like maybe add text
23:15 - because that's what it does and then we
23:17 - can go ahead and put the button
23:19 - right up at the top
23:23 - we got rid of these because we want this
23:25 - to be receptive to the uh what the user
23:28 - is typing in or clicking and then when
23:31 - we run this we see that we have the
23:32 - button appear right up at the top
23:34 - no button doesn't do anything there
23:37 - right we can click on it as many times
23:38 - as we want but nothing happens and
23:41 - that's because we haven't specified what
23:43 - kind of interaction should happen
23:45 - we need to actually say what happens
23:48 - when you click on the button what should
23:49 - that behavior be
23:50 - in JavaScript the easiest way to know
23:52 - that a button has been clicked or some
23:55 - event has happened is to use what's
23:57 - called an event listener
23:59 - every property or every uh element every
24:02 - object here has another property we can
24:04 - add to it which is called add events
24:07 - listener
24:08 - and this method that we're calling is
24:11 - going to take in what we're listening to
24:13 - and then what we should do once we found
24:16 - that that thing has happened there are a
24:19 - bunch of different events that you can
24:20 - use and again you can look at
24:21 - documentation to get a sense of what all
24:23 - of those are but some examples as you
24:25 - can find out when the a scroll event
24:28 - happens or when a click event happens or
24:30 - when you've moused over something or
24:31 - moused off of something for this we're
24:34 - going to want to just pay attention to
24:36 - clicking and then we're going to go
24:38 - ahead and whenever a click has happened
24:41 - we're going to go and execute this
24:43 - function right here
24:47 - so every time someone clicks we run this
24:49 - add text to top
24:52 - great so now we've finally got into that
24:55 - interactivity as clicks happen
24:58 - more and more content gets added up to
25:00 - the top
25:02 - great so we finally added some
25:04 - interactivity but there's no real way of
25:06 - getting rid of any of this right so if
25:08 - we go and we add a bunch of text we all
25:11 - this cluttering up here and there's no
25:13 - way of getting rid of it so something
25:15 - that we might be interested in doing is
25:16 - figuring out a way to get rid of all
25:18 - this text that comes up we can do that
25:21 - by adding another button that's going to
25:22 - get rid of it clicking this save and run
25:25 - will get rid of it but that's something
25:26 - that only we can do with the Builders of
25:28 - the website it's only the right panel
25:30 - that someone's actually going to get
25:31 - access to if they were really looking at
25:33 - it as something that was live
25:35 - so we can add another button that's
25:38 - going to try to delete some of these
25:40 - elements
25:42 - now we could add another button by
25:44 - taking all of this code here
25:47 - copying it and then making a new button
25:49 - but one thing I really want to emphasize
25:51 - that we saw before is anytime you find
25:53 - yourself copying and pasting a lot
25:55 - there's probably a better way to do it
25:57 - there's a really important Concept in
25:59 - coding called dry code which stands for
26:02 - don't repeat yourself and the idea is
26:05 - that anytime you're writing the same
26:07 - thing out there's a possibility for a
26:10 - errors to come in and B it's a lot
26:12 - harder to maintain so instead of having
26:14 - a new button that we just make by
26:16 - copying we're going to take a this the
26:19 - important elements of this and Abstract
26:21 - it into a function which is just going
26:24 - to be called add button
26:26 - inside this add button function
26:29 - we're going to go
26:31 - and execute this code now add Button as
26:35 - it's written here which we could run is
26:38 - only going to be adding this specific
26:40 - add text button
26:42 - if we want to add a different button we
26:44 - need a way of specifying that
26:46 - one way we can do that is by adding
26:49 - different parameters inside this
26:51 - function so that when we're calling it
26:54 - just like we can create any kind of
26:56 - element we can create a p element or a
26:59 - button element or an H2 element
27:01 - we can also go and create buttons with
27:04 - different text and different Behavior
27:07 - so how can we do that we can in our add
27:10 - button function we can go and specify
27:12 - what we want the text of the button to
27:14 - be
27:15 - and then what we want the behavior to be
27:17 - when someone has clicked on something
27:20 - so we'll then replace
27:23 - anything that's specific to this add
27:25 - text button with this property we've
27:29 - made here so this add text is actually
27:31 - the button text
27:32 - and this behavior is on click
27:36 - then when we're adding a button we can
27:38 - go and say that we want it to have the
27:41 - text of add text
27:43 - and the behavior of add text to Tom
27:48 - nothing's changed and that's a good news
27:50 - because that's what our refactoring was
27:51 - trying to do is figure out how can we go
27:54 - and make this a little bit more reusable
27:56 - without changing its Behavior
27:58 - so now behavior is exactly the same but
28:02 - we have this add button that's a lot
28:04 - more generic
28:05 - so we could add a different button let's
28:07 - say we wanted to call this remove text
28:10 - and then for now let's just give a disk
28:13 - without we know what else we're doing
28:14 - yet but we'll figure that out
28:16 - we'll see now then a new button shows up
28:19 - uh so we can then add text and we have
28:21 - this other button that for now is called
28:24 - remove text but actually just adds more
28:26 - text because it's the same function that
28:28 - we've defined here we actually want to
28:31 - get rid of text we don't want to add
28:32 - text
28:34 - we could go and Define a new function so
28:37 - we could totally go ahead and then
28:39 - Define a new function here called remove
28:41 - text but we're going to do it in line
28:44 - here using what's called an arrow
28:45 - function
28:48 - this syntax is kind of like making a
28:50 - little uh inline throwaway function that
28:53 - we can use just this one time uh and
28:56 - then we're not going to be using it from
28:57 - a different context you'll see this a
29:00 - lot this kind of fat Arrow syntax in
29:01 - JavaScript
29:03 - um it's the same thing as this here just
29:05 - written out a little differently
29:06 - whatever goes in here the arguments you
29:08 - want to put in this Arrow just shows
29:10 - that you're writing a function and then
29:12 - you have these curly braces just like we
29:13 - have in this function here
29:15 - so what should remove text do well we
29:19 - want to find the things we just made and
29:21 - then get rid of them
29:22 - we could find just paragraph tags but we
29:25 - have other paragraph tags and we might
29:27 - not want to get rid of so we'll need a
29:29 - way of specifying just these bits of
29:31 - paragraph tags
29:33 - one way we can do that is when we're
29:35 - building these paragrams we can be
29:38 - assigning it a class and then we'll have
29:40 - one grouping of things that we can get
29:42 - rid of and we saw how to use classes in
29:44 - the last live stream where we could use
29:46 - some from our CSS from our different CSS
29:49 - rules to specify that something should
29:52 - look different than other things
29:54 - to add something to its class list we
29:57 - can go ahead and then add its what's
30:00 - that add dot class list
30:03 - and just double check the syntax on that
30:05 - okay that classlist dot add and then put
30:09 - in the new class we want to put in so
30:11 - something like generated text
30:14 - by itself this changes no Behavior this
30:16 - is just adding this to whatever classes
30:19 - we have I'm doing this instead of just
30:21 - doing new Paradox class and assigning it
30:23 - to something because that would wipe out
30:25 - any other classes that it might have so
30:27 - this is a nice way you can just go to
30:28 - add behavior that doesn't get rid of
30:30 - anything
30:31 - okay uh a good question from Chad in
30:34 - reference to error functions is it like
30:36 - a Lambda kind of thing yeah exactly so
30:38 - these are like in some languages like in
30:40 - Python these are just called like
30:42 - lambdas which are just kind of throwaway
30:44 - functions that you can write
30:46 - um so this the Syntax for it's going to
30:48 - depend on the language but the behavior
30:50 - is that this is some kind of function
30:52 - that you can be writing that's a
30:54 - throwaway it's an anonymous function as
30:55 - it's called in other languages
30:58 - okay
30:59 - so now that we have our where are we
31:02 - here okay now we have our class added we
31:05 - can go ahead and then figure out how to
31:08 - grab these classes and then get rid of
31:09 - them so how do we do that well we can go
31:13 - ahead and then grab these classes now we
31:17 - saw in the last uh live stream this
31:20 - selector syntax that we can grab things
31:22 - with like the body tag or we can be
31:25 - using this dot which we'll have
31:27 - somewhere here to grab everything with
31:28 - the specific class there's a way of
31:31 - having these same selectors in
31:32 - JavaScript uh we can code and call on
31:36 - the document has something which is
31:38 - called a query selector and a query
31:41 - selector is going to go
31:44 - and kind of run this CSS query to find
31:47 - everything that matches so we can call a
31:50 - query selector and then pass in what it
31:52 - is that we want to be getting rid of so
31:55 - here we can go and pass in to say
31:57 - anything that has the class that matches
31:59 - generated texts
32:02 - we'll go and we want to get rid of those
32:04 - so we can say let para is equal to this
32:07 - and then every element just has a remove
32:09 - method which will just go and get rid of
32:11 - it
32:12 - okay when we save and run we now have
32:15 - this add text that shows up and if we
32:18 - click remove text we'll see something go
32:20 - away but maybe not everything
32:22 - and so that is what happened we saw only
32:24 - one of the things go away
32:26 - why is that
32:28 - um it so happens that in JavaScript here
32:30 - Quarry selector by itself will just get
32:33 - the first of the things that matches
32:35 - this description so if we click on
32:37 - remove text it'll find the first thing
32:39 - with this class and then it will go and
32:42 - save that to this pair right here
32:44 - well we probably want to get rid of all
32:47 - of them not just one of them
32:49 - if we want to do that we'll need and
32:51 - we'll see that we got some weird
32:52 - Behavior also cropping up here but if we
32:54 - want to do that then we'll need to go
32:56 - and to use this query selector all
32:58 - syntax instead
33:00 - this will then save all of the
33:02 - paragraphs inside what's known as an
33:05 - array for this Paris property
33:08 - now what does that look like well let's
33:10 - just take a look at if an alert Works
33:12 - otherwise we'll log it
33:14 - so as we go and add stuff and then click
33:17 - this it'll tell us that we have an array
33:19 - that's what this open and close syntax
33:21 - is of some objects
33:24 - a very common thing when working with
33:26 - JavaScript is this kind of like object
33:28 - object or object to something and that's
33:30 - what this is here it's telling us we
33:31 - have an array of stuff which is good
33:33 - enough but we know we found something so
33:36 - now that we have this array here we want
33:38 - to go through every object and then get
33:41 - rid of all of the existing uh nodes that
33:46 - match inside this array there's a few
33:48 - different ways we could do that one of
33:50 - them is to use what's called a four Loop
33:52 - here which I don't think we've had a
33:54 - chance to see yet and we can go through
33:56 - every para of this Paras
34:01 - and then take this para and remove it or
34:04 - pair it short for paragraph
34:07 - then we add text and when we click
34:10 - remove text it will run this for every
34:13 - paragraph inside there and everything
34:15 - will go okay
34:17 - so there's lots of other syntax that you
34:19 - could use but this is a compelling way
34:21 - to be getting rid of a bunch of stuff
34:22 - all at once
34:24 - okay
34:26 - so we've seen a lot so far just from
34:28 - JavaScript review
34:30 - we've taken a look at some basic
34:32 - variables and that we can be defining
34:35 - those those can be contents those can be
34:36 - variables we can use alerts to make
34:38 - things show up we can use console.log to
34:40 - make things appear over on the right
34:41 - panel we take a look at how we can use
34:45 - different methods on things like the
34:47 - document to create elements store them
34:49 - in variables
34:50 - access and edit their properties uh use
34:54 - conditionals to be going and setting
34:56 - Behavior depending on characteristics
34:58 - abstracting Behavior out to functions
35:00 - and then running uh those functions in
35:03 - order to have certain effects that's a
35:05 - lot of content and if some of this is
35:07 - still coming very fast that's okay again
35:10 - we have a lot of information on our
35:12 - platform that goes through this I did
35:14 - think it's important to just give that
35:15 - very high level overview before we get
35:18 - into the good stuff which is wait a
35:19 - second I thought we're going to like
35:21 - look at the dark mode and edit our
35:22 - website how can we get to that so that's
35:24 - what we'll get to right now I'm going to
35:26 - take all of this good stuff that we've
35:28 - written and instead of just deleting it
35:30 - I'm actually going to make a new file
35:31 - here I'm going to call this something
35:33 - like add buttons
35:37 - and then I'm going to take all of the
35:39 - content from this file
35:41 - and then delete it by cutting it with
35:43 - Ctrl X and then just pasting in here
35:46 - with control or command V so now I have
35:49 - this file has all the content and not
35:52 - this file when I go click save and run
35:54 - these buttons go away and that's because
35:56 - in this index.html file it's reading
36:00 - specifically from this script and
36:02 - running in that code if we wanted to we
36:05 - could add a different script and that
36:06 - could be executing the code we have
36:09 - inside this add
36:12 - buttons.js and then our buttons will
36:14 - appear again
36:15 - so there's lots of scripts that you
36:18 - could be adding and very rarely would
36:20 - you want all of your JavaScript code to
36:22 - be in a single file so it's very
36:24 - important to know how to build multiple
36:25 - files and use that to do what you're
36:27 - interested in
36:28 - for this example we're just going to
36:30 - stick with actually editing this file
36:32 - instead
36:33 - okay so now let's take what we learned
36:36 - and figure out how can we build some
36:38 - kind of dark mode with this as we have
36:39 - it here we see that we have this toggle
36:42 - that we added we didn't talk about
36:43 - toggles last time but they're fairly
36:45 - simple elements it's just a checkbox
36:48 - that we're calling toggle and when you
36:51 - click on it we have some real fancy CSS
36:53 - rule setup so that when it's checked
36:56 - it's going to take this Dot and it's
36:58 - going to move it 26 pixels
37:00 - so this kind of looks like this is still
37:02 - interactivity but it's just displaying
37:05 - the check in like a different spot
37:08 - depending
37:09 - so this we can make it go way over to
37:12 - the right if we wanted to whenever we
37:13 - click on it and that's going to jump all
37:15 - the way over there so there's a I
37:17 - encourage you to look through it because
37:18 - there's a bunch of nice fancy CSS
37:20 - properties that make this look the way
37:22 - it does but we're going to be focusing
37:23 - on just treating this like it's a simple
37:25 - toggle and then making something happen
37:27 - okay let's go back to our script and now
37:31 - we're going to want to go inside here
37:32 - and be editing it so that is changing
37:35 - our background color we've seen a lot of
37:37 - the steps that we already need to go
37:38 - ahead and get that started the first
37:40 - thing we're going to want to do is do
37:42 - something when this toggle is clicked
37:44 - so we're going to go ahead and grab this
37:46 - toggle by using a query selector to get
37:49 - that toggle so we're going to go call
37:51 - this toggle and go into the document
37:53 - we're going to use our query selector
37:55 - and then we're going to want to grab
37:57 - this toggle here
37:59 - now how do we actually grab it we could
38:01 - try to just grab all the check all of
38:04 - the uh what are these here uh like all
38:06 - the divs that match this right and that
38:09 - would kind of work but it'd be a little
38:11 - inelegance a better way to do it is this
38:14 - has an ID set so there's only one dark
38:17 - mode title we looked before at classes
38:19 - which we have as well here and a lot of
38:22 - things can be the same class like we
38:24 - could have multiple article images and
38:26 - we do in this piece here but we only
38:28 - want one dark mode toggle so an ID is a
38:31 - way of kind of specifying a class that
38:33 - only applies to exactly one element
38:35 - so we can go inside of our scripts and
38:38 - then use the selector for IDs which is
38:41 - this hashtag here to get this dark mode
38:44 - toggle which is called Dark mode toggle
38:48 - like this
38:50 - so that's going to give us our toggle
38:52 - once we have it we can then use what we
38:55 - saw from before so just add an event
38:57 - listener you can add click event
38:59 - listeners for anything it doesn't just
39:01 - have to be buttons it could be images or
39:03 - texts but usually you're going to want
39:05 - to make sure for your users it's
39:06 - something they know they should be
39:07 - clicking on
39:08 - so we're going to add an event listener
39:11 - listener and that's going to be looking
39:13 - for click events
39:15 - not clock events but click events and
39:18 - then it's going to do something once we
39:20 - find one
39:21 - now what should we do first let's just
39:24 - make sure that we've set this up
39:25 - correctly let's just go and alert that
39:27 - we did something
39:28 - so when we click on this we can see that
39:30 - it's showing up with this object here
39:32 - telling us that we did in fact find some
39:34 - object
39:36 - great so we know that we're successfully
39:39 - interacting with this page here now we
39:43 - want to go and change the background
39:44 - color what do we want to change it to
39:46 - well we have this figma here and we can
39:48 - share this link again in chat but this
39:50 - has a good mock-up for what a dark mode
39:52 - and a light mode can look like you'll
39:54 - notice between them the dark mode has
39:57 - the text color the background color and
40:00 - the background color of this is the text
40:01 - color here and then we just change these
40:04 - images from being this blue color to
40:06 - this green color that's pretty much all
40:07 - we're going to use this for is just
40:09 - getting the colors that we want to be
40:10 - setting our dark mode to
40:12 - so we're going to do a simple thing
40:14 - first that's not going to quite work and
40:15 - then we'll delve off of it to get the
40:17 - behavior we want
40:18 - let's say that we want to set the
40:19 - background instead to be this uh color
40:21 - which was the text color before
40:24 - we can go ahead and take the documents
40:27 - body
40:28 - we can go to its style and then we can
40:32 - be going and setting its property here
40:34 - so we can go and set
40:36 - the property
40:39 - and then the property we want to set is
40:41 - background and then we want to set it to
40:43 - this color that we found right here
40:46 - when we run this we can see that it does
40:49 - in fact change all of the background of
40:51 - this color
40:53 - um it can't really read anything yet and
40:56 - clicking this doesn't do anything again
40:58 - because we only told it to go one way
41:00 - so we could go instead and we could go
41:02 - back so we could say that we can go from
41:07 - if the toggle is checked
41:12 - then we want to make it dark otherwise
41:14 - we want to make it light
41:16 - so already seen using some of that
41:19 - conditional here to get access to what
41:21 - we're interested in
41:24 - okay so we can go then and grab
41:27 - let's see this color here which is the
41:31 - same background color over here
41:33 - and then grab that
41:36 - now when we run this we'll see that
41:38 - we're setting the color here to dark and
41:40 - when we click it again we're going to go
41:42 - ahead and set it over back to light so
41:45 - this kind of works but isn't quite the
41:47 - behavior that we're looking for
41:51 - uh so what can we do to change the
41:54 - behavior to look a little bit more like
41:56 - we're expecting well the main problem is
41:59 - that all this text isn't the right color
42:00 - right so we want to go ahead and fix the
42:04 - color to make it show up in this proper
42:06 - dark mode like we have styled here
42:09 - now a problem with that is there's a lot
42:12 - of different kinds of text that we want
42:13 - to have to show up and there's nothing
42:15 - stopping us from going and just setting
42:17 - all of the H2S and all the paragraphs
42:20 - and all the list items and all the
42:22 - strong tags and all the Bold tags
42:24 - manually but that's a really annoying
42:27 - process and there's a couple problems
42:28 - with it first it's a lot of work and I
42:30 - don't want to do a lot of work so that's
42:32 - a problem but second if we go through
42:35 - that and we add in setting properties
42:37 - for every other kind of query selector
42:40 - that we find we might miss one maybe we
42:43 - forgot that this was a strong tag and we
42:45 - just didn't include it we then would
42:47 - have this one stubborn thing that didn't
42:49 - participate in our dark mode that'd be a
42:52 - problem right or we might even catch
42:54 - everything but then someone goes back to
42:56 - the website and then goes and changes
42:59 - something by adding in an H4 maybe we
43:02 - didn't have an H4 before now we have to
43:04 - go and edit our JavaScript as well to go
43:07 - and include that manually
43:09 - that's not a great flow from a
43:10 - development perspective because it's
43:12 - very easy for those things to get out of
43:14 - sync so we're going to want to find a
43:16 - more robust way of handling that another
43:19 - problem is the use of this here is kind
43:22 - of What's called the like a magic value
43:24 - which means where does this come from
43:26 - this is just an arbitrary color that's
43:28 - in our JavaScript
43:30 - uh it's very easy for this to be wrong
43:32 - or if we're using it in a bunch of
43:34 - different places it's very easy for it's
43:37 - hard to change before just copying and
43:39 - pasting it a lot and it's hard for a
43:40 - design team that's working mainly with
43:42 - CSS to get that
43:45 - so uh quick question from Chad I think
43:48 - that's good is uh what am I using to get
43:49 - color figma actually just has an add-on
43:52 - to get that so if you just click on
43:54 - figment you've built something you can
43:55 - just click on the color and it copies I
43:57 - also have this Nifty little add-on which
43:59 - is just a like eyedropper color picture
44:02 - tool and that lets me go and just grab
44:04 - colors from web pages and it just goes
44:07 - and puts this up here it's a fun way if
44:09 - you just want to match the exact colors
44:10 - from something you can use a tool like
44:12 - this
44:14 - okay so let's go ahead and fix both of
44:17 - those problems first we want a
44:19 - centralized place for all of these
44:21 - different properties to be living
44:23 - to accomplish that we're going to use
44:25 - what's called a CSS custom property or a
44:28 - CSS variable
44:29 - all of our colors are spread out all
44:31 - over the place we have some on our
44:33 - footer we've got some Even in our toggle
44:35 - switch that are just these hard-coded
44:36 - color values instead we want to be
44:39 - putting them in one centralized place so
44:41 - we can save them in one belt swoop the
44:45 - way that we're going to do that is by
44:47 - using a CSS variable just like
44:49 - JavaScript has variables CSS has
44:51 - variables as well so we want to define a
44:54 - background
44:56 - a light primer a primary I should say
44:59 - and a link color here
45:03 - that is all going to be in one place so
45:06 - we can just change these properties and
45:08 - have everything else change
45:10 - okay how do we do that well let's take
45:13 - the background color that we know put it
45:16 - right here
45:17 - we'll take the light the primary color
45:19 - of texts and put it here
45:21 - and then we'll take the link color which
45:23 - we've got right down here and set this
45:25 - here
45:27 - the syntax to define a CSS variable is
45:30 - this kind of two dashes and then to use
45:33 - a CSS variable you have the VAR keyword
45:35 - then open parens and then the same text
45:39 - here with those uh two dashes and from
45:41 - so we're just going to go through this
45:43 - entire document and replace everything
45:45 - with this color with this variable so we
45:49 - can change it all at once we could do it
45:51 - by scanning that sounds like a lot of
45:53 - work I don't want to do that so we're
45:54 - just going to use find and replace
45:56 - so we're going to go ahead and replace
45:57 - all of these this color here with
46:00 - instead a variable that's going to point
46:03 - to our background
46:06 - and then we can just go through and edit
46:08 - each of them as we see them so we can
46:10 - see that we've got this color here we
46:12 - can update that connect
46:14 - update
46:16 - this one and this one will stay the same
46:17 - because this is where we're defining
46:19 - what that background is
46:21 - as we run this we'll see that nothing
46:24 - changed which is exactly what we want
46:25 - because we're just moving all of the
46:27 - colors to a place where we can add them
46:29 - a little bit more easily we so we can do
46:32 - that with the background color we'll do
46:33 - the same thing with the primary color so
46:35 - anytime we see this color we want to
46:39 - replace it with a variable that points
46:40 - to primary
46:42 - so we'll go ahead and replace
46:44 - this one
46:46 - and this one and this one and
46:50 - this one okay this one so we only have
46:52 - one left and I believe there's also some
46:55 - of the primaries hiding in there I guess
46:57 - there's some backgrounds hiding in here
46:58 - so we can fix those as well so let's go
47:01 - and grab to our style here and we want
47:05 - to
47:06 - replace
47:08 - in here with a variable that points to
47:13 - our background
47:16 - uh that looks like I'm wrong sorry these
47:20 - are primary these are kind of flipped
47:22 - we're going to replace these which are
47:24 - primary
47:28 - great so we'll go and replace them in
47:30 - this other CSS file so just like you can
47:32 - have multiple JavaScript files we happen
47:33 - to have multiple CSS files here
47:36 - okay check to make sure great looks the
47:39 - same and then we'll do the same thing
47:40 - here for our link color is we'll take
47:42 - this and we'll find and replace out so
47:45 - that all of these links here are
47:47 - replaced instead with a variable that's
47:49 - pointing to our link
47:51 - so we can replace and replace
47:55 - and replace and we'll keep that one
47:58 - okay
47:59 - we've done a little bit of refactoring
48:01 - work but the advantage now is we've
48:02 - centralized all of these definitions so
48:04 - if we wanted to make our link color say
48:06 - red
48:08 - now all of our links appear red because
48:11 - we've gone and edited them all at once
48:13 - so if we can just figure out how to be
48:14 - changing these properties here then
48:17 - we're well on our way to be figuring out
48:18 - how to be editing what we want to be
48:21 - editing now we could just be changing
48:22 - these backgrounds but we don't actually
48:24 - have anywhere to be saving our dark mode
48:25 - settings yet so we're actually going to
48:28 - copy this a couple times and we're going
48:30 - to Define not just our background here
48:34 - but we're going to have our dark
48:35 - background
48:37 - primary
48:39 - and Link
48:40 - and our light background light primary
48:44 - and light Link
48:46 - these were not going to change so we're
48:48 - going to keep in our CSS file as a way
48:50 - that we can be permanently referring and
48:52 - grabbing the appropriate values that
48:54 - we're interested in
48:56 - so let's go ahead and fix these colors
48:58 - we know that our dark background is
49:00 - actually this color our light back our
49:02 - dark primary is this lighter color and
49:04 - our Dark Link color is whatever the
49:06 - screen is which is this color right here
49:11 - okay
49:12 - and as one last step instead of these
49:15 - being hard-coded we can actually use
49:17 - variables here to be pointing with one
49:22 - more level of indirection so these can
49:24 - point to our Dart our light background
49:26 - to start
49:28 - and now a lot of refactoring work but
49:30 - it's a way that's going to be a lot more
49:32 - compelling and easy to change and a lot
49:34 - more readable for anyone who's looking
49:36 - at how we're defining each of these
49:38 - things
49:39 - right link
49:41 - and this is light primary okay
49:45 - nothing's changed which is good but now
49:48 - if we just change all of these lights to
49:50 - darks
49:53 - then we'll see that we have
49:55 - one place we can be going to change
49:57 - these and it looks like we got one of
49:59 - them wrong here so let's take a look
50:01 - uh our background doesn't look quite
50:04 - right here
50:05 - let's make sure we got our dark
50:06 - background correct
50:09 - we do
50:11 - so we want a oh actually no background's
50:14 - fine the text didn't update correctly
50:16 - okay so our dark primary text looks like
50:20 - it didn't update so let's go ahead and
50:21 - figure out why that's the case
50:24 - uh so we have our dark primary here
50:29 - who wants to set this let's go make sure
50:33 - we have the right color
50:35 - grab this in here
50:40 - okay
50:41 - let's see
50:43 - quick as anyone Chad has anything to pop
50:45 - in for this before we get blocked too
50:48 - much because I want to go on and get on
50:49 - to our other good stuff here
50:51 - Let's see we have heard dark primary
50:54 - which doesn't look like it's set
50:56 - correctly
50:58 - for our body color because if we change
51:00 - this we should have the right color that
51:02 - we're interested in
51:07 - that looks like something's overriding
51:08 - it's a little funky
51:10 - um
51:12 - C let me take a quick look at chat see
51:15 - if there's any good suggestions I know
51:16 - we're running on time so I do want to
51:18 - get to the last couple steps we have on
51:19 - this
51:21 - missed a hyphen and dark primer thank
51:23 - you so let's take a look we have our
51:27 - dark primary
51:29 - primary of course they're missing hyphen
51:36 - oh thank you syntax very important so we
51:39 - can see that we're actually not reading
51:40 - any of this right now because we're
51:42 - missing one of these dashes at the
51:44 - beginning
51:44 - and now we have the primary color
51:46 - working so thank you Chad uh on line 22
51:49 - we have a missing uh little Dash here
51:52 - and I threw everything out of whack so
51:55 - good emphasis syntax super important and
51:58 - it's very easy to kind of get one little
52:00 - thing wrong and have everything not be
52:02 - function correctly so that's just a
52:04 - matter of practice there but appreciate
52:06 - all the comments and chat that is
52:07 - exactly what we're missing there to make
52:08 - that not functioning okay so now that is
52:13 - our dark mode but we want to go ahead
52:15 - and figure out a way that we can be
52:17 - changing that when we click on the
52:18 - button instead
52:21 - let's go back to our Javascript file
52:23 - here and we're going to actually build a
52:26 - little wrapper that's going to make our
52:27 - life easier here
52:28 - so we're going to go and then we're
52:30 - going to add a class that's going to
52:33 - help us be getting and setting these
52:36 - values again a lot more information
52:38 - about classes uh but I want to just kind
52:40 - of introduce it as something that will
52:42 - make our syntax a lot nicer here
52:43 - so we can add a class that's called CSS
52:46 - prop control
52:47 - it's going to take in
52:49 - in its Constructor and elements
52:52 - and then we'll be assigning that as some
52:54 - element it's going to use later on this
52:56 - CSS prop control is going to have a way
52:58 - that we can get the computed property
53:01 - associated with any particular variable
53:03 - name
53:04 - by using this get computed style which
53:07 - is going to grab whatever element we've
53:10 - given it and then get the property value
53:14 - associated with whatever variable name
53:17 - we can then Define a Setter that's just
53:19 - going to go and assign whatever variable
53:22 - name to some given value
53:25 - we can then
53:26 - by grabbing the element associated with
53:30 - this grabbing its Style just like we saw
53:32 - right here and then calling set property
53:35 - to be assigning the VAR name to a given
53:38 - value here
53:40 - okay
53:41 - so a lot of kind of structure we're
53:43 - adding but it's going to be useful to
53:45 - make it a lot less verbose if we're
53:47 - actually writing code
53:48 - we can then build our body CSS prompts
53:52 - and assign it to be a new CSS prop
53:56 - control and we'll pass in the body that
54:00 - we're working with here the documents
54:02 - body
54:03 - okay now when we're adding these
54:05 - properties once this goes and refreshes
54:09 - we'll go and wants to be changing each
54:12 - of these properties once we've clicked
54:14 - on something
54:15 - all we really need to do is assign the
54:18 - background to either dark mode or light
54:21 - mode depending on what the current mode
54:22 - is so let's grab the current mode by
54:26 - taking the mode and assigning that to be
54:28 - if the toggle is checked then we want it
54:32 - to be dark mode
54:34 - and if the toggle is not checked then we
54:36 - want it to be a light mode
54:37 - we could do this just using an if
54:39 - statement as well this is called a
54:41 - ternary which is just a one-way one line
54:43 - way to write a conditional statement
54:47 - then we're going to want to go ahead and
54:49 - be setting these CSS props so this body
54:52 - CSS prompts we're going to want to set
54:55 - the background and that's that two Dash
54:58 - background
55:00 - and the thing we're going to want to set
55:02 - it to is whatever either the light mode
55:05 - is or the dark mode is depending on this
55:07 - mode right here so we're going to go
55:09 - ahead and then take the body CSS prompts
55:15 - we'll grab
55:17 - one of the variables and we want to just
55:20 - grab from the CSS either this dark
55:24 - background or this light background
55:26 - so we can do this inside here by using
55:29 - what's called this template string with
55:31 - these back ticks
55:33 - and then put in
55:35 - two dashes to show the variable we want
55:37 - this syntax here
55:39 - where we can put our mode in which is
55:41 - either going to be light or dark
55:43 - and then say that we want to grab the
55:45 - background
55:49 - so now we're checking to see if the
55:51 - thing is checked and then we're setting
55:52 - its backgrounds once we go and click it
55:55 - and we can see it alternating here
55:56 - between light or dark
55:58 - we can do this with each of the
56:00 - properties so we did this here with the
56:02 - background we can also do it with the
56:05 - primary
56:07 - and we can also do it with the link
56:14 - and now when we go and click on this
56:17 - here we see that everything updates to
56:19 - that nice dark mode that we're looking
56:21 - for
56:24 - so we can see all of those three things
56:26 - updating
56:27 - okay a couple lastings of review to
56:30 - highlight uh we saw a lot of things over
56:32 - the course of this we really just
56:34 - touched on some elements especially
56:35 - classes do you want to emphasize we have
56:38 - a lot of great information on
56:40 - codeacademy.com that goes more in depth
56:43 - into each of those elements I also want
56:45 - to emphasize that as you're working
56:48 - through something a frequent part of
56:49 - development is things not working
56:51 - correctly and going back and fixing it
56:53 - and so it's a vital part of being a
56:55 - developer is to go through and use the
56:57 - console and to be reading things over to
56:59 - make sure that you're finding whatever
57:01 - syntax mistakes you make because that
57:04 - flow is 100 what a developer is is a
57:07 - process of not getting things quite
57:09 - right iterating and then figuring out
57:11 - how to get to the solution that you're
57:12 - looking for so we've ended up with a
57:15 - great portfolio website right here where
57:17 - you can be taking this as a template
57:19 - adding your own projects customizing
57:21 - what your dark mode might look like and
57:23 - you now have some of the tools to add
57:25 - other kinds of interactivity if you're
57:27 - interested in customizing this in any
57:30 - other way that you want so thanks
57:32 - everyone for these double last live
57:34 - streams I've really enjoyed getting to
57:35 - build these things out in front of
57:36 - everyone I'm excited to see what you'll
57:39 - all build as part of codecademy so that
57:41 - I'll kick it back to Mariana
57:45 - awesome thanks so much Ben and thank you
57:47 - to everyone who joined us today as a
57:50 - reminder our last live stream
57:52 - on Friday is all about creating a
57:54 - portfolio project that will actually go
57:55 - into this portfolio that you've built if
57:58 - you have any questions about part one
57:59 - and two of building your portfolio join
58:01 - the conversation the community forums
58:03 - we'll drop a link in the chat as far as
58:06 - the project it's a data science project
58:07 - in which you'll analyze 538 NBA data and
58:11 - we also have a really fun announcement
58:13 - next week for people excited about web3
58:15 - so stay tuned for that and for more
58:17 - follow us on Instagram LinkedIn Facebook
58:20 - and Twitter to stay up to date see you
58:22 - Friday
58:23 - foreign

Cleaned transcript:

and we're live welcome everyone we're celebrating National coding week with live coding lessons throughout the week I'm Mariana Community manager at code academy and this is Ben senior curriculum developer at codecademy and you may remember him from part one today Ben is going to teach you how to make your technical portfolio interactive using JavaScript this is building on the first live stream of the week which was on Monday uh when Ben showed you how you can build a basic Tech portfolio using just HTML and CSS if you haven't watched that one yet we do recommend you go back and watch it especially if you're not familiar with HTML and CSS this one will be recorded and it will be available for Replay for more details on our national coding week live streams check out the link in our YouTube description on Friday we're actually going to be teaching you how to build out one of our most popular portfolio projects that explores NBA data so you can check out our portfolio projects page on codeacademy.com for more as usual ask questions in the chat curriculum developer Lucas and I will be here to answer any questions as they come up during Ben's lesson and will also save some time at the end for a little bit of q a this live stream again will be recorded so it will be available for you and I will hand it over to Ben on to you Ben hey everyone super excited to be back here talking about adding interactivity to our portfolio so I'm going to go ahead and share my screen here so we can go ahead and get started and we're going to pick off from where we left off at the end of the first live stream plus a little bit extra content that we put in uh from some HTML and CSS so looking over we'll see that we have the same core components before we've got our bio we've got our reactivity so that it adjusts to different sizing we've just added another couple articles here flesh it out and then added this header footer along with this very tempting dark mode button uh this dark mode button does not do anything quite yet we will be learning over the course of the lesson today how to make that button work and how it's interactive I'm going to go ahead and share this link here of our starting point in chat so that anyone who is following along can see exactly where we are starting just looking at Postits and chat right here so this is the workspace that I am starting with right now and that will be building off of today so before we go and add this interactivity and get right into figuring out how to make this dark mode button do something we're going to want to take a little bit of a step back and go over how JavaScript Works which is one of the building blocks of the web um over the course of the live stream today we're going to go over what JavaScript is how to use variables and conditionals and loops and functions in JavaScript to make things appear on a website that you're building we'll then take that foundational knowledge and use it to add in some more of that complex features like adding in that dark mode toggle and if we have time maybe we'll add another feature to kind of make this image fade away as we scroll down but we'll see what we're able to get to over the course of the live stream today so let's Get Right started we're going to come back to actually building in this this functionality for dark mode we're actually going to mess around just with adding elements to the top of this page here to get a sense of what that interactivity should look like so as we look at our file right here we can see right at the bottom is this script tag inside the script tag you can write JavaScript code or you can have this source that says when your website loads go ahead and execute any of the code that's found inside the script file right now it's empty so it's running but not we're not telling anything to happen when we start our website the simplest way you can add some kind of interactivity is with what's called an alert an alert we'll just go and make something appear as a popup window on the screen so we can make something appear in here by having an alert and then put in inside these parentheses what we want to be appearing so we can say hello live stream and now when we click save and run a window pops up that says hello live stream this message here is text that we can control this one up here is the title that we can't control because it's a little bit of a security future to make sure that we're looking at so that we know what the source of the message is so we've added something to add some interactivity um and this here is by using what's called a string so anytime you have this quotation mark content that's called a string and that's one thing that you can be displaying or having a part of JavaScript other things you can display are things like numbers so if you wanted to just have the number four and display that that works fine as well now these are some of the building blocks and then within numbers you can also use JavaScript to do things like arithmetic so I could add say two plus three and then that result would display up here the JavaScript is very powerful we'll see a lot of different things we can do with it some of the simplest things it can do are things like arithmetic and then just displaying texts moving on from just some of those basic operations we can also use JavaScript to be storing values that we might want to use later so instead of just adding two and three here we can make a variable and then refer to that variable later on so we could say have some number of apples and some number of bananas and then refer to those variables inside an alert and that here is going to then still display the same thing but it's going to be using these stored variables the advantage of that is we can then do operations as we're working on our logic and I'm told that the alerts aren't actually coming up on the screen chair so that is good information uh there are alerts coming up on that so let me just reshare to show where they're coming from that is a good piece of information okay that's what the alerts look like as they're coming up we have this alert that pops up and shows here so we have alerts that are showing up when we go through these and then we're also able to edit these variables to make something else show up so if we have apples say we could then change to a different value and say we don't have two apples we only have one apple and alert then is going to pop up that shows that we have four remaining or four now instead of five because we lost one apple there are two main ways that we can be three main ways really we can be declaring variables and JavaScript we can be using these let's which is a way of having a variable that can change we can also Define something that's called the const which is a variable that's not supposed to change we'll notice if we're making a variable that is a const and we try to change it now nothing happens we don't get an alert popup is now we don't get an alert that pops up at all here so what we can do is figure out why is it that this isn't working why is something happening that's wrong why is nothing showing up we can use with a very powerful tool which is this inspect button which will bring up what's called the developer panel here now there's a wealth of information and it's a little bit overwhelming but we're just going to look at one piece of it this here is the elements which is as you know from our session on Monday is HTML that describes this website which is the website we're using to build a website it's a very meta then inside this console is a lot of error messages nice little thing up at the top pointing to our careers page and then down here is a place for any result where any uh anything that goes wrong from JavaScript as we can see a bunch of stuff here will show up in this console so when we go run this it's going to tell us that there is some error this uncaught type error that's telling us what we did wrong we tried to assign something to a constant variable and constant variables aren't allowed to change so if we fix this by turning it back to a let then our alert will show up again so this console is a great way to be debugging code we might come back there if there's something that we're working on a JavaScript that isn't rendering correctly and we can go fix and figure out what's happening there okay so we have variables that we're able to go and edit here now that's all well and good uh but this doesn't do anything yet right we've seen that we can be having alerts come up we can also be logging things directly it's not just errors that kind of show up in the console you can decide for debugging purposes if you want to make something appear just in the console and not as some alert we can see that Tech show up here now that is one good strategy but it doesn't actually edit our website and having those popups come up isn't a great learner experience or a great user experience because that's you know very popup spam kind of thing that you might have seen in the web like 10 years ago if you have a virus so we want to add some more interactivity that makes text appear and allows us to manipulate a website with our JavaScript how do we do that we're going to go ahead and start by just adding a a paragraph some new text up to the top of our page the way we're going to do that is by accessing the document this is an object which is another building block of JavaScript which is kind of like a thing a unit some languages is called like a dictionary but it's an object it's a thing that we can use that has a lot of really useful properties and methods which are all different ways that we can be accessing things inside of this document so every document has a way that you we can be generating new information so if we want to create a new paragraph tag we can do that by using this create element method this is a method or a function in JavaScript and so we'll go in a little bit later and figure out how to define them on ourselves by ourselves but for now we know that we can use this dot to talk about something useful that we can do on this document and then the useful thing we're going to do is we're going to create an element these open and close parentheses signify different arguments that we can put in the parentheses in this case it's what do we want to create what kind of elements we're just going to put some text right up at the top so we can do that by making a P tag this para now if we just run this here and get rid of this log nothing's going to happen because we haven't told it to do anything this is what's called imperative programming it just executes top down and the only things that happen are exactly the things that you say should happen so we have just made this element but we haven't done anything with it the first thing we're going to want to do is store it somewhere so we're going to use a const because we're not going to change it once we made it and then assign it somewhere so that we can refer to it later more easily now that we have this new paragraph element here we're going to want to give it some texts so it can actually show up so we're going to take this new paragraph and then we're going to assign its text contents to be something this text content is a property inside of this element in the same way that in the index.html we had all of these different attributes like a div could have a class inside of it or these anchor links had ahrefs this is another way that we can be specifying additional information about something the javascripty way of doing that is to be using what's called here is a property which is kind of digging in a little bit further onto that element to get some more information about it okay so now we can go ahead and add text content something like this is a this is new text now that we have our text we actually need to do something with it because it's not going to show up unless we go ahead and actually edit uh some more information so we'll go ahead then and then add this new paragraph to our body so the easiest way to do that is to take this document object one of its properties is the body and then we can use a prepend method which will go ahead and just add some new element right up at the top of whatever that HTML element is we can then go ahead and prepend the new paragraph when we run this year we'll see that this text now appears right up at the top of the screen and that's because we've gone and done all the steps we've made something new we've said what tech should be inside it and we've gone and added to the top fantastic so this isn't interactivity yet but it's getting us to the right tools that we need in order to be editing and managing content okay so now that we have the ability to add one piece of text we can go even further because you might be looking at this and wondering well I could just do this very simply by going into the index and then just adding a paragraph tag myself what's the point of doing it from this file right here we can take advantage of powerful features from JavaScript like Loops or control flow to specify things laid out differently let's imagine instead of just having one piece of text we wanted to make 10 of them we could do that by either inside the index.html or here doing a lot of copying and pasting we could try to copy and paste this except we'll get an error because our variables need to have the same they can't have the same name so we'd have to go and change this here and we could go and copy and we could go and paste again and we could go change and update this here to have another paragraph and we could repeat this another seven times to end up with 10 elements and that would work but it'd be kind of a pain it'd be a little bit exhausting to have to go through the process and figure that out so one thing that we can do that'll make life a lot easier is instead of and see we even forgot to copy and paste something here so it's really not a good practice to get into so something that's a much better use case is instead to be using what's called a loop I'm going to be going over a lot of Concepts from JavaScript here and I'll just preface this to say if you're new to JavaScript this might be coming very quickly and that's okay you should think of this more of a as a survey of what you could do with JavaScript and we have a lot more information for what you can do inside of our content so everything that we're talking about here we have an entire lesson just on creating variables an entire lesson just on Loops so I'm summarizing a lot of information that's really valuable um but we have an indepth look at that with a lot more practice opportunities on our platform so with that we can make a loop by using the four syntax and then specify a variable that we want to start from our iteration some I some just variable that we want to start off as we then specify when should we stop iterating we say we want it to stop once it's 10 and how much should I go up each time this syntax is the same thing as saying that I should be assigned to whatever it was before plus one more with this Loop syntax whatever is inside here is going to run 10 times so we can take this same code and just embed it in this Loop and now we have 10 of these appearing the power of that is that if we wanted to have a hundred pieces of text appear at the top instead of copying and pasting something 90 times it's a single keystroke that will then have a hundred pieces of text appearing right up at the top so even though we're still working towards adding to that some of that interactivity this clearly is a very powerful way that we can make lots of changes to code for how we're setting it up without having to copy and paste things a lot we can also use an additional feature of JavaScript called conditionals which is there in every language in order to specify uh some more information about how this section look let's say we wanted some of the texts to be green and some of it to be blue red and blue and we want it to be alternating how could we structure that well we can say that if it's an even thing we want it to show up as one color say red and if it's an odd thing we want it to show up as blue so then as we go we'll have this is the zero up thing so that could be red then blue then red then blue and so on and so forth how could we do that we can use a conditional and say that if the number is even and what does even mean we can use a neat operator in JavaScript called the modulo operator which is this percent sign which means take the remainder from division so this expression here says if when you divide a number by two there's nothing left over another way of saying that is if the number is even if it's even then we want to be taking all this stuff but we want to do something we want to change its style well how do we do that uh we can access the style property on this just like we can access the text content so we can take this new paragraph that we've created and we can call this set property method which will then take one of its properties but we'll take this new paragraph excuse me we'll go into its style and then we'll set its property we'll set its color to be something like say red and then once we go and execute this we'll be alternating between things that are unstyled that have no specified color and things that that should be read now we can see that everything went away now if everything goes away at once that means that you did something wrong with the JavaScript one way of figuring out what that is is to take a look at the console and then see if there's anything that is displayed as an error and we can see right here that this says there's a uncut piece of synth there's a syntax error we have some missing uh parentheses after a given line so we can take a look at the line and say that that's on line 11. we can look at it and say that oh okay so what we've done wrong here is that this here takes two separate arguments we just try to kind of use the same CSS syntax the temp property actually wants two separate arguments not just one thing that looks like CSS and then when we run this again we'll see that we have that alternating colors now that was actually just a mistake I made but I think that's really important to go through is a developers make mistakes all the time and B using the console to figure out what that mistake was is a hugely important part of the development process I expect we'll see other things that are kind of minor syntax things that crop up but being able to open the console and look at what went wrong is a critical step about building websites with interactivity with javascripts Okay so we've gone and set these alternating things as red we could then go and set if things are not even then they're odd so we could go ahead and set those to be blue and now we have text that's nicely alternating here instead okay uh quick question from Chad I saw which is that some people use VAR instead of let doesn't make a difference it's a great question and we've got a lot more information about that in our variables course the kind of short answer is that constant let are both a little bit newer that behave more like other languages VAR is a way of creating something that can exist in a lot of different Scopes well get to that when we talk about functions but the short answer is that vars can exist in surprising places and constant lets will behave a little bit more like they do in other languages if you're just using constant let for everything you really can't go wrong uh but if you have some specific behavior that you're trying to work on then maybe adding a VAR might make sense okay so now that we've added this text here that's all well and good but we don't want to just you know have a bunch of text up here we want to get into that interactivity kind of the the real goal of where we started with this now to add interactivity we might want to click a button and then have the text appear so we don't want it to all show up at once we want to click on a button and then have more stuff show up every time we click on that button that would be real interactivity now how can we get that accomplished well what we can do is we can instead of having this in a for Loop we can wrap it inside of a function we talked a little about functions here let's create elements is a function that takes in this P arguments the set property is a function that takes in what property uh we want to set and then the value we want to send it to so we can also build our own functions so we're going to make all of this be wrapped in a function that we're going to call add text to top and that's just going to add some new text to the top you'll note also we're still talking about this eye but it actually doesn't exist anymore since we got rid of the for Loop so what we can do is we can just Define the eye right up here and set it up equal to zero and then once we execute this we'll just go and increment I so it's going up by one minor node on this you'll see a lot of syntax differences between people writing JavaScript you can have semicolons at the end of lines and JavaScript and you will find many style guides that encourage you to do that it doesn't actually make a difference for the code executing so as long as you're consistent you can go ahead and then use whichever you prefer you can use those semicolons or not use them okay so now we have this function which will if we run we're not executing the function so nothing will happen if we want this to actually run we'll need to make sure we're calling the function and we can see that we have now abstracted this in a function so we can call it and as we call it it does the alternating colors and puts the text right up at the top okay now that's all again well and good but we don't want to call this function we want a button to show up so let's finally get to adding some of that great interactivity the first thing we're going to want to do is make a new button which we'll just call button and we'll use the same syntax the way we write things up here to make a button so our button right here is going to also have some text inside of it we can say that it's text content should be something like maybe add text because that's what it does and then we can go ahead and put the button right up at the top we got rid of these because we want this to be receptive to the uh what the user is typing in or clicking and then when we run this we see that we have the button appear right up at the top no button doesn't do anything there right we can click on it as many times as we want but nothing happens and that's because we haven't specified what kind of interaction should happen we need to actually say what happens when you click on the button what should that behavior be in JavaScript the easiest way to know that a button has been clicked or some event has happened is to use what's called an event listener every property or every uh element every object here has another property we can add to it which is called add events listener and this method that we're calling is going to take in what we're listening to and then what we should do once we found that that thing has happened there are a bunch of different events that you can use and again you can look at documentation to get a sense of what all of those are but some examples as you can find out when the a scroll event happens or when a click event happens or when you've moused over something or moused off of something for this we're going to want to just pay attention to clicking and then we're going to go ahead and whenever a click has happened we're going to go and execute this function right here so every time someone clicks we run this add text to top great so now we've finally got into that interactivity as clicks happen more and more content gets added up to the top great so we finally added some interactivity but there's no real way of getting rid of any of this right so if we go and we add a bunch of text we all this cluttering up here and there's no way of getting rid of it so something that we might be interested in doing is figuring out a way to get rid of all this text that comes up we can do that by adding another button that's going to get rid of it clicking this save and run will get rid of it but that's something that only we can do with the Builders of the website it's only the right panel that someone's actually going to get access to if they were really looking at it as something that was live so we can add another button that's going to try to delete some of these elements now we could add another button by taking all of this code here copying it and then making a new button but one thing I really want to emphasize that we saw before is anytime you find yourself copying and pasting a lot there's probably a better way to do it there's a really important Concept in coding called dry code which stands for don't repeat yourself and the idea is that anytime you're writing the same thing out there's a possibility for a errors to come in and B it's a lot harder to maintain so instead of having a new button that we just make by copying we're going to take a this the important elements of this and Abstract it into a function which is just going to be called add button inside this add button function we're going to go and execute this code now add Button as it's written here which we could run is only going to be adding this specific add text button if we want to add a different button we need a way of specifying that one way we can do that is by adding different parameters inside this function so that when we're calling it just like we can create any kind of element we can create a p element or a button element or an H2 element we can also go and create buttons with different text and different Behavior so how can we do that we can in our add button function we can go and specify what we want the text of the button to be and then what we want the behavior to be when someone has clicked on something so we'll then replace anything that's specific to this add text button with this property we've made here so this add text is actually the button text and this behavior is on click then when we're adding a button we can go and say that we want it to have the text of add text and the behavior of add text to Tom nothing's changed and that's a good news because that's what our refactoring was trying to do is figure out how can we go and make this a little bit more reusable without changing its Behavior so now behavior is exactly the same but we have this add button that's a lot more generic so we could add a different button let's say we wanted to call this remove text and then for now let's just give a disk without we know what else we're doing yet but we'll figure that out we'll see now then a new button shows up uh so we can then add text and we have this other button that for now is called remove text but actually just adds more text because it's the same function that we've defined here we actually want to get rid of text we don't want to add text we could go and Define a new function so we could totally go ahead and then Define a new function here called remove text but we're going to do it in line here using what's called an arrow function this syntax is kind of like making a little uh inline throwaway function that we can use just this one time uh and then we're not going to be using it from a different context you'll see this a lot this kind of fat Arrow syntax in JavaScript um it's the same thing as this here just written out a little differently whatever goes in here the arguments you want to put in this Arrow just shows that you're writing a function and then you have these curly braces just like we have in this function here so what should remove text do well we want to find the things we just made and then get rid of them we could find just paragraph tags but we have other paragraph tags and we might not want to get rid of so we'll need a way of specifying just these bits of paragraph tags one way we can do that is when we're building these paragrams we can be assigning it a class and then we'll have one grouping of things that we can get rid of and we saw how to use classes in the last live stream where we could use some from our CSS from our different CSS rules to specify that something should look different than other things to add something to its class list we can go ahead and then add its what's that add dot class list and just double check the syntax on that okay that classlist dot add and then put in the new class we want to put in so something like generated text by itself this changes no Behavior this is just adding this to whatever classes we have I'm doing this instead of just doing new Paradox class and assigning it to something because that would wipe out any other classes that it might have so this is a nice way you can just go to add behavior that doesn't get rid of anything okay uh a good question from Chad in reference to error functions is it like a Lambda kind of thing yeah exactly so these are like in some languages like in Python these are just called like lambdas which are just kind of throwaway functions that you can write um so this the Syntax for it's going to depend on the language but the behavior is that this is some kind of function that you can be writing that's a throwaway it's an anonymous function as it's called in other languages okay so now that we have our where are we here okay now we have our class added we can go ahead and then figure out how to grab these classes and then get rid of them so how do we do that well we can go ahead and then grab these classes now we saw in the last uh live stream this selector syntax that we can grab things with like the body tag or we can be using this dot which we'll have somewhere here to grab everything with the specific class there's a way of having these same selectors in JavaScript uh we can code and call on the document has something which is called a query selector and a query selector is going to go and kind of run this CSS query to find everything that matches so we can call a query selector and then pass in what it is that we want to be getting rid of so here we can go and pass in to say anything that has the class that matches generated texts we'll go and we want to get rid of those so we can say let para is equal to this and then every element just has a remove method which will just go and get rid of it okay when we save and run we now have this add text that shows up and if we click remove text we'll see something go away but maybe not everything and so that is what happened we saw only one of the things go away why is that um it so happens that in JavaScript here Quarry selector by itself will just get the first of the things that matches this description so if we click on remove text it'll find the first thing with this class and then it will go and save that to this pair right here well we probably want to get rid of all of them not just one of them if we want to do that we'll need and we'll see that we got some weird Behavior also cropping up here but if we want to do that then we'll need to go and to use this query selector all syntax instead this will then save all of the paragraphs inside what's known as an array for this Paris property now what does that look like well let's just take a look at if an alert Works otherwise we'll log it so as we go and add stuff and then click this it'll tell us that we have an array that's what this open and close syntax is of some objects a very common thing when working with JavaScript is this kind of like object object or object to something and that's what this is here it's telling us we have an array of stuff which is good enough but we know we found something so now that we have this array here we want to go through every object and then get rid of all of the existing uh nodes that match inside this array there's a few different ways we could do that one of them is to use what's called a four Loop here which I don't think we've had a chance to see yet and we can go through every para of this Paras and then take this para and remove it or pair it short for paragraph then we add text and when we click remove text it will run this for every paragraph inside there and everything will go okay so there's lots of other syntax that you could use but this is a compelling way to be getting rid of a bunch of stuff all at once okay so we've seen a lot so far just from JavaScript review we've taken a look at some basic variables and that we can be defining those those can be contents those can be variables we can use alerts to make things show up we can use console.log to make things appear over on the right panel we take a look at how we can use different methods on things like the document to create elements store them in variables access and edit their properties uh use conditionals to be going and setting Behavior depending on characteristics abstracting Behavior out to functions and then running uh those functions in order to have certain effects that's a lot of content and if some of this is still coming very fast that's okay again we have a lot of information on our platform that goes through this I did think it's important to just give that very high level overview before we get into the good stuff which is wait a second I thought we're going to like look at the dark mode and edit our website how can we get to that so that's what we'll get to right now I'm going to take all of this good stuff that we've written and instead of just deleting it I'm actually going to make a new file here I'm going to call this something like add buttons and then I'm going to take all of the content from this file and then delete it by cutting it with Ctrl X and then just pasting in here with control or command V so now I have this file has all the content and not this file when I go click save and run these buttons go away and that's because in this index.html file it's reading specifically from this script and running in that code if we wanted to we could add a different script and that could be executing the code we have inside this add buttons.js and then our buttons will appear again so there's lots of scripts that you could be adding and very rarely would you want all of your JavaScript code to be in a single file so it's very important to know how to build multiple files and use that to do what you're interested in for this example we're just going to stick with actually editing this file instead okay so now let's take what we learned and figure out how can we build some kind of dark mode with this as we have it here we see that we have this toggle that we added we didn't talk about toggles last time but they're fairly simple elements it's just a checkbox that we're calling toggle and when you click on it we have some real fancy CSS rule setup so that when it's checked it's going to take this Dot and it's going to move it 26 pixels so this kind of looks like this is still interactivity but it's just displaying the check in like a different spot depending so this we can make it go way over to the right if we wanted to whenever we click on it and that's going to jump all the way over there so there's a I encourage you to look through it because there's a bunch of nice fancy CSS properties that make this look the way it does but we're going to be focusing on just treating this like it's a simple toggle and then making something happen okay let's go back to our script and now we're going to want to go inside here and be editing it so that is changing our background color we've seen a lot of the steps that we already need to go ahead and get that started the first thing we're going to want to do is do something when this toggle is clicked so we're going to go ahead and grab this toggle by using a query selector to get that toggle so we're going to go call this toggle and go into the document we're going to use our query selector and then we're going to want to grab this toggle here now how do we actually grab it we could try to just grab all the check all of the uh what are these here uh like all the divs that match this right and that would kind of work but it'd be a little inelegance a better way to do it is this has an ID set so there's only one dark mode title we looked before at classes which we have as well here and a lot of things can be the same class like we could have multiple article images and we do in this piece here but we only want one dark mode toggle so an ID is a way of kind of specifying a class that only applies to exactly one element so we can go inside of our scripts and then use the selector for IDs which is this hashtag here to get this dark mode toggle which is called Dark mode toggle like this so that's going to give us our toggle once we have it we can then use what we saw from before so just add an event listener you can add click event listeners for anything it doesn't just have to be buttons it could be images or texts but usually you're going to want to make sure for your users it's something they know they should be clicking on so we're going to add an event listener listener and that's going to be looking for click events not clock events but click events and then it's going to do something once we find one now what should we do first let's just make sure that we've set this up correctly let's just go and alert that we did something so when we click on this we can see that it's showing up with this object here telling us that we did in fact find some object great so we know that we're successfully interacting with this page here now we want to go and change the background color what do we want to change it to well we have this figma here and we can share this link again in chat but this has a good mockup for what a dark mode and a light mode can look like you'll notice between them the dark mode has the text color the background color and the background color of this is the text color here and then we just change these images from being this blue color to this green color that's pretty much all we're going to use this for is just getting the colors that we want to be setting our dark mode to so we're going to do a simple thing first that's not going to quite work and then we'll delve off of it to get the behavior we want let's say that we want to set the background instead to be this uh color which was the text color before we can go ahead and take the documents body we can go to its style and then we can be going and setting its property here so we can go and set the property and then the property we want to set is background and then we want to set it to this color that we found right here when we run this we can see that it does in fact change all of the background of this color um it can't really read anything yet and clicking this doesn't do anything again because we only told it to go one way so we could go instead and we could go back so we could say that we can go from if the toggle is checked then we want to make it dark otherwise we want to make it light so already seen using some of that conditional here to get access to what we're interested in okay so we can go then and grab let's see this color here which is the same background color over here and then grab that now when we run this we'll see that we're setting the color here to dark and when we click it again we're going to go ahead and set it over back to light so this kind of works but isn't quite the behavior that we're looking for uh so what can we do to change the behavior to look a little bit more like we're expecting well the main problem is that all this text isn't the right color right so we want to go ahead and fix the color to make it show up in this proper dark mode like we have styled here now a problem with that is there's a lot of different kinds of text that we want to have to show up and there's nothing stopping us from going and just setting all of the H2S and all the paragraphs and all the list items and all the strong tags and all the Bold tags manually but that's a really annoying process and there's a couple problems with it first it's a lot of work and I don't want to do a lot of work so that's a problem but second if we go through that and we add in setting properties for every other kind of query selector that we find we might miss one maybe we forgot that this was a strong tag and we just didn't include it we then would have this one stubborn thing that didn't participate in our dark mode that'd be a problem right or we might even catch everything but then someone goes back to the website and then goes and changes something by adding in an H4 maybe we didn't have an H4 before now we have to go and edit our JavaScript as well to go and include that manually that's not a great flow from a development perspective because it's very easy for those things to get out of sync so we're going to want to find a more robust way of handling that another problem is the use of this here is kind of What's called the like a magic value which means where does this come from this is just an arbitrary color that's in our JavaScript uh it's very easy for this to be wrong or if we're using it in a bunch of different places it's very easy for it's hard to change before just copying and pasting it a lot and it's hard for a design team that's working mainly with CSS to get that so uh quick question from Chad I think that's good is uh what am I using to get color figma actually just has an addon to get that so if you just click on figment you've built something you can just click on the color and it copies I also have this Nifty little addon which is just a like eyedropper color picture tool and that lets me go and just grab colors from web pages and it just goes and puts this up here it's a fun way if you just want to match the exact colors from something you can use a tool like this okay so let's go ahead and fix both of those problems first we want a centralized place for all of these different properties to be living to accomplish that we're going to use what's called a CSS custom property or a CSS variable all of our colors are spread out all over the place we have some on our footer we've got some Even in our toggle switch that are just these hardcoded color values instead we want to be putting them in one centralized place so we can save them in one belt swoop the way that we're going to do that is by using a CSS variable just like JavaScript has variables CSS has variables as well so we want to define a background a light primer a primary I should say and a link color here that is all going to be in one place so we can just change these properties and have everything else change okay how do we do that well let's take the background color that we know put it right here we'll take the light the primary color of texts and put it here and then we'll take the link color which we've got right down here and set this here the syntax to define a CSS variable is this kind of two dashes and then to use a CSS variable you have the VAR keyword then open parens and then the same text here with those uh two dashes and from so we're just going to go through this entire document and replace everything with this color with this variable so we can change it all at once we could do it by scanning that sounds like a lot of work I don't want to do that so we're just going to use find and replace so we're going to go ahead and replace all of these this color here with instead a variable that's going to point to our background and then we can just go through and edit each of them as we see them so we can see that we've got this color here we can update that connect update this one and this one will stay the same because this is where we're defining what that background is as we run this we'll see that nothing changed which is exactly what we want because we're just moving all of the colors to a place where we can add them a little bit more easily we so we can do that with the background color we'll do the same thing with the primary color so anytime we see this color we want to replace it with a variable that points to primary so we'll go ahead and replace this one and this one and this one and this one okay this one so we only have one left and I believe there's also some of the primaries hiding in there I guess there's some backgrounds hiding in here so we can fix those as well so let's go and grab to our style here and we want to replace in here with a variable that points to our background uh that looks like I'm wrong sorry these are primary these are kind of flipped we're going to replace these which are primary great so we'll go and replace them in this other CSS file so just like you can have multiple JavaScript files we happen to have multiple CSS files here okay check to make sure great looks the same and then we'll do the same thing here for our link color is we'll take this and we'll find and replace out so that all of these links here are replaced instead with a variable that's pointing to our link so we can replace and replace and replace and we'll keep that one okay we've done a little bit of refactoring work but the advantage now is we've centralized all of these definitions so if we wanted to make our link color say red now all of our links appear red because we've gone and edited them all at once so if we can just figure out how to be changing these properties here then we're well on our way to be figuring out how to be editing what we want to be editing now we could just be changing these backgrounds but we don't actually have anywhere to be saving our dark mode settings yet so we're actually going to copy this a couple times and we're going to Define not just our background here but we're going to have our dark background primary and Link and our light background light primary and light Link these were not going to change so we're going to keep in our CSS file as a way that we can be permanently referring and grabbing the appropriate values that we're interested in so let's go ahead and fix these colors we know that our dark background is actually this color our light back our dark primary is this lighter color and our Dark Link color is whatever the screen is which is this color right here okay and as one last step instead of these being hardcoded we can actually use variables here to be pointing with one more level of indirection so these can point to our Dart our light background to start and now a lot of refactoring work but it's a way that's going to be a lot more compelling and easy to change and a lot more readable for anyone who's looking at how we're defining each of these things right link and this is light primary okay nothing's changed which is good but now if we just change all of these lights to darks then we'll see that we have one place we can be going to change these and it looks like we got one of them wrong here so let's take a look uh our background doesn't look quite right here let's make sure we got our dark background correct we do so we want a oh actually no background's fine the text didn't update correctly okay so our dark primary text looks like it didn't update so let's go ahead and figure out why that's the case uh so we have our dark primary here who wants to set this let's go make sure we have the right color grab this in here okay let's see quick as anyone Chad has anything to pop in for this before we get blocked too much because I want to go on and get on to our other good stuff here Let's see we have heard dark primary which doesn't look like it's set correctly for our body color because if we change this we should have the right color that we're interested in that looks like something's overriding it's a little funky um C let me take a quick look at chat see if there's any good suggestions I know we're running on time so I do want to get to the last couple steps we have on this missed a hyphen and dark primer thank you so let's take a look we have our dark primary primary of course they're missing hyphen oh thank you syntax very important so we can see that we're actually not reading any of this right now because we're missing one of these dashes at the beginning and now we have the primary color working so thank you Chad uh on line 22 we have a missing uh little Dash here and I threw everything out of whack so good emphasis syntax super important and it's very easy to kind of get one little thing wrong and have everything not be function correctly so that's just a matter of practice there but appreciate all the comments and chat that is exactly what we're missing there to make that not functioning okay so now that is our dark mode but we want to go ahead and figure out a way that we can be changing that when we click on the button instead let's go back to our Javascript file here and we're going to actually build a little wrapper that's going to make our life easier here so we're going to go and then we're going to add a class that's going to help us be getting and setting these values again a lot more information about classes uh but I want to just kind of introduce it as something that will make our syntax a lot nicer here so we can add a class that's called CSS prop control it's going to take in in its Constructor and elements and then we'll be assigning that as some element it's going to use later on this CSS prop control is going to have a way that we can get the computed property associated with any particular variable name by using this get computed style which is going to grab whatever element we've given it and then get the property value associated with whatever variable name we can then Define a Setter that's just going to go and assign whatever variable name to some given value we can then by grabbing the element associated with this grabbing its Style just like we saw right here and then calling set property to be assigning the VAR name to a given value here okay so a lot of kind of structure we're adding but it's going to be useful to make it a lot less verbose if we're actually writing code we can then build our body CSS prompts and assign it to be a new CSS prop control and we'll pass in the body that we're working with here the documents body okay now when we're adding these properties once this goes and refreshes we'll go and wants to be changing each of these properties once we've clicked on something all we really need to do is assign the background to either dark mode or light mode depending on what the current mode is so let's grab the current mode by taking the mode and assigning that to be if the toggle is checked then we want it to be dark mode and if the toggle is not checked then we want it to be a light mode we could do this just using an if statement as well this is called a ternary which is just a oneway one line way to write a conditional statement then we're going to want to go ahead and be setting these CSS props so this body CSS prompts we're going to want to set the background and that's that two Dash background and the thing we're going to want to set it to is whatever either the light mode is or the dark mode is depending on this mode right here so we're going to go ahead and then take the body CSS prompts we'll grab one of the variables and we want to just grab from the CSS either this dark background or this light background so we can do this inside here by using what's called this template string with these back ticks and then put in two dashes to show the variable we want this syntax here where we can put our mode in which is either going to be light or dark and then say that we want to grab the background so now we're checking to see if the thing is checked and then we're setting its backgrounds once we go and click it and we can see it alternating here between light or dark we can do this with each of the properties so we did this here with the background we can also do it with the primary and we can also do it with the link and now when we go and click on this here we see that everything updates to that nice dark mode that we're looking for so we can see all of those three things updating okay a couple lastings of review to highlight uh we saw a lot of things over the course of this we really just touched on some elements especially classes do you want to emphasize we have a lot of great information on codeacademy.com that goes more in depth into each of those elements I also want to emphasize that as you're working through something a frequent part of development is things not working correctly and going back and fixing it and so it's a vital part of being a developer is to go through and use the console and to be reading things over to make sure that you're finding whatever syntax mistakes you make because that flow is 100 what a developer is is a process of not getting things quite right iterating and then figuring out how to get to the solution that you're looking for so we've ended up with a great portfolio website right here where you can be taking this as a template adding your own projects customizing what your dark mode might look like and you now have some of the tools to add other kinds of interactivity if you're interested in customizing this in any other way that you want so thanks everyone for these double last live streams I've really enjoyed getting to build these things out in front of everyone I'm excited to see what you'll all build as part of codecademy so that I'll kick it back to Mariana awesome thanks so much Ben and thank you to everyone who joined us today as a reminder our last live stream on Friday is all about creating a portfolio project that will actually go into this portfolio that you've built if you have any questions about part one and two of building your portfolio join the conversation the community forums we'll drop a link in the chat as far as the project it's a data science project in which you'll analyze 538 NBA data and we also have a really fun announcement next week for people excited about web3 so stay tuned for that and for more follow us on Instagram LinkedIn Facebook and Twitter to stay up to date see you Friday foreign
