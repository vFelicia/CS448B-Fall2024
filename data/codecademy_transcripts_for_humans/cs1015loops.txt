With timestamps:

00:00 - [Music]
00:14 - loading
00:20 - okay there we go hi everyone
00:23 - hey everyone hope you're all doing well
00:27 - we'll wait a few minutes before we start
00:28 - everything
00:30 - if you're in the chat just let us know
00:32 - where you're coming from
00:43 - so i'm alex destassi i'm a curriculum
00:46 - developer with codecademy
00:49 - i'm jamie rich i'm also a co a
00:51 - curriculum developer at codecademy
00:54 - and today you're joining us with our
00:56 - back to school campaign where
00:57 - we're gonna go over python loops
01:04 - so we'll wait a little bit longer and
01:07 - then
01:07 - we'll just get into it what our plan for
01:10 - today
01:11 - is is first we're going to go and we're
01:13 - going to talk about the concept of loops
01:14 - and just
01:15 - kind of get an understanding about what
01:17 - they are and the different kinds of
01:18 - loops that we can use
01:20 - then we'll jump over to see how we can
01:22 - use each of these loops
01:23 - in python and then once we get
01:25 - comfortable with that we'll move on and
01:27 - we'll do some cool code challenges
01:28 - together where we'll
01:29 - put our new knowledge of python loops to
01:32 - use
01:34 - yeah and i am also going to be answering
01:36 - any questions in the chat
01:38 - and uh explaining the concepts along
01:40 - with alex
01:41 - we're all really excited
01:51 - okay again hi everyone who's joining in
01:56 - i love seeing all the different places
01:58 - everyone's from so it's really cool
02:02 - all right so i'm actually gonna go ahead
02:05 - and i'm gonna start sharing my screen
02:13 - okay so again you're joining us with our
02:15 - cs 101 live stream series
02:18 - and if you just go down the syllabus
02:20 - page you'll see that we
02:21 - are we're passing all the things we've
02:23 - done before last week you joined us for
02:25 - lists
02:26 - and then this week you're joining us for
02:29 - loops so you're going to want to go over
02:30 - to this section that's
02:31 - cs 101 loops and you can see we have two
02:34 - lessons and an article
02:36 - so we're gonna start off with that first
02:38 - loops lesson
02:39 - so again i'll just give you guys a
02:41 - little bit just to get there
02:54 - okay so
02:57 - so i already have my loops open over
02:59 - here
03:00 - so let's start talking about loops and
03:03 - what better place to start than
03:05 - introduction to loops how do we use code
03:08 - to tell
03:08 - a computer this create a variable and
03:11 - call a function 15 times so
03:15 - what we know from what we've done so far
03:17 - is that this looks like create a
03:18 - variable
03:19 - call a function create a variable call a
03:22 - function
03:22 - create a variable call a function and
03:25 - you can already see that it's starting
03:26 - to get
03:26 - very repetitive fast so
03:29 - it takes a long time we can make a bunch
03:32 - of mistakes maybe the third time we call
03:34 - the function
03:35 - we spell the function name wrong and
03:37 - then we have an error
03:38 - so again it's not the most efficient way
03:41 - to do things in programming
03:44 - so instead we can have our instructions
03:48 - do something like this
03:49 - repeat the following 15 times create a
03:51 - variable
03:52 - call a function so one this took a lot
03:55 - less code
03:56 - so you can see that in our top piece
03:58 - over here we only did the create a
04:00 - variable call function three times
04:02 - and that took up six lines of code but
04:05 - here
04:06 - all 15 and all 15 times we have to
04:09 - repeat the instructions
04:10 - it's done in three lines of code so it's
04:13 - super
04:14 - super helpful and that structure
04:17 - is a loop and with a loop it's just
04:20 - giving us the ability to repeat
04:21 - a block of code a certain number of
04:24 - times
04:26 - okay so today we're going to be covering
04:29 - three
04:29 - types of loops for loops while loops
04:33 - and 4-h loops and again
04:37 - i hope you joined us in the previous
04:39 - lessons because we're going to use a lot
04:40 - of those concepts that we've gone over
04:42 - before
04:43 - during this lesson so variables
04:46 - operators calling functions and working
04:48 - with lists
04:50 - okay so let's take a look at this nice
04:52 - example that we have in front of us
04:55 - we're going to create a pattern without
04:56 - loops so in the text box
04:59 - we'll repeat the instructions 10 times
05:01 - and then run it
05:03 - so we need to place a pink tile an
05:05 - orange tile
05:06 - and a mint tile so i'll just do that by
05:08 - clicking over here so we have our pink
05:10 - tile
05:11 - orange tile mint tile and you can see as
05:14 - i click it it just appears in this text
05:15 - box over here
05:16 - so that's one and we have to do this
05:18 - nine more times
05:20 - so pink orange mint pink
05:23 - orange mint you can see that this is
05:25 - already getting very repetitive
05:27 - and that since i'm talking i've already
05:29 - lost count do you see that this isn't
05:31 - the most efficient way so i'm just going
05:33 - to keep going
05:34 - and if you're thinking to yourself yes i
05:36 - understand you have to place the pink
05:37 - tile
05:38 - the orange tile and the mint tile we get
05:40 - it then you're ready for loops
05:43 - so i'm gonna run this code and we're
05:45 - gonna hope that i got all of it done
05:48 - ah and you see we still didn't even get
05:50 - there okay here we go
05:52 - pink orange mint pink orange mint we'll
05:55 - run that one more time
05:57 - and you can see we finally covered all
06:00 - the things in our tile
06:01 - and that took a while and it was kind of
06:02 - clunky thank you jamie
06:07 - so we're going to move on to the next
06:08 - piece and we're going to learn how we
06:09 - can do this again
06:10 - in a much more efficient way and to
06:13 - start we'll learn about
06:14 - for loops so with for loops you can
06:18 - think of them as
06:19 - count controlled loops when we create a
06:21 - for loop
06:22 - we know from the get go exactly how many
06:25 - times it's going to repeat
06:27 - the instructions contained within its
06:29 - body
06:30 - so let's take a look at an example over
06:32 - here we can see it's the same example
06:34 - as we saw before but instead it says 4
06:37 - 10 times
06:38 - place the pink tile the orange tile and
06:41 - the mint
06:42 - and so you can see it's the same thing
06:44 - over and over we're still using that
06:46 - place tile function so
06:48 - when our computer receives this program
06:51 - we have our counter
06:52 - set to zero and then it executes the
06:55 - instructions in the body of the loop
06:57 - and after each iteration which each
07:00 - iteration is just all the instructions
07:02 - so once it places all those tiles
07:05 - then it'll go on to the next iteration
07:07 - and start repeating again
07:09 - and our counter increases by one
07:13 - and then that process is going to
07:14 - continue to repeat
07:16 - until our counter is 10 and then all 10
07:19 - iterations are complete and our loop
07:21 - will stop
07:22 - so again like i mentioned before for
07:25 - loops are useful when you know
07:27 - how many times you want a program to
07:29 - repeat the task
07:31 - so for example printing three copies of
07:34 - a document
07:34 - or inserting eight rows into a table for
07:37 - loops are good when you know what you
07:39 - want
07:40 - so let's go over to this nice example
07:42 - over here we're going to do the same
07:44 - thing
07:45 - before but we're going to try and use a
07:48 - for loop to accomplish it so let's take
07:51 - a look
07:52 - we need to insert our three instructions
07:54 - so we're going to place our pink tile
07:56 - our orange tile and our mint tile and
07:59 - then we're going to select the number of
08:01 - times the loop should run
08:03 - so when i click over here it says loop 4
08:06 - and then i get to choose an
08:07 - option so i'm going to have it run
08:10 - 10 times because that's going to place
08:13 - all 30 tiles down
08:15 - so i'm gonna hit this and let's run it
08:18 - and see what happens so we can see that
08:20 - once i start running it we see that
08:22 - pink orange a mint pink orange mint all
08:26 - running together
08:27 - um and then that covers the board and
08:30 - that took
08:30 - so much less time than what we did
08:33 - previously
08:34 - where we were clicking each of the
08:35 - instructions so many times and then we
08:37 - still
08:37 - didn't complete the whole board
08:41 - you can also imagine that in this case
08:43 - alex just had to click on things imagine
08:45 - if you had to like re-type
08:46 - every single one of the lines and that
08:48 - would be really
08:50 - worse also imagine if there was more
08:53 - than just three instructions you're
08:55 - trying to go
08:55 - if you were trying to repeat 10 10 lines
08:58 - of code like
08:59 - 15 times that's a lot of code you have
09:01 - to write yeah
09:04 - okay so now that we have a little bit of
09:07 - an understanding on four loops we're
09:08 - gonna move on to our next loop
09:11 - and that's while loops so let's think
09:14 - about approaching our
09:16 - tile placing another way we don't know
09:18 - how many tiles we need to place
09:21 - but we know when we need to stop placing
09:23 - tiles
09:24 - another way you can think of it is if
09:26 - you are ever filling up a bathtub with
09:29 - water
09:29 - you will have it keep running water
09:31 - until it hits that top point
09:33 - so then you stop it so it doesn't
09:35 - overflow so
09:37 - try to have that concept in mind as we
09:39 - go into while loops
09:41 - we don't always know how long our while
09:43 - loop is going to run
09:44 - but we know when we want it to stop
09:48 - okay and so while loops also kind of
09:51 - combine loops and conditions because
09:54 - we're going to need to place
09:55 - a condition inside our while loop in
09:58 - order for our program to know
10:00 - when to stop running so we have an
10:03 - example over here
10:04 - so while there are still pink tiles
10:06 - available place the pink tile place the
10:08 - orange tile
10:09 - place the mint tile so that's our while
10:12 - loop or
10:13 - condition control blue it repeats a set
10:16 - of instructions while that condition is
10:18 - true
10:19 - so in this case the computer will place
10:21 - tiles while there are still pink tiles
10:23 - available
10:25 - so going further into it in a while loop
10:28 - the computer checks if the condition is
10:30 - satisfied
10:31 - so once that condition is met it
10:34 - executes uh it stops executing the tasks
10:38 - but if it's not met it's going to
10:39 - continue iterating
10:41 - um so again it keeps going and going and
10:44 - there's a slight risk in while loops
10:45 - where you could cause an
10:47 - uh an infinite loop but we'll get into
10:49 - that later
10:50 - so when to use a while loop use it when
10:53 - you know
10:54 - um when a program should stop but you're
10:57 - not quite sure the number of times you
10:59 - need your code to repeat itself
11:03 - okay so let's take a look at this task
11:06 - we have at hand
11:07 - so we're going to do the same tile
11:09 - placing but this time with a while loop
11:12 - so i'm going to place the pink the
11:14 - orange
11:15 - and the mint and then we need to select
11:19 - a condition
11:22 - so we can see we have a few options over
11:24 - here
11:25 - and see we can choose if there are empty
11:28 - slots
11:30 - under 9 tiles are placed under 15 or
11:33 - while the computer is running so what
11:35 - happens if we just click
11:37 - under 15 tiles are placed i'm just i
11:40 - want to see what happens
11:41 - so we run this code and it looks just
11:43 - like it did before
11:44 - and we can see that everything's going
11:46 - in but our while loop
11:48 - stopped and that's because we hit the
11:50 - condition
11:51 - that under 15 tiles are placed once that
11:54 - condition became
11:55 - false then we stopped it stopped running
11:59 - now what we really need to do is use
12:01 - while there are empty slots
12:03 - so let's see what happens we're going to
12:06 - run our code again
12:10 - so you can see now it's going to
12:11 - continue going and it's going to stop
12:15 - right when it hits that final point
12:16 - where there are no more gray
12:18 - top gray tile spaces and every single
12:21 - one of those
12:22 - is already taken up
12:25 - great so again that's the while loop and
12:28 - now we're going to move on to the next
12:30 - one
12:31 - for each loops which i think are always
12:34 - fun um
12:35 - and while we're going into four reach
12:37 - loops this is where you're gonna have to
12:39 - kind of remember all that stuff we
12:40 - talked about with lists
12:42 - um because when we use a for each loop
12:46 - we're actually iterating through a list
12:49 - um so the best way we can think of this
12:51 - is
12:53 - let's take a look at our example again
12:54 - we define a sequence of desired
12:57 - tile colors so that's going to be our
12:59 - list and tell the computer to repeat the
13:02 - instructions
13:02 - for each item in the sequence or the
13:05 - list
13:06 - so let's take a look at this nice
13:08 - example we have over here we have a list
13:10 - it's called festive list
13:11 - it's pink green red pink green
13:14 - red our loop for this would be for each
13:17 - color
13:18 - that's in our festive list we're going
13:20 - to place the tile
13:22 - so what happens when we use a for each
13:24 - loop is it's going to
13:25 - access the element of every single item
13:29 - in a list
13:30 - so each one so this is when you know you
13:33 - don't have to know too much
13:35 - uh you just have to know the size of
13:36 - your list um
13:38 - and your program is going to do the rest
13:42 - so you may have noticed that the program
13:44 - looks a little shorter than the ones we
13:46 - used before
13:47 - that's because we only need to write
13:48 - place list once because the pink green
13:51 - red repetition is already described in
13:53 - the list
13:55 - okay so the sequence we used above was a
13:59 - list
14:00 - but we can use other similar data types
14:02 - the umbrella term for
14:04 - those is collections so we may also call
14:06 - forage loops
14:07 - collection loops so like we
14:11 - been discussing use this loop when you
14:12 - need to perform a task for
14:14 - every item in a list or when the order
14:17 - of things
14:18 - must be maintained in this case in our
14:21 - lights case both were important
14:23 - a tile must be placed for each item in
14:25 - the list and the order of them
14:26 - is essential to the pattern
14:30 - okay so here we go we're going to do
14:32 - this again we're going to place the same
14:34 - 30 tiles as before
14:36 - but this time we're using a for each
14:39 - loop
14:40 - so if we look at our example in front of
14:41 - us we have three
14:43 - lists to look at we have a festive list
14:46 - and
14:46 - inside we have different items it's pink
14:48 - green red pink green red
14:51 - um continuing on continuing on we have
14:53 - our moody list which is
14:55 - blue purple silver and that's just going
14:57 - to repeat a bunch of times
14:58 - and then we have the pastel list that uh
15:01 - we've come to know and love which is
15:03 - pink orange mint
15:04 - pink orange mint um and so my personal
15:07 - favorite
15:09 - right the best one yeah um
15:12 - okay so now let's have this work
15:15 - so we already have the first part of the
15:17 - code ready place tile color
15:20 - loop for each and then we're going to
15:23 - choose
15:23 - what value for each color and festive
15:25 - list in each color in moody list
15:27 - or for each color and pastel list so
15:31 - i'm going to choose pastel list
15:34 - and we're going to run our code so you
15:36 - can see
15:37 - it's everything we already know it's
15:39 - going through every single item in this
15:41 - list
15:42 - so i wonder if i can highlight it yes i
15:44 - can highlight it so every single item
15:46 - in this list it's going to iterate
15:48 - through and it's going to place that
15:50 - tile
15:52 - great um jamie do we have any questions
15:55 - or comments from anyone
15:57 - um i don't think so but if anyone has
15:58 - any questions or comments or if they
16:00 - want to see
16:00 - what either the festive list or the
16:02 - moody list look like maybe we can
16:04 - try those out um yeah
16:07 - i think it's a great idea uh do you want
16:09 - to go with the festive list or the moody
16:11 - list
16:12 - you know i'm feeling a little bit more
16:13 - festive right now than waiting so
16:15 - let's run it so you can see that it's
16:17 - going to perform the same task but it's
16:19 - going to do it with the different color
16:20 - items because that's what the list said
16:23 - so one nice thing is that
16:25 - we can use this with different lists and
16:28 - it's nice in that way because we didn't
16:30 - have to change
16:31 - much of our code we just had to specify
16:34 - which list
16:35 - we need it to iterate through
16:39 - okay so moving right along let's put it
16:42 - all together
16:43 - um and we're going to actually kind of
16:46 - look at what this
16:47 - looks like in python so a lot of things
16:50 - that are going to go on here we need
16:51 - some variables
16:52 - operators data types functions control
16:55 - flow
16:56 - lists and loops okay
16:59 - so below we have a few examples and if
17:02 - you're looking at the syntax and you're
17:04 - very confused
17:05 - don't worry because we're going to go
17:06 - over it in just a moment
17:08 - so i'm going to copy this and i'm going
17:10 - to paste this right into my code
17:12 - so what this is saying um here
17:15 - we'll you know we'll run it first so
17:18 - i'll run this code
17:19 - you can see it's already placing these
17:21 - different things it's a different
17:23 - now we're doing mint orange mint so this
17:25 - one is actually representing a
17:27 - for loop so what it's saying is we're
17:30 - going to have this repeat
17:32 - x number of times and in this case 10
17:34 - times we know exactly how many times
17:36 - it's going to repeat
17:39 - and now let's kind of take a look let's
17:41 - replace this and we do it with a while
17:44 - loop
17:47 - okay so here we go we have our
17:50 - while loop in python so while
17:53 - we have a variable that's less than 10
17:55 - we're going to place
17:56 - orange we're going to place mint then
17:59 - orange then mint
18:00 - and at the last part we're going to
18:02 - increase
18:03 - i by one and again we'll talk about more
18:06 - about why this happens when we get it to
18:08 - it in our lesson
18:09 - but this is just to make sure we don't
18:11 - run into an infinite loop
18:13 - so let's run this code you can see it
18:16 - accomplishes the same thing
18:18 - so that's something to be aware of for
18:20 - loops you can write an equivalent for
18:22 - loop
18:23 - as a while loop it's really kind of up
18:26 - to you what you're trying to go
18:28 - for a for each loop is a little bit
18:29 - different because you need to have some
18:31 - type of collection to iterate through
18:33 - but um whatever you can write as a while
18:36 - loop
18:36 - you can technically in most cases write
18:39 - an equivalent for loop
18:42 - okay so let's just go
18:46 - and take a look at this review a loop is
18:49 - a structure in programming
18:51 - where the instructions are written once
18:53 - but a computer can execute them
18:54 - multiple times each execution
18:57 - of those instructions is called an
18:59 - iteration
19:01 - for loops or count control loops repeat
19:04 - for a specified number of times
19:07 - while loops or condition controlled
19:10 - loops repeat
19:11 - until a condition changes and finally
19:14 - for each loops or
19:15 - collection control loops repeat
19:18 - instructions for each
19:19 - item in a collection okay
19:24 - so now um we're not going to do the
19:27 - example here
19:28 - because this is just letting us play
19:29 - around with it but we are going to go
19:31 - into the next section so i'm going to
19:34 - actually take this out
19:36 - um you could hit the next button if you
19:37 - like but if you're in the catalog time
19:39 - taking a look at this um the syllabus
19:42 - you can actually now go to that
19:44 - second loops lesson i'm gonna open this
19:46 - in a new tab
19:50 - okay
19:52 - great so we're in an introduction and
19:55 - before i move on i'll just check in with
19:56 - jamie again do we have any questions or
19:58 - anyone have any comments about loops so
20:00 - far
20:00 - um so someone had a question
20:04 - i just answered it let me see i might
20:05 - have to scrub oh um
20:07 - pepito suarez um asked what the
20:10 - difference between the first for loop we
20:12 - went over
20:13 - versus the for each loop we went over um
20:15 - okay you wanna like
20:17 - quickly um go over that but yeah
20:20 - sure so the difference is with the for
20:23 - loop
20:23 - we knew exactly how many times we wanted
20:26 - to repeat an
20:27 - instruction and we created the iteration
20:30 - sequence ourself
20:31 - because we specified we want you to
20:33 - start at zero and we want you to end at
20:34 - let's say
20:35 - 10. so we're saying you're going to
20:38 - repeat
20:39 - these instructions 10 times now before
20:42 - each loop is a little bit different
20:44 - that one we're going through a
20:45 - collection kind of like a list
20:48 - so for every item in a list whether that
20:50 - list is
20:52 - 10 items long or 100 items long
20:55 - the same instructions are going to be
20:58 - applied to each element in the list
21:00 - until
21:00 - every single element in that list has
21:03 - been covered
21:06 - that about sums it up what did you say
21:08 - jamie uh i said pretty much the same
21:10 - thing
21:11 - um first for loop was just
21:14 - a certain number of times while the 4-h
21:16 - loop is going through items level
21:17 - analysts until you get to the end
21:19 - awesome and they're both
21:20 - they're both pretty much syntactically
21:22 - similar in python which we'll show
21:24 - which is like a subtle differences and
21:27 - actually you can use a for loop to
21:29 - iterate through
21:30 - a collection so yeah we'll cover that
21:33 - okay so let's actually start looking at
21:37 - these
21:37 - loops in python and we have an example
21:41 - suppose we want to print each item from
21:44 - a list of dog breeds
21:45 - we would need to use the following code
21:47 - snippet so again what we're looking at
21:48 - here
21:49 - is trying to print out every item of a
21:52 - list
21:52 - without loops so what we do is we print
21:55 - dog breeds at index zero then we print
21:58 - it again at index one we printed again
22:00 - index two
22:00 - index three and x four um and you can
22:04 - see that it's not that inefficient
22:05 - because what if we had a list that was a
22:07 - hundred items long
22:09 - would we write a hundred print
22:10 - statements so we can see every item in
22:12 - that list
22:13 - we could but it would take a very long
22:16 - time
22:18 - so luckily as we now know python gives
22:20 - us an
22:21 - easier way to do this by iterating
22:24 - through
22:25 - every item in a list we can use loops
22:28 - so in this example we're probably going
22:31 - to be going through a for
22:33 - each loop because i know that we're
22:34 - going to be iterating through a list
22:37 - so once again in this lesson we'll be
22:40 - learning about
22:40 - loops that let us move through each item
22:42 - in a list
22:44 - loops that keep going until we tell them
22:45 - to stop and then
22:47 - loops that create new lists all right
22:51 - interesting and the loops uh the loops
22:54 - that create new lists called list
22:55 - comprehensions
22:56 - are not something we went over in the
22:57 - previous lesson so it'll be like a new
22:59 - cool yeah those end and they're like
23:01 - definitely my favorite type of for loop
23:02 - person
23:04 - so guys you're getting a surprise
23:06 - edition
23:08 - okay so first let's paste the following
23:10 - code into a script dot pi
23:12 - so i'm just going to follow that so we
23:14 - can see already in script.pi
23:16 - we have a list it's called dog breeds uh
23:18 - we have items french bulldog dalmatian
23:21 - poodle kali and now we're going to
23:25 - print each of these items out and this
23:28 - is using the for
23:29 - each loop um so we'll go over that more
23:32 - in the next one but
23:33 - basically it's so much easier to print
23:36 - those all out we only needed two lines
23:37 - of code to print every item
23:39 - unlike here where we needed five lines
23:42 - of code
23:44 - and again this would change if our list
23:47 - was 30 50 100 items long
23:50 - we would still only need two lines of
23:52 - code these two lines of code right here
23:55 - to print out every item in that list
23:59 - okay so first we're going to go over
24:02 - creating a
24:03 - for loop and so this is going into how
24:06 - to use a
24:07 - for loop for each loop um sometimes this
24:10 - goes back and forth
24:12 - in terms of what it's called it is a for
24:14 - each loop even though it
24:15 - is also technically called a for loop
24:17 - here so we're going to learn how to use
24:19 - a for loop
24:20 - to go through a list of collections
24:24 - okay so for loops let us perform an
24:26 - action on each item in a list
24:28 - using an element of a list is known as
24:30 - iterating as we
24:31 - discussed before but let's actually kind
24:34 - of go into the syntax the python syntax
24:36 - of how we accomplish this
24:39 - so the general way of writing our loop
24:41 - is for
24:42 - a temporary variable
24:45 - in a list
24:49 - do something so there's two keywords
24:51 - that we're actually looking at here
24:53 - one is the four keyword and two is the
24:56 - in
24:56 - keyword so when we say four this kind of
24:59 - lets our
25:00 - program know that we're going to start
25:02 - repeating something for x a number of
25:04 - times
25:05 - then we'll learn about the temporary
25:07 - variable so this temporary variable is
25:10 - almost like a loop control variable
25:12 - it's going to represent each of our
25:14 - iterations
25:15 - and we can use it um we can use it
25:18 - inside the body of our loop
25:20 - and we can use it to kind of grab
25:24 - elements of a list but we'll see that
25:28 - then we have the in keyword and that's
25:30 - going to let our compiler know that
25:32 - we're going to
25:33 - loop through something inside of a list
25:36 - so
25:36 - for our temporary variable
25:39 - in the keyword and then we're going to
25:41 - add in our list variable
25:44 - and then underneath that inside the body
25:46 - of it
25:47 - we're going to perform an action so
25:50 - let's take a closer look and example of
25:52 - this
25:53 - so 4i in dog breeds print i
25:57 - now why did we choose i for a temporary
25:59 - variable
26:00 - well we can actually choose any name for
26:03 - our
26:04 - temporary variables so we can see right
26:06 - under this
26:07 - we see four dog and dog breeds print dog
26:11 - the interesting part is it's going to
26:13 - print the same
26:14 - thing we can name our temporary variable
26:17 - anything
26:18 - dog is a little bit better in this case
26:20 - just because it relates
26:22 - to our list but there's no problem with
26:24 - going with i
26:26 - so one thing to notice that with all
26:28 - these examples the print statement
26:29 - is indented everything in the same level
26:32 - of indentation
26:33 - after the for loop declaration is
26:35 - included in the for loop
26:37 - and run for every indentation if we
26:39 - don't indent
26:40 - we'll get an indentation error
26:43 - okay so let's run this code
26:47 - we can see immediately we get an error
26:50 - indentation error
26:51 - expected an indented block so this comes
26:54 - from line
26:55 - six over here because it's not indented
26:58 - correctly
26:59 - so if we just indent that like that we
27:01 - can see now it's inside of our loop
27:04 - so if i run this now we can see that
27:08 - everything prints so if we look at board
27:10 - games we have settlers of
27:12 - uh katan uh carcassonne
27:16 - power grid and two other ones um
27:19 - so for every item in that list all we're
27:22 - doing is printing that item
27:24 - but now let's write our own for each
27:27 - loop
27:28 - that prints each sport in sport games
27:31 - okay so let's actually give this a try
27:34 - so first i'm going to use that for a
27:36 - keyword
27:37 - and then i'm going to specify my loop
27:39 - control variable
27:41 - so i'm just going to do that in this
27:42 - case they want us to use
27:45 - the they want us to name this value
27:47 - sport
27:48 - then i'm going to use the in keyword
27:51 - that lets us know that we're going to
27:52 - use
27:53 - um a list and in this case we're going
27:56 - to use sport games
27:59 - support games
28:02 - i'll put my colon there and then when i
28:05 - go in you can see that it usually
28:06 - automatically indents it for you because
28:08 - it knows that
28:09 - if we want something to happen inside
28:10 - the loop it needs to be
28:12 - inside the loop okay and all we're going
28:15 - to do
28:15 - is use a print statement so i'm going to
28:17 - print the value of sport
28:20 - so i run this code and now we can see
28:23 - that it
28:24 - went ahead and printed every item in the
28:26 - order that it appears
28:28 - so we saw football football american
28:30 - hockey baseball cricket
28:32 - so the order that it appears in our list
28:34 - is the order
28:35 - that um it was iterated through and
28:37 - printed
28:41 - great so now we're going to talk about
28:43 - using range
28:45 - and so this is a little bit more common
28:46 - to what we saw before with for loops
28:48 - in our um previous exercise where we
28:51 - were working with the tiles
28:53 - this is where we're going to specify how
28:55 - many times we want it to repeat so this
28:58 - time we're not going to use
28:59 - a list to go through it
29:03 - so as i said before we're not always
29:06 - going to be iterating through a specific
29:07 - list we'll just want to do an
29:09 - action multiple times for example if we
29:12 - wanted to print out a
29:13 - warning text three times we would say
29:16 - something
29:16 - like the following so we can see here
29:19 - four i
29:20 - in a list of length three print warning
29:24 - so we had to iterate through
29:27 - a list of length three but we didn't
29:29 - care what was in that list
29:31 - to create these lists of length n we can
29:34 - also use
29:35 - the range function so range
29:39 - another key word to keep in mind takes
29:41 - in a number
29:42 - n as input and returns a list from zero
29:45 - to n minus one what does that mean so if
29:48 - we look at this example here
29:50 - we see zero through five equals range
29:53 - six and now that value of zero through
29:57 - five is the list
29:58 - that contains the values zero one two
30:02 - three four five and jamie can you
30:05 - say why it's starting at zero
30:08 - um so this is basically just it's a
30:10 - python thing it can differ in other
30:11 - languages but python is what we call
30:13 - zero
30:14 - indexed so because of that when
30:17 - you give when you just give range like
30:19 - one specific number so if i do like
30:20 - range seven range six
30:22 - whatever it's going to start at one and
30:24 - then it's actually going to end
30:26 - before the number i specify so for range
30:29 - six
30:30 - since we give the parameter six it's
30:32 - going to go from zero
30:34 - one two three four five and end at five
30:37 - um other programming languages might
30:39 - have might be different they might be
30:41 - indexed at one
30:42 - um so it's important to know like with
30:45 - what
30:46 - depending on what programming language
30:47 - you use to know this because
30:49 - you may have to like change up your for
30:51 - loop or like whenever whatever function
30:53 - you're using depending on if it's zero
30:54 - indexed or one index
30:56 - thank you so and this might be very
30:58 - similar to what we learned
31:00 - in the list last week where indexes in
31:02 - python start at zero
31:04 - so this is coming back to us in our list
31:07 - um so we can actually do that warning
31:10 - program that we tried to before
31:12 - just by writing for i in range and then
31:15 - having our value
31:16 - three inside of our range print warning
31:19 - and that's going to print warning
31:21 - warning warning
31:23 - so let's use our range function of for
31:25 - loop to print out the value of promise
31:27 - which is on line one
31:29 - five times so we're going to try this
31:32 - for i in and now we're going to say what
31:36 - list we're going to use and we're going
31:37 - to use
31:38 - the range function to create this list
31:41 - so i'm going to type in range and it
31:43 - says five times so i'm just going to use
31:46 - five colon and then we're going to go to
31:48 - that next piece
31:49 - and we're going to print premise
31:54 - okay so let's run this code and we can
31:56 - see i will not
31:57 - chew gum in class is printed five times
32:00 - and just to make sure we have an idea of
32:02 - this if i were to just say
32:04 - let's not care about promise what if i
32:06 - just wanted to print i
32:07 - what would happen you can see that it
32:10 - starts at zero it prints zero
32:12 - one 2 3 4.
32:15 - so just try and keep that in mind
32:19 - and you can see how much easier it is
32:20 - let's say i wanted to print out
32:22 - the first 20 numbers you can see that it
32:24 - doesn't matter
32:26 - that i want to print more values or
32:28 - create a
32:29 - larger range it's still just going to
32:31 - take those two lines of code to output
32:33 - this value
32:37 - okay one important note about range
32:39 - which i feel like some people have quite
32:41 - this question on their mind is you can
32:42 - actually specify range to start at a
32:44 - different number than zero you're not
32:45 - always start
32:46 - stuck at starting at zero um and there's
32:49 - also like
32:50 - many different other things you can do
32:51 - with range function um
32:53 - yeah i'm so happy you mentioned that
32:55 - because we're going to do that
32:58 - all right so just like jamie said this
33:00 - means we have to set our
33:01 - uh our values inside our range function
33:04 - a little bit differently
33:05 - so let's say i wanted to start at 10.
33:08 - so instead of starting at index 0 we're
33:10 - going to start at 10.
33:11 - i'd add a comma and then i believe what
33:14 - i would say is where i want it to end
33:15 - next so let's say i wanted to end at 20.
33:18 - let's see what happens if this works or
33:20 - if this breaks things
33:22 - it doesn't so you can see that now it's
33:24 - going to print 10 11
33:25 - 12 13 14 all the way up to 19. so again
33:29 - it's just like jamie said it's our first
33:31 - value is where it starts
33:33 - our second value it's going to end one
33:36 - value before that and that's something
33:38 - that could trip you up when you're first
33:40 - starting with
33:41 - loops so just always remember that
33:43 - that's going to be the case
33:45 - now the one other special thing we'll
33:47 - jump in before moving on to the next
33:49 - piece
33:49 - is we can say what our iteration is so
33:52 - in this case
33:53 - we say 10 and then 11 then 12 because
33:56 - we're only adding 1 to i
33:58 - but by adding one more comma
34:02 - and i believe if i just write let's say
34:04 - 2 let's see
34:05 - what happens will it break it doesn't
34:08 - break it actually works and it's going
34:10 - to
34:11 - print every other iteration so we start
34:14 - at 10
34:15 - then it's going to say plus 2 so our
34:16 - next one's 12 plus 2
34:18 - 14 plus 216 plus 218.
34:22 - um i'm really glad you mentioned that
34:24 - because i think that's just a very fun
34:26 - part of range
34:27 - yeah i like i like when i like use new
34:29 - functions to like look up what all the
34:31 - different parameters you can put in
34:32 - are because they're fun to play around
34:34 - with and arrange a lot of cool different
34:36 - things
34:36 - a lot of cool different things okay
34:43 - oh so here's something we discussed a
34:44 - little bit before um
34:46 - infinite loops these are loops that are
34:48 - problematic because they run
34:50 - forever so in preparation of me knowing
34:53 - that we're going to run this
34:54 - i'm actually going to um get a duplicate
34:58 - tab
34:59 - you'll you'll understand so let's take a
35:02 - look at this example over here we have a
35:04 - list of
35:04 - my favorite numbers and we have five
35:06 - numbers in there
35:07 - for each value in my favorite numbers
35:11 - we're gonna append one when we run this
35:14 - code
35:15 - it's going to be never ending
35:18 - because at what point do we stop as our
35:21 - as we append items to our list
35:25 - that list gets bigger so there's never a
35:27 - point where a loop can stop
35:29 - so it's going to run infinitely this
35:33 - is a problem it's dangerous for your
35:35 - code a program that hits an
35:36 - infinite loop often becomes completely
35:39 - unusable
35:40 - and so one the best course of action is
35:42 - to never write an infinite loop
35:44 - but being learners sometimes it happens
35:46 - and we're going to make that mistake
35:48 - if we accidentally stumble into an
35:49 - infinite loop while developing on our
35:51 - own machine
35:52 - we can end it by hitting ctrl c to
35:54 - terminate the program because that's the
35:56 - only solution at that point
35:58 - now if you're writing code in our online
36:00 - editor like we are here
36:01 - we're going to have to refresh the page
36:05 - so let's take a look we have two lists
36:07 - of students students period a
36:09 - student's period b let's write a for
36:12 - loop that goes through
36:13 - each student in student period a and
36:16 - adds it to the end of
36:17 - students period b okay let's give this a
36:20 - try
36:20 - so i'm going to write 4 student
36:23 - and students period
36:27 - a we're going to say
36:31 - an appendix okay then we're going to say
36:34 - students
36:36 - period b
36:39 - dot append student
36:44 - we'll run that and let's kind of see
36:46 - what this really did
36:48 - so we're going to go ahead and we're
36:50 - going to print student
36:55 - so alex brianna sherry and danielle
36:58 - those four items are actually
37:00 - now in students period b so if i
37:03 - actually go really quick
37:04 - and let's say we'll print students
37:08 - period b
37:12 - we can see now our students period b
37:14 - contains all of those students because
37:15 - we appended them
37:16 - into that and i believe a pen we learned
37:18 - about in the previous lesson on lists
37:22 - but let's say we made a typo
37:25 - and instead of using students period b
37:28 - we actually appended it to students
37:30 - period
37:30 - a i'm going to copy this real quick
37:34 - what happens now so we're going through
37:36 - every item in students period a
37:38 - and we're going to append student to
37:40 - student period a so this
37:42 - when we run it is not going to be happy
37:46 - no we're just going to be waiting here
37:50 - because there's no way this will ever
37:52 - end so we can't even process it so you
37:54 - can see that
37:55 - we're just having issues here so it's
37:58 - not going to happen
37:59 - you can see that it disconnected
38:00 - reconnected and we still have that
38:02 - loading bar happening
38:04 - so what i'm going to do is i'm just
38:05 - going to x that out
38:07 - and i copied our code so now we can go
38:11 - back in
38:12 - and fix our code so that we fix this
38:15 - infinite loop awesome
38:20 - okay so i do have to run all these again
38:22 - [Music]
38:23 - so there we go we fixed our infinite
38:26 - loop and everything's fixed
38:29 - so i'm actually going to skip ahead to
38:31 - while loops for now but definitely feel
38:33 - free if you're going through this on
38:35 - your own
38:35 - uh take a look at break and continue
38:37 - they're super useful
38:38 - inside our loops but i want to go make
38:41 - sure that we have enough time to go
38:42 - through some of our challenge projects
38:44 - so now let's take a look at how we can
38:46 - use a while loop
38:47 - now we already remember that using a
38:49 - while loop it's condition
38:51 - controlled so as long as something's
38:54 - true
38:54 - we're going to continue repeating the
38:56 - content of the code
38:58 - well let's take a look and we can still
39:02 - use while loops iterate through lists so
39:04 - we'll see this example here we have our
39:06 - dog breeds list
39:08 - we create an index value
39:11 - and while our index value is smaller
39:16 - than the length of dog breed and our
39:18 - length for this is five
39:20 - we're going to print the value at that
39:23 - index
39:24 - and we're going to increase index by one
39:26 - and the reason we
39:27 - increase index by one is to prevent the
39:30 - while loop
39:30 - if we don't use that then we're always
39:33 - going to
39:34 - have a value an index that's smaller
39:36 - than the length of dog reads so there's
39:38 - never going to be a stopping point for a
39:39 - while loop
39:40 - we're just going to have to refresh our
39:42 - page again
39:43 - so every time the condition of the while
39:45 - loop in this case indexes less than
39:47 - length of dog breeds is satisfied the
39:49 - code
39:49 - inside the while loops run okay
39:53 - you are adding students to a poetry
39:55 - class the size of which is capped at six
39:57 - while the length of students in poetry
39:59 - list is less than six
40:01 - use pop to take a student off of the all
40:04 - students list
40:05 - and add it to the students in poetry
40:07 - list so if you remember the dot pop
40:09 - function it
40:10 - just takes off a value from a list so
40:12 - we'll see this in action
40:14 - so let's see so while
40:18 - the length of students
40:22 - in poetry is less than
40:26 - six what we're going to do
40:29 - is we're going to say students
40:33 - in poetry dot append all students
40:39 - dot pop
40:43 - and at the end i do just want to print
40:46 - this
40:46 - uh students
40:50 - in poetry
40:54 - and i also want to print out all
40:55 - students so we'll we'll take a look at
40:57 - it all
41:04 - so
41:07 - there we go so i'm going to run this
41:08 - code
41:10 - okay so we're just seeing the output
41:13 - here
41:14 - so the first thing and i'm going to run
41:16 - this again just so we can kind of zero
41:18 - in on it
41:19 - we'll print students in poetry so who
41:21 - was added
41:22 - loki arias obi alexa minerva and dora
41:27 - so these were the students that were
41:29 - appended to it
41:30 - now let's take a look at all students
41:36 - now when we look at all students it's
41:37 - alex brianna sherry and danielle
41:40 - because when we use dot pop what happens
41:42 - is it removes the last
41:43 - value from the list so
41:47 - basically what we did was we went
41:49 - through all
41:50 - we went through um
41:56 - what we did is while the length of our
41:58 - poetry class was less than six
42:01 - we added the last value
42:05 - of our all students list so the last
42:08 - element so the first one would be loki
42:10 - we appended it to students in poetry
42:13 - while removing that element from all
42:16 - students
42:18 - so we kind of did a big switcheroo
42:23 - does that make sense
42:28 - awesome yeah let's see if anyone has any
42:30 - questions about that
42:32 - in the chat awesome so in the meantime
42:34 - we're actually going to
42:36 - switch on over um we're going to leave
42:38 - this for a bit if we have more time at
42:39 - the end we can come back to this lesson
42:41 - but i do really want to go over all
42:43 - those challenges with you
42:46 - okay so i'm going to x out and we're in
42:48 - cs 101 loops and we're going to take a
42:50 - look at this article that says
42:52 - loops code challenges
42:59 - okay so our first challenge
43:02 - is to create a function named divisible
43:05 - by 10
43:06 - that takes a list of numbers named nums
43:09 - as a parameter and we're going to return
43:11 - the
43:12 - count of how many numbers in the list
43:14 - are divisible by 10.
43:17 - so first we'll write out our function so
43:20 - def
43:24 - divisible
43:26 - 10 and our parameter is going to be nums
43:31 - okay so what we're going to do is we
43:34 - have this
43:35 - list and we'll see it here
43:38 - um in this case we're going to look at
43:40 - 10 25 30 35
43:42 - 40. we're going to go through each
43:44 - element in that list
43:45 - and we're going to return the number of
43:47 - times
43:48 - we have an element that's divisible by
43:50 - 10.
43:51 - so what i want to do here is i'm going
43:54 - to use the for
43:54 - each flue so 4i
43:58 - in nums so that's how we're going to
44:00 - iterate through
44:01 - each value in our list
44:07 - we're going to check if it's divisible
44:09 - by 10.
44:11 - so if i modulo 10
44:16 - equals zero also just for anyone who
44:19 - might not know what modulo is
44:20 - um the percent sign it's really cool
44:24 - basically what it does is it just
44:25 - um checks the remainder you have when
44:27 - you divide that number
44:29 - by 10. so if it was 11 mod 10 it would
44:32 - be equal to 1.
44:33 - so we're checking for numbers that are
44:34 - divisible by 10 that wouldn't have a
44:36 - remainder
44:37 - exactly thank you jamie so if our value
44:40 - is divisible by 10
44:42 - we want to add to count but that means
44:44 - we need to create a count variable
44:46 - so before we even go into our for loop
44:49 - the first thing i want to do in this
44:50 - function
44:51 - is declare a variable called count and
44:53 - set it equal to zero
44:55 - then we'll loop through each value in
44:57 - nums
44:58 - if the element is divisible by 10
45:03 - we're going to increase the value of
45:04 - count by one
45:08 - and then finally outside of the for loop
45:11 - once we've iterated through
45:12 - every element we're going to return the
45:14 - value of count
45:19 - so let's go ahead we'll run this code
45:22 - okay so it returns three and let's see
45:26 - if we check our answer
45:27 - this is correct it's correct
45:31 - with the clapping hands i love the
45:33 - clapping hands
45:34 - so again um we'll just go through this
45:36 - one more time so our first value was
45:38 - 20 and since it's divisible by 10
45:42 - we increase count by one then we go back
45:45 - to the top of our code
45:46 - we go back to the top of our loop we
45:48 - check is 25 divisible by 10
45:51 - it's not we ignore it now we're at 30 30
45:54 - is divisible by 10
45:56 - increase our count two and then we are
45:59 - going to go ahead to the next one 35
46:01 - not divisible by 10 we ignore it then we
46:04 - have 40
46:05 - our last value now our count uh
46:07 - increases to three
46:09 - and then since that's the last value
46:12 - return the value of count
46:14 - and that's how we solve this yeah i
46:17 - think uh another um good practice when
46:18 - you do like little challenges like these
46:20 - is
46:21 - you can write your own test cases to
46:22 - test like any edge cases or
46:25 - for instance uh like all these numbers
46:26 - that we're testing against are all
46:28 - um oh my god not floats uh what's the
46:31 - other thing called
46:32 - double and oh and started um
46:35 - so we might want to test you know if we
46:37 - did 20.0 versus 20 like will that work
46:40 - um you might want to test um i don't
46:43 - know
46:43 - like different you know kinds of numbers
46:45 - because all these are like two-digit
46:46 - numbers
46:47 - um yeah definitely like something to
46:49 - consider when you're doing these little
46:51 - code challenges
46:52 - um so that's actually a great point so i
46:54 - was curious so but we turned our 20
46:57 - um from an in to a float just by adding
47:00 - that
47:00 - decimal point and it still returns the
47:02 - same value
47:03 - and the nice thing is we can increase
47:05 - this list there's nothing that's
47:07 - stopping us so i'd say 100
47:09 - 234
47:11 - [Music]
47:12 - 247
47:13 - [Music]
47:16 - 190 it still runs the same code you can
47:20 - see that we don't have to do too much
47:22 - more
47:22 - and now it returns six
47:25 - okay so now let's go on to our next
47:29 - coding challenge
47:30 - delete starting even numbers
47:33 - write a function called delete starting
47:35 - events that has a parameter named list
47:38 - lst the function should remove elements
47:41 - from the front of
47:42 - lst until the front of the list is not
47:46 - even the function should then return lst
47:50 - and let's take a look at an example so
47:52 - if our list was
47:53 - 4 8 10 11 12 15
47:57 - and then we called delete starting evens
47:59 - with it
48:00 - it should return 11 12 and 15.
48:04 - now the reason for this is we're going
48:05 - to delete four we delete eight we delete
48:07 - 10 because it's an even number
48:11 - so make sure your function works even if
48:15 - every element in the list is even okay
48:18 - so let's give this a try so it's def
48:22 - delete starting
48:24 - [Music]
48:26 - even evens it's going to
48:30 - accept lst okay
48:33 - so one thing that kind of struck out to
48:35 - me is the word
48:36 - until it will remove elements from
48:39 - the front of the list until the front of
48:42 - the list is not even to me that sounds
48:44 - like a condition
48:45 - so for this one i want to go through it
48:48 - using
48:48 - a while loop okay
48:53 - so while and we're going to create that
48:55 - condition
48:56 - let's see lst
48:59 - well it's first index right
49:04 - um divided by well modulo
49:08 - 2 equals zero so this is how we're going
49:10 - to check that it's even
49:14 - so while index zero
49:18 - actually nope we want to stop when it's
49:19 - not even
49:21 - so while the first element of our list
49:23 - is not
49:24 - an even value what are we going to do
49:28 - so what this is going to involve is
49:31 - changing our
49:32 - list value lst so what i'm going to say
49:35 - is lst equals
49:38 - lst so you might remember this a little
49:41 - bit from
49:42 - uh last week when we were talking about
49:44 - sub um splicing
49:46 - or getting sub values from a list
49:52 - okay so what this means
49:56 - is we're changing our value of list to
49:59 - include
49:59 - every single value except
50:03 - the one at index zero right
50:06 - so one this represents the first index
50:09 - then this kind of this uh colon here
50:12 - kind of represents um until
50:15 - and then it's blank here because we're
50:16 - going to say until the end of the list
50:20 - okay so that's what we're going to do
50:24 - and now let's see what happens at the
50:26 - end
50:27 - we return list so to check this out
50:30 - let's
50:30 - take a look at this first example here
50:33 - let's run this code
50:38 - okay
50:40 - [Music]
50:48 - i think it was supposed to be oh i'm
50:50 - sorry i was
50:52 - we were supposed to do equals so while
50:54 - the first element
50:57 - is an even number my apologies for that
50:59 - so while
51:00 - our first element is an even number
51:04 - because when we use modulo 2 the
51:06 - remainder is zero we're going to return
51:08 - list equals list at the first
51:12 - at element at index one and beyond and
51:14 - again since
51:15 - we're looking at zero based indexing it
51:17 - just removes that first value
51:20 - okay so here we go we have 11 12 and 15.
51:24 - now let's make sure this one works over
51:26 - here
51:27 - and i'm gonna just spoil you guys and
51:29 - say that it's not gonna work
51:32 - we have an index out of bounds error and
51:34 - that's because
51:36 - at one point we delete every single
51:38 - value in this
51:40 - second list here so 4 8 10 so we just
51:43 - kept deleting it deleting it deleting it
51:46 - so once it hit that fourth iteration
51:50 - and it goes to reach for the index at
51:52 - zero there's nothing there
51:54 - so that causes an error so we need to
51:57 - add
51:58 - one additional condition before we check
52:01 - if um there's something at the zeroth
52:03 - index
52:05 - so this is one we're going to use um it
52:07 - is
52:08 - the length at lst
52:14 - is greater than zero
52:19 - yeah and if any of you watched the uh
52:21 - control flow
52:22 - um live streaming a couple weeks ago
52:24 - this is kind of similar to that where
52:25 - it's
52:25 - um we talked about how you might have
52:27 - like multiple conditions
52:29 - in like within um like in this case in
52:32 - those cases it was like an if or an if
52:34 - statement but in this case it's a while
52:35 - statement
52:36 - um so that way it will only go into the
52:37 - while statement if both of these
52:39 - conditions are true
52:40 - so that will avoid this error that we
52:42 - just ran into
52:43 - exactly so that was the problem we ran
52:46 - into
52:47 - and so now what we're going to do is
52:49 - while the length of the list is greater
52:51 - than zero
52:53 - and the first value in our list is an
52:55 - even number
52:56 - we're gonna run that code so this should
52:59 - stop it from giving
53:00 - us an error because once we see that the
53:02 - length of our list
53:04 - is zero or once it's zero it's going to
53:07 - say okay forget it we're going to return
53:09 - that value and let's see if running this
53:11 - works okay now we see it just returned
53:14 - an
53:15 - empty list so now we know that we're
53:17 - working with the edge case that
53:18 - we might have a list that's all even
53:21 - values
53:25 - um also uh giannis brought up a great
53:27 - point in the chat
53:28 - um he said so where you put the uh
53:32 - lst equals lst like where you splice the
53:34 - list yeah
53:35 - you could also decide to like delete the
53:37 - item in the list that you're currently
53:38 - on
53:38 - using the delete function there's also i
53:41 - really like this code challenge there's
53:42 - also a lot of different ways to do it
53:43 - you could
53:43 - technically do it using a for loop as
53:45 - well um it might be more difficult with
53:47 - a for loop
53:48 - loop from the beginning and once you get
53:51 - to
53:52 - um are you trying to get to an odd
53:54 - number even i think once you get to an
53:55 - odd number
53:56 - yeah then like stop the loop um there
53:58 - are definitely a lot of different ways
53:59 - you can do this
54:00 - and um a lot of times when i have coding
54:02 - challenges like these i like to
54:04 - just like maybe write out on paper like
54:06 - think in my head like okay what am i
54:08 - doing at each point in this like
54:10 - little algorithm and like how can i do
54:12 - how can i translate this to a python
54:14 - code
54:15 - yeah that's i totally agree with that
54:17 - always write down your plan
54:19 - um and it makes coding so much easier
54:22 - and that's the nice thing about loops
54:23 - like we discussed before
54:25 - in a lot of cases they can be
54:26 - interchangeable
54:28 - okay so we have about five minutes left
54:32 - so let's see if we can get through this
54:33 - final code challenge
54:36 - create a function named reverse list
54:39 - that takes
54:40 - two lists of the same size as parameters
54:43 - and we're going to name those parameters
54:44 - lst1 and lsd2 the function
54:48 - should return true if list 1
54:51 - is the same as list 2 reversed
54:55 - otherwise we'll return false so looking
54:58 - at this example
54:59 - if we send in a list that has a value 1
55:02 - 2
55:03 - 3 it should match the value three to one
55:06 - it's the first element matches the last
55:09 - the middle matches middle
55:11 - and then the last element of the first
55:12 - list matches the first element
55:14 - of the second list okay
55:17 - so let's get into this so we'll create
55:20 - this
55:21 - first so it is def
55:24 - reversed list
55:30 - so our best first list um and we're
55:33 - going to take in the front with lst1
55:36 - lst2
55:38 - so because we're working with two lists
55:40 - um i kind of don't want to use just
55:43 - a for each loop or i'm iterating through
55:45 - it i think i'm going to use
55:47 - a just our normal for loop where we're
55:50 - going to define that range
55:53 - let's see 4i in range
55:57 - and what i'm going to do is i want this
55:59 - to start at 0
56:00 - and go to probably the length
56:04 - of one of the lists and because it
56:06 - already said we're assuming that
56:08 - the parameters will always have even um
56:12 - sizes that we don't have to worry too
56:15 - much of that so i'm just going to say
56:16 - length of lst1
56:22 - so just to get you guys give you guys an
56:23 - idea of what we're working
56:25 - with i'm just going to print let's see
56:29 - lc1
56:34 - okay so i'm going to take this bit of
56:37 - code here just because i want to i want
56:39 - to call the function
56:40 - uh without returning anything for a bit
56:42 - so we'll run this code
56:44 - so we can see it takes out one two three
56:47 - because we used i
56:49 - but what about if we're trying to use
56:51 - lst2 what happens when i run this
56:54 - well it gives us three two one but what
56:57 - i really want is i want it to almost
56:58 - flip it i want that last value to be
57:01 - printed first
57:02 - but how do we go through a list in
57:04 - reverse
57:05 - now i'm not sure if you know this but we
57:08 - can actually put in
57:09 - negative index values
57:12 - so index at
57:15 - negative one so i'm not going to
57:19 - do this inside the for loop actually
57:21 - changing my mind
57:22 - i'm gonna do it right outside the for
57:24 - loop
57:25 - and we'll just uncomment this so what
57:28 - happens if i try to print this value
57:31 - expected oh i think it's because you
57:33 - have the for loop and nothing
57:35 - um oh below it you can write it's coming
57:38 - up
57:39 - let's take that out so we can see that
57:41 - we're now getting that last
57:42 - value of one here because i use negative
57:45 - one
57:45 - as the index value i can do this so at
57:48 - negative two
57:49 - you can see it's two negative three
57:52 - we can run that and now what happens if
57:56 - i try negative 4
57:58 - we're going to get an error because it's
58:00 - index out of range
58:01 - so again just keep that in mind so now
58:03 - that we know that we can kind of use
58:05 - negative values to help us out
58:07 - how can we use that to help us in our
58:09 - for loop
58:11 - so before we were using i right to print
58:14 - out
58:14 - each value of lst1 but now i want to
58:18 - switch this to lst2
58:21 - but i want to use something about
58:23 - something um
58:25 - with this negative value so we know that
58:28 - if we use negative 1 we can start
58:31 - counting backwards
58:32 - just like we did before now what if we
58:35 - decrease it by
58:36 - i so if we took the value of negative 1
58:40 - minus i what do we get
58:43 - 1 2 3 which is our loop in reverse
58:46 - so if we look at an example of this in
58:48 - our first one
58:50 - alex can you uh zoom in potentially
58:52 - because someone just uh
58:53 - asked zoom in for visibility definitely
58:57 - i hope this helps a little bit more yeah
58:59 - thank you so much
59:00 - cool of course um so we're taking a look
59:04 - at this so in our first one i is zero
59:07 - negative one minus zero is negative one
59:10 - list two at negative one
59:14 - is this value one and so then in the
59:16 - next one
59:17 - our in the next iteration i has a value
59:20 - of 1
59:21 - negative 1 minus 1 is negative 2.
59:24 - lst 2 at index negative 2 is 2.
59:28 - so now that we know how we can get those
59:30 - values we're going to use
59:32 - a conditional so let's see
59:35 - so if lst1
59:39 - at i is not equal
59:43 - to lst2 at negative 1
59:48 - minus i at that index just like we
59:50 - discussed before
59:52 - it's not equal we know it's false so
59:54 - we're just going to return
59:56 - false and if we get through that whole
59:59 - loop and we never
60:00 - run into a case where they're not equal
60:02 - then we know that
60:03 - they're equal and we'll just return true
60:07 - okay so i'm going to take this out and
60:09 - we're going to try
60:10 - and see if this works
60:14 - okay so we're going to run this
60:18 - okay so our first value is true one two
60:21 - three
60:22 - matches three two one in reverse
60:25 - now let's try that over here where we
60:27 - know looking at this 153 does not equal
60:30 - three to one run it and now it's false
60:34 - yay i'll check our answer and we got the
60:37 - clapping and
60:40 - everyone should clap for themselves
60:41 - because that's pretty awesome
60:44 - so it is two o'clock so we are gonna
60:46 - have to end this
60:47 - but you should definitely join us next
60:49 - tuesday for another
60:51 - um cs 101 live course i believe we'll be
60:55 - going over strings
60:57 - so it's going to be really fun and we
60:59 - look forward to seeing you there
61:00 - definitely check out our events page
61:02 - where you can register for it and you'll
61:04 - get an email that reminds you when we're
61:06 - about to start our stream
61:07 - all right thank you again jamie um thank
61:10 - you everyone for joining
61:11 - and we hope you have a great rest of
61:13 - your day yeah thank you so much for all
61:14 - the great questions and wonderful
61:16 - comments in the chat
61:17 - um hope to see you a lot of you at
61:19 - future live streams

Cleaned transcript:

loading okay there we go hi everyone hey everyone hope you're all doing well we'll wait a few minutes before we start everything if you're in the chat just let us know where you're coming from so i'm alex destassi i'm a curriculum developer with codecademy i'm jamie rich i'm also a co a curriculum developer at codecademy and today you're joining us with our back to school campaign where we're gonna go over python loops so we'll wait a little bit longer and then we'll just get into it what our plan for today is is first we're going to go and we're going to talk about the concept of loops and just kind of get an understanding about what they are and the different kinds of loops that we can use then we'll jump over to see how we can use each of these loops in python and then once we get comfortable with that we'll move on and we'll do some cool code challenges together where we'll put our new knowledge of python loops to use yeah and i am also going to be answering any questions in the chat and uh explaining the concepts along with alex we're all really excited okay again hi everyone who's joining in i love seeing all the different places everyone's from so it's really cool all right so i'm actually gonna go ahead and i'm gonna start sharing my screen okay so again you're joining us with our cs 101 live stream series and if you just go down the syllabus page you'll see that we are we're passing all the things we've done before last week you joined us for lists and then this week you're joining us for loops so you're going to want to go over to this section that's cs 101 loops and you can see we have two lessons and an article so we're gonna start off with that first loops lesson so again i'll just give you guys a little bit just to get there okay so so i already have my loops open over here so let's start talking about loops and what better place to start than introduction to loops how do we use code to tell a computer this create a variable and call a function 15 times so what we know from what we've done so far is that this looks like create a variable call a function create a variable call a function create a variable call a function and you can already see that it's starting to get very repetitive fast so it takes a long time we can make a bunch of mistakes maybe the third time we call the function we spell the function name wrong and then we have an error so again it's not the most efficient way to do things in programming so instead we can have our instructions do something like this repeat the following 15 times create a variable call a function so one this took a lot less code so you can see that in our top piece over here we only did the create a variable call function three times and that took up six lines of code but here all 15 and all 15 times we have to repeat the instructions it's done in three lines of code so it's super super helpful and that structure is a loop and with a loop it's just giving us the ability to repeat a block of code a certain number of times okay so today we're going to be covering three types of loops for loops while loops and 4h loops and again i hope you joined us in the previous lessons because we're going to use a lot of those concepts that we've gone over before during this lesson so variables operators calling functions and working with lists okay so let's take a look at this nice example that we have in front of us we're going to create a pattern without loops so in the text box we'll repeat the instructions 10 times and then run it so we need to place a pink tile an orange tile and a mint tile so i'll just do that by clicking over here so we have our pink tile orange tile mint tile and you can see as i click it it just appears in this text box over here so that's one and we have to do this nine more times so pink orange mint pink orange mint you can see that this is already getting very repetitive and that since i'm talking i've already lost count do you see that this isn't the most efficient way so i'm just going to keep going and if you're thinking to yourself yes i understand you have to place the pink tile the orange tile and the mint tile we get it then you're ready for loops so i'm gonna run this code and we're gonna hope that i got all of it done ah and you see we still didn't even get there okay here we go pink orange mint pink orange mint we'll run that one more time and you can see we finally covered all the things in our tile and that took a while and it was kind of clunky thank you jamie so we're going to move on to the next piece and we're going to learn how we can do this again in a much more efficient way and to start we'll learn about for loops so with for loops you can think of them as count controlled loops when we create a for loop we know from the get go exactly how many times it's going to repeat the instructions contained within its body so let's take a look at an example over here we can see it's the same example as we saw before but instead it says 4 10 times place the pink tile the orange tile and the mint and so you can see it's the same thing over and over we're still using that place tile function so when our computer receives this program we have our counter set to zero and then it executes the instructions in the body of the loop and after each iteration which each iteration is just all the instructions so once it places all those tiles then it'll go on to the next iteration and start repeating again and our counter increases by one and then that process is going to continue to repeat until our counter is 10 and then all 10 iterations are complete and our loop will stop so again like i mentioned before for loops are useful when you know how many times you want a program to repeat the task so for example printing three copies of a document or inserting eight rows into a table for loops are good when you know what you want so let's go over to this nice example over here we're going to do the same thing before but we're going to try and use a for loop to accomplish it so let's take a look we need to insert our three instructions so we're going to place our pink tile our orange tile and our mint tile and then we're going to select the number of times the loop should run so when i click over here it says loop 4 and then i get to choose an option so i'm going to have it run 10 times because that's going to place all 30 tiles down so i'm gonna hit this and let's run it and see what happens so we can see that once i start running it we see that pink orange a mint pink orange mint all running together um and then that covers the board and that took so much less time than what we did previously where we were clicking each of the instructions so many times and then we still didn't complete the whole board you can also imagine that in this case alex just had to click on things imagine if you had to like retype every single one of the lines and that would be really worse also imagine if there was more than just three instructions you're trying to go if you were trying to repeat 10 10 lines of code like 15 times that's a lot of code you have to write yeah okay so now that we have a little bit of an understanding on four loops we're gonna move on to our next loop and that's while loops so let's think about approaching our tile placing another way we don't know how many tiles we need to place but we know when we need to stop placing tiles another way you can think of it is if you are ever filling up a bathtub with water you will have it keep running water until it hits that top point so then you stop it so it doesn't overflow so try to have that concept in mind as we go into while loops we don't always know how long our while loop is going to run but we know when we want it to stop okay and so while loops also kind of combine loops and conditions because we're going to need to place a condition inside our while loop in order for our program to know when to stop running so we have an example over here so while there are still pink tiles available place the pink tile place the orange tile place the mint tile so that's our while loop or condition control blue it repeats a set of instructions while that condition is true so in this case the computer will place tiles while there are still pink tiles available so going further into it in a while loop the computer checks if the condition is satisfied so once that condition is met it executes uh it stops executing the tasks but if it's not met it's going to continue iterating um so again it keeps going and going and there's a slight risk in while loops where you could cause an uh an infinite loop but we'll get into that later so when to use a while loop use it when you know um when a program should stop but you're not quite sure the number of times you need your code to repeat itself okay so let's take a look at this task we have at hand so we're going to do the same tile placing but this time with a while loop so i'm going to place the pink the orange and the mint and then we need to select a condition so we can see we have a few options over here and see we can choose if there are empty slots under 9 tiles are placed under 15 or while the computer is running so what happens if we just click under 15 tiles are placed i'm just i want to see what happens so we run this code and it looks just like it did before and we can see that everything's going in but our while loop stopped and that's because we hit the condition that under 15 tiles are placed once that condition became false then we stopped it stopped running now what we really need to do is use while there are empty slots so let's see what happens we're going to run our code again so you can see now it's going to continue going and it's going to stop right when it hits that final point where there are no more gray top gray tile spaces and every single one of those is already taken up great so again that's the while loop and now we're going to move on to the next one for each loops which i think are always fun um and while we're going into four reach loops this is where you're gonna have to kind of remember all that stuff we talked about with lists um because when we use a for each loop we're actually iterating through a list um so the best way we can think of this is let's take a look at our example again we define a sequence of desired tile colors so that's going to be our list and tell the computer to repeat the instructions for each item in the sequence or the list so let's take a look at this nice example we have over here we have a list it's called festive list it's pink green red pink green red our loop for this would be for each color that's in our festive list we're going to place the tile so what happens when we use a for each loop is it's going to access the element of every single item in a list so each one so this is when you know you don't have to know too much uh you just have to know the size of your list um and your program is going to do the rest so you may have noticed that the program looks a little shorter than the ones we used before that's because we only need to write place list once because the pink green red repetition is already described in the list okay so the sequence we used above was a list but we can use other similar data types the umbrella term for those is collections so we may also call forage loops collection loops so like we been discussing use this loop when you need to perform a task for every item in a list or when the order of things must be maintained in this case in our lights case both were important a tile must be placed for each item in the list and the order of them is essential to the pattern okay so here we go we're going to do this again we're going to place the same 30 tiles as before but this time we're using a for each loop so if we look at our example in front of us we have three lists to look at we have a festive list and inside we have different items it's pink green red pink green red um continuing on continuing on we have our moody list which is blue purple silver and that's just going to repeat a bunch of times and then we have the pastel list that uh we've come to know and love which is pink orange mint pink orange mint um and so my personal favorite right the best one yeah um okay so now let's have this work so we already have the first part of the code ready place tile color loop for each and then we're going to choose what value for each color and festive list in each color in moody list or for each color and pastel list so i'm going to choose pastel list and we're going to run our code so you can see it's everything we already know it's going through every single item in this list so i wonder if i can highlight it yes i can highlight it so every single item in this list it's going to iterate through and it's going to place that tile great um jamie do we have any questions or comments from anyone um i don't think so but if anyone has any questions or comments or if they want to see what either the festive list or the moody list look like maybe we can try those out um yeah i think it's a great idea uh do you want to go with the festive list or the moody list you know i'm feeling a little bit more festive right now than waiting so let's run it so you can see that it's going to perform the same task but it's going to do it with the different color items because that's what the list said so one nice thing is that we can use this with different lists and it's nice in that way because we didn't have to change much of our code we just had to specify which list we need it to iterate through okay so moving right along let's put it all together um and we're going to actually kind of look at what this looks like in python so a lot of things that are going to go on here we need some variables operators data types functions control flow lists and loops okay so below we have a few examples and if you're looking at the syntax and you're very confused don't worry because we're going to go over it in just a moment so i'm going to copy this and i'm going to paste this right into my code so what this is saying um here we'll you know we'll run it first so i'll run this code you can see it's already placing these different things it's a different now we're doing mint orange mint so this one is actually representing a for loop so what it's saying is we're going to have this repeat x number of times and in this case 10 times we know exactly how many times it's going to repeat and now let's kind of take a look let's replace this and we do it with a while loop okay so here we go we have our while loop in python so while we have a variable that's less than 10 we're going to place orange we're going to place mint then orange then mint and at the last part we're going to increase i by one and again we'll talk about more about why this happens when we get it to it in our lesson but this is just to make sure we don't run into an infinite loop so let's run this code you can see it accomplishes the same thing so that's something to be aware of for loops you can write an equivalent for loop as a while loop it's really kind of up to you what you're trying to go for a for each loop is a little bit different because you need to have some type of collection to iterate through but um whatever you can write as a while loop you can technically in most cases write an equivalent for loop okay so let's just go and take a look at this review a loop is a structure in programming where the instructions are written once but a computer can execute them multiple times each execution of those instructions is called an iteration for loops or count control loops repeat for a specified number of times while loops or condition controlled loops repeat until a condition changes and finally for each loops or collection control loops repeat instructions for each item in a collection okay so now um we're not going to do the example here because this is just letting us play around with it but we are going to go into the next section so i'm going to actually take this out um you could hit the next button if you like but if you're in the catalog time taking a look at this um the syllabus you can actually now go to that second loops lesson i'm gonna open this in a new tab okay great so we're in an introduction and before i move on i'll just check in with jamie again do we have any questions or anyone have any comments about loops so far um so someone had a question i just answered it let me see i might have to scrub oh um pepito suarez um asked what the difference between the first for loop we went over versus the for each loop we went over um okay you wanna like quickly um go over that but yeah sure so the difference is with the for loop we knew exactly how many times we wanted to repeat an instruction and we created the iteration sequence ourself because we specified we want you to start at zero and we want you to end at let's say 10. so we're saying you're going to repeat these instructions 10 times now before each loop is a little bit different that one we're going through a collection kind of like a list so for every item in a list whether that list is 10 items long or 100 items long the same instructions are going to be applied to each element in the list until every single element in that list has been covered that about sums it up what did you say jamie uh i said pretty much the same thing um first for loop was just a certain number of times while the 4h loop is going through items level analysts until you get to the end awesome and they're both they're both pretty much syntactically similar in python which we'll show which is like a subtle differences and actually you can use a for loop to iterate through a collection so yeah we'll cover that okay so let's actually start looking at these loops in python and we have an example suppose we want to print each item from a list of dog breeds we would need to use the following code snippet so again what we're looking at here is trying to print out every item of a list without loops so what we do is we print dog breeds at index zero then we print it again at index one we printed again index two index three and x four um and you can see that it's not that inefficient because what if we had a list that was a hundred items long would we write a hundred print statements so we can see every item in that list we could but it would take a very long time so luckily as we now know python gives us an easier way to do this by iterating through every item in a list we can use loops so in this example we're probably going to be going through a for each loop because i know that we're going to be iterating through a list so once again in this lesson we'll be learning about loops that let us move through each item in a list loops that keep going until we tell them to stop and then loops that create new lists all right interesting and the loops uh the loops that create new lists called list comprehensions are not something we went over in the previous lesson so it'll be like a new cool yeah those end and they're like definitely my favorite type of for loop person so guys you're getting a surprise edition okay so first let's paste the following code into a script dot pi so i'm just going to follow that so we can see already in script.pi we have a list it's called dog breeds uh we have items french bulldog dalmatian poodle kali and now we're going to print each of these items out and this is using the for each loop um so we'll go over that more in the next one but basically it's so much easier to print those all out we only needed two lines of code to print every item unlike here where we needed five lines of code and again this would change if our list was 30 50 100 items long we would still only need two lines of code these two lines of code right here to print out every item in that list okay so first we're going to go over creating a for loop and so this is going into how to use a for loop for each loop um sometimes this goes back and forth in terms of what it's called it is a for each loop even though it is also technically called a for loop here so we're going to learn how to use a for loop to go through a list of collections okay so for loops let us perform an action on each item in a list using an element of a list is known as iterating as we discussed before but let's actually kind of go into the syntax the python syntax of how we accomplish this so the general way of writing our loop is for a temporary variable in a list do something so there's two keywords that we're actually looking at here one is the four keyword and two is the in keyword so when we say four this kind of lets our program know that we're going to start repeating something for x a number of times then we'll learn about the temporary variable so this temporary variable is almost like a loop control variable it's going to represent each of our iterations and we can use it um we can use it inside the body of our loop and we can use it to kind of grab elements of a list but we'll see that then we have the in keyword and that's going to let our compiler know that we're going to loop through something inside of a list so for our temporary variable in the keyword and then we're going to add in our list variable and then underneath that inside the body of it we're going to perform an action so let's take a closer look and example of this so 4i in dog breeds print i now why did we choose i for a temporary variable well we can actually choose any name for our temporary variables so we can see right under this we see four dog and dog breeds print dog the interesting part is it's going to print the same thing we can name our temporary variable anything dog is a little bit better in this case just because it relates to our list but there's no problem with going with i so one thing to notice that with all these examples the print statement is indented everything in the same level of indentation after the for loop declaration is included in the for loop and run for every indentation if we don't indent we'll get an indentation error okay so let's run this code we can see immediately we get an error indentation error expected an indented block so this comes from line six over here because it's not indented correctly so if we just indent that like that we can see now it's inside of our loop so if i run this now we can see that everything prints so if we look at board games we have settlers of uh katan uh carcassonne power grid and two other ones um so for every item in that list all we're doing is printing that item but now let's write our own for each loop that prints each sport in sport games okay so let's actually give this a try so first i'm going to use that for a keyword and then i'm going to specify my loop control variable so i'm just going to do that in this case they want us to use the they want us to name this value sport then i'm going to use the in keyword that lets us know that we're going to use um a list and in this case we're going to use sport games support games i'll put my colon there and then when i go in you can see that it usually automatically indents it for you because it knows that if we want something to happen inside the loop it needs to be inside the loop okay and all we're going to do is use a print statement so i'm going to print the value of sport so i run this code and now we can see that it went ahead and printed every item in the order that it appears so we saw football football american hockey baseball cricket so the order that it appears in our list is the order that um it was iterated through and printed great so now we're going to talk about using range and so this is a little bit more common to what we saw before with for loops in our um previous exercise where we were working with the tiles this is where we're going to specify how many times we want it to repeat so this time we're not going to use a list to go through it so as i said before we're not always going to be iterating through a specific list we'll just want to do an action multiple times for example if we wanted to print out a warning text three times we would say something like the following so we can see here four i in a list of length three print warning so we had to iterate through a list of length three but we didn't care what was in that list to create these lists of length n we can also use the range function so range another key word to keep in mind takes in a number n as input and returns a list from zero to n minus one what does that mean so if we look at this example here we see zero through five equals range six and now that value of zero through five is the list that contains the values zero one two three four five and jamie can you say why it's starting at zero um so this is basically just it's a python thing it can differ in other languages but python is what we call zero indexed so because of that when you give when you just give range like one specific number so if i do like range seven range six whatever it's going to start at one and then it's actually going to end before the number i specify so for range six since we give the parameter six it's going to go from zero one two three four five and end at five um other programming languages might have might be different they might be indexed at one um so it's important to know like with what depending on what programming language you use to know this because you may have to like change up your for loop or like whenever whatever function you're using depending on if it's zero indexed or one index thank you so and this might be very similar to what we learned in the list last week where indexes in python start at zero so this is coming back to us in our list um so we can actually do that warning program that we tried to before just by writing for i in range and then having our value three inside of our range print warning and that's going to print warning warning warning so let's use our range function of for loop to print out the value of promise which is on line one five times so we're going to try this for i in and now we're going to say what list we're going to use and we're going to use the range function to create this list so i'm going to type in range and it says five times so i'm just going to use five colon and then we're going to go to that next piece and we're going to print premise okay so let's run this code and we can see i will not chew gum in class is printed five times and just to make sure we have an idea of this if i were to just say let's not care about promise what if i just wanted to print i what would happen you can see that it starts at zero it prints zero one 2 3 4. so just try and keep that in mind and you can see how much easier it is let's say i wanted to print out the first 20 numbers you can see that it doesn't matter that i want to print more values or create a larger range it's still just going to take those two lines of code to output this value okay one important note about range which i feel like some people have quite this question on their mind is you can actually specify range to start at a different number than zero you're not always start stuck at starting at zero um and there's also like many different other things you can do with range function um yeah i'm so happy you mentioned that because we're going to do that all right so just like jamie said this means we have to set our uh our values inside our range function a little bit differently so let's say i wanted to start at 10. so instead of starting at index 0 we're going to start at 10. i'd add a comma and then i believe what i would say is where i want it to end next so let's say i wanted to end at 20. let's see what happens if this works or if this breaks things it doesn't so you can see that now it's going to print 10 11 12 13 14 all the way up to 19. so again it's just like jamie said it's our first value is where it starts our second value it's going to end one value before that and that's something that could trip you up when you're first starting with loops so just always remember that that's going to be the case now the one other special thing we'll jump in before moving on to the next piece is we can say what our iteration is so in this case we say 10 and then 11 then 12 because we're only adding 1 to i but by adding one more comma and i believe if i just write let's say 2 let's see what happens will it break it doesn't break it actually works and it's going to print every other iteration so we start at 10 then it's going to say plus 2 so our next one's 12 plus 2 14 plus 216 plus 218. um i'm really glad you mentioned that because i think that's just a very fun part of range yeah i like i like when i like use new functions to like look up what all the different parameters you can put in are because they're fun to play around with and arrange a lot of cool different things a lot of cool different things okay oh so here's something we discussed a little bit before um infinite loops these are loops that are problematic because they run forever so in preparation of me knowing that we're going to run this i'm actually going to um get a duplicate tab you'll you'll understand so let's take a look at this example over here we have a list of my favorite numbers and we have five numbers in there for each value in my favorite numbers we're gonna append one when we run this code it's going to be never ending because at what point do we stop as our as we append items to our list that list gets bigger so there's never a point where a loop can stop so it's going to run infinitely this is a problem it's dangerous for your code a program that hits an infinite loop often becomes completely unusable and so one the best course of action is to never write an infinite loop but being learners sometimes it happens and we're going to make that mistake if we accidentally stumble into an infinite loop while developing on our own machine we can end it by hitting ctrl c to terminate the program because that's the only solution at that point now if you're writing code in our online editor like we are here we're going to have to refresh the page so let's take a look we have two lists of students students period a student's period b let's write a for loop that goes through each student in student period a and adds it to the end of students period b okay let's give this a try so i'm going to write 4 student and students period a we're going to say an appendix okay then we're going to say students period b dot append student we'll run that and let's kind of see what this really did so we're going to go ahead and we're going to print student so alex brianna sherry and danielle those four items are actually now in students period b so if i actually go really quick and let's say we'll print students period b we can see now our students period b contains all of those students because we appended them into that and i believe a pen we learned about in the previous lesson on lists but let's say we made a typo and instead of using students period b we actually appended it to students period a i'm going to copy this real quick what happens now so we're going through every item in students period a and we're going to append student to student period a so this when we run it is not going to be happy no we're just going to be waiting here because there's no way this will ever end so we can't even process it so you can see that we're just having issues here so it's not going to happen you can see that it disconnected reconnected and we still have that loading bar happening so what i'm going to do is i'm just going to x that out and i copied our code so now we can go back in and fix our code so that we fix this infinite loop awesome okay so i do have to run all these again so there we go we fixed our infinite loop and everything's fixed so i'm actually going to skip ahead to while loops for now but definitely feel free if you're going through this on your own uh take a look at break and continue they're super useful inside our loops but i want to go make sure that we have enough time to go through some of our challenge projects so now let's take a look at how we can use a while loop now we already remember that using a while loop it's condition controlled so as long as something's true we're going to continue repeating the content of the code well let's take a look and we can still use while loops iterate through lists so we'll see this example here we have our dog breeds list we create an index value and while our index value is smaller than the length of dog breed and our length for this is five we're going to print the value at that index and we're going to increase index by one and the reason we increase index by one is to prevent the while loop if we don't use that then we're always going to have a value an index that's smaller than the length of dog reads so there's never going to be a stopping point for a while loop we're just going to have to refresh our page again so every time the condition of the while loop in this case indexes less than length of dog breeds is satisfied the code inside the while loops run okay you are adding students to a poetry class the size of which is capped at six while the length of students in poetry list is less than six use pop to take a student off of the all students list and add it to the students in poetry list so if you remember the dot pop function it just takes off a value from a list so we'll see this in action so let's see so while the length of students in poetry is less than six what we're going to do is we're going to say students in poetry dot append all students dot pop and at the end i do just want to print this uh students in poetry and i also want to print out all students so we'll we'll take a look at it all so there we go so i'm going to run this code okay so we're just seeing the output here so the first thing and i'm going to run this again just so we can kind of zero in on it we'll print students in poetry so who was added loki arias obi alexa minerva and dora so these were the students that were appended to it now let's take a look at all students now when we look at all students it's alex brianna sherry and danielle because when we use dot pop what happens is it removes the last value from the list so basically what we did was we went through all we went through um what we did is while the length of our poetry class was less than six we added the last value of our all students list so the last element so the first one would be loki we appended it to students in poetry while removing that element from all students so we kind of did a big switcheroo does that make sense awesome yeah let's see if anyone has any questions about that in the chat awesome so in the meantime we're actually going to switch on over um we're going to leave this for a bit if we have more time at the end we can come back to this lesson but i do really want to go over all those challenges with you okay so i'm going to x out and we're in cs 101 loops and we're going to take a look at this article that says loops code challenges okay so our first challenge is to create a function named divisible by 10 that takes a list of numbers named nums as a parameter and we're going to return the count of how many numbers in the list are divisible by 10. so first we'll write out our function so def divisible 10 and our parameter is going to be nums okay so what we're going to do is we have this list and we'll see it here um in this case we're going to look at 10 25 30 35 40. we're going to go through each element in that list and we're going to return the number of times we have an element that's divisible by 10. so what i want to do here is i'm going to use the for each flue so 4i in nums so that's how we're going to iterate through each value in our list we're going to check if it's divisible by 10. so if i modulo 10 equals zero also just for anyone who might not know what modulo is um the percent sign it's really cool basically what it does is it just um checks the remainder you have when you divide that number by 10. so if it was 11 mod 10 it would be equal to 1. so we're checking for numbers that are divisible by 10 that wouldn't have a remainder exactly thank you jamie so if our value is divisible by 10 we want to add to count but that means we need to create a count variable so before we even go into our for loop the first thing i want to do in this function is declare a variable called count and set it equal to zero then we'll loop through each value in nums if the element is divisible by 10 we're going to increase the value of count by one and then finally outside of the for loop once we've iterated through every element we're going to return the value of count so let's go ahead we'll run this code okay so it returns three and let's see if we check our answer this is correct it's correct with the clapping hands i love the clapping hands so again um we'll just go through this one more time so our first value was 20 and since it's divisible by 10 we increase count by one then we go back to the top of our code we go back to the top of our loop we check is 25 divisible by 10 it's not we ignore it now we're at 30 30 is divisible by 10 increase our count two and then we are going to go ahead to the next one 35 not divisible by 10 we ignore it then we have 40 our last value now our count uh increases to three and then since that's the last value return the value of count and that's how we solve this yeah i think uh another um good practice when you do like little challenges like these is you can write your own test cases to test like any edge cases or for instance uh like all these numbers that we're testing against are all um oh my god not floats uh what's the other thing called double and oh and started um so we might want to test you know if we did 20.0 versus 20 like will that work um you might want to test um i don't know like different you know kinds of numbers because all these are like twodigit numbers um yeah definitely like something to consider when you're doing these little code challenges um so that's actually a great point so i was curious so but we turned our 20 um from an in to a float just by adding that decimal point and it still returns the same value and the nice thing is we can increase this list there's nothing that's stopping us so i'd say 100 234 247 190 it still runs the same code you can see that we don't have to do too much more and now it returns six okay so now let's go on to our next coding challenge delete starting even numbers write a function called delete starting events that has a parameter named list lst the function should remove elements from the front of lst until the front of the list is not even the function should then return lst and let's take a look at an example so if our list was 4 8 10 11 12 15 and then we called delete starting evens with it it should return 11 12 and 15. now the reason for this is we're going to delete four we delete eight we delete 10 because it's an even number so make sure your function works even if every element in the list is even okay so let's give this a try so it's def delete starting even evens it's going to accept lst okay so one thing that kind of struck out to me is the word until it will remove elements from the front of the list until the front of the list is not even to me that sounds like a condition so for this one i want to go through it using a while loop okay so while and we're going to create that condition let's see lst well it's first index right um divided by well modulo 2 equals zero so this is how we're going to check that it's even so while index zero actually nope we want to stop when it's not even so while the first element of our list is not an even value what are we going to do so what this is going to involve is changing our list value lst so what i'm going to say is lst equals lst so you might remember this a little bit from uh last week when we were talking about sub um splicing or getting sub values from a list okay so what this means is we're changing our value of list to include every single value except the one at index zero right so one this represents the first index then this kind of this uh colon here kind of represents um until and then it's blank here because we're going to say until the end of the list okay so that's what we're going to do and now let's see what happens at the end we return list so to check this out let's take a look at this first example here let's run this code okay i think it was supposed to be oh i'm sorry i was we were supposed to do equals so while the first element is an even number my apologies for that so while our first element is an even number because when we use modulo 2 the remainder is zero we're going to return list equals list at the first at element at index one and beyond and again since we're looking at zero based indexing it just removes that first value okay so here we go we have 11 12 and 15. now let's make sure this one works over here and i'm gonna just spoil you guys and say that it's not gonna work we have an index out of bounds error and that's because at one point we delete every single value in this second list here so 4 8 10 so we just kept deleting it deleting it deleting it so once it hit that fourth iteration and it goes to reach for the index at zero there's nothing there so that causes an error so we need to add one additional condition before we check if um there's something at the zeroth index so this is one we're going to use um it is the length at lst is greater than zero yeah and if any of you watched the uh control flow um live streaming a couple weeks ago this is kind of similar to that where it's um we talked about how you might have like multiple conditions in like within um like in this case in those cases it was like an if or an if statement but in this case it's a while statement um so that way it will only go into the while statement if both of these conditions are true so that will avoid this error that we just ran into exactly so that was the problem we ran into and so now what we're going to do is while the length of the list is greater than zero and the first value in our list is an even number we're gonna run that code so this should stop it from giving us an error because once we see that the length of our list is zero or once it's zero it's going to say okay forget it we're going to return that value and let's see if running this works okay now we see it just returned an empty list so now we know that we're working with the edge case that we might have a list that's all even values um also uh giannis brought up a great point in the chat um he said so where you put the uh lst equals lst like where you splice the list yeah you could also decide to like delete the item in the list that you're currently on using the delete function there's also i really like this code challenge there's also a lot of different ways to do it you could technically do it using a for loop as well um it might be more difficult with a for loop loop from the beginning and once you get to um are you trying to get to an odd number even i think once you get to an odd number yeah then like stop the loop um there are definitely a lot of different ways you can do this and um a lot of times when i have coding challenges like these i like to just like maybe write out on paper like think in my head like okay what am i doing at each point in this like little algorithm and like how can i do how can i translate this to a python code yeah that's i totally agree with that always write down your plan um and it makes coding so much easier and that's the nice thing about loops like we discussed before in a lot of cases they can be interchangeable okay so we have about five minutes left so let's see if we can get through this final code challenge create a function named reverse list that takes two lists of the same size as parameters and we're going to name those parameters lst1 and lsd2 the function should return true if list 1 is the same as list 2 reversed otherwise we'll return false so looking at this example if we send in a list that has a value 1 2 3 it should match the value three to one it's the first element matches the last the middle matches middle and then the last element of the first list matches the first element of the second list okay so let's get into this so we'll create this first so it is def reversed list so our best first list um and we're going to take in the front with lst1 lst2 so because we're working with two lists um i kind of don't want to use just a for each loop or i'm iterating through it i think i'm going to use a just our normal for loop where we're going to define that range let's see 4i in range and what i'm going to do is i want this to start at 0 and go to probably the length of one of the lists and because it already said we're assuming that the parameters will always have even um sizes that we don't have to worry too much of that so i'm just going to say length of lst1 so just to get you guys give you guys an idea of what we're working with i'm just going to print let's see lc1 okay so i'm going to take this bit of code here just because i want to i want to call the function uh without returning anything for a bit so we'll run this code so we can see it takes out one two three because we used i but what about if we're trying to use lst2 what happens when i run this well it gives us three two one but what i really want is i want it to almost flip it i want that last value to be printed first but how do we go through a list in reverse now i'm not sure if you know this but we can actually put in negative index values so index at negative one so i'm not going to do this inside the for loop actually changing my mind i'm gonna do it right outside the for loop and we'll just uncomment this so what happens if i try to print this value expected oh i think it's because you have the for loop and nothing um oh below it you can write it's coming up let's take that out so we can see that we're now getting that last value of one here because i use negative one as the index value i can do this so at negative two you can see it's two negative three we can run that and now what happens if i try negative 4 we're going to get an error because it's index out of range so again just keep that in mind so now that we know that we can kind of use negative values to help us out how can we use that to help us in our for loop so before we were using i right to print out each value of lst1 but now i want to switch this to lst2 but i want to use something about something um with this negative value so we know that if we use negative 1 we can start counting backwards just like we did before now what if we decrease it by i so if we took the value of negative 1 minus i what do we get 1 2 3 which is our loop in reverse so if we look at an example of this in our first one alex can you uh zoom in potentially because someone just uh asked zoom in for visibility definitely i hope this helps a little bit more yeah thank you so much cool of course um so we're taking a look at this so in our first one i is zero negative one minus zero is negative one list two at negative one is this value one and so then in the next one our in the next iteration i has a value of 1 negative 1 minus 1 is negative 2. lst 2 at index negative 2 is 2. so now that we know how we can get those values we're going to use a conditional so let's see so if lst1 at i is not equal to lst2 at negative 1 minus i at that index just like we discussed before it's not equal we know it's false so we're just going to return false and if we get through that whole loop and we never run into a case where they're not equal then we know that they're equal and we'll just return true okay so i'm going to take this out and we're going to try and see if this works okay so we're going to run this okay so our first value is true one two three matches three two one in reverse now let's try that over here where we know looking at this 153 does not equal three to one run it and now it's false yay i'll check our answer and we got the clapping and everyone should clap for themselves because that's pretty awesome so it is two o'clock so we are gonna have to end this but you should definitely join us next tuesday for another um cs 101 live course i believe we'll be going over strings so it's going to be really fun and we look forward to seeing you there definitely check out our events page where you can register for it and you'll get an email that reminds you when we're about to start our stream all right thank you again jamie um thank you everyone for joining and we hope you have a great rest of your day yeah thank you so much for all the great questions and wonderful comments in the chat um hope to see you a lot of you at future live streams
