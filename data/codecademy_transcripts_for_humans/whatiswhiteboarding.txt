With timestamps:

00:00 - hello my name is Farish and i'm a
00:02 - california-based developer and in this
00:05 - video we're gonna talk about what is
00:07 - whiteboarding which is part of the
00:09 - technical interview process and it could
00:12 - be a Tim Daly part two but with this
00:15 - video and other content from code
00:18 - Academy hopefully we could ease your
00:20 - concerns and help you along the way
00:22 - let's get started
00:24 - to start things off I'm gonna cover what
00:28 - is whiteboarding and lightly touch on
00:31 - why it is important then I want to go
00:34 - into the process of a white boarding
00:36 - interview lastly I'm gonna give you a
00:40 - couple tips noncoding related on how to
00:44 - practice for your white boarding
00:46 - interview so let's get started
00:48 - so what is white boarding well white
00:53 - boarding is a form of torture used
00:54 - during job interviews the candidate is
00:57 - forced to code algorithms that they were
00:59 - never used on the job on a white board
01:02 - in front of other people
01:04 - causing the candidate to experience a
01:06 - sensation of inadequacy now I'm joking
01:10 - here so what really is a white board
01:13 - interview well it is the portion of your
01:17 - tech job interview meant to test your
01:19 - communication and problem-solving skills
01:21 - you'll be given a situation or a task
01:25 - and of course a white board and you're
01:28 - gonna use this white board to work out
01:30 - your code and explain your solution so
01:34 - why white boarding well it's used by a
01:38 - lot of large and established tech
01:40 - companies the most famous one in this
01:43 - interview space being Google it's part
01:45 - of the hiring process and they have you
01:48 - do this to show your ability to reason
01:51 - explain and solve a problem when working
01:55 - in teams these skills are crucial to
01:58 - successful code implementation if you're
02:01 - asked to add new features to an existing
02:04 - code base where or how would you start
02:07 - white boarding is a way to demonstrate
02:09 - these skills so what exactly happens
02:13 - during the white boarding portion of the
02:15 - interview process let's talk about that
02:18 - so let's talk about what to expect and
02:22 - what's gonna happen is you're gonna be
02:23 - around and of course there'll be a white
02:25 - board and there'll be an interviewer or
02:28 - interviewers and they're gonna give you
02:30 - a problem to solve and as I mentioned
02:33 - earlier being most likely an algorithm
02:35 - but sometimes the Capiz system does
02:38 - 9 or a real-world problem every
02:40 - company's different and the goal is to
02:44 - not only solve the problem but to show
02:47 - to the interviewers that you can
02:50 - visualize and verbalize out the
02:53 - situation and we accomplished this by
02:56 - going through the process the first step
02:58 - in the process is to clarify the problem
03:01 - and to start this the first thing you
03:04 - need to do is to say the interviewers
03:06 - question out loud in your own words then
03:09 - based on their response ask a clarifying
03:12 - question and during this back-and-forth
03:16 - communication create assumptions and
03:18 - then ask questions built upon those
03:21 - assumptions and your questions should
03:24 - continue unto your assumptions lead to a
03:26 - mutual agreement on the scope of the
03:29 - problem and at this point you should be
03:32 - ready to move on to the next step so now
03:35 - that you have clarified the problem the
03:38 - next step in the process should be to
03:39 - create inputs that will lead you to a
03:41 - solution then once those inputs are
03:44 - created you should also create the help
03:46 - but you expect the function to produce
03:49 - so for example you have this problem you
03:53 - need to merge two sorted arrays of
03:55 - numbers to a new sorted output array so
03:58 - the first thing you need to do is to
04:00 - create a happy path which is what you
04:03 - expect to be the most common scenario
04:05 - based on your earlier clarifying
04:07 - questions and in this case it is two
04:10 - sorted arrays of unique numbers and
04:14 - while doing this you have to be aware of
04:16 - the edge cases which are the uncommon
04:19 - and unexpected inputs that could
04:21 - potentially break your function in this
04:24 - scenario the edge case is duplicate
04:26 - numbers in the two input arrays when
04:30 - encountering an edge case go back to
04:33 - asking clarifying questions and maybe
04:35 - making new assumptions for example in
04:38 - this scenario you should ask should I
04:41 - expect duplicate numbers from the two
04:43 - sorted arrays and if the answer is yes
04:46 - you should then ask how should they be
04:49 - handled in the output
04:51 - and if the answer's no take some time to
04:54 - consider other potential edge cases here
04:56 - and if you feel you have all your bases
04:59 - covered it's time to move on to the next
05:02 - step now that you have clarified the
05:04 - problem and have your inputs it is time
05:07 - to start outlining the solution so going
05:09 - back to the problem I mentioned earlier
05:11 - this is a partial outline of the
05:14 - solution using pseudocode and while
05:16 - you're writing this you should still
05:18 - keep indicate your thought process
05:20 - this gives the interviewer an
05:23 - opportunity to interact and maybe give
05:25 - you some hints and suggestions if you're
05:27 - showing that you're a little bit stuck
05:29 - also if you feel unsure or confused
05:32 - there is nothing wrong to ask a
05:35 - clarifying question especially if they
05:37 - hint given from the interviewer might
05:40 - change your outline dramatically now
05:43 - that you have your outline done you come
05:46 - to the portion of the interview where
05:47 - you need to write some code and during
05:51 - this time what you want to do is make
05:53 - this into a collaborative process face
05:56 - the interviewer while writing out and
05:58 - explaining your code and allow them to
06:01 - interact with you now the code is done
06:05 - you feel like you accomplished the task
06:07 - at hand and you're ready to stop your
06:09 - whiteboarding interview know now what
06:13 - you need to do is take your input
06:15 - usually starting with your happy path
06:18 - and run it through your code
06:20 - implementation and how you want to
06:23 - approach this is that at each step of
06:25 - execution sail out what is happening and
06:29 - explain what is happening to your input
06:31 - at the current step and at the end of
06:34 - each step update the variable values as
06:37 - necessary and once you finish through
06:39 - the execution of your solution and
06:42 - you're satisfied with this current
06:44 - implementation it is time to discuss the
06:47 - time/space complexity of your solution
06:50 - also known as the Big O notation but as
06:54 - a reminder both pseudocode to code and
06:57 - the Big O notation is going to be
07:00 - discussed more in depth in future code
07:02 - academy videos so that completes
07:05 - process and now I'd like to talk to you
07:08 - about how to practice white boarding but
07:11 - not with regards to the code or the
07:13 - algorithms and that sort of stuff but
07:16 - how to effectively communicate
07:17 - especially when you're not used to
07:20 - communicating so the idea here and this
07:23 - is a more of a personal belief of mine
07:25 - is to take every day items that you
07:29 - might take for granted or you don't
07:30 - think about and wait board the process
07:35 - and what do I mean by that well on the
07:39 - screen you see the pseudocode for
07:42 - cooking chicken and you might have never
07:46 - thought about all the steps that are
07:48 - done when you cook chicken from prepping
07:51 - it turning on the oven setting the
07:53 - temperature waiting for it to roll arm
07:56 - up placing your chicken on the cooking
07:58 - pan inserting it in the oven and so on
08:01 - and so on if you take the time to
08:03 - practice talking out loud these steps
08:08 - this will make you a better communicator
08:12 - also while talking out loud about it it
08:16 - will make you think about the steps you
08:17 - might have missed another practice
08:21 - technique I like to mention is that if
08:23 - you are the type to get nervous talking
08:25 - to other people in these sort of
08:27 - situations practice in front of a mirror
08:29 - while practicing whiteboarding use your
08:32 - reflection to represent your potential
08:35 - interviewers imagine potential
08:38 - statements or responses that the
08:41 - interviewer may have and figure out how
08:43 - to handle them of course pick what works
08:46 - for you but the goal here is for you to
08:49 - ace your interview thanks for watching
08:52 - now if you get a chance head on over to
08:54 - code Academy and take a look at our
08:56 - technical interview practice and if you
08:59 - want to get involved leave a comment
09:01 - below and be sure to like the video and
09:04 - subscribe for future videos happy coding

Cleaned transcript:

hello my name is Farish and i'm a californiabased developer and in this video we're gonna talk about what is whiteboarding which is part of the technical interview process and it could be a Tim Daly part two but with this video and other content from code Academy hopefully we could ease your concerns and help you along the way let's get started to start things off I'm gonna cover what is whiteboarding and lightly touch on why it is important then I want to go into the process of a white boarding interview lastly I'm gonna give you a couple tips noncoding related on how to practice for your white boarding interview so let's get started so what is white boarding well white boarding is a form of torture used during job interviews the candidate is forced to code algorithms that they were never used on the job on a white board in front of other people causing the candidate to experience a sensation of inadequacy now I'm joking here so what really is a white board interview well it is the portion of your tech job interview meant to test your communication and problemsolving skills you'll be given a situation or a task and of course a white board and you're gonna use this white board to work out your code and explain your solution so why white boarding well it's used by a lot of large and established tech companies the most famous one in this interview space being Google it's part of the hiring process and they have you do this to show your ability to reason explain and solve a problem when working in teams these skills are crucial to successful code implementation if you're asked to add new features to an existing code base where or how would you start white boarding is a way to demonstrate these skills so what exactly happens during the white boarding portion of the interview process let's talk about that so let's talk about what to expect and what's gonna happen is you're gonna be around and of course there'll be a white board and there'll be an interviewer or interviewers and they're gonna give you a problem to solve and as I mentioned earlier being most likely an algorithm but sometimes the Capiz system does 9 or a realworld problem every company's different and the goal is to not only solve the problem but to show to the interviewers that you can visualize and verbalize out the situation and we accomplished this by going through the process the first step in the process is to clarify the problem and to start this the first thing you need to do is to say the interviewers question out loud in your own words then based on their response ask a clarifying question and during this backandforth communication create assumptions and then ask questions built upon those assumptions and your questions should continue unto your assumptions lead to a mutual agreement on the scope of the problem and at this point you should be ready to move on to the next step so now that you have clarified the problem the next step in the process should be to create inputs that will lead you to a solution then once those inputs are created you should also create the help but you expect the function to produce so for example you have this problem you need to merge two sorted arrays of numbers to a new sorted output array so the first thing you need to do is to create a happy path which is what you expect to be the most common scenario based on your earlier clarifying questions and in this case it is two sorted arrays of unique numbers and while doing this you have to be aware of the edge cases which are the uncommon and unexpected inputs that could potentially break your function in this scenario the edge case is duplicate numbers in the two input arrays when encountering an edge case go back to asking clarifying questions and maybe making new assumptions for example in this scenario you should ask should I expect duplicate numbers from the two sorted arrays and if the answer is yes you should then ask how should they be handled in the output and if the answer's no take some time to consider other potential edge cases here and if you feel you have all your bases covered it's time to move on to the next step now that you have clarified the problem and have your inputs it is time to start outlining the solution so going back to the problem I mentioned earlier this is a partial outline of the solution using pseudocode and while you're writing this you should still keep indicate your thought process this gives the interviewer an opportunity to interact and maybe give you some hints and suggestions if you're showing that you're a little bit stuck also if you feel unsure or confused there is nothing wrong to ask a clarifying question especially if they hint given from the interviewer might change your outline dramatically now that you have your outline done you come to the portion of the interview where you need to write some code and during this time what you want to do is make this into a collaborative process face the interviewer while writing out and explaining your code and allow them to interact with you now the code is done you feel like you accomplished the task at hand and you're ready to stop your whiteboarding interview know now what you need to do is take your input usually starting with your happy path and run it through your code implementation and how you want to approach this is that at each step of execution sail out what is happening and explain what is happening to your input at the current step and at the end of each step update the variable values as necessary and once you finish through the execution of your solution and you're satisfied with this current implementation it is time to discuss the time/space complexity of your solution also known as the Big O notation but as a reminder both pseudocode to code and the Big O notation is going to be discussed more in depth in future code academy videos so that completes process and now I'd like to talk to you about how to practice white boarding but not with regards to the code or the algorithms and that sort of stuff but how to effectively communicate especially when you're not used to communicating so the idea here and this is a more of a personal belief of mine is to take every day items that you might take for granted or you don't think about and wait board the process and what do I mean by that well on the screen you see the pseudocode for cooking chicken and you might have never thought about all the steps that are done when you cook chicken from prepping it turning on the oven setting the temperature waiting for it to roll arm up placing your chicken on the cooking pan inserting it in the oven and so on and so on if you take the time to practice talking out loud these steps this will make you a better communicator also while talking out loud about it it will make you think about the steps you might have missed another practice technique I like to mention is that if you are the type to get nervous talking to other people in these sort of situations practice in front of a mirror while practicing whiteboarding use your reflection to represent your potential interviewers imagine potential statements or responses that the interviewer may have and figure out how to handle them of course pick what works for you but the goal here is for you to ace your interview thanks for watching now if you get a chance head on over to code Academy and take a look at our technical interview practice and if you want to get involved leave a comment below and be sure to like the video and subscribe for future videos happy coding
