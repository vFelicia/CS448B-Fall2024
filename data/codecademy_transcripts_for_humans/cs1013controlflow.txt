With timestamps:

00:00 - one pretty good hope everyone is doing
00:02 - well
00:03 - so if this is your first time watching a
00:06 - cs101 stream
00:07 - um let me first make sure that we are
00:10 - indeed
00:11 - live on youtube um
00:14 - let's see
00:17 - make sure that we're live in chat right
00:19 - now if you can see us
00:21 - okay cool i can see us all right um
00:24 - good so uh yes if this is your first
00:28 - time watching a cs101 live stream
00:30 - we are live right now on a couple of
00:32 - different platforms we're on youtube
00:34 - twitch twitter and facebook um jamie and
00:37 - i
00:37 - are going to primarily be looking at the
00:40 - uh youtube chat
00:41 - and so if you're on one of those other
00:42 - platforms you can come join us in
00:43 - youtube to interact with us
00:46 - people are in our youtube chat right now
00:48 - chatting away so we love to see
00:50 - interaction here um yeah if you're in
00:52 - chat right now
00:54 - say hello maybe where you're from maybe
00:57 - what python experience you have
00:59 - um yeah uh also we
01:02 - always post these videos after the fact
01:04 - on our youtube channel so there's
01:06 - a strong possibility that you're
01:07 - watching this video on youtube
01:09 - in which case you can go back and watch
01:12 - the
01:12 - other videos from this series this is
01:14 - the third one um
01:15 - or join us live on tuesdays at 1pm
01:18 - eastern time which is when we
01:20 - stream these live so jamie
01:23 - do you want to explain the lesson that
01:25 - we're going through today
01:27 - yeah sounds good so today we're going to
01:29 - go through
01:30 - control throat control flow it's linked
01:33 - in the description
01:34 - below the youtube video if you need to
01:36 - find the link i'll share my screen to
01:38 - show
01:40 - where we're going to be going through um
01:43 - so if you go to this
01:44 - cs 101 live live stream series which is
01:46 - linked
01:47 - you go down to control control flow and
01:50 - we're going to go through this
01:52 - module we're going to go through like
01:53 - most of these two lessons and hopefully
01:55 - try to get to these control flow code
01:57 - challenges which i think will be a lot
01:58 - of fun
01:59 - so yeah these two lessons for a little
02:02 - bit of background on what these two
02:04 - lessons are
02:04 - the first one is talking about control
02:06 - flow and this idea of
02:08 - conditionals if else kind of maybe some
02:10 - of these terms that you might have heard
02:11 - in programming
02:12 - this first lesson talks about um these
02:15 - ideas from a very high level
02:17 - conceptual um point where we're not even
02:20 - going to look at code we're just going
02:21 - to dive into like what does it mean to
02:23 - have control flow in our program or what
02:25 - does it mean to write a conditional
02:26 - and then after we get a sense of um
02:31 - what control flow is we'll look at it in
02:32 - python how do you actually write the
02:34 - python
02:34 - code that can do this thing that we're
02:36 - talking about and again that's kind of
02:38 - the whole point of this
02:39 - cs101 series which is a series really
02:42 - the core ideas of this series are what
02:45 - are the fundamental
02:46 - topics in computer science that can be
02:48 - applied to any language
02:49 - so even though we're going to do this in
02:51 - python later really the important thing
02:53 - is just like
02:53 - understanding the structures and
02:55 - patterns and kind of concepts behind
02:58 - in this case control flow
03:01 - yeah so yeah exactly what alex said so
03:04 - the first
03:05 - so the first lesson we're just going to
03:06 - go through a couple of the exercises and
03:08 - they're kind of just going to give you
03:09 - the conceptual
03:10 - um knowledge as alex just went over
03:13 - there's a couple fun little applets that
03:14 - we'll go through
03:15 - and we're just going to give you the
03:16 - conceptual breakdown before we dive into
03:18 - python code
03:20 - and see how that works in the learning
03:22 - environment
03:23 - all right so control flow like um
03:26 - it's important because it helps
03:27 - computers make decisions so
03:30 - like a couple like real world examples
03:31 - so like let's say you're on
03:33 - a like web browser um whenever you like
03:35 - open a browser
03:36 - it like opens the browser loads the text
03:38 - and loads the images
03:40 - um like let's say you know let's say
03:42 - you're like on instagram or something
03:44 - and you try to like open up someone's
03:46 - profile and it's like private
03:48 - um it might not show you like any other
03:50 - images or posts
03:52 - so you can kind of think that in like a
03:53 - control flow way where
03:55 - you know instagram like is being told
03:58 - that this person's page is private
04:00 - so don't show these images just anyone
04:02 - who like doesn't necessarily follow that
04:03 - person
04:04 - um or like electronic music
04:07 - like um actually that wouldn't be really
04:09 - controllable um
04:11 - so let's say like you're shopping and it
04:13 - like collects your shipping and contact
04:15 - information
04:16 - um it might check to make sure your
04:17 - credit card is correct
04:19 - or that your shipping address is correct
04:20 - to make sure that's a valid address
04:22 - and if it's not a valid address it's
04:23 - going to throw an error so this is
04:25 - really important right because if you're
04:26 - buying an item
04:27 - you don't want it to be shipped to
04:28 - somewhere that doesn't exist or
04:31 - you know obviously the company wouldn't
04:33 - want to like
04:34 - you know lose money if like your credit
04:36 - card wasn't a real credit card and
04:37 - doesn't actually get the money
04:39 - um so like these are kind of a set of
04:41 - instructions
04:42 - and this is what makes up control flow
04:44 - um
04:45 - so as programmers we can basically
04:47 - structure our code using control flow
04:49 - and allow our code to do certain
04:51 - different things based on
04:53 - you know different conditions that are
04:55 - in control flow
04:57 - yeah i i think one of the things to
04:59 - point out here is that in all of these
05:00 - different situations
05:02 - there's kind of a question and then also
05:04 - a result
05:05 - so again going back to that instagram
05:06 - example the question that the
05:09 - that exists is you know are you logged
05:12 - into
05:13 - your account and if the answer is yes
05:16 - then
05:16 - the result is like okay let's you're
05:18 - gonna be able to see all of your like
05:20 - personal information associated with
05:21 - your account if the answer is no then
05:22 - you're gonna see
05:23 - like a lock page or something right for
05:25 - the shipping example the question is
05:26 - did they enter in the address properly
05:29 - or did they enter in their credit card
05:30 - number properly if the answer is yes
05:32 - they can proceed with their payment if
05:33 - the answer is no
05:34 - something else will happen maybe it'll
05:35 - go back a screen or you know maybe a
05:38 - red pop-up will come up or something
05:39 - like that but yeah the the
05:41 - the kind of important part is that
05:43 - there's a question and then a response
05:44 - which is something that we'll see in
05:45 - these
05:46 - these demos yeah so this demo will kind
05:48 - of do like just opening
05:49 - a like kind of like walk through the
05:51 - steps of like opening a basic web
05:53 - browser so let's say i click start here
05:55 - it will just kind of like show the like
05:57 - skeleton of a browser
05:59 - then i'll actually open the actual thing
06:02 - load the text
06:03 - and then load the images and then boom
06:06 - your control flow is complete so this
06:08 - kind of just gives like the basic like
06:10 - kind of how control flow can set up like
06:11 - a step-by-step process that is important
06:14 - in programs
06:15 - um and then if we go to the next
06:17 - exercise
06:18 - this is where we'll kind of talk about
06:19 - conditionals where as alex was kind of
06:21 - going over um
06:22 - basically like there's kind of a
06:24 - question or
06:25 - a like a program it's called a condition
06:28 - that is either you know
06:30 - that is like trying to be like answered
06:31 - to see if like a specific task should be
06:33 - done
06:34 - so as i went over in like the last
06:36 - exercise some like one
06:38 - example of a you know possible
06:40 - conditional
06:41 - is if a user's profile is private hide
06:43 - their post
06:44 - otherwise make them visible so here the
06:46 - question basically being asked is
06:49 - is the user's profile private and then
06:52 - if it is you'd want to hide their posts
06:54 - if it isn't
06:55 - then you want to make them visible so
06:57 - that's kind of like an example of like
06:58 - a condition and the task that would be
07:01 - done is basically
07:03 - either hide their posts or make them
07:04 - visible depending on whether that
07:06 - condition is true or not
07:08 - so this is kind of a neat organizat
07:11 - organized way for computers to run
07:13 - instructions
07:15 - but they can't just like make these on
07:16 - their own right like programmers have to
07:17 - like give them these sets of
07:18 - instructions
07:19 - in order for them to work so
07:22 - you can basically set up these
07:24 - instructions
07:25 - in python in most programming languages
07:27 - in this you know
07:29 - kind of pseudo code kind of way where
07:30 - it's just if x
07:32 - do instruction set one otherwise do
07:35 - instruction set two
07:36 - and later we'll see how we actually
07:37 - write this in python
07:39 - so this as i said earlier is called a
07:41 - conditional
07:43 - and basically a computer will just
07:44 - depend on many different conditions in
07:46 - order to run tasks
07:48 - um yeah so how about we go through
07:53 - this example that they show so this is
07:55 - kind of going over
07:56 - like basically like let's say if you're
07:58 - on like some sort of social media
08:00 - and you know you're trying to click on
08:03 - someone's profile but it might be public
08:04 - or private so if i
08:05 - click start and then
08:09 - i click is the post public or private so
08:11 - let's see
08:12 - so this is public so show so it'll
08:16 - actually show
08:17 - the post text and end but let's say
08:20 - i click here and instead i do a
08:24 - private profile so i'd click start and
08:26 - here's the question
08:27 - is this post public or private if i
08:30 - click here
08:31 - it's private so then it's going to hide
08:33 - the hide the person's test
08:35 - uh text and then it will tell us that
08:37 - the post is hidden
08:38 - don't actually be able to see it so like
08:40 - this is just kind of an example of like
08:42 - you know one of many different type of
08:44 - conditions that we could see on computer
08:46 - or pretty much anywhere
08:50 - in this example we just have uh two
08:53 - branches right
08:54 - the question the answer to the question
08:55 - can be either yes or no
08:57 - uh in programming or in most programming
08:59 - languages
09:00 - can you do more branches than that can
09:02 - you have you know
09:03 - yes no or maybe or can you have you know
09:06 - kind of multiple branches
09:08 - yeah so you can have like a lot of so
09:10 - like this is only like an example of
09:11 - like two different options right like
09:13 - public or private
09:14 - but you might have like many other
09:15 - examples where there's a lot more
09:17 - different potential answers to like a
09:19 - certain question or potential
09:20 - a lot of different branches so
09:24 - i know alex do you have an example on
09:25 - top of your head
09:27 - um let's see so kind of a classic
09:30 - example
09:31 - is um like assigning a grade
09:34 - to students based on their number score
09:37 - so
09:38 - if they have if they're between a 90 and
09:40 - a 100 you have an a
09:41 - or you know there's like a minus that
09:43 - kind of stuff in there they're between
09:45 - 80 and 90 they're in the b range if
09:47 - they're between
09:48 - uh 70 and 80 they're in the c range
09:50 - right and so it's the same question
09:52 - right it's what is your grade but there
09:54 - are many possible different answers
09:56 - right and so you could see that
09:57 - kind of thing branching in many
09:59 - different directions yeah and if you're
10:00 - thinking about that in like a diagram so
10:02 - instead of just having like
10:03 - two arrows were pointed to you know a
10:06 - and b it would be like one to a one to b
10:10 - one to c one to d one to f um
10:13 - you know so basically you can have
10:14 - diagrams with like many different
10:16 - possible branches um but
10:20 - they basically work the same way as this
10:22 - so it's the same idea
10:23 - yeah the other the other question i want
10:25 - to ask here was
10:26 - is it possible to have more branches
10:30 - depending on which way you go
10:31 - right so if i'm public could we ask
10:33 - another question
10:34 - that uh it only gets asked if you're
10:37 - public right could there be another
10:38 - essentially diamond there that branches
10:40 - again
10:41 - yeah so you could also have like me you
10:43 - can also have like more depth
10:45 - so instead of just asking one question
10:47 - you can ask like
10:48 - at each step there's basically like
10:49 - another condition it checks
10:51 - like another conduct another question so
10:53 - like let's say
10:55 - i don't know i can't think of an example
10:56 - well i guess for an example for
10:57 - instagram like
10:58 - ask if it's public and shows a person
11:00 - test uh text
11:02 - um let's say you want to like like or
11:04 - not like the post you can have like
11:06 - another
11:06 - question coming off that is like do you
11:08 - like the post
11:09 - then it might show like you know a red
11:11 - heart or like some indication that
11:12 - you've liked it
11:13 - versus if you don't it won't show that
11:15 - indication um
11:16 - so you can have like basically you can
11:18 - have like a wider diagram that has a lot
11:19 - more branches but you can also have a
11:20 - lot more depth
11:22 - where there's a lot more conditions and
11:24 - like questions being asked
11:26 - and we're going to go over a few
11:27 - examples in the next lesson as well as
11:30 - um and hopefully we get to the challenge
11:32 - problems where
11:33 - we'll see that you can have like a lot
11:35 - of different type of conditions and that
11:36 - they branch off of each other
11:37 - yeah and and just to introduce some like
11:40 - you know kind of
11:41 - fancy terminology that idea of
11:44 - having a longer tree of more questions
11:47 - that could be the concept of like
11:49 - nesting conditionals
11:50 - right so is this post public or private
11:53 - if the answer is yes
11:54 - then i'm going to ask another another
11:56 - question so that it's like that second
11:58 - question
11:58 - exists only if the first question is
12:00 - true so it's kind of nested inside the
12:02 - other one which is something that we'll
12:04 - see um
12:04 - again in our python programming awesome
12:08 - um so i think that is what i'll show
12:11 - from the first
12:12 - lesson so we can go to
12:16 - the next lesson also if anyone is just
12:18 - joining and looking for a link
12:20 - the link to this is in the description
12:23 - and then now i'm going to go
12:24 - for control flow to the next lesson i'll
12:27 - open a new tab so
12:29 - i'll have to go back okay
12:32 - so we just went over
12:35 - kind of a conceptual idea so now in this
12:38 - lesson we'll actually like dive into
12:40 - coding
12:41 - and see how it works in actual python so
12:43 - i'll quickly go through this
12:44 - introduction because it's
12:45 - kind of a bit of review from the last
12:48 - lesson
12:49 - but this kind of this actually is pretty
12:51 - because it gives you more of an idea of
12:53 - like
12:53 - kind of what like a deeper maybe this
12:56 - one actually isn't wider but a deeper
12:57 - um tree might look like if you had more
13:00 - conditions
13:00 - so this kind of just goes through you
13:02 - know a morning routine
13:03 - so you wake up in the morning first you
13:06 - might ask yourself
13:06 - is it a weekday if it is then you got to
13:09 - get up at 6 30.
13:11 - um that's very early i don't get that
13:13 - early weekdays
13:14 - um okay and then but like let's say it's
13:16 - not a weekday then you get up at 8 30
13:18 - again way earlier than i would wake up
13:20 - but whoever made this must be an early
13:22 - bird
13:22 - um and then so let's say okay let's say
13:26 - today was a weekday so hypothetically we
13:28 - got up at 6 30.
13:29 - um then we check is it raining if it's
13:32 - raining
13:32 - we wear a raincoat if it's not raining
13:34 - you don't wear a raincoat
13:36 - so for me it's not raining where i am i
13:38 - don't know if anyone else is in a place
13:40 - where it's raining
13:41 - but i am not wearing a raincoat and
13:42 - let's just say i woke up at 6 30.
13:45 - um on the other hand let's say a
13:48 - saturday or something we get up at 8 30
13:51 - and then do i need to go outside um
13:54 - if it's no you stay in your pjs if it's
13:57 - yes you get dressed
13:58 - i often just stay in my pjs sometimes
14:00 - even when i go outside so
14:02 - i might make a different diagram but
14:04 - yeah you get the idea
14:06 - um so let's see yeah
14:09 - one of the things that we kind of just
14:10 - talked about this but one of the things
14:11 - i think is important here is that the
14:12 - questions are different depending on
14:14 - the answers and so again the flow is
14:17 - different where
14:18 - if it is a weekday then maybe the first
14:20 - thing that we want to ask is it's
14:21 - raining and then
14:22 - you know our decision depends off of
14:24 - that if it's not a weekday then we ask a
14:26 - different question
14:26 - and you might even imagine uh do i need
14:29 - to go outside if the answer is yes
14:31 - then we might want to ask the question
14:33 - is it raining um
14:34 - do i need to write code or do i not need
14:36 - to rant out so it's like
14:37 - right your the entire way that your
14:41 - program will go
14:42 - will be dependent on the answer to these
14:44 - questions these yes or no questions
14:46 - yeah awesome and you can even keep
14:48 - building off of that so
14:50 - as alex just said like you're getting
14:52 - dressed depending on
14:53 - how it is outside you might put on
14:55 - different things depending if it's sunny
14:57 - raining it's cold out all that stuff
15:01 - um okay so now we're going to move on
15:04 - too so we've kind of gone over
15:06 - like these questions or conditions that
15:08 - we've been asked
15:09 - um something that we haven't yet
15:12 - explicitly said is
15:14 - the answer to these questions are what
15:15 - we call boolean expressions
15:17 - so boolean expressions um allow us to
15:20 - build out our control flow in our
15:21 - program
15:22 - by basically saying if a statement is
15:25 - either true
15:26 - or if it's false um so basically
15:30 - like in the examples we've gone over so
15:31 - like let's say when you like open
15:32 - someone's like
15:33 - instagram page or something the question
15:36 - that's being asked obviously is like
15:38 - is this page private and if it is
15:40 - private
15:41 - then if the answer that question is true
15:44 - um then it'll like
15:45 - not show the person's like text or
15:47 - something versus if it's false
15:49 - like if the person's page isn't private
15:50 - it'll actually show
15:52 - like the person's text photo whatever is
15:55 - um whatever you're trying to look at um
15:58 - okay
15:58 - so to explicitly go over bullying
16:01 - expressions
16:02 - um they're like you can have like many
16:04 - different type of statements but only
16:06 - certain statements are booleans
16:07 - obviously so for example the statement
16:09 - today is a weekday
16:10 - this expression can kind of be written
16:12 - as either true or false because it's
16:14 - either going to be a weekday or it's not
16:15 - going to be a weekday
16:17 - so we would call this a boolean
16:18 - expression and
16:20 - right now we'd say this is true because
16:21 - it is a weekday um but if it was
16:23 - saturday or sunday or something
16:25 - this would be this would evaluate to
16:26 - false um
16:28 - but let's say we have like a different
16:29 - type of phrase so friday is the best day
16:31 - of the week
16:32 - um since this is kind of an opinion this
16:35 - isn't a bullying expression
16:37 - because you can't really say it as like
16:39 - true or false
16:40 - because someone else might disagree with
16:41 - you and say like wednesday is the best
16:42 - day of the week or saturday or sunday or
16:44 - monday or something
16:45 - whatever day of the week they choose um
16:48 - yeah you could almost
16:49 - i might have meant that to be like my
16:52 - favorite or
16:53 - i think the best day of the week is
16:54 - friday that might be a boolean
16:56 - expression right it's a it's like a
16:58 - thing that's either true or false for a
17:00 - given person yeah
17:01 - so if you were to so if you were to say
17:03 - jamie's favorite day of the week is
17:05 - friday
17:06 - specifically pointing at me or alex's
17:08 - favorite day of the week is friday
17:09 - then you can say that is a bullying
17:10 - expression because it's specifically
17:13 - tied to that person
17:14 - and it may not may or may not be true
17:16 - yeah you can almost think of these
17:18 - as the like questions that we were
17:19 - talking about before where the question
17:21 - is
17:22 - almost does sunday start with the letter
17:24 - c the answer is no
17:25 - or does friday or does jamie think
17:28 - friday is the best day of the week the
17:29 - answer is either yes or no right so
17:30 - these boolean expressions are really
17:32 - kind of like the questions that we are
17:33 - asking that i have yes or no answers
17:37 - all right um so how about
17:40 - i hope i didn't scroll down and show the
17:41 - answer this but how about if anyone
17:43 - wants to answer in the chat
17:44 - sunday starts with the letter c does
17:46 - anyone think that is a boolean
17:48 - or not a boolean expression you can
17:50 - answer in the chat
17:51 - um and we'll give you something and i
17:54 - know that our our video is like uh
17:56 - we might have to wait a couple of
17:57 - seconds to yeah
17:59 - um while we're waiting jamie one of the
18:01 - things that i wanted to say was
18:03 - earlier when we were discussing multiple
18:05 - paths right
18:06 - and i gave the example of the letter
18:08 - grade so that actually
18:10 - isn't a great representation of a
18:11 - boolean expression right because
18:13 - there are that would be something with
18:14 - multiple answers and so
18:17 - you could picture that that uh
18:20 - multi-answer question of like is your
18:22 - you know what is your grade it's either
18:23 - an a b c or d
18:24 - you could picture that as a series of
18:26 - boolean expressions is
18:27 - is my grade an a if the answer is yes
18:29 - then you know what your grade is if the
18:31 - answer is no
18:32 - then you could ask another boolean of is
18:34 - my grade a b
18:35 - the answer is either yes or no is my is
18:37 - my grade a c
18:38 - yes or no so like you know a multi
18:41 - a question that has multiple answers
18:43 - like that could really be broken into
18:44 - like multiple
18:45 - ruling expressions yeah um i think we
18:49 - had a couple answers in the chat and
18:50 - everyone is right
18:51 - it is a boolean um so
18:55 - good job everyone with that um so yeah
18:57 - so sunday starts with the letter c
18:58 - so this is a boolean and also it would
19:00 - obviously evaluate to false
19:02 - um because sunday does not start with c
19:06 - um so
19:09 - and these so in this exercise um
19:14 - this is kind of fun it's like a little
19:15 - quiz so i'll just do like the first
19:17 - couple statements and i'll move on to
19:18 - the next part um
19:20 - so it gives a couple different
19:22 - statements and we have to answer whether
19:23 - or not
19:24 - we think like what
19:27 - oh so we answer yes
19:30 - oh we answer yes if it is a boolean
19:32 - expression and we answer
19:33 - no if it's not a boolean expression so
19:37 - this isn't so they give an example
19:39 - statement my dog is the cutest dog in
19:41 - the world since his opinion is not a
19:42 - boolean
19:43 - so you'd set it to no so let's go with
19:45 - statement one
19:46 - dogs are mammals um alex what do you
19:49 - think do you think this would be yes or
19:50 - do you think this mean now
19:51 - that seems uh so well yes that does seem
19:55 - like a boolean
19:56 - expression and furthermore the answer
19:58 - seems to be yes
20:00 - yeah so so the answer yes or no is to
20:03 - whether or not it's a balloon expression
20:04 - the bullying expression itself would be
20:08 - true because it is a boolean expression
20:11 - and it would evaluate to false
20:13 - um what about statement two my dog is
20:16 - named
20:16 - pavel pavel i don't know
20:20 - yeah uh paul i don't know uh yeah so to
20:22 - me that seems like a boolean expression
20:24 - right that's a statement that can either
20:25 - be yes or no
20:26 - so it is a boolean expression that for
20:29 - me
20:30 - would evaluate to false my dog's name
20:32 - isn't
20:33 - pawpaw yeah same my dog's name is also
20:35 - pablo
20:36 - um okay so let's also go to here i'll
20:39 - just do one more
20:40 - so dogs make the best pets oh this one
20:43 - might hurt me
20:44 - um so statement three this one's a
20:46 - little bit trickier do we think
20:48 - i'll let people answer in the chat do we
20:50 - think that this would be
20:51 - a boolean or not a boolean
20:56 - and i see in the uh uh
20:59 - anuj in the chat is asking can anyone
21:02 - tell me what a boolean is do we want to
21:03 - give
21:04 - like another quick definition of what a
21:06 - boolean is uh
21:07 - just for folks in the chat
21:16 - yeah so uh a boolean expression in
21:19 - general is something that can be
21:20 - evaluated it's like a fact right it's
21:23 - something that
21:24 - um is either true or false and so jamie
21:27 - what do you think for dogs make the best
21:29 - pets
21:29 - is this a boolean statement so this
21:32 - isn't a bullying statement because it's
21:33 - an opinion
21:34 - so it would differ for different people
21:36 - um
21:37 - but if i if you were to say so like dogs
21:40 - make the best pets that expression
21:41 - itself is not a boolean um
21:44 - but if you were to change it to like
21:46 - alex believe
21:48 - dot believes dogs make the best pets
21:50 - then that would be a bullion
21:52 - um so this statement would actually be
21:55 - no
21:57 - all right so i think we can go on
22:01 - the next exercise
22:04 - okay so now
22:08 - pam says if it was jamie's dog is the
22:10 - best it would be true and therefore a
22:11 - boolean but sadly no
22:12 - so yeah jamie's dog is the best that
22:15 - could be
22:16 - i mean that's kind of an opinion uh
22:18 - right i so i would say
22:21 - the boolean statement would be jamie
22:23 - thinks jamie's opinion is that jamie's
22:26 - dog is the best right that's a thing
22:27 - that's either true or false
22:29 - i don't i might argue that that is just
22:30 - true no matter what though okay um
22:33 - one thing before we before we move on i
22:35 - know that these are like kind of
22:36 - it's like it's kind of hard to they're
22:38 - like what's the point right the
22:40 - difference between an opinion and a fact
22:41 - like
22:42 - uh who cares what's the point how does
22:43 - this relate to programming at all i
22:44 - think the important thing here is that
22:47 - basically we want something where the
22:48 - answer is always the same
22:50 - no matter who is answering the question
22:52 - because we want every computer in the
22:54 - world to be
22:54 - able to answer the question the same so
22:56 - something that's an opinion
22:57 - like dogs are the best animals in the
23:00 - world we don't want some programs to
23:01 - answer that yes and some programs answer
23:03 - that no
23:04 - right we want a fact that's consistent
23:05 - across all programs
23:08 - yeah exactly um also someone said
23:10 - they're watching from jupiter which
23:12 - i think is funny okay so we have our
23:15 - boolean expression down
23:17 - boolean expressions down we have we know
23:19 - that conditions basically ask a question
23:21 - but then now we have to relate these two
23:23 - things so we do these through things
23:25 - called relational operators so
23:28 - the two are going to go over to the two
23:30 - are going to go over right now
23:31 - are either equals two or not equals two
23:35 - um so basically we want to like form a
23:39 - relationship between these
23:40 - booleans and this question um so we like
23:44 - what these like relational operators do
23:46 - is it basically tries to test
23:48 - like okay is this true or is this not
23:51 - true
23:51 - so the way we do equals in python is we
23:54 - do these two equal signs
23:56 - and the difference between the two equal
23:58 - signs and the one equal sign is in
24:00 - python is that like
24:02 - when you use one equal sign you're
24:03 - basically saying something is equal to
24:05 - something it's like let's say i say x
24:06 - equals four like you're just like
24:08 - assigning that
24:09 - variable x to the value four when you
24:12 - use the double equals
24:13 - what you're doing here instead is you're
24:15 - basically
24:16 - like you're basically asking python or
24:19 - like python is basically like evaluating
24:20 - like
24:22 - is this thing equal to this thing so
24:24 - like an example is like
24:26 - the first example they give is like one
24:27 - equal equal to one
24:29 - so this is basically like testing like
24:31 - okay does one
24:32 - equal one and since it does it will turn
24:34 - the boolean value true
24:37 - um and then does not equals that's this
24:40 - cool little
24:40 - you know symbol explanation mark
24:44 - equal so that basically is it's
24:46 - basically um doing the opposite it's
24:48 - basically
24:48 - asking is 2 not equal to 4
24:51 - in this example and again that would
24:54 - evaluate to true because 2 does not
24:55 - equal 4.
24:56 - um so it's like a subtle difference i
24:59 - find that a lot of like beginning
25:00 - programmers often when they're like
25:01 - writing conditional statements they'll
25:03 - forget the double equal sign
25:05 - so it's important to keep in mind um
25:07 - that whenever you're working with
25:08 - conditions and you're like trying to
25:10 - like basically get your program to like
25:11 - answer a question or like test out a
25:14 - condition
25:15 - use like a double equal sign instead of
25:16 - a single equal sign
25:18 - um this one's pretty interesting this
25:21 - seven equal equals seven so can anyone
25:24 - think about why
25:25 - this comes out as false instead of true
25:29 - yeah so this this relates a little bit
25:31 - to what we talked about in
25:33 - i think it was our first um session from
25:35 - this um
25:36 - from this series but the idea of data
25:38 - types where
25:39 - you know if i use the plus symbol with
25:42 - two numbers
25:43 - that plus symbol does a certain thing to
25:45 - those two numbers but if i use a plus
25:47 - symbol with two strings
25:48 - it does a different thing and so yeah we
25:50 - see we have someone in chat
25:52 - ionis um is saying string versus integer
25:56 - where these two things actually aren't
25:58 - the same even though one equals equals
26:00 - one is true
26:01 - seven in quotes equals seven is false
26:04 - because they're two different data types
26:05 - and that's again that's a thing that
26:07 - really matters a lot in programming
26:09 - because
26:11 - uh different data types will do
26:13 - different things and so you definitely
26:14 - want to make sure that
26:15 - the computer understands that these two
26:16 - things are in fact different
26:19 - yeah um okay
26:22 - so again we have like a couple fun
26:25 - practice questions
26:27 - so similar to last time it seems like we
26:29 - have like these different statements
26:31 - and we can paste in these so how about
26:34 - determining the following are true or
26:36 - false input your answer is true or false
26:37 - input
26:38 - okay for statement one it looks like we
26:40 - have to do some quick maths here
26:41 - um so statement one is five times two
26:45 - minus one
26:46 - equals equals eight plus one now alex i
26:49 - am bad
26:50 - do at math yeah so to me that looks like
26:53 - both of those are going to be 9 right
26:55 - 5 times 2 is 10 minus 1 is 9 is
26:58 - equal equal to 8 plus 1 which is 9. so
27:01 - 9 equals equals 9. to me seems like that
27:03 - should be true
27:04 - yep i agree um also notice when i'm
27:07 - putting in
27:08 - true and i if i also write false like i
27:10 - put a capital t
27:11 - um that's just like python syntax
27:13 - whenever you write true or false
27:15 - and you want it to like evaluate as like
27:17 - specifically a boolean true
27:18 - or a boolean false you have to use a
27:22 - capital first letter
27:24 - okay okay now this one looks a little
27:26 - bit trickier so this time we have it
27:27 - does not equals 2
27:28 - and we have some more math so we have 13
27:30 - minus 6 on the left side and then 3
27:32 - times 2 plus 1 on the right side all
27:35 - right so it looks like we're going to
27:36 - get
27:37 - 7 on both sides right um so i have 7
27:41 - not equal to 7. so is it true or false
27:45 - that 7 is not equal to 7
27:47 - that's a false statement
27:50 - yeah right exactly so in this case
27:53 - so that's this is where the does not
27:55 - equal two comes into place so if these
27:56 - were
27:57 - seven since seven actually does equal
28:00 - seven
28:00 - the answer to this condition would be
28:02 - false yeah
28:04 - it's this is definitely something that i
28:06 - think is it's hard to wrap your mind
28:07 - around a lot it's kind of like this
28:08 - double negative thing
28:09 - where the question that you're asking
28:11 - here is is seven not equal to seven
28:14 - is that a true or false statement um
28:17 - and see i've even confused myself is
28:19 - seven not equal to seven
28:21 - um that is false right seven yeah
28:24 - yeah yeah so i think
28:28 - i'll just do the first two for those and
28:30 - i'll move on to the next part
28:32 - which is boolean variables okay
28:35 - one thing i want to say before we go on
28:37 - actually could you click back to the
28:38 - last oh yeah first last card
28:39 - so one thing that i think is like a
28:41 - little bit hard to
28:43 - or a question that comes up a lot when
28:45 - you're starting to work with
28:46 - these boolean statements is like
28:48 - basically who cares right it's like you
28:50 - can look at these statements and you can
28:51 - evaluate
28:52 - seven equals seven and know that's true
28:54 - or false and so the question is like why
28:56 - do we even bother why do we have the
28:57 - computer
28:58 - do this and i think one thing that um
29:02 - so i think it's important to like give
29:03 - an example of why it's useful for
29:06 - um the computer to be able to evaluate
29:07 - these things to true or false
29:09 - and so you might imagine a situation
29:11 - where the thing on the left-hand side
29:13 - is a variable that you as the programmer
29:16 - don't really know what the value is
29:18 - so let's say the variable is like my
29:20 - username right and my username could be
29:22 - a list from a bunch of different
29:25 - usernames and then the thing on the
29:26 - right
29:27 - is you know the string alex so basically
29:30 - you're asking
29:31 - hey is the person that's currently
29:33 - logged in is their name alex
29:35 - and so that's i i just want to give an
29:39 - example of
29:40 - where it's something that is not
29:41 - immediately obvious to the programmer
29:42 - because a lot of times in coding what
29:44 - you're going to have is you're going to
29:45 - be comparing two things
29:47 - that you can validate what the answer
29:49 - what what
29:50 - you know is currently stored in that
29:51 - variable but by just looking at the code
29:53 - itself it's not immediately obvious so
29:55 - it might be
29:55 - some variable equals some other variable
29:58 - right and you're asking the computer to
29:59 - see are those two things equal or not
30:01 - um it's not always as simple as kind of
30:04 - you know
30:04 - comparing two numbers that you could
30:06 - take by
30:07 - yeah these examples are very just um
30:10 - like
30:12 - they're just numbers but there are
30:13 - obviously like a lot more examples out
30:15 - there
30:16 - where like relating to things is like
30:18 - much
30:19 - more like real and like
30:23 - as alex was saying like especially with
30:24 - like testing out like you know
30:26 - if your username is like correct and
30:28 - stuff like that that's like where
30:29 - booleans really come in and are
30:30 - important
30:31 - especially for programmers who are
30:33 - writing software
30:34 - to make sure that you know passwords and
30:37 - usernames are working correctly
30:39 - and that they're keeping their systems
30:40 - safe yeah um
30:42 - okay so
30:47 - now we'll move on to boolean variables
30:50 - so one thing that's important so we've
30:52 - only mentioned true and false as
30:54 - boolean variables so far these are
30:55 - actually the only two boolean variables
30:57 - you can have
30:59 - there's no other type of boolean
31:00 - variable it's kind of a binary system
31:03 - um so if you if you've ever like
31:06 - experienced if you ever like heard of
31:07 - binary it's just like zeros and ones
31:09 - um that's kind of what true and false
31:12 - are based off of
31:12 - you know so you basically either have
31:14 - something that's true which would
31:15 - actually
31:16 - kind of is like the same thing as one or
31:18 - false which is like the same thing
31:20 - as zero yeah one of the little things
31:22 - that i had uh
31:23 - that i learned a couple years ago and
31:25 - never never knew
31:26 - is that on like light switches
31:28 - oftentimes you'll see
31:30 - like a line and a circle uh and like one
31:33 - way is turning the light switch on and
31:34 - the other is turning it off
31:35 - that's actually a one and a zero right
31:37 - the line is a one if you turn it on
31:39 - it's as if it you turned it to true or
31:41 - one and then if you turn it off it's as
31:43 - if it were a zero
31:44 - or off and so a lot of times all of
31:47 - these kind of terms are interchangeable
31:48 - where
31:49 - one and true and on are all kind of the
31:52 - same thing
31:52 - and 0 and false and off are all kind of
31:55 - the same thing
31:56 - that's just the end of the switch
31:57 - something that's actually cool in python
32:00 - um
32:03 - this
32:06 - is actually true for both of these
32:07 - statements yeah right
32:09 - so uh
32:12 - yes so the boolean the python keyword
32:16 - true with the capital t
32:17 - is actually the same thing as a one and
32:20 - the python keyword false
32:21 - with a capital f is actually the same
32:23 - thing as a zero yeah
32:25 - it's a really cool fact um the first
32:26 - time i learned it
32:28 - i was mind blown i was like telling
32:32 - other people but anyway that is a
32:35 - sidebar let's get back to um boolean
32:39 - variables
32:39 - um although i guess that's kind of
32:40 - related anyway um okay
32:43 - so they may create in several ways so
32:45 - one way is like you can just as any
32:47 - other normal variable you can just set
32:50 - it equal to true
32:51 - or set it equal to false um that's
32:53 - actually what we did in the last
32:54 - exercise
32:55 - another thing you can do is you can
32:56 - actually just um like set it equal to
33:00 - the condition you're testing so like
33:01 - this thing bull one
33:03 - right now it's being set equal to five
33:05 - does not equal seven right
33:07 - um this is basically the same thing as
33:09 - setting equal to
33:11 - true because 5 does not equal 7 will
33:13 - like express
33:14 - as a true value um so bool 1 will
33:18 - actually be like
33:18 - set equal to true and i can show you
33:24 - if i were to print full one
33:30 - yep and you'll see in the terminal that
33:32 - it comes out as true
33:34 - and then let's see is there one here
33:36 - that ah
33:38 - so if i tried bool two
33:49 - this one will come out as false so with
33:51 - boolean variables um
33:53 - there are like two different ways you
33:54 - can express them so you can either
33:56 - express them with just like the simple
33:58 - you know just writing it out as true or
34:00 - writing out as false if that's just what
34:02 - you're
34:03 - trying to do or if you're trying to like
34:05 - evaluate whether something is true or
34:06 - false
34:07 - you can test it by you know setting it
34:08 - equal to a variable and seeing what is
34:10 - like
34:10 - seeing what is expressed seeing what it
34:12 - is expressed as
34:14 - yeah and this is actually similar to
34:16 - other variables that we've seen in the
34:17 - past right we've been able to do
34:19 - you know my number equals one plus three
34:23 - and that one plus three is going to
34:25 - evaluate to four
34:26 - and then four is gonna be stored in the
34:28 - variable name this really is the same
34:30 - exact thing
34:31 - where the thing on the right side gets
34:32 - evaluated right
34:34 - five not equal to seven gets evaluated
34:36 - to false and then that false is stored
34:38 - in bool one
34:39 - so it's that same exact idea of the
34:41 - thing on the right side when you're
34:42 - setting a variable
34:43 - gets evaluated to whatever it's gonna
34:45 - evaluate to and then that result is
34:47 - going to be stored
34:48 - in this case we're just using these um
34:50 - logical operators right we're using not
34:53 - equal
34:54 - instead of plus um where if we use plus
34:56 - then it would store 12
34:57 - if we use not equals then it evaluates
34:59 - it in a different way and stores uh
35:01 - false
35:03 - exactly um yeah is there anything else
35:06 - you want to go over
35:07 - on this exercise before we move on no
35:09 - this looks good
35:11 - okay so now okay so now we're going to
35:15 - go over something called
35:17 - if statements so if statements are
35:20 - really cool because now we're actually
35:21 - able to start construct constructing our
35:23 - own control flow programs
35:25 - um so so far we've learned about boolean
35:28 - variables
35:28 - you know the idea of a condition and
35:30 - then the idea of relating these boolean
35:32 - variables and conditions
35:33 - now bringing in if statements will
35:34 - actually be able to like bring these all
35:36 - together
35:36 - and like actually write out a program
35:38 - that you know test a condition
35:41 - yeah the boolean statement was the
35:43 - question again thinking back to those
35:44 - flowcharts the boolean statement was the
35:46 - question that we were asking and now the
35:48 - if statements are how the branching
35:50 - happens where if
35:51 - the answer is yes we're going to go one
35:52 - way and if it's now we're going to go
35:53 - the other way yeah
35:55 - so here like we're bringing back like
35:57 - the idea of um
35:58 - you know like the wake up waking up
36:00 - example so if it's raining then you
36:02 - bring an umbrella
36:03 - um you'd actually like write this out as
36:06 - like a piece of code in python
36:09 - basically by writing you know like kind
36:12 - of the studio code like just test
36:13 - if it is raining then bring an umbrella
36:15 - then bringing it bring an umbrella
36:17 - you know you can write that out as if is
36:20 - raining i think here is raining you know
36:23 - might be like a variable that's attached
36:25 - to some string that's either equal to
36:27 - it is raining or it is not reading and
36:30 - then you might have like a function
36:32 - that says bring a that says that you
36:34 - know
36:35 - tests whether you bring an umbrella um
36:37 - or that that would say
36:39 - bring an umbrella if it actually is
36:40 - raining yeah and i would say is raining
36:43 - there is going to be a boolean right
36:44 - that's going to be something that's true
36:45 - or false
36:46 - and maybe uh you know maybe that boolean
36:49 - was evaluated from something like
36:51 - we say up in the narrative of some
36:52 - string is it raining equal equal true
36:54 - but yeah that thing is arraigning is
36:56 - going to be a variable that either holds
36:57 - the value true or false
36:59 - yeah and here
37:03 - um here this is just like an even
37:05 - simpler example
37:06 - so let's say you want to test
37:09 - if 2 is equal to 4 minus 2 you know for
37:12 - some reason
37:13 - um so for this condition
37:17 - 2 whether or not equals 2 4 minus 2 this
37:19 - would evaluate as a true expression
37:21 - so you would see apple printed in your
37:24 - terminal
37:25 - in this condition would like actually
37:27 - run however like let's say if this was
37:28 - instead of a two let's say this was like
37:30 - a one or something
37:32 - this wouldn't print and basically the if
37:34 - statement would be skipped over
37:35 - and we'll see how that works um in this
37:37 - example in a second
37:39 - okay so
37:42 - there's a functional if statement okay
37:45 - so hold on one second
37:49 - i did this earlier so gotta clear out
37:52 - all the work
37:53 - yeah so right now in our workspace we
37:55 - have this
37:56 - function and within this function
37:58 - there's a conditional statement already
38:00 - um so we have username equal to dave
38:05 - and then we have in our function by the
38:08 - way if you um
38:09 - don't know what a function is um and you
38:11 - missed
38:12 - um out on like one of the early cs101
38:15 - live streams we have
38:16 - them like we have them on our youtube
38:18 - channel so you can go watch
38:19 - um and review what a function is later
38:22 - if you need to
38:23 - um but basically here like the function
38:25 - is just holding the conditional
38:27 - statement so there's
38:28 - not much you need to understand about
38:30 - them
38:31 - so we have a conditional testing if
38:35 - username is equal dave and if
38:36 - it is it tells get off my computer dave
38:39 - so someone's having an issue with
38:40 - someone trying to get onto their
38:41 - computer
38:43 - so if we type here i don't know let's
38:46 - say we type alex or something
38:49 - we're going to print this out but does
38:50 - anyone notice if there are any issues
38:51 - with this right now
38:52 - as it is yeah you can even see in uh an
38:55 - instruction too it says oh no we get a
38:56 - syntax error so something is
38:58 - something is copy is going to be wrong
38:59 - when we run yes so we run this
39:03 - if you notice it gives us this little
39:05 - error that says if username equal dave
39:08 - so whoever wrote this also had the same
39:10 - idea in my head that people often forget
39:12 - to put the double equal sign
39:14 - so it tells us in the terminal you know
39:16 - something's going on in line two
39:19 - here and it says it literally even has
39:21 - like a little arrow that's pointing to
39:22 - this equal sign so you know
39:23 - python's really trying to help us out
39:25 - here um so here we just add
39:28 - a second equal sign um or if you want to
39:31 - test if it's not equal to dave you'd put
39:32 - like a
39:34 - exclamation point um but here we're
39:35 - trying to evaluate if it is equal
39:37 - and then we can rerun it yeah again so
39:41 - we're trying to ask that question
39:42 - is the user name equal to dave and the
39:44 - way that you ask the question of the
39:46 - quality is what double equals
39:48 - exactly so now we see that so like in
39:51 - this case
39:52 - we got none um it basically just means
39:54 - that like
39:56 - this function didn't return anything so
39:58 - python is just telling us like we didn't
39:59 - get
39:59 - we didn't see anything just letting you
40:01 - know um
40:02 - and the reason it did that is because
40:05 - you know i set the username equal to
40:06 - alex
40:07 - so this didn't actually run so if i were
40:09 - to actually set the sequel to dave
40:10 - instead
40:13 - we would see it run in yeli oh it's
40:16 - telling us to do a different thing but
40:17 - don't worry about that
40:18 - um but yeah that should have stoned
40:21 - oh yeah so it says get off my computer
40:22 - right so the yeah
40:25 - the instruction was yelling at us
40:26 - because we didn't do what it actually
40:27 - asked but you can see
40:28 - now that we've switched username dave
40:30 - now when we call the function
40:32 - dave or username which is storing the
40:34 - string dave
40:35 - is equal to the string dave and so um
40:38 - you know that thing that is returned
40:42 - um yeah i think that's it for this
40:45 - section because we've gone over if
40:46 - statements
40:46 - anything else you want to go over alex
40:48 - um
40:50 - no i uh i don't think so i i think maybe
40:54 - the indentation although i think that's
40:55 - um
40:56 - oh yeah a couple just like a couple
40:58 - syntax notes notice at the end
41:00 - of each con at the end of the statement
41:02 - you have a colon
41:04 - um that basically just tells python that
41:06 - the next line should be indented so if
41:07 - you notice this
41:08 - this line isn't is indented but if i
41:10 - were to do this
41:12 - python would not be happy with me
41:14 - because it's expecting the scene indent
41:16 - so in your condition statements they
41:18 - should all kind of be modeled this
41:20 - similar way
41:21 - where you have your if statement you
41:23 - have your condition
41:25 - and then you have the colon and then the
41:26 - line any lines that you
41:28 - any pieces of code that you want to run
41:31 - after this condition
41:33 - like specifically for that condition
41:36 - should be indented
41:37 - yeah the exact same thing as the
41:39 - function indentation from last time
41:40 - where
41:41 - anything indented one indentation level
41:44 - is going to be considered a part of the
41:45 - function
41:46 - just like anything indented one
41:48 - indentation level for this conditional
41:50 - is going to happen if the condition
41:51 - evaluates to true
41:53 - yeah exactly all right
41:56 - so now okay so now we're going to
42:00 - get into even more relational operators
42:01 - so let's say you don't want to evaluate
42:03 - if something is equal
42:05 - or not equal you know there are a lot of
42:07 - different ways you can compare things
42:08 - so there we'll go over four more right
42:11 - now which are
42:12 - greater than less than greater than or
42:14 - equal to and less than or equal to
42:16 - the way you write these in python um
42:19 - is kind of the same way you might even
42:20 - introduce some math you know
42:22 - i think my math teacher when i was in
42:24 - melbourne elementary school called these
42:25 - like alligator
42:27 - things get me to the alligator eating
42:29 - the bigger side yeah yeah something like
42:30 - that something like that
42:31 - um and then obviously with like greater
42:33 - than equal to
42:34 - most people don't really have that key
42:36 - on their computer um so the way python
42:38 - does it is basically like you put
42:41 - either the greater than or the less sign
42:43 - less than sign first and then you put
42:44 - equals next so that will tell python
42:46 - instead of just greater than
42:47 - it wants to test that it's greater than
42:49 - equal to or instead of just testing less
42:50 - than it wants to test if it's less than
42:52 - or equal to
42:52 - yeah so these would be that's a pretty
42:54 - common mistake too is to have
42:56 - uh folks reverse those to put equal less
42:59 - than
42:59 - when they're trying to do less than or
43:00 - equal to yeah the good thing is if you
43:02 - if you accidentally do that
43:04 - and you run your code like python will
43:05 - normally give you an error that's like
43:07 - it will like point to it um so you'll be
43:09 - able to see it
43:10 - um so these are good for if you want to
43:13 - like you know evaluate
43:14 - um want to like compare different
43:16 - numbers so
43:18 - for example i think like a fun little
43:20 - example of this person wrote here
43:24 - is um so like a function let's say
43:26 - you're at a
43:27 - if you're working at a movie theater um
43:30 - and you have like a function that
43:30 - basically like just checks
43:32 - the age of like you know someone's id
43:35 - it's a pg-13 movie so you know you want
43:38 - the person has to be either 13 or older
43:43 - so to do that you basically have a
43:46 - condition that
43:47 - checks if age is greater than or equal
43:48 - to 13 and if so it would return true
43:51 - so you want greater than equal here
43:54 - because
43:55 - if they're 13 you can see a pg-13 movie
43:57 - at least i'm pretty sure
43:58 - um and then you know if that is true
44:02 - you'll return true
44:04 - um so let's go over an example so
44:07 - we can write a function called greater
44:09 - than that returns
44:10 - that takes two integer inputs x and y
44:12 - and returns a value that is greater
44:14 - if x and y are equal return the string
44:17 - okay so this will be fun because i think
44:19 - we actually have to write
44:20 - more than one if statement and we'll see
44:22 - how that works all right
44:25 - so to define a function just in case um
44:28 - and you missed you just write def and
44:31 - then greater than
44:34 - and then this will take two inputs um
44:38 - x and y so you'd put x as your first
44:41 - input
44:42 - and y as your second input um sometimes
44:44 - like
44:45 - people can often like refer to them as
44:46 - parameters
44:48 - um and then as alex said before um
44:52 - same thing with conditionals you want to
44:54 - put a colon at the end
44:55 - basically what this colon does is it
44:57 - just makes it it first of all it's
44:59 - needed
44:59 - and also python is like python
45:02 - ids are pretty nice normally because
45:04 - they'll make it so you don't actually
45:05 - have to like press
45:06 - indent it'll automatically do it for you
45:08 - which is very nice
45:09 - um yeah i think i think that happens on
45:10 - codecademy where if you know if this is
45:13 - a python file which it is you can see
45:14 - it's named script.py
45:15 - if there's a colon and when you hit
45:17 - enter it will automatically indent to
45:19 - the
45:19 - you know one indentation level in yeah
45:23 - um so something i like to do whenever
45:26 - i'm like writing out condition
45:27 - statements that i think can be helpful
45:28 - especially when you're first
45:29 - figuring out so like there's two
45:31 - different things we're trying to test
45:32 - here we're trying to see
45:35 - um returns the value that is greater
45:39 - um and then if x and y are equal it
45:41 - returns a string
45:42 - so what i might do is i might like write
45:43 - like there are like three possibilities
45:45 - we can have here right
45:46 - we can either have that x is the
45:47 - greatest y is the greatest
45:49 - or that they're the same so
45:52 - i might like list out the different
45:54 - conditions so i might say x and y
45:56 - are the same
46:00 - x is bigger y is bigger
46:05 - whoops can't spell so
46:09 - this kind of like lets me think about
46:11 - like what's happening in this program in
46:12 - my head before i actually start writing
46:14 - code because sometimes it's easier to
46:15 - just like
46:16 - even like write something on paper or
46:19 - um like just figure out in your head
46:21 - before you actually jump into python
46:23 - syntax
46:24 - yeah and i think even doing the
46:25 - flowchart here
46:27 - it would be health one two where we're
46:29 - at the very top
46:30 - we have that first triangle and the
46:32 - question that we're asking are are x and
46:34 - y the same
46:35 - and then after we ask that question we
46:36 - can say okay what if yes what if no
46:40 - yeah exactly um yeah so a lot of
46:42 - different things you can do especially
46:44 - like
46:44 - this will be very helpful because
46:46 - especially you you like may have a lot
46:48 - of conditional programs where you have
46:49 - like
46:49 - a lot of different possibilities so
46:52 - mapping them out before you actually
46:53 - jump into coding
46:55 - is very very helpful and definitely
46:57 - highly recommended
47:00 - so how about um
47:03 - alex what would be the first like for x
47:06 - and y are the same how do i like you
47:08 - know test this out
47:09 - yeah so we're we're asking a question
47:11 - here so we we want this to be an if
47:13 - statement first of all so we want
47:14 - if and now we're checking for equality
47:17 - so we want if
47:18 - x equals equals y right if these two
47:20 - things are the same
47:24 - and what do i have to put at the end
47:26 - here and then we need a colon to say
47:28 - if that's the end of our conditional and
47:30 - now when we hit indent
47:31 - or when we hit get to a new line now
47:34 - inside this indentation this is what we
47:36 - want to do
47:37 - if um if the question that we asked was
47:40 - true so again picture your flow chart
47:42 - uh we've now said we're now indent
47:45 - indented one level which means that the
47:46 - answer to that question is true
47:48 - and so in this case we want to return
47:50 - the string these numbers are the
47:51 - same yeah and i'm just going to copy and
47:53 - paste it because i'm
47:56 - feeling lazy um okay
47:59 - so how about we give some people time in
48:03 - the chat to think about how we'd write
48:05 - is x for like a condition for x is
48:08 - bigger
48:09 - yeah so well first of all i think this
48:11 - is something that we haven't really
48:12 - covered yet
48:13 - so we've covered how do we how do we say
48:16 - yes that condition was true right we're
48:17 - at that
48:18 - that flow chart x equals equals y we
48:20 - know how to say
48:21 - yes that condition is true and so
48:23 - therefore return these numbers are the
48:25 - same
48:25 - but if the answer is no then that how do
48:29 - we go on to something else
48:31 - and how you do that is basically you
48:33 - just keep writing code right
48:35 - if x equals equals y is false it will
48:38 - just skip everything inside that
48:40 - that uh inside that indentation block
48:43 - and we'll skip line four basically
48:45 - um in our program here and so by just
48:48 - continuing to write code it's as if
48:50 - we've taken that no path
48:51 - so x is not equal to y um and so we're
48:54 - going to
48:54 - come down here on five yeah
48:58 - yeah so if we just write a second
49:00 - statement for if i think
49:02 - um i honestly has yeah
49:05 - yeah he's even he's even a head yeah
49:08 - so um but so we can also we can write
49:11 - just like an if statement so for fx is
49:14 - bigger
49:15 - so we do if x is greater than y and then
49:18 - in this program you want to return the
49:21 - value of the
49:22 - bigger value so to return x
49:27 - and then for y is bigger we do if y
49:31 - is greater than x return y
49:35 - and then um giannis and vernon they're
49:37 - already a little head we'll
49:38 - we're gonna get to e-lift probably in
49:40 - like a second um
49:41 - but for now uh this works for this
49:45 - program just to write if statements
49:46 - and then let's see if we run it
49:48 - hopefully
49:50 - yeah you might need to uh reset
49:53 - if you go into your wheel and hit set
49:55 - progress in this exercise yeah and i'll
49:57 - have it copy and paste
50:01 - boom okay so i got a green check mark
50:04 - yay um okay
50:07 - and i think that i think i'll just stick
50:09 - with that for uh the if statements and
50:11 - then we can go
50:12 - on to um and giannis is actually saying
50:14 - you need to call it which is
50:15 - which is true um why don't we show an
50:18 - example of calling this function
50:19 - yeah so if i call
50:23 - print greater than
50:27 - and let's try seven five
50:31 - and here i'll even do a couple different
50:33 - examples just to make sure they're all
50:38 - working
50:43 - so when you're testing out your code you
50:45 - should probably like
50:46 - think ahead of like what you should
50:48 - expect to see so for this one i'll
50:50 - probably expect to see
50:52 - seven returned for this one i should
50:53 - probably expect to see
50:55 - these numbers are the same returned and
50:57 - then for this one i should probably see
50:58 - nine returned so let's hope it's working
51:00 - as it should
51:03 - boom nice and code category because i
51:05 - wasn't following directions in the next
51:06 - part before before we go on and i know
51:09 - that we're kind of running out of time
51:10 - but i think that it's worth talking
51:11 - about here
51:12 - there are a couple of things to notice
51:14 - here one is that
51:16 - we are using these greater than and less
51:18 - less than and equal signs
51:20 - um with just integers here things are
51:22 - going to behave slightly differently if
51:24 - you're using different data types again
51:25 - thinking about
51:27 - different operators right in this case
51:28 - our operators are these
51:30 - um comparison operators or relational
51:33 - operators
51:34 - greater than less than equal to these
51:36 - are all behaving in a certain way
51:38 - when you're doing integer integer to
51:40 - integer but if you change it to
51:42 - string an integer like let's change that
51:44 - first 5 on line 13 to a string and just
51:47 - see what happens
51:51 - so we already know that those aren't
51:53 - going to be considered the same right so
51:54 - that conditional online 3 is going to be
51:56 - false
51:57 - so it's going to either do it might you
51:59 - know the condition
52:00 - string 5 is greater than number 5 might
52:03 - be true
52:04 - or number five is greater than string
52:05 - five might be true or none of them might
52:06 - be true so let's see what happens here
52:08 - yeah this will be it's page as a segment
52:10 - oh and it's just
52:13 - not happy yeah so it's even saying hey
52:15 - this operator greater than i can't
52:18 - use between string and integer and
52:21 - that's something that's very python
52:22 - specific right there are probably other
52:23 - program languages that do let you
52:25 - compare
52:26 - a string and an integer with the greater
52:27 - than sign um
52:30 - but that's that's something that python
52:31 - doesn't let you do and so again that's
52:33 - something to think about is that
52:34 - these data types are really important
52:36 - basically the operators the symbols that
52:38 - you're using
52:39 - do different things depending on what
52:41 - the data types are yeah
52:43 - and another thing another thing just
52:44 - know here if there are both strings
52:46 - um i believe the first condition will
52:48 - actually work because
52:49 - you can compare two different strings to
52:51 - see if they're equal each other
52:53 - but yeah so
52:56 - the string five is equal to the string
52:58 - five
52:59 - as well um so this one won't come out as
53:02 - these numbers are the same
53:04 - um and oh giannis is saying
53:07 - oh no hey can you hear me
53:10 - yeah i can i think i think we had a
53:12 - little up there yeah giannis is saying
53:14 - uh
53:15 - try except in that case right so there
53:16 - are things that you can do to try to
53:18 - kind of validate your input type where
53:20 - you can try to confirm
53:22 - that hey this is a you know i'm
53:25 - comparing a string with a string or i'm
53:27 - comparing an instrument with a string
53:28 - and you might
53:29 - you might think why would you need to do
53:30 - that if you're the programmer don't you
53:32 - know what these are
53:33 - well sometimes you could have user's
53:34 - input information where
53:36 - imagine you have like a text field on a
53:38 - website that's asking for your age
53:40 - what if somebody enters in you know text
53:43 - what if they put in their name for that
53:44 - age
53:45 - and so it's like your program should be
53:47 - versatile enough to
53:49 - handle errors like this where the data
53:51 - type might not
53:55 - all match so we only have five oh oops
53:59 - so we only have five minutes left um
54:04 - i'm wondering what the next what the
54:06 - most important thing to go over is
54:07 - before this ends
54:10 - um i think we can actually just try
54:14 - another one of those code challenges
54:15 - there's there's obviously stuff in here
54:17 - that we
54:18 - haven't gotten the chance to go through
54:19 - yet um and or not are all kind of a
54:22 - group
54:22 - and then else if and alice are all kind
54:24 - of a group so that's good stuff to
54:26 - to go through on your own but uh do you
54:28 - want to try one of these code challenges
54:30 - yeah cool i'd love to um
54:33 - okay so if there's anything in the code
54:37 - challenge that is like something we
54:38 - haven't gone over
54:39 - i'll try my best to like well me and
54:41 - alex will try our best to like explain
54:42 - it so that um
54:45 - it makes sense so i think for this first
54:48 - code challenge it actually is stuff
54:50 - we've only gone over
54:51 - so i think it'll be perfect yeah um so
54:55 - let's say you're asked you know you want
54:57 - to make sure you know that you're not
54:59 - going over budget
55:00 - this is actually very relevant to me
55:01 - right now because i've just now
55:03 - moved into a new apartment and budgeting
55:06 - is a real concern yeah but budgeting is
55:08 - real
55:08 - um so we want to create our function
55:11 - over budget
55:12 - it has five parameters budget food bill
55:15 - electricity bill internet bill and rent
55:18 - okay that's a lot of things um so
55:20 - basically we want to return
55:22 - true if the budget is less than the sum
55:23 - of our other four parameter
55:25 - or other four parameters so basically if
55:27 - budget is less than you know
55:29 - the sum of food bill electricity bill
55:31 - internet bill and rent
55:33 - and then if you've gone over budget
55:35 - return false
55:37 - um okay so show me this apartment where
55:40 - uh the rent is
55:42 - 30. i don't know what units those are
55:44 - yeah
55:45 - wait yeah if you look at the test it's
55:46 - like rent and
55:48 - food bill is 20 electric yeah we can
55:51 - also try out different uh yeah what a
55:53 - world
55:53 - you can put you can put more real uh
55:55 - numbers in there if you want okay
55:56 - so to define a function start with def
56:01 - over budget
56:04 - and then we want to put all our
56:05 - parameters in here right and
56:07 - i wonder if i can just like sneakily
56:11 - and get rid of and and oh i think that
56:15 - works
56:16 - okay we've got four minutes here we got
56:18 - we've got speed round
56:19 - of code challenge okay
56:22 - so i'm gonna do
56:26 - oh i lost your audio jamie i don't know
56:28 - if you can hear me
56:33 - hmm
56:37 - this might just be me uh people in chat
56:39 - let me know if you lost youtube
56:41 - easy to read hey jamie can you hear me
56:44 - oh
56:44 - yeah hey uh sorry your audio cut out for
56:46 - a second there uh i think you're back
56:48 - oh internet um
56:52 - so then budget is more and then budget
56:54 - is less than
56:56 - you spent now actually i think it might
56:57 - be wrong here is there any other
56:58 - potential case
57:00 - um budget is equal yeah so we have
57:03 - budget
57:06 - equal to what you spent
57:09 - it's actually very similar to what we
57:11 - did uh last time
57:13 - yeah so how about we give people like a
57:16 - minute or so to try to think of
57:18 - you know what would you know the fir
57:20 - budget is morning like what would the
57:22 - condition for that be
57:25 - yeah so this is this is actually kind of
57:27 - cool because this is going to be a
57:28 - combination
57:29 - of um mathematical operators right we're
57:32 - going to be using the plus sign
57:33 - to add a bunch of numbers together and
57:35 - then we're also going to be
57:37 - um using a relational operator to say
57:40 - greater than or less than yeah
57:43 - yeah so
57:47 - i'll still i'll start people off just in
57:49 - case if
57:58 - cool all right i think we can let's get
58:00 - started with this first yeah
58:01 - conditional wall so if
58:04 - so we have so we want to test if budget
58:06 - is more so budget is the thing that
58:08 - we're trying to test against
58:10 - and then we want to check more uh we
58:12 - want to check if it's greater than so
58:13 - we're going to use the greater than sign
58:14 - and then here as alex said we have to do
58:18 - some math
58:19 - so we want to add up all of these things
58:25 - and hopefully i can type them all
58:27 - correctly
58:28 - let me know if i am uh
58:32 - oh my god electricity bill internet
58:36 - bill and rent so i think that's all of
58:38 - them
58:39 - so i think you want to compare oh yeah
58:42 - sorry we
58:42 - yeah yeah we add them all up and then
58:44 - what do we compare them to
58:46 - right we're comparing them to budget so
58:47 - if our budget is greater
58:49 - than what should we return think false
58:52 - right yeah i think wait if budget is not
58:55 - true if budget is less than i'm actually
58:57 - going to um
58:58 - just say yeah so the function is return
59:01 - to your budget
59:02 - so budget is less than um
59:07 - then this would return so i think
59:10 - i think you should return true
59:13 - yes the function return true if budget
59:16 - is less than so
59:18 - it should return false then oh so this
59:20 - return false
59:22 - you can also have it so you know returns
59:25 - uh no you didn't spend more than your
59:28 - budget
59:28 - so good job it's like a string or
59:30 - something um
59:32 - and then let's see what about if budget
59:34 - is less than what you spent
59:36 - yeah so it's going to be the same exact
59:38 - uh condition except for instead of
59:40 - checking greater than we can check
59:42 - less than yep so i'm actually going to
59:44 - just
59:46 - do a little nice quick
59:50 - let's change this and now we could write
59:53 - a you know a full separate condition
59:58 - but we can also just try to let you know
60:00 - put this equals
60:01 - like the budget equal to we can like you
60:04 - know add it to like one of these which
60:06 - is like a simple adding equals after the
60:07 - greater than equal or the less than or
60:09 - equal
60:10 - so ask which one do you think we should
60:12 - add it to so
60:13 - let's throw it on that bottom one if
60:16 - budget is less than or equal
60:17 - to all that stuff return true and i
60:20 - think i think our prompt is a little bit
60:21 - screwed up here
60:22 - uh like in that in that direction so
60:25 - let's just uncomment these and see what
60:26 - happens
60:27 - yeah let's just make sure everything is
60:29 - working so it says this one should print
60:31 - false and this one should print true
60:32 - let's see
60:34 - hmm true let's see i bet
60:37 - it's because of our equal to so if we
60:39 - sum up this stuff at the bottom yeah so
60:41 - that first one
60:42 - um 30 plus 10 plus 40 equals 100
60:48 - so uh that that now returns none
60:53 - because it's exactly equal and our if
60:55 - statements are
60:57 - you know checking if it's greater than
60:58 - or less than we haven't done equal so if
61:00 - we put if it
61:01 - if on line four we make it greater than
61:03 - or equal to
61:05 - then boom better than boom
61:10 - i think that i i want to go back and fix
61:12 - that prompt it's uh confusing
61:14 - which one should return true and which
61:15 - one should return false yeah
61:18 - well yeah we are out of time jamie let
61:20 - me quickly plug
61:24 - live streams so again we do these every
61:27 - tuesday at 1 p.m
61:29 - eastern time uh next week uh jamie you
61:32 - want to click back to the full course
61:33 - and
61:34 - just see what's going on i think it's
61:36 - lists lists
61:37 - cool so i will be back next week i know
61:39 - jamie i don't think you're going to be
61:41 - back
61:41 - next time uh no i think i'll be back for
61:44 - the last one
61:45 - and maybe for strings um so you have an
61:48 - open slot there
61:50 - yeah cool i love it um yeah this was
61:53 - great if uh i'm gonna drop in the chat
61:55 - if you want to kind of register for a
61:57 - reminder about these streams you can go
61:58 - to codecademy.com
62:00 - events to find event reminders for this
62:03 - stuff you can
62:04 - register and uh it'll take you both to
62:06 - the page and
62:07 - uh i think we send you an email if you
62:08 - want to join in on these um
62:11 - there's also also on these event pages
62:13 - there are
62:14 - um actually jamie if you want to look uh
62:16 - can i share my screen real quick i can
62:18 - just show off these event pages
62:20 - thank you um
62:25 - so let's see
62:28 - so on these event pages so if i click
62:31 - into the one for next week
62:33 - uh tuesday the 22nd um
62:36 - you'll see you can register for the
62:38 - event and then we also have a feedback
62:40 - form and
62:41 - questions ahead of time so if you're
62:43 - watching these live or if you're
62:44 - watching them in the recorded
62:45 - version feel free to go ahead and go
62:47 - through this
62:48 - these modules ahead of time and then if
62:50 - you have questions
62:52 - um you can drop them drop those
62:54 - questions in these
62:55 - uh in these forms and we can answer them
62:57 - during the show um and then finally if
62:59 - you're
62:59 - watching this now first of all thank you
63:01 - for watching we super appreciate
63:03 - uh all of you that watch us watch these
63:05 - shows live
63:06 - if you have feedback about the shows in
63:08 - general you can
63:09 - use this form again these forms are
63:11 - embedded in all of these different event
63:12 - pages use these forums
63:14 - tell us what you want to see tell us
63:16 - what you like tell us what you don't
63:17 - like
63:17 - um tell us your thoughts on jamie's dog
63:19 - and whether it's the best dog in the
63:20 - world
63:21 - um yeah uh um
63:25 - yeah and we will uh we'll work to try to
63:27 - make these as good as possible
63:28 - so cool jamie this is great thank you
63:31 - for leading this
63:32 - no problem thank you for helping me all
63:35 - right cool
63:36 - uh well we will see you all uh next
63:38 - tuesday bye everyone

Cleaned transcript:

one pretty good hope everyone is doing well so if this is your first time watching a cs101 stream um let me first make sure that we are indeed live on youtube um let's see make sure that we're live in chat right now if you can see us okay cool i can see us all right um good so uh yes if this is your first time watching a cs101 live stream we are live right now on a couple of different platforms we're on youtube twitch twitter and facebook um jamie and i are going to primarily be looking at the uh youtube chat and so if you're on one of those other platforms you can come join us in youtube to interact with us people are in our youtube chat right now chatting away so we love to see interaction here um yeah if you're in chat right now say hello maybe where you're from maybe what python experience you have um yeah uh also we always post these videos after the fact on our youtube channel so there's a strong possibility that you're watching this video on youtube in which case you can go back and watch the other videos from this series this is the third one um or join us live on tuesdays at 1pm eastern time which is when we stream these live so jamie do you want to explain the lesson that we're going through today yeah sounds good so today we're going to go through control throat control flow it's linked in the description below the youtube video if you need to find the link i'll share my screen to show where we're going to be going through um so if you go to this cs 101 live live stream series which is linked you go down to control control flow and we're going to go through this module we're going to go through like most of these two lessons and hopefully try to get to these control flow code challenges which i think will be a lot of fun so yeah these two lessons for a little bit of background on what these two lessons are the first one is talking about control flow and this idea of conditionals if else kind of maybe some of these terms that you might have heard in programming this first lesson talks about um these ideas from a very high level conceptual um point where we're not even going to look at code we're just going to dive into like what does it mean to have control flow in our program or what does it mean to write a conditional and then after we get a sense of um what control flow is we'll look at it in python how do you actually write the python code that can do this thing that we're talking about and again that's kind of the whole point of this cs101 series which is a series really the core ideas of this series are what are the fundamental topics in computer science that can be applied to any language so even though we're going to do this in python later really the important thing is just like understanding the structures and patterns and kind of concepts behind in this case control flow yeah so yeah exactly what alex said so the first so the first lesson we're just going to go through a couple of the exercises and they're kind of just going to give you the conceptual um knowledge as alex just went over there's a couple fun little applets that we'll go through and we're just going to give you the conceptual breakdown before we dive into python code and see how that works in the learning environment all right so control flow like um it's important because it helps computers make decisions so like a couple like real world examples so like let's say you're on a like web browser um whenever you like open a browser it like opens the browser loads the text and loads the images um like let's say you know let's say you're like on instagram or something and you try to like open up someone's profile and it's like private um it might not show you like any other images or posts so you can kind of think that in like a control flow way where you know instagram like is being told that this person's page is private so don't show these images just anyone who like doesn't necessarily follow that person um or like electronic music like um actually that wouldn't be really controllable um so let's say like you're shopping and it like collects your shipping and contact information um it might check to make sure your credit card is correct or that your shipping address is correct to make sure that's a valid address and if it's not a valid address it's going to throw an error so this is really important right because if you're buying an item you don't want it to be shipped to somewhere that doesn't exist or you know obviously the company wouldn't want to like you know lose money if like your credit card wasn't a real credit card and doesn't actually get the money um so like these are kind of a set of instructions and this is what makes up control flow um so as programmers we can basically structure our code using control flow and allow our code to do certain different things based on you know different conditions that are in control flow yeah i i think one of the things to point out here is that in all of these different situations there's kind of a question and then also a result so again going back to that instagram example the question that the that exists is you know are you logged into your account and if the answer is yes then the result is like okay let's you're gonna be able to see all of your like personal information associated with your account if the answer is no then you're gonna see like a lock page or something right for the shipping example the question is did they enter in the address properly or did they enter in their credit card number properly if the answer is yes they can proceed with their payment if the answer is no something else will happen maybe it'll go back a screen or you know maybe a red popup will come up or something like that but yeah the the the kind of important part is that there's a question and then a response which is something that we'll see in these these demos yeah so this demo will kind of do like just opening a like kind of like walk through the steps of like opening a basic web browser so let's say i click start here it will just kind of like show the like skeleton of a browser then i'll actually open the actual thing load the text and then load the images and then boom your control flow is complete so this kind of just gives like the basic like kind of how control flow can set up like a stepbystep process that is important in programs um and then if we go to the next exercise this is where we'll kind of talk about conditionals where as alex was kind of going over um basically like there's kind of a question or a like a program it's called a condition that is either you know that is like trying to be like answered to see if like a specific task should be done so as i went over in like the last exercise some like one example of a you know possible conditional is if a user's profile is private hide their post otherwise make them visible so here the question basically being asked is is the user's profile private and then if it is you'd want to hide their posts if it isn't then you want to make them visible so that's kind of like an example of like a condition and the task that would be done is basically either hide their posts or make them visible depending on whether that condition is true or not so this is kind of a neat organizat organized way for computers to run instructions but they can't just like make these on their own right like programmers have to like give them these sets of instructions in order for them to work so you can basically set up these instructions in python in most programming languages in this you know kind of pseudo code kind of way where it's just if x do instruction set one otherwise do instruction set two and later we'll see how we actually write this in python so this as i said earlier is called a conditional and basically a computer will just depend on many different conditions in order to run tasks um yeah so how about we go through this example that they show so this is kind of going over like basically like let's say if you're on like some sort of social media and you know you're trying to click on someone's profile but it might be public or private so if i click start and then i click is the post public or private so let's see so this is public so show so it'll actually show the post text and end but let's say i click here and instead i do a private profile so i'd click start and here's the question is this post public or private if i click here it's private so then it's going to hide the hide the person's test uh text and then it will tell us that the post is hidden don't actually be able to see it so like this is just kind of an example of like you know one of many different type of conditions that we could see on computer or pretty much anywhere in this example we just have uh two branches right the question the answer to the question can be either yes or no uh in programming or in most programming languages can you do more branches than that can you have you know yes no or maybe or can you have you know kind of multiple branches yeah so you can have like a lot of so like this is only like an example of like two different options right like public or private but you might have like many other examples where there's a lot more different potential answers to like a certain question or potential a lot of different branches so i know alex do you have an example on top of your head um let's see so kind of a classic example is um like assigning a grade to students based on their number score so if they have if they're between a 90 and a 100 you have an a or you know there's like a minus that kind of stuff in there they're between 80 and 90 they're in the b range if they're between uh 70 and 80 they're in the c range right and so it's the same question right it's what is your grade but there are many possible different answers right and so you could see that kind of thing branching in many different directions yeah and if you're thinking about that in like a diagram so instead of just having like two arrows were pointed to you know a and b it would be like one to a one to b one to c one to d one to f um you know so basically you can have diagrams with like many different possible branches um but they basically work the same way as this so it's the same idea yeah the other the other question i want to ask here was is it possible to have more branches depending on which way you go right so if i'm public could we ask another question that uh it only gets asked if you're public right could there be another essentially diamond there that branches again yeah so you could also have like me you can also have like more depth so instead of just asking one question you can ask like at each step there's basically like another condition it checks like another conduct another question so like let's say i don't know i can't think of an example well i guess for an example for instagram like ask if it's public and shows a person test uh text um let's say you want to like like or not like the post you can have like another question coming off that is like do you like the post then it might show like you know a red heart or like some indication that you've liked it versus if you don't it won't show that indication um so you can have like basically you can have like a wider diagram that has a lot more branches but you can also have a lot more depth where there's a lot more conditions and like questions being asked and we're going to go over a few examples in the next lesson as well as um and hopefully we get to the challenge problems where we'll see that you can have like a lot of different type of conditions and that they branch off of each other yeah and and just to introduce some like you know kind of fancy terminology that idea of having a longer tree of more questions that could be the concept of like nesting conditionals right so is this post public or private if the answer is yes then i'm going to ask another another question so that it's like that second question exists only if the first question is true so it's kind of nested inside the other one which is something that we'll see um again in our python programming awesome um so i think that is what i'll show from the first lesson so we can go to the next lesson also if anyone is just joining and looking for a link the link to this is in the description and then now i'm going to go for control flow to the next lesson i'll open a new tab so i'll have to go back okay so we just went over kind of a conceptual idea so now in this lesson we'll actually like dive into coding and see how it works in actual python so i'll quickly go through this introduction because it's kind of a bit of review from the last lesson but this kind of this actually is pretty because it gives you more of an idea of like kind of what like a deeper maybe this one actually isn't wider but a deeper um tree might look like if you had more conditions so this kind of just goes through you know a morning routine so you wake up in the morning first you might ask yourself is it a weekday if it is then you got to get up at 6 30. um that's very early i don't get that early weekdays um okay and then but like let's say it's not a weekday then you get up at 8 30 again way earlier than i would wake up but whoever made this must be an early bird um and then so let's say okay let's say today was a weekday so hypothetically we got up at 6 30. um then we check is it raining if it's raining we wear a raincoat if it's not raining you don't wear a raincoat so for me it's not raining where i am i don't know if anyone else is in a place where it's raining but i am not wearing a raincoat and let's just say i woke up at 6 30. um on the other hand let's say a saturday or something we get up at 8 30 and then do i need to go outside um if it's no you stay in your pjs if it's yes you get dressed i often just stay in my pjs sometimes even when i go outside so i might make a different diagram but yeah you get the idea um so let's see yeah one of the things that we kind of just talked about this but one of the things i think is important here is that the questions are different depending on the answers and so again the flow is different where if it is a weekday then maybe the first thing that we want to ask is it's raining and then you know our decision depends off of that if it's not a weekday then we ask a different question and you might even imagine uh do i need to go outside if the answer is yes then we might want to ask the question is it raining um do i need to write code or do i not need to rant out so it's like right your the entire way that your program will go will be dependent on the answer to these questions these yes or no questions yeah awesome and you can even keep building off of that so as alex just said like you're getting dressed depending on how it is outside you might put on different things depending if it's sunny raining it's cold out all that stuff um okay so now we're going to move on too so we've kind of gone over like these questions or conditions that we've been asked um something that we haven't yet explicitly said is the answer to these questions are what we call boolean expressions so boolean expressions um allow us to build out our control flow in our program by basically saying if a statement is either true or if it's false um so basically like in the examples we've gone over so like let's say when you like open someone's like instagram page or something the question that's being asked obviously is like is this page private and if it is private then if the answer that question is true um then it'll like not show the person's like text or something versus if it's false like if the person's page isn't private it'll actually show like the person's text photo whatever is um whatever you're trying to look at um okay so to explicitly go over bullying expressions um they're like you can have like many different type of statements but only certain statements are booleans obviously so for example the statement today is a weekday this expression can kind of be written as either true or false because it's either going to be a weekday or it's not going to be a weekday so we would call this a boolean expression and right now we'd say this is true because it is a weekday um but if it was saturday or sunday or something this would be this would evaluate to false um but let's say we have like a different type of phrase so friday is the best day of the week um since this is kind of an opinion this isn't a bullying expression because you can't really say it as like true or false because someone else might disagree with you and say like wednesday is the best day of the week or saturday or sunday or monday or something whatever day of the week they choose um yeah you could almost i might have meant that to be like my favorite or i think the best day of the week is friday that might be a boolean expression right it's a it's like a thing that's either true or false for a given person yeah so if you were to so if you were to say jamie's favorite day of the week is friday specifically pointing at me or alex's favorite day of the week is friday then you can say that is a bullying expression because it's specifically tied to that person and it may not may or may not be true yeah you can almost think of these as the like questions that we were talking about before where the question is almost does sunday start with the letter c the answer is no or does friday or does jamie think friday is the best day of the week the answer is either yes or no right so these boolean expressions are really kind of like the questions that we are asking that i have yes or no answers all right um so how about i hope i didn't scroll down and show the answer this but how about if anyone wants to answer in the chat sunday starts with the letter c does anyone think that is a boolean or not a boolean expression you can answer in the chat um and we'll give you something and i know that our our video is like uh we might have to wait a couple of seconds to yeah um while we're waiting jamie one of the things that i wanted to say was earlier when we were discussing multiple paths right and i gave the example of the letter grade so that actually isn't a great representation of a boolean expression right because there are that would be something with multiple answers and so you could picture that that uh multianswer question of like is your you know what is your grade it's either an a b c or d you could picture that as a series of boolean expressions is is my grade an a if the answer is yes then you know what your grade is if the answer is no then you could ask another boolean of is my grade a b the answer is either yes or no is my is my grade a c yes or no so like you know a multi a question that has multiple answers like that could really be broken into like multiple ruling expressions yeah um i think we had a couple answers in the chat and everyone is right it is a boolean um so good job everyone with that um so yeah so sunday starts with the letter c so this is a boolean and also it would obviously evaluate to false um because sunday does not start with c um so and these so in this exercise um this is kind of fun it's like a little quiz so i'll just do like the first couple statements and i'll move on to the next part um so it gives a couple different statements and we have to answer whether or not we think like what oh so we answer yes oh we answer yes if it is a boolean expression and we answer no if it's not a boolean expression so this isn't so they give an example statement my dog is the cutest dog in the world since his opinion is not a boolean so you'd set it to no so let's go with statement one dogs are mammals um alex what do you think do you think this would be yes or do you think this mean now that seems uh so well yes that does seem like a boolean expression and furthermore the answer seems to be yes yeah so so the answer yes or no is to whether or not it's a balloon expression the bullying expression itself would be true because it is a boolean expression and it would evaluate to false um what about statement two my dog is named pavel pavel i don't know yeah uh paul i don't know uh yeah so to me that seems like a boolean expression right that's a statement that can either be yes or no so it is a boolean expression that for me would evaluate to false my dog's name isn't pawpaw yeah same my dog's name is also pablo um okay so let's also go to here i'll just do one more so dogs make the best pets oh this one might hurt me um so statement three this one's a little bit trickier do we think i'll let people answer in the chat do we think that this would be a boolean or not a boolean and i see in the uh uh anuj in the chat is asking can anyone tell me what a boolean is do we want to give like another quick definition of what a boolean is uh just for folks in the chat yeah so uh a boolean expression in general is something that can be evaluated it's like a fact right it's something that um is either true or false and so jamie what do you think for dogs make the best pets is this a boolean statement so this isn't a bullying statement because it's an opinion so it would differ for different people um but if i if you were to say so like dogs make the best pets that expression itself is not a boolean um but if you were to change it to like alex believe dot believes dogs make the best pets then that would be a bullion um so this statement would actually be no all right so i think we can go on the next exercise okay so now pam says if it was jamie's dog is the best it would be true and therefore a boolean but sadly no so yeah jamie's dog is the best that could be i mean that's kind of an opinion uh right i so i would say the boolean statement would be jamie thinks jamie's opinion is that jamie's dog is the best right that's a thing that's either true or false i don't i might argue that that is just true no matter what though okay um one thing before we before we move on i know that these are like kind of it's like it's kind of hard to they're like what's the point right the difference between an opinion and a fact like uh who cares what's the point how does this relate to programming at all i think the important thing here is that basically we want something where the answer is always the same no matter who is answering the question because we want every computer in the world to be able to answer the question the same so something that's an opinion like dogs are the best animals in the world we don't want some programs to answer that yes and some programs answer that no right we want a fact that's consistent across all programs yeah exactly um also someone said they're watching from jupiter which i think is funny okay so we have our boolean expression down boolean expressions down we have we know that conditions basically ask a question but then now we have to relate these two things so we do these through things called relational operators so the two are going to go over to the two are going to go over right now are either equals two or not equals two um so basically we want to like form a relationship between these booleans and this question um so we like what these like relational operators do is it basically tries to test like okay is this true or is this not true so the way we do equals in python is we do these two equal signs and the difference between the two equal signs and the one equal sign is in python is that like when you use one equal sign you're basically saying something is equal to something it's like let's say i say x equals four like you're just like assigning that variable x to the value four when you use the double equals what you're doing here instead is you're basically like you're basically asking python or like python is basically like evaluating like is this thing equal to this thing so like an example is like the first example they give is like one equal equal to one so this is basically like testing like okay does one equal one and since it does it will turn the boolean value true um and then does not equals that's this cool little you know symbol explanation mark equal so that basically is it's basically um doing the opposite it's basically asking is 2 not equal to 4 in this example and again that would evaluate to true because 2 does not equal 4. um so it's like a subtle difference i find that a lot of like beginning programmers often when they're like writing conditional statements they'll forget the double equal sign so it's important to keep in mind um that whenever you're working with conditions and you're like trying to like basically get your program to like answer a question or like test out a condition use like a double equal sign instead of a single equal sign um this one's pretty interesting this seven equal equals seven so can anyone think about why this comes out as false instead of true yeah so this this relates a little bit to what we talked about in i think it was our first um session from this um from this series but the idea of data types where you know if i use the plus symbol with two numbers that plus symbol does a certain thing to those two numbers but if i use a plus symbol with two strings it does a different thing and so yeah we see we have someone in chat ionis um is saying string versus integer where these two things actually aren't the same even though one equals equals one is true seven in quotes equals seven is false because they're two different data types and that's again that's a thing that really matters a lot in programming because uh different data types will do different things and so you definitely want to make sure that the computer understands that these two things are in fact different yeah um okay so again we have like a couple fun practice questions so similar to last time it seems like we have like these different statements and we can paste in these so how about determining the following are true or false input your answer is true or false input okay for statement one it looks like we have to do some quick maths here um so statement one is five times two minus one equals equals eight plus one now alex i am bad do at math yeah so to me that looks like both of those are going to be 9 right 5 times 2 is 10 minus 1 is 9 is equal equal to 8 plus 1 which is 9. so 9 equals equals 9. to me seems like that should be true yep i agree um also notice when i'm putting in true and i if i also write false like i put a capital t um that's just like python syntax whenever you write true or false and you want it to like evaluate as like specifically a boolean true or a boolean false you have to use a capital first letter okay okay now this one looks a little bit trickier so this time we have it does not equals 2 and we have some more math so we have 13 minus 6 on the left side and then 3 times 2 plus 1 on the right side all right so it looks like we're going to get 7 on both sides right um so i have 7 not equal to 7. so is it true or false that 7 is not equal to 7 that's a false statement yeah right exactly so in this case so that's this is where the does not equal two comes into place so if these were seven since seven actually does equal seven the answer to this condition would be false yeah it's this is definitely something that i think is it's hard to wrap your mind around a lot it's kind of like this double negative thing where the question that you're asking here is is seven not equal to seven is that a true or false statement um and see i've even confused myself is seven not equal to seven um that is false right seven yeah yeah yeah so i think i'll just do the first two for those and i'll move on to the next part which is boolean variables okay one thing i want to say before we go on actually could you click back to the last oh yeah first last card so one thing that i think is like a little bit hard to or a question that comes up a lot when you're starting to work with these boolean statements is like basically who cares right it's like you can look at these statements and you can evaluate seven equals seven and know that's true or false and so the question is like why do we even bother why do we have the computer do this and i think one thing that um so i think it's important to like give an example of why it's useful for um the computer to be able to evaluate these things to true or false and so you might imagine a situation where the thing on the lefthand side is a variable that you as the programmer don't really know what the value is so let's say the variable is like my username right and my username could be a list from a bunch of different usernames and then the thing on the right is you know the string alex so basically you're asking hey is the person that's currently logged in is their name alex and so that's i i just want to give an example of where it's something that is not immediately obvious to the programmer because a lot of times in coding what you're going to have is you're going to be comparing two things that you can validate what the answer what what you know is currently stored in that variable but by just looking at the code itself it's not immediately obvious so it might be some variable equals some other variable right and you're asking the computer to see are those two things equal or not um it's not always as simple as kind of you know comparing two numbers that you could take by yeah these examples are very just um like they're just numbers but there are obviously like a lot more examples out there where like relating to things is like much more like real and like as alex was saying like especially with like testing out like you know if your username is like correct and stuff like that that's like where booleans really come in and are important especially for programmers who are writing software to make sure that you know passwords and usernames are working correctly and that they're keeping their systems safe yeah um okay so now we'll move on to boolean variables so one thing that's important so we've only mentioned true and false as boolean variables so far these are actually the only two boolean variables you can have there's no other type of boolean variable it's kind of a binary system um so if you if you've ever like experienced if you ever like heard of binary it's just like zeros and ones um that's kind of what true and false are based off of you know so you basically either have something that's true which would actually kind of is like the same thing as one or false which is like the same thing as zero yeah one of the little things that i had uh that i learned a couple years ago and never never knew is that on like light switches oftentimes you'll see like a line and a circle uh and like one way is turning the light switch on and the other is turning it off that's actually a one and a zero right the line is a one if you turn it on it's as if it you turned it to true or one and then if you turn it off it's as if it were a zero or off and so a lot of times all of these kind of terms are interchangeable where one and true and on are all kind of the same thing and 0 and false and off are all kind of the same thing that's just the end of the switch something that's actually cool in python um this is actually true for both of these statements yeah right so uh yes so the boolean the python keyword true with the capital t is actually the same thing as a one and the python keyword false with a capital f is actually the same thing as a zero yeah it's a really cool fact um the first time i learned it i was mind blown i was like telling other people but anyway that is a sidebar let's get back to um boolean variables um although i guess that's kind of related anyway um okay so they may create in several ways so one way is like you can just as any other normal variable you can just set it equal to true or set it equal to false um that's actually what we did in the last exercise another thing you can do is you can actually just um like set it equal to the condition you're testing so like this thing bull one right now it's being set equal to five does not equal seven right um this is basically the same thing as setting equal to true because 5 does not equal 7 will like express as a true value um so bool 1 will actually be like set equal to true and i can show you if i were to print full one yep and you'll see in the terminal that it comes out as true and then let's see is there one here that ah so if i tried bool two this one will come out as false so with boolean variables um there are like two different ways you can express them so you can either express them with just like the simple you know just writing it out as true or writing out as false if that's just what you're trying to do or if you're trying to like evaluate whether something is true or false you can test it by you know setting it equal to a variable and seeing what is like seeing what is expressed seeing what it is expressed as yeah and this is actually similar to other variables that we've seen in the past right we've been able to do you know my number equals one plus three and that one plus three is going to evaluate to four and then four is gonna be stored in the variable name this really is the same exact thing where the thing on the right side gets evaluated right five not equal to seven gets evaluated to false and then that false is stored in bool one so it's that same exact idea of the thing on the right side when you're setting a variable gets evaluated to whatever it's gonna evaluate to and then that result is going to be stored in this case we're just using these um logical operators right we're using not equal instead of plus um where if we use plus then it would store 12 if we use not equals then it evaluates it in a different way and stores uh false exactly um yeah is there anything else you want to go over on this exercise before we move on no this looks good okay so now okay so now we're going to go over something called if statements so if statements are really cool because now we're actually able to start construct constructing our own control flow programs um so so far we've learned about boolean variables you know the idea of a condition and then the idea of relating these boolean variables and conditions now bringing in if statements will actually be able to like bring these all together and like actually write out a program that you know test a condition yeah the boolean statement was the question again thinking back to those flowcharts the boolean statement was the question that we were asking and now the if statements are how the branching happens where if the answer is yes we're going to go one way and if it's now we're going to go the other way yeah so here like we're bringing back like the idea of um you know like the wake up waking up example so if it's raining then you bring an umbrella um you'd actually like write this out as like a piece of code in python basically by writing you know like kind of the studio code like just test if it is raining then bring an umbrella then bringing it bring an umbrella you know you can write that out as if is raining i think here is raining you know might be like a variable that's attached to some string that's either equal to it is raining or it is not reading and then you might have like a function that says bring a that says that you know tests whether you bring an umbrella um or that that would say bring an umbrella if it actually is raining yeah and i would say is raining there is going to be a boolean right that's going to be something that's true or false and maybe uh you know maybe that boolean was evaluated from something like we say up in the narrative of some string is it raining equal equal true but yeah that thing is arraigning is going to be a variable that either holds the value true or false yeah and here um here this is just like an even simpler example so let's say you want to test if 2 is equal to 4 minus 2 you know for some reason um so for this condition 2 whether or not equals 2 4 minus 2 this would evaluate as a true expression so you would see apple printed in your terminal in this condition would like actually run however like let's say if this was instead of a two let's say this was like a one or something this wouldn't print and basically the if statement would be skipped over and we'll see how that works um in this example in a second okay so there's a functional if statement okay so hold on one second i did this earlier so gotta clear out all the work yeah so right now in our workspace we have this function and within this function there's a conditional statement already um so we have username equal to dave and then we have in our function by the way if you um don't know what a function is um and you missed um out on like one of the early cs101 live streams we have them like we have them on our youtube channel so you can go watch um and review what a function is later if you need to um but basically here like the function is just holding the conditional statement so there's not much you need to understand about them so we have a conditional testing if username is equal dave and if it is it tells get off my computer dave so someone's having an issue with someone trying to get onto their computer so if we type here i don't know let's say we type alex or something we're going to print this out but does anyone notice if there are any issues with this right now as it is yeah you can even see in uh an instruction too it says oh no we get a syntax error so something is something is copy is going to be wrong when we run yes so we run this if you notice it gives us this little error that says if username equal dave so whoever wrote this also had the same idea in my head that people often forget to put the double equal sign so it tells us in the terminal you know something's going on in line two here and it says it literally even has like a little arrow that's pointing to this equal sign so you know python's really trying to help us out here um so here we just add a second equal sign um or if you want to test if it's not equal to dave you'd put like a exclamation point um but here we're trying to evaluate if it is equal and then we can rerun it yeah again so we're trying to ask that question is the user name equal to dave and the way that you ask the question of the quality is what double equals exactly so now we see that so like in this case we got none um it basically just means that like this function didn't return anything so python is just telling us like we didn't get we didn't see anything just letting you know um and the reason it did that is because you know i set the username equal to alex so this didn't actually run so if i were to actually set the sequel to dave instead we would see it run in yeli oh it's telling us to do a different thing but don't worry about that um but yeah that should have stoned oh yeah so it says get off my computer right so the yeah the instruction was yelling at us because we didn't do what it actually asked but you can see now that we've switched username dave now when we call the function dave or username which is storing the string dave is equal to the string dave and so um you know that thing that is returned um yeah i think that's it for this section because we've gone over if statements anything else you want to go over alex um no i uh i don't think so i i think maybe the indentation although i think that's um oh yeah a couple just like a couple syntax notes notice at the end of each con at the end of the statement you have a colon um that basically just tells python that the next line should be indented so if you notice this this line isn't is indented but if i were to do this python would not be happy with me because it's expecting the scene indent so in your condition statements they should all kind of be modeled this similar way where you have your if statement you have your condition and then you have the colon and then the line any lines that you any pieces of code that you want to run after this condition like specifically for that condition should be indented yeah the exact same thing as the function indentation from last time where anything indented one indentation level is going to be considered a part of the function just like anything indented one indentation level for this conditional is going to happen if the condition evaluates to true yeah exactly all right so now okay so now we're going to get into even more relational operators so let's say you don't want to evaluate if something is equal or not equal you know there are a lot of different ways you can compare things so there we'll go over four more right now which are greater than less than greater than or equal to and less than or equal to the way you write these in python um is kind of the same way you might even introduce some math you know i think my math teacher when i was in melbourne elementary school called these like alligator things get me to the alligator eating the bigger side yeah yeah something like that something like that um and then obviously with like greater than equal to most people don't really have that key on their computer um so the way python does it is basically like you put either the greater than or the less sign less than sign first and then you put equals next so that will tell python instead of just greater than it wants to test that it's greater than equal to or instead of just testing less than it wants to test if it's less than or equal to yeah so these would be that's a pretty common mistake too is to have uh folks reverse those to put equal less than when they're trying to do less than or equal to yeah the good thing is if you if you accidentally do that and you run your code like python will normally give you an error that's like it will like point to it um so you'll be able to see it um so these are good for if you want to like you know evaluate um want to like compare different numbers so for example i think like a fun little example of this person wrote here is um so like a function let's say you're at a if you're working at a movie theater um and you have like a function that basically like just checks the age of like you know someone's id it's a pg13 movie so you know you want the person has to be either 13 or older so to do that you basically have a condition that checks if age is greater than or equal to 13 and if so it would return true so you want greater than equal here because if they're 13 you can see a pg13 movie at least i'm pretty sure um and then you know if that is true you'll return true um so let's go over an example so we can write a function called greater than that returns that takes two integer inputs x and y and returns a value that is greater if x and y are equal return the string okay so this will be fun because i think we actually have to write more than one if statement and we'll see how that works all right so to define a function just in case um and you missed you just write def and then greater than and then this will take two inputs um x and y so you'd put x as your first input and y as your second input um sometimes like people can often like refer to them as parameters um and then as alex said before um same thing with conditionals you want to put a colon at the end basically what this colon does is it just makes it it first of all it's needed and also python is like python ids are pretty nice normally because they'll make it so you don't actually have to like press indent it'll automatically do it for you which is very nice um yeah i think i think that happens on codecademy where if you know if this is a python file which it is you can see it's named script.py if there's a colon and when you hit enter it will automatically indent to the you know one indentation level in yeah um so something i like to do whenever i'm like writing out condition statements that i think can be helpful especially when you're first figuring out so like there's two different things we're trying to test here we're trying to see um returns the value that is greater um and then if x and y are equal it returns a string so what i might do is i might like write like there are like three possibilities we can have here right we can either have that x is the greatest y is the greatest or that they're the same so i might like list out the different conditions so i might say x and y are the same x is bigger y is bigger whoops can't spell so this kind of like lets me think about like what's happening in this program in my head before i actually start writing code because sometimes it's easier to just like even like write something on paper or um like just figure out in your head before you actually jump into python syntax yeah and i think even doing the flowchart here it would be health one two where we're at the very top we have that first triangle and the question that we're asking are are x and y the same and then after we ask that question we can say okay what if yes what if no yeah exactly um yeah so a lot of different things you can do especially like this will be very helpful because especially you you like may have a lot of conditional programs where you have like a lot of different possibilities so mapping them out before you actually jump into coding is very very helpful and definitely highly recommended so how about um alex what would be the first like for x and y are the same how do i like you know test this out yeah so we're we're asking a question here so we we want this to be an if statement first of all so we want if and now we're checking for equality so we want if x equals equals y right if these two things are the same and what do i have to put at the end here and then we need a colon to say if that's the end of our conditional and now when we hit indent or when we hit get to a new line now inside this indentation this is what we want to do if um if the question that we asked was true so again picture your flow chart uh we've now said we're now indent indented one level which means that the answer to that question is true and so in this case we want to return the string these numbers are the same yeah and i'm just going to copy and paste it because i'm feeling lazy um okay so how about we give some people time in the chat to think about how we'd write is x for like a condition for x is bigger yeah so well first of all i think this is something that we haven't really covered yet so we've covered how do we how do we say yes that condition was true right we're at that that flow chart x equals equals y we know how to say yes that condition is true and so therefore return these numbers are the same but if the answer is no then that how do we go on to something else and how you do that is basically you just keep writing code right if x equals equals y is false it will just skip everything inside that that uh inside that indentation block and we'll skip line four basically um in our program here and so by just continuing to write code it's as if we've taken that no path so x is not equal to y um and so we're going to come down here on five yeah yeah so if we just write a second statement for if i think um i honestly has yeah yeah he's even he's even a head yeah so um but so we can also we can write just like an if statement so for fx is bigger so we do if x is greater than y and then in this program you want to return the value of the bigger value so to return x and then for y is bigger we do if y is greater than x return y and then um giannis and vernon they're already a little head we'll we're gonna get to elift probably in like a second um but for now uh this works for this program just to write if statements and then let's see if we run it hopefully yeah you might need to uh reset if you go into your wheel and hit set progress in this exercise yeah and i'll have it copy and paste boom okay so i got a green check mark yay um okay and i think that i think i'll just stick with that for uh the if statements and then we can go on to um and giannis is actually saying you need to call it which is which is true um why don't we show an example of calling this function yeah so if i call print greater than and let's try seven five and here i'll even do a couple different examples just to make sure they're all working so when you're testing out your code you should probably like think ahead of like what you should expect to see so for this one i'll probably expect to see seven returned for this one i should probably expect to see these numbers are the same returned and then for this one i should probably see nine returned so let's hope it's working as it should boom nice and code category because i wasn't following directions in the next part before before we go on and i know that we're kind of running out of time but i think that it's worth talking about here there are a couple of things to notice here one is that we are using these greater than and less less than and equal signs um with just integers here things are going to behave slightly differently if you're using different data types again thinking about different operators right in this case our operators are these um comparison operators or relational operators greater than less than equal to these are all behaving in a certain way when you're doing integer integer to integer but if you change it to string an integer like let's change that first 5 on line 13 to a string and just see what happens so we already know that those aren't going to be considered the same right so that conditional online 3 is going to be false so it's going to either do it might you know the condition string 5 is greater than number 5 might be true or number five is greater than string five might be true or none of them might be true so let's see what happens here yeah this will be it's page as a segment oh and it's just not happy yeah so it's even saying hey this operator greater than i can't use between string and integer and that's something that's very python specific right there are probably other program languages that do let you compare a string and an integer with the greater than sign um but that's that's something that python doesn't let you do and so again that's something to think about is that these data types are really important basically the operators the symbols that you're using do different things depending on what the data types are yeah and another thing another thing just know here if there are both strings um i believe the first condition will actually work because you can compare two different strings to see if they're equal each other but yeah so the string five is equal to the string five as well um so this one won't come out as these numbers are the same um and oh giannis is saying oh no hey can you hear me yeah i can i think i think we had a little up there yeah giannis is saying uh try except in that case right so there are things that you can do to try to kind of validate your input type where you can try to confirm that hey this is a you know i'm comparing a string with a string or i'm comparing an instrument with a string and you might you might think why would you need to do that if you're the programmer don't you know what these are well sometimes you could have user's input information where imagine you have like a text field on a website that's asking for your age what if somebody enters in you know text what if they put in their name for that age and so it's like your program should be versatile enough to handle errors like this where the data type might not all match so we only have five oh oops so we only have five minutes left um i'm wondering what the next what the most important thing to go over is before this ends um i think we can actually just try another one of those code challenges there's there's obviously stuff in here that we haven't gotten the chance to go through yet um and or not are all kind of a group and then else if and alice are all kind of a group so that's good stuff to to go through on your own but uh do you want to try one of these code challenges yeah cool i'd love to um okay so if there's anything in the code challenge that is like something we haven't gone over i'll try my best to like well me and alex will try our best to like explain it so that um it makes sense so i think for this first code challenge it actually is stuff we've only gone over so i think it'll be perfect yeah um so let's say you're asked you know you want to make sure you know that you're not going over budget this is actually very relevant to me right now because i've just now moved into a new apartment and budgeting is a real concern yeah but budgeting is real um so we want to create our function over budget it has five parameters budget food bill electricity bill internet bill and rent okay that's a lot of things um so basically we want to return true if the budget is less than the sum of our other four parameter or other four parameters so basically if budget is less than you know the sum of food bill electricity bill internet bill and rent and then if you've gone over budget return false um okay so show me this apartment where uh the rent is 30. i don't know what units those are yeah wait yeah if you look at the test it's like rent and food bill is 20 electric yeah we can also try out different uh yeah what a world you can put you can put more real uh numbers in there if you want okay so to define a function start with def over budget and then we want to put all our parameters in here right and i wonder if i can just like sneakily and get rid of and and oh i think that works okay we've got four minutes here we got we've got speed round of code challenge okay so i'm gonna do oh i lost your audio jamie i don't know if you can hear me hmm this might just be me uh people in chat let me know if you lost youtube easy to read hey jamie can you hear me oh yeah hey uh sorry your audio cut out for a second there uh i think you're back oh internet um so then budget is more and then budget is less than you spent now actually i think it might be wrong here is there any other potential case um budget is equal yeah so we have budget equal to what you spent it's actually very similar to what we did uh last time yeah so how about we give people like a minute or so to try to think of you know what would you know the fir budget is morning like what would the condition for that be yeah so this is this is actually kind of cool because this is going to be a combination of um mathematical operators right we're going to be using the plus sign to add a bunch of numbers together and then we're also going to be um using a relational operator to say greater than or less than yeah yeah so i'll still i'll start people off just in case if cool all right i think we can let's get started with this first yeah conditional wall so if so we have so we want to test if budget is more so budget is the thing that we're trying to test against and then we want to check more uh we want to check if it's greater than so we're going to use the greater than sign and then here as alex said we have to do some math so we want to add up all of these things and hopefully i can type them all correctly let me know if i am uh oh my god electricity bill internet bill and rent so i think that's all of them so i think you want to compare oh yeah sorry we yeah yeah we add them all up and then what do we compare them to right we're comparing them to budget so if our budget is greater than what should we return think false right yeah i think wait if budget is not true if budget is less than i'm actually going to um just say yeah so the function is return to your budget so budget is less than um then this would return so i think i think you should return true yes the function return true if budget is less than so it should return false then oh so this return false you can also have it so you know returns uh no you didn't spend more than your budget so good job it's like a string or something um and then let's see what about if budget is less than what you spent yeah so it's going to be the same exact uh condition except for instead of checking greater than we can check less than yep so i'm actually going to just do a little nice quick let's change this and now we could write a you know a full separate condition but we can also just try to let you know put this equals like the budget equal to we can like you know add it to like one of these which is like a simple adding equals after the greater than equal or the less than or equal so ask which one do you think we should add it to so let's throw it on that bottom one if budget is less than or equal to all that stuff return true and i think i think our prompt is a little bit screwed up here uh like in that in that direction so let's just uncomment these and see what happens yeah let's just make sure everything is working so it says this one should print false and this one should print true let's see hmm true let's see i bet it's because of our equal to so if we sum up this stuff at the bottom yeah so that first one um 30 plus 10 plus 40 equals 100 so uh that that now returns none because it's exactly equal and our if statements are you know checking if it's greater than or less than we haven't done equal so if we put if it if on line four we make it greater than or equal to then boom better than boom i think that i i want to go back and fix that prompt it's uh confusing which one should return true and which one should return false yeah well yeah we are out of time jamie let me quickly plug live streams so again we do these every tuesday at 1 p.m eastern time uh next week uh jamie you want to click back to the full course and just see what's going on i think it's lists lists cool so i will be back next week i know jamie i don't think you're going to be back next time uh no i think i'll be back for the last one and maybe for strings um so you have an open slot there yeah cool i love it um yeah this was great if uh i'm gonna drop in the chat if you want to kind of register for a reminder about these streams you can go to codecademy.com events to find event reminders for this stuff you can register and uh it'll take you both to the page and uh i think we send you an email if you want to join in on these um there's also also on these event pages there are um actually jamie if you want to look uh can i share my screen real quick i can just show off these event pages thank you um so let's see so on these event pages so if i click into the one for next week uh tuesday the 22nd um you'll see you can register for the event and then we also have a feedback form and questions ahead of time so if you're watching these live or if you're watching them in the recorded version feel free to go ahead and go through this these modules ahead of time and then if you have questions um you can drop them drop those questions in these uh in these forms and we can answer them during the show um and then finally if you're watching this now first of all thank you for watching we super appreciate uh all of you that watch us watch these shows live if you have feedback about the shows in general you can use this form again these forms are embedded in all of these different event pages use these forums tell us what you want to see tell us what you like tell us what you don't like um tell us your thoughts on jamie's dog and whether it's the best dog in the world um yeah uh um yeah and we will uh we'll work to try to make these as good as possible so cool jamie this is great thank you for leading this no problem thank you for helping me all right cool uh well we will see you all uh next tuesday bye everyone
