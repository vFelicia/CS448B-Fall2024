With timestamps:

00:00 - Hi, I'm Rob with Codecademy. In this video, we're going to explore 
setting up and running a simulator.
00:05 - We can preview our app with an Android Virtual Device, AVD for short.
00:10 - An AVD is a device configuration that is run with an Android emulator.
00:15 - It works with the emulator to provide a virtual device-specific environment
in which to install and run Android apps.
00:21 - In addition to simulating running our app on an Android phone,
00:25 - there's also options to install an AVD for a tablet, wear OS,
Android TV, or automotive OS device.
00:33 - To create an AVD, we select Open AVD Manager from the drop-down in the tool bar.
00:37 - We can also do this by selecting Tools, AVD Manager, or by 
clicking on the AVD icon in the toolbar.
00:46 - The Create Virtual Device button launches the Select Hardware page. In the left panel are the categories of Android devices.
00:53 - We will stick with the hardware category of phone for now.
00:56 - In the middle panel, we have our different phone model options listed.
01:00 - In the Play Store column, if there's a Play Store icon,
this denotes access to the Google Play Store.
01:05 - Now, for example, we can select Pixel 2 as our removal device and click next, which will load our system image page.
01:13 - Here, we select the Android version to download like Q, Pie, Oreo, and so on. This page will be pre-populated with recommended options.
01:21 - Clicking on the other images tab will surface a larger list of options.
01:25 - In the release notes column, there's a download link for the device we want to use,
if it hasn't been downloaded yet.
01:31 - Here, we click the download link for Pie.
01:33 - The API level of the target device is important because our app won't be able to run on a system image with an API level that's less than that required by our app,
01:42 - as specified in the min SDK version attribute of the app manifest file.
01:46 - This will bring up the component installer page.
This is a large download so it may take a few minutes.
01:53 - Upon the completion of the download, clicking the next button surfaces the verify configuration page. At this point, we can add some customization to our AVD.
02:03 - The name can contain uppercase or lowercase letters, numbers from 0 to 9, periods, underscores, parentheses, dashes, and spaces.
02:11 - The default startup orientation of portrait can be changed to landscape.
02:15 - When running the AVD in the emulator, we can change the orientation if both portrait and landscape are supported in their hardware profile.
02:23 - Further customization possibilities can be accessed by clicking 
the Show Advanced Settings button.
02:28 - Clicking the Finish button will complete the AVD setup.
02:32 - The installed AVD device should appear in the drop-down in 
our toolbar at the top of our page.
02:37 - Selecting Open AVD Manager will surface our devices. When the Your Virtual Devices page opens up, we should see available actions in the actions column.
02:47 - Let's talk about each of these.
02:49 - Duplicate. To create an AVD starting with a copy of an already existing AVD, we can choose the duplicate option.
02:56 - Wipe Data. If we would like to clear the data and return the 
emulator to the same state as when it was first defined.
03:02 - Cold Boot Now. This option will start the device by powering up 
from the device off-state.
03:09 - Show on Disk. This will show an associated AVD dot ne
and dot IMG files on the disk.
03:16 - View Details. This will allow us to include AVD configuration 
details and any bug reports to the Android Studios team.
03:23 - Delete. If we want to remove a device we created,
we can choose the delete action.
03:28 - Stop. If you'd like to stop your AVD while it is running,
you can choose the stop action.
03:33 - So far, we have created our first HelloWorld Android application. We then learned how to set up and configure a virtual device or emulator.
03:40 - While learning about the Android development process, we often hear the terms virtual devices and emulators used interchangeably.
03:47 - Strictly speaking, emulator refers to the software that the virtual 
device is running inside.
03:52 - Using an emulator to run a virtual device is a way to get the Android operating system running on our computer
03:57 - so we can run programs on it as though it were a real device.
04:01 - It's also very helpful if we don't have an Android device, as well 
as an easy way to test on different Android versions.
04:08 - All we have to do is create a new AVD.
Let's run the HelloWorld application on our AVD.
04:13 - We should have Android Studio running and the Hello World! 
application we've built so far open.
04:18 - We'll begin by clicking on the drop-down and selecting Open AVD Manager. An even faster approach is to press the play icon if you already see a preferred AVD selected.
04:30 - The Build Output tab at the bottom of the page shows the 
status of an AVD while it's floating.
04:36 - When the emulator has fully loaded, we're ready to use it to run our app.
04:40 - We can see that our app has now started. This looks just like a physical Android device with the home button and so on.
04:47 - We see our Hello World! text with a yellow background along with the button.
04:51 - However, the placement of the button is in a different location than we saw in the Android Studio preview window.
04:57 - Android Studio did display a red icon with an exclamation mark in a message:
05:02 - This view is not constrained. It only has design time positions, so it will jump to (0,0) at runtime unless you add the constraints.
05:10 - This is something we can fix in the preview window by clicking and dragging each of these little white circles around our button element,
05:16 - and dragging them to where we would like to constrain our button.
05:20 - We can set the horizontal restraints by dragging to each side.
05:24 - We can set the vertical restraints by dragging to the bottom of the page, and then dragging to the bottom of the TextView element.
05:32 - By clicking the apply changes in restart activity icon we can see the changes in our code show up in the emulator.
05:39 - Currently, our app doesn't do a great deal.
05:42 - However, this is how simple it is to start testing our application and how someone might experience it on a real-world device of our choice.
05:50 - Even though there isn't much to do, this gives us a taste as to the advantages of running our app on a simulator.
05:56 - And if we do have problems running an emulator because our 
machine doesn't have enough memory,
06:00 - then we can run our app on a real Android device.

Cleaned transcript:

Hi, I'm Rob with Codecademy. In this video, we're going to explore setting up and running a simulator. We can preview our app with an Android Virtual Device, AVD for short. An AVD is a device configuration that is run with an Android emulator. It works with the emulator to provide a virtual devicespecific environment in which to install and run Android apps. In addition to simulating running our app on an Android phone, there's also options to install an AVD for a tablet, wear OS, Android TV, or automotive OS device. To create an AVD, we select Open AVD Manager from the dropdown in the tool bar. We can also do this by selecting Tools, AVD Manager, or by clicking on the AVD icon in the toolbar. The Create Virtual Device button launches the Select Hardware page. In the left panel are the categories of Android devices. We will stick with the hardware category of phone for now. In the middle panel, we have our different phone model options listed. In the Play Store column, if there's a Play Store icon, this denotes access to the Google Play Store. Now, for example, we can select Pixel 2 as our removal device and click next, which will load our system image page. Here, we select the Android version to download like Q, Pie, Oreo, and so on. This page will be prepopulated with recommended options. Clicking on the other images tab will surface a larger list of options. In the release notes column, there's a download link for the device we want to use, if it hasn't been downloaded yet. Here, we click the download link for Pie. The API level of the target device is important because our app won't be able to run on a system image with an API level that's less than that required by our app, as specified in the min SDK version attribute of the app manifest file. This will bring up the component installer page. This is a large download so it may take a few minutes. Upon the completion of the download, clicking the next button surfaces the verify configuration page. At this point, we can add some customization to our AVD. The name can contain uppercase or lowercase letters, numbers from 0 to 9, periods, underscores, parentheses, dashes, and spaces. The default startup orientation of portrait can be changed to landscape. When running the AVD in the emulator, we can change the orientation if both portrait and landscape are supported in their hardware profile. Further customization possibilities can be accessed by clicking the Show Advanced Settings button. Clicking the Finish button will complete the AVD setup. The installed AVD device should appear in the dropdown in our toolbar at the top of our page. Selecting Open AVD Manager will surface our devices. When the Your Virtual Devices page opens up, we should see available actions in the actions column. Let's talk about each of these. Duplicate. To create an AVD starting with a copy of an already existing AVD, we can choose the duplicate option. Wipe Data. If we would like to clear the data and return the emulator to the same state as when it was first defined. Cold Boot Now. This option will start the device by powering up from the device offstate. Show on Disk. This will show an associated AVD dot ne and dot IMG files on the disk. View Details. This will allow us to include AVD configuration details and any bug reports to the Android Studios team. Delete. If we want to remove a device we created, we can choose the delete action. Stop. If you'd like to stop your AVD while it is running, you can choose the stop action. So far, we have created our first HelloWorld Android application. We then learned how to set up and configure a virtual device or emulator. While learning about the Android development process, we often hear the terms virtual devices and emulators used interchangeably. Strictly speaking, emulator refers to the software that the virtual device is running inside. Using an emulator to run a virtual device is a way to get the Android operating system running on our computer so we can run programs on it as though it were a real device. It's also very helpful if we don't have an Android device, as well as an easy way to test on different Android versions. All we have to do is create a new AVD. Let's run the HelloWorld application on our AVD. We should have Android Studio running and the Hello World! application we've built so far open. We'll begin by clicking on the dropdown and selecting Open AVD Manager. An even faster approach is to press the play icon if you already see a preferred AVD selected. The Build Output tab at the bottom of the page shows the status of an AVD while it's floating. When the emulator has fully loaded, we're ready to use it to run our app. We can see that our app has now started. This looks just like a physical Android device with the home button and so on. We see our Hello World! text with a yellow background along with the button. However, the placement of the button is in a different location than we saw in the Android Studio preview window. Android Studio did display a red icon with an exclamation mark in a message This view is not constrained. It only has design time positions, so it will jump to (0,0) at runtime unless you add the constraints. This is something we can fix in the preview window by clicking and dragging each of these little white circles around our button element, and dragging them to where we would like to constrain our button. We can set the horizontal restraints by dragging to each side. We can set the vertical restraints by dragging to the bottom of the page, and then dragging to the bottom of the TextView element. By clicking the apply changes in restart activity icon we can see the changes in our code show up in the emulator. Currently, our app doesn't do a great deal. However, this is how simple it is to start testing our application and how someone might experience it on a realworld device of our choice. Even though there isn't much to do, this gives us a taste as to the advantages of running our app on a simulator. And if we do have problems running an emulator because our machine doesn't have enough memory, then we can run our app on a real Android device.
