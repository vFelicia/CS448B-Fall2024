With timestamps:

00:00 - if you're out there in chat go ahead and
00:01 - say hi to us
00:06 - just wait to confirm that we are
00:08 - actually live
00:15 - all right looks good to me all right uh
00:17 - hello everyone my name is
00:19 - alex koontz and we've made it this is
00:21 - our last
00:22 - cs101 livestream session i'm here with
00:25 - jamie hi jamie how are you doing
00:27 - i'm good i hope everyone is doing well
00:29 - welcome to
00:31 - our last series of cs101 yeah so
00:35 - uh again all of these uh videos have
00:37 - been posted on our youtube channel so if
00:38 - you ever want to catch up on the series
00:40 - you can go watch there right now we are
00:42 - live on a ton of different platforms
00:44 - jamie and i are mostly looking at the
00:46 - chat on youtube if you want to chat with
00:48 - us during this session
00:49 - um so if you're watching on facebook or
00:52 - twitter or even twitch which i think
00:54 - very few people are but uh that twitch
00:56 - channel is still going
00:58 - uh come on over to youtube and uh we can
01:01 - chat with you there
01:02 - again this is our final session in what
01:04 - we were calling our cs 101 live stream
01:07 - session
01:08 - the idea behind these sessions was this
01:11 - content is pretty
01:12 - similar to what you would see in an
01:13 - intro level high school course
01:15 - or first semester of college course we
01:17 - definitely didn't get through everything
01:19 - that you would see
01:19 - but it's a nice kind of introduction to
01:21 - all of these topics
01:23 - um we're teaching this these courses in
01:25 - python but again i really
01:27 - stress every time i do one of these i
01:28 - stress that these concepts are pretty
01:30 - universal to any language and so the
01:32 - important thing that you should be
01:33 - focusing on is the concepts themselves
01:36 - and then the python syntax is like
01:37 - something that will you know have to
01:39 - power through in this in this lesson and
01:41 - when we're on the python syntax but
01:43 - really we're learning the concepts and
01:44 - then you can apply that to java or
01:46 - javascript or c plus plus or c sharp or
01:48 - like any of these
01:48 - these big programming languages so um
01:53 - let's see uh yeah uh
01:57 - what lesex says the live sessions best
01:59 - we can do in the pandemic yes that's
02:00 - another reason why we're doing this is
02:01 - because
02:02 - uh honestly jamie and myself i guess i
02:05 - won't speak for jamie but i
02:06 - miss talking to people so it's always a
02:08 - thrill to be able to
02:10 - talk with uh talk with people in the
02:11 - chat as we're doing these things
02:13 - so yes i can also say i miss talking to
02:15 - people even my introverted self
02:17 - is a little overly introverted these
02:19 - days yes
02:21 - all right so i'm going to screen share
02:22 - i'm going to show folks what we're doing
02:25 - um so the lesson that we're going
02:28 - through
02:28 - again is you can find this cs101 live
02:30 - stream series it's in our catalog
02:32 - you can probably search for it in the
02:34 - search bar it's linked in the youtube
02:36 - description
02:37 - and we have made it all the way down to
02:39 - the last lesson on classes
02:41 - so let's go ahead and jump right into
02:44 - this
02:47 - and okay cool uh let me jump back to the
02:50 - start
02:52 - all right so this lesson is all about
02:56 - classes and objects in um a programming
02:59 - language in this case python
03:01 - and so again let's focus on the main
03:03 - ideas behind
03:05 - uh classes and objects before diving
03:07 - into the python code and so
03:09 - jamie how would you describe what a
03:11 - class is
03:13 - um so i kind of describe a class like
03:16 - what i always view it as is it's kind of
03:17 - like a blueprint
03:18 - for like um different objects you can
03:20 - create
03:21 - so like let's say you're like trying to
03:24 - i don't know
03:24 - write a class that kind of like
03:26 - represented i don't know
03:28 - like the attributes of a pet or
03:30 - something
03:31 - so you might have like a blueprint for
03:33 - like what pets might have like they have
03:35 - names
03:36 - they have ages they have you know like
03:39 - dogs
03:40 - might bark or cats might meow make
03:42 - different sounds or something
03:43 - and then like you can create a blueprint
03:45 - where you can kind of create a lot of
03:46 - different objects
03:47 - from that class so that's kind of like
03:49 - the way i view classes and how they can
03:51 - be helpful
03:52 - in python or any other programming
03:53 - language yeah exactly so
03:56 - classes are really similar to things
03:57 - that we've seen before in fact we've
03:59 - already worked with a
04:00 - couple of classes already so in this
04:03 - exercise
04:04 - i've actually already done this which is
04:05 - kind of nice i don't have to um i won't
04:07 - have to
04:08 - type all this code but in this exercise
04:09 - we're asking you to call
04:11 - the type function on things that we've
04:13 - already used
04:14 - so if i call the type function on
04:17 - uh just the number five i get okay this
04:20 - thing is the class
04:21 - integer the dictionary is the class dict
04:25 - and an empty list is of the class list
04:27 - and again
04:28 - these can change right if i if i change
04:31 - my list
04:32 - to have two things in it it's still a
04:35 - list
04:35 - right like you were saying jamie
04:38 - the class itself the idea of the list is
04:42 - kind of like the blueprint it's
04:43 - this is what it means to be a list you
04:45 - can store items you can have a length
04:47 - you can
04:48 - um you know get the last item but the
04:51 - objects themselves
04:52 - are specific instances of that list an
04:55 - instance sounds like a very fancy word
04:58 - but basically means it's a unit of that
05:01 - type
05:02 - so i can create two list instances here
05:08 - um
05:10 - and i can print both out or i can print
05:12 - the type of both out
05:19 - and there you go you can see okay i have
05:21 - two things of class list they both are
05:24 - objects of the list class so
05:27 - that's number one that's the that's the
05:28 - first big takeaway here
05:30 - is that classes which we haven't really
05:32 - looked at how you define a class but
05:34 - classes are like the
05:35 - theoretical blueprint of what does it
05:38 - mean to be a list
05:39 - and then objects are actual instances
05:43 - or actual examples of that blueprint and
05:46 - so you can have multiple objects with
05:47 - different properties right this list
05:49 - has a four and an eight in it this one
05:50 - has a one and a five in it so they're
05:52 - two objects but they're
05:53 - slightly different even though they uh
05:55 - contain similar properties
05:58 - so that's big idea number one what a
05:59 - class is and what an object is
06:04 - all right so as jamie was saying a
06:07 - class uh actually so i'm gonna kind of
06:11 - be jumping around this uh this lesson to
06:13 - teach it in a slightly different order
06:14 - um let's look very briefly at how you
06:18 - define a class in python
06:20 - similar to functions you're going to
06:25 - define it with a keyword in in the case
06:27 - of function the keyword was def
06:29 - now that we're not defining a function
06:30 - we're defining a class that keyword is
06:32 - class
06:34 - you give the class a name so the name of
06:37 - our class
06:37 - uh back in this example uh was
06:40 - what was it i think it was int dict and
06:43 - list
06:44 - so that was the name of our classes
06:46 - we're creating a new class
06:48 - like facade
06:51 - we give it a name and then just like
06:54 - with functions
06:55 - we give it a colon and then anything
06:58 - that we want to be a part of that class
07:00 - needs to be indented one exact same
07:02 - thing to functions where it's kind of
07:03 - saying
07:04 - this line of code belongs to this class
07:08 - because it's indented one after this
07:09 - colon
07:11 - so let me um i forgot to reset my code
07:15 - so
07:16 - again this one's pretty basic so i won't
07:17 - uh i won't even retype my code but you
07:20 - can see
07:21 - we're creating a class facade here
07:24 - and then i think in the next uh in the
07:26 - next exercise
07:30 - yeah okay in the next exercise we're
07:34 - actually asked to
07:35 - create objects of the class so it's
07:37 - again this this idea of
07:39 - i'm going to define the class it's the
07:40 - blueprint for what the thing does
07:42 - and then i can make as many of those
07:44 - things as i want
07:46 - so let me see
07:50 - so i can say um
07:54 - i can create a variable named facade one
07:58 - and then we'll talk about this in a
08:01 - second but
08:03 - in order to create a new class uh
08:08 - a new class that you create oops and i
08:09 - uh what did i do here um
08:13 - oh i don't even use the word new that's
08:14 - uh that's java uh
08:18 - there we go in order to create a new
08:20 - class
08:21 - um we're gonna end up calling a
08:23 - constructor we're gonna look at
08:24 - constructors in a little bit
08:26 - but for now let's just just uh
08:30 - just believe me when i say calling this
08:34 - uh setting a variable equal to the name
08:37 - of the class with parentheses
08:38 - is the thing that creates an object of
08:40 - that class so again i can print
08:42 - i can create both of these i can print
08:44 - out
08:45 - the thing itself
08:51 - and i can print out the second frame
08:58 - so you can see i have two things and
08:59 - again i can uh
09:01 - let me go back how did i do this it's
09:04 - type
09:06 - yeah so if i if i do type uh
09:10 - i can see the type of this class so let
09:12 - me
09:14 - both print out the object itself
09:17 - and then i'll also print out the type of
09:19 - both of these guys
09:21 - and jamie that when i when i print out
09:23 - the object itself i get something
09:25 - fairly weird um i don't know if you
09:29 - know the answer this if you're not a
09:30 - python person but
09:33 - what is what is your sense of what's
09:34 - happening here when i just print out
09:37 - my two facade objects here um so
09:39 - basically when you print out like just
09:40 - the object
09:41 - it's telling you that it's like in main
09:44 - which is like
09:45 - your like specific like python file i
09:47 - believe and then it's saying like you're
09:48 - looking at the fake hate object
09:51 - i do not know what the zero x like i
09:54 - don't know what the la
09:55 - that last thing is um but i don't know
09:57 - do you know what that thing is alex
09:58 - yeah so that that's actually the memory
10:00 - location of this thing okay
10:02 - um and what's interesting right now is
10:05 - that
10:06 - this is like probably getting two in the
10:07 - weeds but these are actually at the
10:09 - exact same
10:10 - memory location which is kind of weird
10:12 - because they're they should be
10:14 - two different objects but because this
10:16 - class is so
10:17 - basic it really has nothing associated
10:19 - with it the computer's probably just
10:20 - throwing out the same memory location
10:22 - that's that's way too much that's like
10:23 - way too much in the weeds
10:25 - not really important the important thing
10:27 - is look at we've created
10:29 - two objects of facade and
10:33 - uh we can print them out which prints
10:34 - this weird memory location thing
10:36 - and then we can also check their type
10:38 - also um alex we have a question from
10:40 - someone in the chat
10:41 - sami so they're asking
10:45 - why when we look for type the result is
10:47 - class so like we get like class
10:49 - and class um you know something like
10:52 - especially when we call like a list
10:54 - or something else yeah and then also
10:57 - we're asking why are we calling class
11:00 - two times
11:00 - here why are we calling class two times
11:03 - here
11:04 - uh well i think maybe like why is the
11:06 - result twice
11:07 - oh yeah yeah yeah or why are we creating
11:10 - two of these
11:11 - um yeah great questions so
11:14 - um i'll answer the first one of like
11:17 - what is the deal with this print
11:18 - statement of saying
11:19 - class honestly it's something that i
11:22 - i don't know the answer to why why does
11:24 - it say class four
11:25 - i bet there are certain types of things
11:28 - that you could
11:29 - ask the class of and or you could ask
11:32 - the type of
11:32 - and it's not a class um it could be
11:35 - something different
11:36 - so you know i imagine there's something
11:38 - else here that i could pass
11:39 - and it wouldn't necessarily be a class
11:41 - but those things are probably pretty
11:43 - rare most things in python are going to
11:46 - be a class
11:46 - and then it just tells you the name of
11:48 - the class
11:50 - the main here is a little bit funky it's
11:53 - just telling me that
11:54 - this is a class that was defined in my
11:58 - you know in the file that i'm running um
12:01 - whereas
12:02 - back over here
12:08 - these classes uh you didn't have
12:11 - anything to do with maine
12:12 - because these are built-in classes right
12:14 - we didn't define them ourselves
12:16 - python defined them for us right
12:18 - somewhere somebody has written code
12:20 - that says this is what a python
12:22 - dictionary means and what it does
12:24 - and so we didn't define that class we
12:27 - just used that class to make a
12:28 - dictionary object or to make two list
12:30 - objects
12:34 - all right the question of um
12:38 - what why are we why are we doing
12:41 - two or you know why are we calling this
12:43 - facade thing twice
12:45 - um that's a good question so we've
12:47 - created two
12:48 - objects of a facade but right now we
12:50 - can't really see
12:52 - what they're doing because a facade
12:54 - essentially does
12:55 - nothing right it's it hasn't it has
12:58 - nothing associated with it we put this
12:59 - this keyword pass here
13:00 - just to say don't do anything so let's
13:02 - actually i'm going to
13:04 - break from the lesson for for a second
13:07 - and just create
13:08 - our own class because i think that at
13:10 - this point
13:11 - we want to start actually letting our
13:13 - class do something so
13:15 - i'm going to do the same thing i'm going
13:16 - to make it a dog rather than
13:19 - facade just because a facade is like
13:20 - hard to wrap your mind around
13:22 - jamie i think we talked about dogs in a
13:24 - in another livestream that we did
13:26 - yeah probably i'll always bring up dogs
13:29 - um okay so i'm gonna i'm gonna
13:32 - bring um
13:35 - i'm going to do the same thing that we
13:36 - have but with the dog instead of a song
13:38 - here so i'm going to say
13:39 - um jamie's dog
13:44 - jamie's dog
13:49 - and alex's dog
13:54 - okay so i can create both these
13:58 - let me print these out um just or i'll
14:01 - print one of them out just so we make
14:02 - sure that
14:03 - that was like actually created
14:07 - okay so now we need to start talking
14:09 - about
14:11 - what does a dog what do we even do with
14:15 - classes right because right now
14:16 - we've done all this setup but our dog
14:18 - doesn't do anything right
14:19 - we're just saying pass so the idea
14:22 - behind classes and jamie you talked
14:24 - about this a little bit at the start
14:26 - is that classes can have things and
14:29 - classes can do things
14:31 - so i always when i when i teach this i
14:33 - always say
14:34 - there are classes can have things so
14:36 - like nouns and adjectives
14:37 - and then classes can do things which are
14:39 - like verbs so
14:41 - let's do the verbs first because giving
14:44 - giving a class nouns and adjectives is
14:45 - slightly more complicated
14:47 - um let's uh
14:51 - do the verbs first so the verbs or
14:54 - things a class can do
14:56 - is referred to as a method but it's
14:58 - going to basically look exactly like a
14:59 - function
15:00 - so i'm going to say okay a dog can speak
15:05 - and here's something new uh so
15:09 - let me print hello i'm
15:12 - a doc
15:14 - [Laughter]
15:19 - this this is something new that again
15:22 - i'm going to kind of gloss over for now
15:25 - all methods all the things that you say
15:27 - okay a class
15:29 - you can do this the first parameter is
15:31 - always going to be self
15:33 - and this is basically
15:36 - not worth worrying about for right now
15:40 - i in fact i've been programming python
15:42 - for like 10 years
15:43 - i have a vague understanding of what
15:45 - self does i don't have a
15:48 - great understanding what self does and
15:50 - so
15:51 - i i understand that it's annoying when
15:53 - teachers say like don't worry about this
15:55 - but really don't worry about it right
15:58 - the thing that you should be focusing on
15:59 - here is that
16:00 - we are giving the dog class a verb
16:04 - or letting a dog do something so
16:07 - uh let me run my code make sure it
16:08 - doesn't error if i forgot
16:10 - self i think it might never no it
16:12 - actually didn't there would error once i
16:14 - try to call the method
16:16 - okay so i've now given
16:19 - a dog the ability to sleep so now i can
16:22 - tell
16:23 - a specific dog after i've created it
16:26 - i can say okay let's tell jamie's dog
16:31 - to speak
16:35 - and there we go we can see jamie's dog
16:38 - just said
16:39 - hello i'm a dog
16:42 - can also tell alex's dog to speak and
16:48 - as you might expect he's going to do the
16:49 - exact same thing as
16:51 - jamie's dog all right they can both
16:54 - speak they can both do this
16:56 - this function um they can
16:59 - you know they can do it multiple times
17:02 - uh
17:04 - there we go all right any questions in
17:08 - the chat about
17:09 - methods about these verbs that we can
17:11 - ask the uh
17:12 - ask a class to do um no questions about
17:16 - that but someone did ask is this course
17:17 - that we're going through paid on
17:19 - codecademy like is it a pro course
17:21 - yeah so right now this this one that
17:24 - we're specifically going through
17:25 - is a pro course um you can probably find
17:29 - really similar content in python 2 which
17:31 - is a free course
17:33 - i and again the differences between
17:36 - python 2 and 3
17:38 - are minimal enough for a beginner
17:41 - that i i believe it doesn't matter i
17:44 - believe that you can take that python 2
17:45 - course
17:46 - um it's an owned version of python but
17:48 - again if your goal is to learn the
17:50 - basics of coding
17:52 - you can do that in python 2 and there'll
17:53 - be a there'll be a lesson about
17:55 - classes and methods in that python 2
17:58 - course this is also a pro course
18:00 - if you want to take this exact course um
18:01 - then you can you know
18:03 - upgrade to pro which uh you know would
18:05 - be great
18:07 - also someone uh commented that they
18:09 - believe self is just a pointer
18:11 - to itself um which i think is like
18:14 - pretty much what it's basically like
18:16 - self is just
18:17 - telling python to like that you're like
18:19 - working with like this specific object
18:21 - so it's kind of i like view it basically
18:22 - just as a placeholder for
18:24 - jamie's dog yeah like we make like uh
18:27 - instance variable jamie's dog or alex's
18:29 - dog
18:31 - within the class blueprint itself like
18:33 - it wow i'm saying itself and now i'm
18:35 - just
18:35 - within the class blueprint dog self is
18:38 - basically just a placeholder for like
18:40 - an instant variable instance variable
18:42 - that you might make later
18:43 - um yeah so that that will all become
18:46 - relevant
18:47 - once we um let me get rid of that pass
18:49 - actually that will all become relevant
18:51 - once we get into instance variables i
18:52 - think the thing that's confusing for
18:54 - methods
18:55 - is that you know previously in functions
18:58 - i could like define a function
18:59 - of add together a
19:02 - and b sorry my keyboard is breaking
19:05 - um and then i could return all right let
19:08 - me just say print
19:10 - a plus b i think what's confusing about
19:14 - methods is that within normal functions
19:16 - right if i if i try to call this
19:20 - function um you know
19:23 - one and two i have to pass it
19:27 - to when i'm actually calling this
19:29 - function i have to pass it
19:31 - two parameters because i've i've said
19:34 - this function
19:34 - takes two parameters right it takes a
19:36 - and b i think what's confusing about
19:39 - methods and the reason why i like to
19:40 - skip over self
19:41 - for methods is because that pattern
19:43 - doesn't hold up
19:44 - when we're actually calling these
19:46 - methods right it looks like this
19:48 - speak method takes a parameter named
19:51 - self but then down here when i'm calling
19:53 - it
19:54 - i don't pass in anything and so that's
19:57 - that's why it's confusing where it's
19:58 - just different than
19:58 - how functions work where i i don't need
20:00 - to pass anything into this speak
20:02 - function
20:02 - even though i've declared that it takes
20:05 - it takes this self parameter
20:10 - okay let's now talk instance variables
20:14 - and in order to talk instance variables
20:17 - we're going to have to talk about the
20:20 - constructor which
20:24 - let me write the constructor here first
20:36 - okay
20:41 - okay cool so whoops
20:44 - spelled that which would have really
20:46 - screwed things up
20:49 - okay so the job of the constructor
20:54 - is to create the object and so
20:57 - we've actually been using constructors
20:59 - all along this was um
21:03 - on lines nine and ten this is us using
21:05 - the dog
21:06 - constructor it's the thing that
21:08 - constructs the dog
21:09 - um it's also called an initializer which
21:12 - is when if you're writing your own
21:13 - constructor
21:14 - in python you use this init init
21:18 - method basically this is our thing um
21:22 - where we define this is what it uh this
21:24 - is how we create a dog
21:26 - and by default if we don't write our own
21:28 - constructor
21:29 - a basic one exists that takes no
21:31 - parameters so that's how we've been able
21:32 - to create dogs so far
21:33 - is that we've just been using the the
21:35 - constructor that
21:36 - automatically exists but let's say we
21:39 - wanted to
21:40 - write our own constructor where we can
21:42 - give
21:44 - a dog a name
21:49 - so uh let me let me change this to input
21:55 - so the constructor is where you can now
21:57 - start to define
21:58 - the nouns and adjectives associated with
22:02 - um associated with a class so i can say
22:06 - this dot name equals input name
22:10 - and so let's see if i run this i think
22:13 - yeah okay so i've just written
22:18 - a constructor and now when i run my code
22:21 - i get an error jamie why do you think
22:24 - let's let's first let's do a little work
22:26 - to debug this error what do you think is
22:27 - happening here it says missing one
22:29 - required potential
22:30 - uh argument input name yeah so
22:34 - basically before we didn't have this
22:36 - init constructor method
22:38 - um and this niche constructor method has
22:41 - this
22:41 - argument called input name
22:45 - so now basically what's happening is if
22:46 - you look you know the type error is init
22:49 - missing one required positional argument
22:51 - input name so now whenever we call the
22:54 - class
22:54 - dog it's looking for this input name
22:58 - it's looking for the dog's name
22:59 - and right now basically python isn't
23:01 - finding it so it's
23:03 - throwing this error yeah you can see on
23:05 - line nine
23:06 - on line nine we're saying i want to make
23:08 - a dog but i haven't given you an input
23:11 - name
23:12 - and the reason why this worked before
23:14 - was again because by default if you
23:16 - don't define a constructor
23:17 - python will just say fine i'll let you
23:19 - make an object with this default
23:21 - constructor with no parameters
23:23 - but as soon as i define a constructor
23:26 - that
23:26 - that default one python is no longer
23:28 - going to make that it's going to make
23:29 - you use the constructor that you define
23:31 - so i can say um
23:34 - jamie what do you want your dog's name
23:36 - to be clemmy c what's up
23:38 - e clemmy c-l-e-m-m-y
23:41 - clemmy my dog's name will be winston
23:46 - is clemmy your your actual dog's name or
23:48 - your family
23:53 - so now that we're now that we're calling
23:56 - the constructor
23:57 - with this input um
24:00 - ah this is not this dot name it's
24:03 - self.name
24:05 - this is used in a lot of other
24:06 - programming languages python uses itself
24:10 - okay cool so now i've made a dog
24:14 - and each of these dogs has a separate
24:17 - name
24:18 - right jamie's dog's name is clemmy my
24:20 - dog's name is winston
24:21 - and now i can use that variable
24:23 - differently so for example i can go in
24:25 - and edit this speak function
24:27 - and say hello i am a dog my name
24:30 - is plus self dot name
24:35 - and jamie this is where you were talking
24:36 - about what self is doing where self is
24:38 - saying
24:39 - it's like a pointer back to myself so
24:41 - when when jamie's dog
24:44 - calls this call speak jamie's dog is
24:47 - gonna say
24:48 - okay what name what is the name of
24:51 - specifically jamie's dog not alex's dog
24:53 - not any other dog what's the name of my
24:55 - own name right or myself myself's name
24:59 - um
25:00 - so now if i do this
25:04 - i'll see let me add a space here to make
25:06 - that print statement nice
25:09 - so let's get rid of this stuff
25:12 - this function example
25:15 - okay so um
25:20 - i'm saying okay i want jamie to speak
25:24 - jamie's dog has been initialized so its
25:27 - name
25:28 - is equal to whatever i pass into here
25:29 - into clemmy and so when he speaks
25:31 - says hello i'm a dog my name is clemmy
25:34 - when alex's dog speaks it uses its
25:37 - version of the instance variable which
25:38 - is
25:39 - set equal to winston so this is kind of
25:42 - showing
25:42 - the power of classes right i can create
25:44 - this blueprint for a dog
25:46 - where i can make any dog in the world
25:47 - that i want i can give it any name
25:49 - but then all dogs are going to speak in
25:51 - the same way where they're going to say
25:52 - hello my name is a dog and my name is
25:54 - whatever their particular name
25:56 - is so this is really kind of like our
25:58 - class is
25:59 - is completely built out built out now
26:02 - um jamie anything that you want to add
26:05 - or anything from the chat that we can
26:06 - uh that we want to talk about here yeah
26:09 - so uh someone like uh because i think
26:10 - someone was asking before like
26:12 - why were we calling um you know dog
26:15 - twice and running it twice before when i
26:17 - was just saying hello i'm a dog
26:18 - so like this is like where just as alex
26:20 - said like when we add a constructor
26:24 - it kind of allows us to like give our
26:26 - different instance variables in this
26:28 - case jamie's dog alex's dog we could
26:30 - have
26:30 - any dog as alex said we can give
26:34 - specific attributes to them
26:35 - so that when we use the methods we can
26:37 - kind of make it more unique for each dog
26:39 - so before we was just saying hello i'm a
26:41 - dog each time which like doesn't seem
26:43 - that useful right like
26:44 - it's like doesn't really tie to a
26:46 - specific thing but now it's hello i'm a
26:47 - dog
26:48 - and my name is the specific name and we
26:50 - can add different things like age
26:52 - um we can have different commands like
26:56 - i don't know like whether or not your
26:57 - dog barks or not you can like build out
26:59 - methods that will tell you when it
27:00 - sparks
27:01 - you can compare different dogs um stuff
27:04 - like that so you can create a lot of
27:05 - different methods that will make
27:06 - the class much more powerful and build
27:08 - out the blueprint
27:10 - yeah and so that's a good point about
27:12 - adding other
27:13 - instance variables and again instance
27:15 - variable i always say
27:16 - it's your nouns and adjectives right a
27:18 - dog has a name
27:20 - a dog has an age a dog could have a
27:23 - um you know an adjective like well i
27:26 - guess
27:27 - you know whatever a dog could have a
27:29 - color of
27:32 - brown and one thing that i want to point
27:35 - out here
27:36 - is that as i've written my
27:39 - constructor right now i can't really
27:43 - set the age of a dog any dog that i made
27:47 - i've hard-coded in its ages too
27:50 - its color is brown and so the way that
27:52 - you kind of can add
27:54 - um variability again is through these
27:57 - parameters where i can say okay rather
27:59 - than
28:00 - it always being you know every dog being
28:02 - two
28:03 - again let me print out let me print
28:06 - jamie's dog
28:08 - dot age right
28:12 - jamie's dog is set to two here because
28:15 - when i create it it automatically gets
28:17 - set to two
28:18 - if i want that to be variable again i
28:20 - could come in here and say
28:21 - um input age um also alex we're getting
28:25 - a good question in the chat about
28:27 - why is it self.name equals input name
28:29 - versus self.input name
28:32 - equals input name yes
28:35 - uh cool let me right so let me uh
28:39 - let's see self.inputname equals input
28:43 - name
28:44 - yeah so right so
28:49 - the job of the constructor is to define
28:53 - the instance variables and give them
28:54 - value so
28:56 - when i could name this whatever i want i
28:58 - could name this input name
29:00 - but that's not a great name for it um
29:02 - because then
29:03 - later when i use this variable in other
29:06 - methods
29:06 - or elsewhere i would have to remember
29:08 - okay every dog has an input name
29:11 - so i'm saying this is where i define the
29:13 - instance variable i say
29:14 - every dog has a name and
29:17 - when a dog is created when i initialize
29:20 - it
29:21 - or when i construct it i'm going to set
29:23 - that
29:24 - instance variable name which can be used
29:26 - elsewhere right it can be used in these
29:27 - other methods it can be printed out down
29:29 - below
29:30 - um i set that equal to whatever value i
29:34 - pass
29:35 - in here oftentimes
29:39 - uh let me get rid of this briefly
29:42 - oftentimes you'll see
29:46 - the name of the parameter mirror
29:49 - the name of the uh of the instance
29:52 - variable
29:53 - and so if i run this code right now it's
29:55 - actually going to error
29:56 - because it doesn't know what input name
29:58 - is
30:00 - right it's trying to set self.name equal
30:03 - to
30:04 - input name but input name doesn't exist
30:06 - anywhere because i changed the name of
30:08 - the parameter
30:09 - so i could do self.name equals name
30:14 - what this does this is the same exact
30:16 - thing basically it's saying
30:17 - set the instance variable equal to
30:21 - um whatever gets passed into the to the
30:23 - parameter
30:25 - when people are first learning about
30:26 - classes i like to make these things
30:29 - different names
30:29 - just to make it really clear that we're
30:31 - setting the
30:33 - instance variable the thing that starts
30:35 - self dot equal to
30:37 - um the thing that i'm inputting into my
30:40 - uh
30:41 - into my constructor
30:45 - let me finish uh so i can do input age
30:48 - and again there's nothing magical about
30:50 - these
30:50 - um these variable names i could name it
30:52 - whatever i could just name this a
30:54 - maybe that's a good example i'm going to
30:56 - set self.h
30:57 - equal to a now when i run my code
31:02 - i'm going to get this same error right
31:04 - on line 11.
31:05 - i'm missing one required potential
31:08 - argument
31:09 - a that's saying on line 11
31:12 - i'm trying to create a dog just using
31:15 - one parameter when i've said there
31:18 - should actually be two parameters there
31:19 - should be input name
31:20 - and then there should be a second
31:21 - parameter named a so i can set
31:24 - this dog's age to uh
31:27 - uh is is clemmy still around jamie or
31:29 - how old is columbia
31:30 - so chlamy is 11 years old okay and uh
31:33 - winston is sadly no longer around so uh
31:37 - i can do n a which actually is a bad
31:39 - idea i shouldn't mix these nanotypes
31:41 - um i'll say winston's 100 years old um
31:45 - right and now i can print out
31:47 - jamie's dog's age and i can print out
31:50 - alex's talk savage
31:55 - there we go jamie's dog is 11 my dog is
31:58 - 100.
31:59 - all because i defined it that way in the
32:01 - constructor
32:06 - any other questions that i could that i
32:08 - could take from the chat jamie someone
32:10 - just asked a really interesting question
32:11 - i'm actually not certain of can we only
32:13 - create like um an init variable like
32:15 - self.name equals input name
32:17 - in the constructor or can we create it
32:19 - in other methods
32:20 - it's a great question um i don't know
32:24 - the answer to it either let's
32:25 - try um self dot
32:28 - um whatever what's another attribute of
32:31 - a dog
32:33 - number of teeth
32:38 - i'm gonna try to create this
32:42 - okay yeah this this will be interesting
32:44 - um this will be really interesting
32:46 - so i've created my dogs
32:49 - if i try to print jamie's dog
32:53 - jamie's dog dot number of
32:57 - teeth i believe this will error
33:01 - yeah dog attribute has no attribute
33:04 - number of teeth
33:05 - but if i make jamie's dog speak first
33:09 - jamie's
33:10 - dog dot speak
33:14 - now this this is where it's interesting
33:15 - right because speak
33:17 - might create this instance variable and
33:19 - then it might just exist
33:21 - it does so yeah
33:25 - so that actually works um
33:28 - but it's weird right really i
33:31 - i always stress the job of the
33:33 - constructor
33:35 - or the initializer is to set the initial
33:38 - value of
33:38 - all of um of all of the instance
33:41 - variables
33:41 - you know you might eventually have other
33:44 - methods
33:45 - that modify those instance variables
33:47 - right i could do def
33:49 - have birthday
33:52 - remember instance variables are always
33:54 - verbs so i kind of always like to or
33:55 - sorry
33:56 - uh methods are always verbs it's things
33:58 - a dog can do
33:59 - and so i even like naming my methods
34:02 - with a verb
34:03 - right a dog can have a birthday and in
34:06 - this case
34:07 - self dot age um plus equals one
34:11 - right so i'm going to
34:16 - let's print jamie's
34:19 - dog dot age
34:23 - let's make jamie's dog have a birthday
34:30 - it's actually my dog's birthday soon oh
34:33 - almost 12 years old for uh for columbia
34:37 - yeah her birthday and halloween that's
34:39 - very nice
34:41 - do you dress up your dog in that
34:42 - halloween costume no she would hate that
34:45 - she would lose her mind
34:48 - okay cool so i can uh
34:52 - i'm gonna print jamie's uh dog's age
34:55 - then i'm gonna make it have a birthday
34:56 - which will increase the h by one and
34:58 - then i'll print it off again so we
34:59 - should see
35:00 - there we go 11 and 12. so
35:03 - you know you can have methods that
35:05 - change the value of the instance
35:06 - variables after it's being created
35:08 - but going back to that question of like
35:10 - can instance variables be created
35:12 - in other methods that you can but that's
35:14 - really unusual i don't know if i've ever
35:16 - done that ever
35:17 - um so you can but it's unusual
35:21 - another really good question so
35:22 - someone's uh sammy just asked um
35:25 - why are we using self in each method
35:27 - like why are we saying self.name and
35:29 - self.age
35:30 - yeah um and the reason for that is
35:31 - because like um
35:33 - each of these instance variables is like
35:35 - tied to a specific you know like
35:37 - tied specifically to jamie's dog or
35:39 - alex's dog so like self.name
35:42 - is basically telling this method that
35:44 - this is jamie's dog
35:45 - when we use it on jamie's dog so it like
35:47 - knows it's clemmy
35:48 - if we just said name or like input name
35:50 - and like didn't
35:52 - you know specify it with self um it
35:54 - wouldn't work
35:55 - yeah actually and this is probably a
35:56 - good error to show right so if i change
35:59 - this method from self.age to
36:02 - just age the error that it's going to
36:04 - throw is
36:05 - i have no idea what variable you mean by
36:07 - age right
36:09 - the instance variables all methods can
36:11 - access those right
36:12 - this guy can talk to you know speak can
36:15 - access self.name
36:17 - have birthday can access self.age but if
36:20 - i do this
36:23 - when i try calling the method right you
36:25 - can see my code actually runs right i'm
36:27 - able to create a dog
36:28 - able to create a second dog i can print
36:30 - jamie's dog's age and 11 comes out
36:33 - but here when i try calling my happy
36:36 - birthday method
36:37 - i hit an error where local variable age
36:40 - referenced before assignment
36:42 - basically that means i have no idea what
36:44 - variable
36:45 - i i don't have a variable age for you to
36:48 - add one to
36:49 - it never existed and that's because
36:52 - we're trying to access a
36:54 - local variable a variable that only this
36:56 - method would have access to
36:58 - rather than the instance variable
37:05 - cool any other questions that we that we
37:07 - can take or
37:09 - someone did ask is there a limit to the
37:11 - number of
37:12 - attributes or like parameters you can
37:14 - put in the unit method
37:15 - um and they pointed out like maybe
37:16 - storage memory and i said
37:19 - there's probably like not a limit until
37:21 - you hit that memory capacity but that
37:23 - would be like a lot
37:24 - of parameters but yeah i don't think
37:25 - yeah uh there's there's always a limit
37:28 - right our computers are only as
37:29 - big as they can be they're not truly
37:31 - infinite but
37:33 - it would have to be so preposterously
37:35 - large that again you're never
37:37 - you're never really going to encounter
37:38 - that yeah
37:41 - um one other thing that i want to show
37:43 - that i think is helpful as we're just
37:45 - like
37:45 - talking about um constructors is that
37:51 - you know my number of inputs doesn't
37:53 - always have to
37:54 - match my number of instance variables so
37:56 - i could have like self
37:57 - dot dog years
38:00 - and then i could have self dot human
38:03 - years
38:04 - and i could pass in like input human
38:07 - years
38:10 - and set human years equal to that
38:14 - and the dog years equal to that times
38:18 - seven right so and basically what this
38:21 - is doing is
38:22 - my stuff is gonna error now because i
38:24 - don't have age anymore
38:26 - um basically
38:29 - this is going to still i'm going to have
38:33 - three instance variables
38:34 - but i i'm using the same input for two
38:37 - of them right i can use this input to
38:39 - say
38:40 - okay the dog's age in human ears is just
38:42 - the h that you pass it to me and then
38:44 - the dog's age in dog years is
38:46 - that age times seven um so
38:50 - i think one thing that i see a lot of
38:51 - students do early on is that
38:53 - they kind of think that the only thing
38:57 - a constructor or initial initializer can
38:59 - do is
39:00 - set the value of these variables and
39:04 - realistically that's what its job is its
39:05 - job is to set the value of the variables
39:07 - but if it needs to do some crazy math
39:10 - right if i need to like
39:11 - create a variable a equals human years
39:13 - times seven
39:15 - and then do a crazy for loop to loop
39:17 - through something
39:18 - right i can for i in range
39:22 - a you know basically i can write any
39:26 - code i want to write
39:27 - inside my my initializer and that code
39:30 - will run
39:31 - still fine but remember the job of the
39:34 - initializer is really to
39:36 - create the instance variables the nouns
39:37 - and adjectives
39:39 - associated with associated with the um
39:42 - the class
39:46 - so we have one more really good question
39:49 - um someone asked why is each method
39:50 - followed by
39:51 - self um like define speak and then why
39:55 - does it say self
39:56 - yeah so again this is like
40:01 - i don't have a great answer for this
40:03 - basically
40:06 - if we don't yeah do you have a great
40:08 - answer for jamie i just kind of view as
40:10 - like a placeholder for
40:11 - our instance variables so it's like like
40:15 - self kind of refers to um like
40:18 - like a placeholder for like jamie's dogs
40:20 - when we call jamie's dog
40:21 - speak we just need it there so that um
40:24 - like when we call it on our
40:25 - instance variables like it it knows that
40:27 - it's tied to that instance variable
40:29 - yeah um i think it is a little bit
40:31 - confusing because like
40:32 - methods are very similar to functions
40:34 - and like that's not really how
40:35 - like functions kind of work outside of a
40:37 - class yeah um
40:39 - but basically like self is just kind of
40:40 - like it just like points to like that
40:43 - specific
40:44 - object yeah yeah and i think
40:47 - probably to tie to the initialized
40:48 - object which is basically
40:50 - yeah i think i think you can actually
40:52 - even um
40:54 - change the name of this to anything that
40:57 - you want
40:58 - and then that's just the keyword that
41:00 - you use for all of these things
41:01 - so in a lot of other programming
41:03 - languages you'll see this
41:05 - be the the keyword and so if i say
41:10 - you see actually what happens here so
41:13 - this don't yeah that runs
41:15 - i created my two dogs let me see if i
41:17 - can let me print out my
41:18 - dogs just to show you that exists or i
41:21 - can print jamie's dog
41:24 - dot name
41:28 - there's clemmy let me now try
41:32 - uh doing jamie's dog dot speak
41:35 - i actually don't know if this won't work
41:37 - because i've set up this keyword to be
41:38 - this here
41:39 - and i'm using selfie here i don't think
41:41 - it will work
41:42 - but we'll see
41:47 - yeah it's still it still works um
41:52 - let me let me show something else and
41:53 - then we can uh
41:55 - i'm gonna change all these back to self
41:56 - really briefly um
42:00 - let me let me introduce another topic
42:01 - and then we can do another little
42:03 - experiment to see if something works or
42:04 - not which might clarify what this deal
42:06 - itself is
42:07 - um the thing that i want to show is that
42:10 - methods can call other methods so
42:14 - you know outside everything once i have
42:16 - jamie's dog
42:17 - i can make jamie's dog speak um
42:21 - by doing jamie's dog.speak i'm saying
42:25 - use jamie's dog to call the speak
42:27 - function but let's say i wanted this
42:29 - method
42:30 - to then call have a birthday i could
42:33 - call
42:34 - self dot have
42:37 - birthday
42:41 - right and that would be just like i'm
42:43 - using jamie's dog to speak
42:45 - basically this would this is saying
42:47 - whoever calls
42:49 - speak first prints this and then
42:52 - that thing whoever called speak
42:55 - then calls half birthday
42:58 - and so now if i make uh let me
43:02 - print off jamie's dog dot age
43:06 - uh whoops let's change this back to age
43:24 - um
43:26 - and let me print it after speaking
43:30 - input age is not defined i left off my e
43:34 - there we go so right so
43:38 - jamie's dog is 11. i then we then tell
43:40 - jaime's dog to speak
43:42 - um jamie's dog then speaks and then
43:45 - it calls the thing that spoke
43:48 - self cause it calms happy birthday
43:52 - and so again i think i i wanted to show
43:55 - this because
43:55 - again i think you don't have to call
43:57 - this um self
43:59 - you could call it whatever um so i could
44:01 - call it this
44:02 - it's just that when you're using
44:05 - the reference to the thing so now when
44:07 - you're saying okay
44:08 - who who do i want to call happy birthday
44:10 - on it's not self anymore
44:12 - it's this
44:16 - that doesn't work ah and self is not
44:18 - defined so maybe it's this dot name
44:21 - yeah um right so this
44:24 - is like basically this is the key word
44:27 - for
44:28 - what do i want to say what is the
44:30 - keyword that i want to use to refer to
44:32 - myself
44:33 - it could be this it could be self it
44:35 - could be a
44:36 - right
44:41 - it's it's a complicated question and
44:43 - like you can see that it gets
44:45 - into it's a little bit confusing
44:48 - basically just always keep itself
44:52 - you should always remember that um
44:55 - that you need to give itself as the
44:58 - first parameter
44:59 - and in fact it's useful here to show if
45:01 - i forget this
45:05 - when i ask a dog to speak this is a
45:07 - really common error message
45:09 - that you'll see all the time when
45:10 - because i you know i forget to put self
45:12 - in there all the time as well because
45:13 - it's just a weird thing
45:14 - if i forget this you'll see this error
45:17 - message
45:18 - all the time of takes zero positional
45:20 - arguments but
45:21 - one was given that means on line 17
45:26 - there's like an implicit self being
45:28 - called there
45:29 - but because i haven't said that this
45:31 - takes one argument
45:33 - it basically it's saying this method on
45:35 - line eight takes zero
45:37 - but i'm giving it one because the self
45:39 - is secretly being
45:40 - passed into there um so this this is an
45:44 - error message that you'll see all the
45:45 - time and usually
45:46 - it's like oh yeah i forgot to put self
45:48 - in my uh
45:50 - in my method at least i run into that
45:51 - problem a lot
45:57 - any any questions that we should take
45:59 - from the chat jamie
46:02 - um i think he was actually just
46:03 - answering one of the questions really
46:04 - well because someone just
46:05 - someone had asked is it mandatory to put
46:07 - self in a method and you just did like
46:10 - a great demonstration of that yeah yeah
46:13 - and people have been giving like really
46:15 - good explanations of like
46:17 - what self does likes um someone wrote
46:19 - self binds to the attributes that are
46:21 - initialized
46:23 - and someone wrote the first parameter
46:24 - argument is always pointing to itself
46:26 - and reserved for that any arguments you
46:27 - want
46:28 - will have to go after that yeah so like
46:30 - pointing out that if you want to add
46:32 - arguments to a method
46:33 - on you like the aren't self like
46:35 - initialize variables uh you can
46:37 - yeah yeah and again i would say that all
46:40 - this stuff is good to have a
46:42 - kind of uh you know understanding of
46:45 - when you're a new programmer but you
46:47 - don't really need to know all of the
46:48 - details
46:49 - again i i've been writing python code
46:51 - for like
46:52 - 10 years at this point and um
46:56 - you know i'm comfortable enough with
46:58 - coding that i can like play around with
46:59 - it and try to develop an
47:01 - understanding of this for myself but
47:04 - really if you're a new programmer or if
47:07 - you're just learning to program and
47:08 - specifically just learning to program
47:09 - python
47:11 - i think the more important thing is like
47:13 - understanding what a class is
47:15 - what an object is this idea that classes
47:17 - can have
47:18 - instance variables which are nouns and
47:20 - adjectives the idea that classes can
47:22 - have uh methods which are like the verbs
47:25 - and then the idea that i can create
47:27 - multiple ver you know multiple objects
47:29 - of a class
47:30 - and each have them do different things
47:31 - and each have they each have different
47:33 - variables
47:34 - like those are the big picture ideas and
47:36 - this discussion about self
47:38 - it's important to to know because
47:40 - obviously your code is going to crash if
47:42 - you don't
47:43 - uh you know if you don't have the exact
47:44 - rate syntax but
47:46 - the nitty gritty details of like what
47:48 - self is doing to me
47:49 - is not really that important if you're a
47:50 - new programmer it's like hey just
47:52 - remember to put self in places and then
47:54 - focus on like the more big picture ideas
47:56 - behind what is a class what is an object
47:58 - what are instance variables what are
48:00 - methods
48:00 - um that sort of stuff
48:04 - cool um okay so
48:07 - we basically didn't do this last night i
48:08 - just basically just sat on this page and
48:10 - wrote a bunch of code and talked for a
48:12 - while um
48:15 - you can see that this this lesson covers
48:17 - a lot of
48:18 - stuff that we just talked about this
48:21 - one's interesting
48:22 - um this one
48:26 - is you know what i'm just gonna go back
48:29 - to my dog
48:30 - because we've been working with our dog
48:36 - right now if i just print out
48:39 - my dog oops i just deleted my dogs
48:46 - if i just print my dog we get this weird
48:49 - um
48:49 - memory location thing it's not super
48:51 - helpful
48:53 - so what you can do is that uh
48:56 - you can say you can define a method
48:59 - called
49:00 - i forget what it's called
49:03 - let's see string representation what is
49:06 - it
49:08 - wrapper let me grab this
49:19 - all right there we go i'm printing out
49:21 - my dog it's the weird memory location
49:23 - i can define again a special method
49:27 - called wrapper which takes self
49:30 - and what this does is that
49:34 - i can define something that it can
49:36 - return so i can return
49:39 - this dog is named
49:42 - plus dot name
49:45 - plus and it
49:48 - is blank self dot
49:51 - age years old
49:57 - so the thing that's returned from this
50:00 - wrapper function is the thing that gets
50:03 - printed out when you ask to print the
50:05 - object
50:05 - so now instead of printing out jamie's
50:07 - instead of printing out the memory
50:09 - location when i print out jamie's dog
50:10 - it'll print out um and
50:15 - uh let me i'll go back and show this
50:18 - error once i show
50:19 - the correct output let me add a space
50:23 - there to make that print statement nice
50:26 - um this dog is named clemmy and it is 11
50:29 - years old
50:30 - so i can print out jamie's dog i can now
50:32 - print out
50:33 - alex's dog
50:37 - basically this is just a nice function
50:39 - for if you want to be printing out your
50:42 - objects in order to know things about
50:44 - them instead of seeing the memory
50:46 - location which is not helpful at all
50:47 - you can define what gets printed out
50:50 - when you ask the object to be printed
50:52 - using this special function and it has
50:54 - to be named this way
50:57 - i'll go back and show that error that i
50:58 - had before um
51:00 - just to show a little bit of debugging
51:03 - uh
51:05 - online eight i am trying to return this
51:09 - dog's name self.name and it is self.h
51:11 - years old and i get the error must be
51:13 - string
51:14 - not int and so this error is saying
51:18 - i'm trying to use this plus function
51:20 - with a string
51:22 - and an integer and i can't do that uh
51:25 - some languages will let you do that it
51:26 - will like automatically make the integer
51:28 - a string
51:28 - in python you can't you have to
51:30 - specifically say
51:32 - i want that integer to be a string
51:36 - and now i can add a string and a string
51:37 - together
51:41 - so yeah i think that that's uh that's a
51:44 - cool little thing to show is that you
51:45 - can get rid of the
51:46 - printing out the memory location and
51:48 - instead define your own
51:50 - what does it mean to print out an object
51:53 - right
51:56 - okay let's jump to one of the code
51:59 - challenges real quick
52:01 - um one of them is very similar to what
52:03 - we just did
52:04 - yes it is a dog class
52:07 - i think i i like the very last one of
52:09 - televisions oh yeah
52:13 - so um
52:17 - okay cool let's all do this together and
52:18 - i could uh maybe even get input from the
52:20 - chat on what instance variables we
52:22 - should give it
52:23 - and what methods we should give it so we
52:25 - want to make a
52:26 - television class and the television
52:29 - class
52:30 - should have at least two instance
52:32 - variables so
52:34 - when thinking about this what do what
52:36 - are nouns and adjectives associated with
52:39 - a television so those will be our
52:40 - instance variables and then
52:43 - a television should be able to do things
52:45 - right it should have verbs associated
52:46 - with it
52:47 - those will be our methods and so we
52:48 - should think about okay what are things
52:50 - that tvs can do
52:51 - um so i'll start writing this and in
52:55 - chat
52:56 - if you want to start telling me what
52:58 - would be good instance variables for a
53:00 - television to have
53:01 - or good methods for television to have
53:03 - again adjectives nouns
53:04 - or verbs associated with the television
53:07 - so
53:08 - start writing out my class television
53:13 - and then i will create a television
53:15 - object because i know we're going to
53:16 - want to test it
53:17 - so my tv
53:21 - goes television
53:25 - which programming language uses on new
53:28 - is it java
53:29 - new is java and i think javascript
53:34 - um yeah in other programming languages
53:36 - in order to create
53:37 - a new in order to call the constructor
53:38 - you need to give the new keyword but
53:40 - that's not the case in python all right
53:43 - so do we have any
53:45 - did anyone in chat give us an instance
53:47 - variable or a method that a tv should
53:48 - have
53:49 - i don't have any yet okay i'll start off
53:52 - with
53:53 - um an instance variable so again i'm
53:56 - going to create a constructor here
53:58 - it's going to take self and a tv
54:02 - should an adjective associated with the
54:05 - tv is whether it's offer on
54:07 - right it's the uh is it powered on so
54:10 - i'll create self dot powered on
54:14 - we got some we actually do have some
54:16 - cool ideas now yeah
54:18 - so someone said screen type um
54:22 - and then someone not actually a like
54:25 - parameter but like a
54:27 - cool method a change channel method so
54:29 - maybe we can have like a
54:31 - what channel it's on now like yeah so
54:34 - right so in order for us to have a
54:36 - change channel method we probably a tv
54:38 - probably needs to know
54:39 - its current channel
54:43 - and let's say so by default right now
54:46 - i'm going to say that
54:47 - any tv that is made is
54:50 - powered on its fonts it's turned off and
54:53 - then it starts on channel one
54:55 - so i can confirm that that's working by
54:56 - printing my tv
54:59 - dot current channel
55:06 - see um did i misspell it
55:12 - let's see what am i doing oh whoops
55:17 - so this is a confusing error
55:21 - um i
55:26 - i want to be creating a television like
55:28 - this and i thought i was doing it
55:31 - like this i thought i was saying okay
55:33 - call my constructor
55:34 - but i named my constructor wrong right
55:37 - the constructor has to be
55:40 - that's the name of the constructor it's
55:42 - underscore underscore in its underscore
55:44 - underscore
55:44 - and so when it was just this that was
55:46 - just some other method that i was
55:48 - never calling and the default
55:49 - constructor was being called so
55:53 - now there we go i have a current i
55:56 - have my current channel um i think
55:58 - that's a really good example of like
55:59 - you know test your code as you're
56:00 - building it right i could have done a
56:02 - ton of work
56:03 - and uh like written my change channel
56:06 - function
56:06 - or method done all that stuff and then
56:08 - tried to create a tv
56:10 - and not have it work and now i have all
56:12 - of this code that i would have to go
56:13 - through
56:14 - it was way easier for me to you know to
56:16 - have screwed this up
56:18 - to have not created the constructor
56:20 - correctly
56:21 - and then say okay wait a minute why does
56:25 - why does current channel not exist why
56:27 - was this instance variable never created
56:28 - it was never created because this
56:31 - constructor was never called
56:32 - and it was never called because it
56:33 - wasn't named properly
56:38 - okay cool let's do that
56:42 - method to change the channel so def
56:45 - change channel you can actually do a
56:48 - couple of these
56:48 - we can do uh we'll also uh mention like
56:51 - volume
56:52 - yeah right yeah we can totally do volume
56:54 - um
56:55 - let's write two methods let's just do
56:57 - change channel to any channel
56:59 - so this is like you typing in the number
57:01 - right
57:03 - input channel so i'm gonna say
57:06 - self dot change channel
57:10 - or current channel
57:14 - um equals input channel
57:19 - um if i were i really should
57:22 - test this method before writing another
57:24 - one but i'm pretty sure
57:26 - that one will be okay and so i'm gonna
57:27 - then write a second method that is
57:30 - um uh
57:34 - i want to phrase this in the form of a
57:35 - verb how do you phrase like
57:37 - go up one increase increment
57:41 - increase channel by one
57:44 - another thing that i'm doing because i'm
57:46 - trying to go quickly here is my naming
57:48 - is all over the place here i'm using
57:50 - underscores here i'm using camelcase so
57:53 - um you know that's different
57:56 - here i don't need to give it an input i
57:58 - just want to say
58:00 - the current channel goes up by one
58:04 - someone's asking a question like what's
58:06 - the best way to find
58:08 - the best methods and the best attributes
58:11 - um for a class you're creating um i
58:13 - think for that it just really depends on
58:15 - like what you want your class to do
58:17 - like what you want your blueprint to do
58:19 - um because like for television like we
58:21 - can create
58:22 - like a lot of different things like we
58:23 - can change the channels change
58:26 - the volume change like a bunch of things
58:28 - um
58:29 - and they're like different ways we can
58:30 - set up those methods and attributes
58:32 - um i think it's probably a good idea
58:35 - like before you create your class or
58:37 - like you're creating something that's
58:38 - like pretty complicated to like
58:40 - write out or like map out on like paper
58:42 - everything you want to do
58:44 - and everything you want to include so
58:46 - that you don't just like jump in and
58:47 - realize
58:49 - you know later like after you've already
58:51 - created and built it out that like
58:52 - there's some way that you could have
58:53 - done it that was like more efficient or
58:54 - like more powerful
58:56 - totally i think um let me let me finish
58:59 - writing this code real quick to just
59:00 - test these methods and then i can speak
59:02 - to that um
59:09 - so i'm creating a tv uh its channel when
59:12 - it gets created should be one
59:14 - i'm then changing its channel to 10
59:17 - and printing it out so we should see one
59:18 - then 10 and then i'm increasing the
59:20 - channel by one so it should go up to 11.
59:23 - that's what we see um
59:26 - yeah i think uh exactly what you said
59:28 - jamie you just have to
59:29 - right this is where you get to kind of
59:31 - just design your whole system where
59:33 - you you should ask yourself whatever
59:35 - class you're creating
59:37 - what things does it need to know about
59:38 - itself what nouns and adjectives does it
59:40 - need to have and then what does it need
59:42 - to do
59:42 - and those are the methods um i think one
59:45 - thing
59:46 - that you'll see a lot or one thing that
59:48 - might be a good way to organize yourself
59:50 - is to like um write
59:54 - dummy methods so it's like um what's the
59:57 - name of this
59:59 - so if i know that i want to change the
60:02 - channel
60:02 - i could write this method and just say
60:05 - pass
60:05 - and write this method and just say pass
60:09 - and then you know i might have a bunch
60:11 - of more methods and so
60:12 - you know this is one way to organize
60:14 - yourself is to
60:16 - um write out kind of all of the headers
60:19 - of your class
60:20 - write out all the methods right maybe
60:22 - you don't even want to give these uh
60:24 - these values yet but you know that uh
60:27 - you know you know that tv wants to have
60:29 - a power
60:29 - on or off and you want uh you want to
60:33 - have a channel you want to have a volume
60:35 - um right you can kind of like lay out
60:38 - the
60:39 - the bones of your class and then come in
60:42 - and fill them
60:42 - in one by one of like okay what does a
60:45 - you know what does this do what does
60:46 - that do
60:49 - cool any other questions that uh
60:52 - that we should take from uh from the
60:54 - chat
61:01 - i was muted sorry my roommates were
61:03 - being noisy in the background um
61:05 - someone just asked um why
61:08 - when we created self.powered and
61:12 - i think the other ones self.current
61:14 - channel why don't we put them as
61:15 - arguments in the init method
61:17 - sure yeah so we could have done that
61:20 - right we could have said
61:21 - whenever i create a television i have to
61:24 - give it
61:25 - a input power state right
61:30 - and then i could set power it on to
61:32 - whatever i give it
61:34 - but sometimes you want every tv to start
61:37 - the same way
61:38 - right i would argue that when you buy a
61:40 - tv
61:41 - it's when you buy a tv you could
61:43 - consider that you initializing the tv or
61:45 - you constructing this tv
61:47 - it's probably going to be off right
61:48 - every tv that gets created it's going to
61:50 - start
61:51 - off and so it's like sometimes you don't
61:53 - want to even give them the ability to
61:54 - say
61:55 - you know i want to start it true
61:56 - sometimes you want to say you know what
61:58 - every tv as soon as it gets created it's
62:00 - going to be off
62:01 - and then you know later on there's
62:03 - probably going to be like a turn
62:05 - on method that flips powered on
62:10 - self.powered on rather and this takes
62:13 - itself
62:14 - i already forgot it
62:17 - you know it flips it to true um so
62:20 - eventually there may be a method that
62:21 - can interact with those variables
62:24 - um right you're just setting the initial
62:25 - state and it might be the case that
62:27 - you want the initial state to always be
62:29 - the same for every object that you
62:31 - create
62:31 - and then later on you can change them
62:33 - however you want
62:40 - anything else i see michael can you add
62:42 - an array of preset screen settings such
62:45 - as
62:45 - bright dark vivid movie yeah so
62:49 - the reason why i wish we had like more
62:52 - classes because
62:53 - uh more classes is a funny word to use
62:56 - in class
62:56 - more sessions because we can start to
62:59 - now use
62:59 - everything that we know right so
63:03 - if i have let me get this into a state
63:06 - where it actually runs
63:07 - um
63:11 - see powered on will be false
63:15 - self dots channel or what is it uh
63:18 - current channel
63:22 - equals one whatever uh i can get rid of
63:25 - these for now
63:28 - um um
63:30 - and then the init i'm creating the tv
63:32 - it's a good example of
63:34 - takes one argument but two were given uh
63:38 - remember there's the implice itself that
63:40 - i'm calling here so
63:42 - right now this line 10 is failing
63:44 - because i'm giving it two things i'm
63:46 - giving it self and true
63:48 - even though the self was implied and i
63:50 - was only asking for one
63:52 - basically i forgot to remove that from
63:54 - when i had uh
63:55 - you know put that in as an example
63:57 - before and then it has no attribute
64:00 - change channel because i deleted that
64:01 - method so it's crashing online
64:03 - uh 12. the question was
64:06 - can we can we make a list of things
64:08 - right so i could have a list of things
64:10 - that was like
64:11 - self dot uh what was the question that
64:14 - michael said
64:15 - uh screen settings it's like yeah
64:19 - um equals let's just say it's you know i
64:22 - don't exactly know what that would be
64:23 - maybe it's brightness dark
64:25 - vivid movie something like that
64:28 - i could then write a def
64:32 - increase settings
64:35 - self i could then write something that
64:38 - loops
64:38 - through all of this so for setting
64:42 - in self.screen
64:45 - settings uh setting
64:49 - plus equals one right i don't think i
64:51 - don't think that exact code would do it
64:53 - actually but
64:54 - that's the idea is that you can that now
64:56 - start using
64:57 - everything that we know in python lists
64:59 - dictionaries loops
65:01 - conditionals all of this stuff can be
65:03 - used inside these methods inside
65:05 - instance you know you can set your
65:06 - instance is equal to other instance
65:08 - variables
65:09 - um you know i could have a class
65:11 - television and then i could also have a
65:13 - class
65:14 - uh i don't know what this would be
65:17 - channel
65:18 - and i could have a self.current
65:22 - channel
65:25 - equals channel right
65:29 - i could have an instance variable be
65:32 - an object of another class um
65:36 - where now this instance variable is
65:38 - going to create a new channel object
65:40 - and that channel object could have you
65:42 - know any sort of
65:44 - instance variables methods all that sort
65:45 - of stuff so all of this stuff can start
65:47 - to be layered
65:48 - together
65:55 - um okay um
65:59 - let's see we have more good questions in
66:02 - the chat
66:03 - um we're pretty much at the end of the
66:06 - session um this is our this is our last
66:09 - session
66:10 - um so i'm actually i also took the day
66:14 - off work
66:14 - uh so i actually have no meetings coming
66:16 - up so i can come and
66:18 - hang out with you all as long as you
66:19 - have questions to a reasonable extent i
66:21 - might leave in like 20 minutes
66:22 - jamie if you have to leave at any time
66:24 - feel free i can i can handle these
66:26 - questions but
66:27 - essentially that's the end of the lesson
66:30 - thank you for watching first of all if
66:32 - you if you made it this fall
66:33 - if you made it this far um
66:37 - yeah i one we would love feedback on
66:39 - this stuff if you if you've made it this
66:40 - far
66:41 - um you know drop us a comment on this
66:44 - youtube video or something
66:46 - i'm just like curious as how many people
66:48 - make it this far i know people watch
66:49 - these videos but i have no idea if they
66:50 - drop off after like five minutes or
66:52 - something
66:53 - um so first of all thank you if you're
66:56 - watching
66:57 - um leave us a comment on what we could
67:01 - do better
67:01 - what we could do um you know how we
67:04 - could make these things better this is
67:05 - the last planned stream
67:07 - for now um i hope that we'll run another
67:09 - series
67:10 - in hopefully a couple of weeks um but
67:13 - right now
67:14 - uh we are not planning to so hopefully
67:16 - eventually we will do
67:17 - another um series but it probably won't
67:20 - be for a little bit
67:21 - um yeah and then other than that thanks
67:24 - for
67:25 - thanks for watching thanks for hanging
67:26 - out with me jamie yeah
67:29 - thanks for hanging out with me on this
67:30 - one and also we did the what like
67:32 - the loops one together or something i
67:34 - don't remember we did a couple there's
67:36 - so many of these
67:37 - yeah um cool so yeah
67:41 - if you're watching this on youtube i'm
67:43 - gonna
67:44 - as long as people have questions i'm
67:46 - gonna sit here and answer your questions
67:48 - but uh
67:49 - yeah folks on youtube it might be a bit
67:51 - hard to follow if you're not like
67:52 - watching the chat also come on so feel
67:54 - free to drop off at this point if you're
67:55 - just like watching this in the archives
67:57 - but otherwise um yeah i'm happy to
68:01 - answer more questions and if nobody has
68:02 - questions
68:03 - we can shut this off i think there are
68:06 - a bunch of questions in the chat okay
68:11 - yeah so sammy has been asking about this
68:13 - this false
68:14 - variable and i think it's answered in
68:16 - the chat but
68:17 - again that's just an instance variable
68:20 - like
68:20 - all of my other instance variables so i
68:22 - could have you know
68:24 - just like i have my dog name i had self
68:26 - dot
68:28 - dot name i could make every dog
68:31 - dog's name winston right this could a
68:34 - variable could be a string it could be a
68:36 - list of integers or it could be a
68:38 - boolean and so this is just an example
68:40 - of
68:40 - one of our instance variables is a
68:42 - boolean that's either true or false
68:51 - cool all right i'm gonna give it another
68:56 - 90 seconds uh and then then we can take
68:59 - off
69:00 - um jamie what'd you eat for lunch today
69:03 - at chipotle oh that's very good right
69:06 - right before
69:07 - this actually yeah um yeah i'm i'm
69:11 - feeling full
69:12 - and happy and content nice
69:16 - um uh
69:20 - let's see
69:24 - i don't know how to pronounce your name
69:25 - par jury
69:28 - asks how do you increase problem solving
69:29 - skills um
69:32 - i would really encourage you to as
69:34 - you're going through codecademy lessons
69:36 - to do the kind of things that jamie and
69:39 - i did today
69:40 - of um you know playing around with your
69:44 - code as you're going if you don't really
69:46 - understand
69:46 - what self is doing you can play around
69:50 - with the code like like that and that
69:52 - will just
69:53 - allow you to like the more comfortable
69:55 - you become with
69:57 - seeing error messages debugging error
69:58 - messages um
70:00 - playing around with your code changing
70:02 - something in the code and printing
70:03 - values out
70:04 - the more comfortable you become with
70:05 - that sort of stuff i think that will
70:07 - increase your problem-solving skills
70:08 - because
70:09 - you won't hit a wall as soon as you run
70:11 - into um
70:13 - whatever problem you're trying to solve
70:14 - right you'll be able to start
70:16 - debugging it and so i would say a good
70:19 - way to increase your problem solving
70:20 - skills is
70:21 - even when learning syntax for the first
70:23 - time or the concept for a first time
70:25 - like experiment uh you know don't just
70:28 - trust
70:28 - our codecademy green check mark that
70:30 - you've like done it correctly
70:31 - ask yourself probing questions change
70:33 - your code see what see what happens as
70:35 - stuff changes
70:36 - and then move on i think that's that's
70:38 - really important
70:42 - um differentiate global variables and
70:45 - nested variables
70:46 - um yeah a couple of a couple of good
70:50 - questions in class
70:51 - there in the chat um so there's a
70:53 - question about the difference between
70:54 - global variables and
70:55 - uh the question said nested variables
70:59 - um local variables we showed this a
71:02 - little bit
71:03 - where let me go back to
71:07 - um let me even see if i can get back to
71:10 - my dog
71:11 - i wanna i want my dog class back
71:14 - uh we showed this a little bit where if
71:17 - you are not
71:18 - using um if you're not using the
71:21 - instance variable which can
71:22 - it's kind of global it's not really a
71:23 - global variable but it's global within
71:25 - the class
71:26 - um dog's still here
71:31 - come on dog here we go um
71:35 - if i have right if i take away this self
71:38 - dot
71:39 - this now becomes a local variable and so
71:42 - when i
71:43 - try to call happy birthday which is b
71:46 - let me do jamie's dog
71:51 - stops half birthday
71:57 - um if i try to do this i'm going to get
71:59 - an error message let me in fact get rid
72:01 - of these print segments just to clean it
72:03 - up
72:04 - this is a local variable age reference
72:06 - before its assignment um
72:09 - you know so because i'm not using self
72:11 - dot this is now local
72:12 - which doesn't exist i could create that
72:14 - local variable i could have age equals
72:16 - five
72:17 - this would now run but if i print
72:20 - out um prince jaime's
72:25 - dog dot age before and after happy
72:28 - birthday
72:31 - you'll see it didn't change right
72:35 - the thing that i changed wasn't the
72:38 - global again it's not really global but
72:40 - it's global within the
72:41 - within the class the instance variable i
72:43 - didn't change the instance variable
72:45 - age i changed the local variable age and
72:48 - then that local variable gets forgotten
72:50 - as soon as the method ends
72:52 - and so you'll see that my instance
72:53 - variable never actually changed
72:55 - if i change this to self dot
73:00 - it now will change and i just happened
73:02 - to create this local age variable that i
73:05 - never do anything with it's totally
73:06 - useless
73:13 - can you re-explain what the increase
73:15 - setting method is doing on the list
73:17 - yeah so i i went through that really
73:19 - quickly basically i just wanted to show
73:21 - that um i don't have a good example that
73:25 - makes sense off the top of my head but
73:26 - like
73:27 - dog west right um
73:32 - i don't know what this what this
73:33 - variable would be i don't have it i
73:34 - don't have a good example that like
73:36 - makes sense
73:36 - i just want to demonstrate that um
73:40 - that you can loop through um
73:43 - you know if one of your instance
73:44 - variables is a list you can look through
73:46 - the list so i can do
73:47 - um for item in self.dog
73:51 - list i can print item
73:55 - and so now when i call happy birthday i
73:57 - should see in addition to
73:59 - 11 and 12 being printed off i should see
74:02 - every item in this list being printed
74:03 - off
74:05 - so um yeah sami i think you asked that
74:08 - question sammy i went through that very
74:10 - quickly
74:10 - and it's not a great example because it
74:13 - doesn't really make sense in the context
74:14 - of my program
74:15 - but it's just an example showing hey
74:19 - your instance variables can be lists and
74:21 - then in your methods
74:23 - you can do anything that you know how to
74:24 - do with lists like loop through them
74:26 - increase their value by one you know all
74:28 - that sort of stuff
74:34 - cool okay jamie i think we should call
74:36 - it here
74:38 - sounds good yeah this is really fun okay
74:40 - cool well thank you for watching
74:42 - everyone
74:42 - and um yeah hopefully we will um we will
74:45 - see you again soon on some more live
74:46 - streams
74:47 - bye bye everyone

Cleaned transcript:

if you're out there in chat go ahead and say hi to us just wait to confirm that we are actually live all right looks good to me all right uh hello everyone my name is alex koontz and we've made it this is our last cs101 livestream session i'm here with jamie hi jamie how are you doing i'm good i hope everyone is doing well welcome to our last series of cs101 yeah so uh again all of these uh videos have been posted on our youtube channel so if you ever want to catch up on the series you can go watch there right now we are live on a ton of different platforms jamie and i are mostly looking at the chat on youtube if you want to chat with us during this session um so if you're watching on facebook or twitter or even twitch which i think very few people are but uh that twitch channel is still going uh come on over to youtube and uh we can chat with you there again this is our final session in what we were calling our cs 101 live stream session the idea behind these sessions was this content is pretty similar to what you would see in an intro level high school course or first semester of college course we definitely didn't get through everything that you would see but it's a nice kind of introduction to all of these topics um we're teaching this these courses in python but again i really stress every time i do one of these i stress that these concepts are pretty universal to any language and so the important thing that you should be focusing on is the concepts themselves and then the python syntax is like something that will you know have to power through in this in this lesson and when we're on the python syntax but really we're learning the concepts and then you can apply that to java or javascript or c plus plus or c sharp or like any of these these big programming languages so um let's see uh yeah uh what lesex says the live sessions best we can do in the pandemic yes that's another reason why we're doing this is because uh honestly jamie and myself i guess i won't speak for jamie but i miss talking to people so it's always a thrill to be able to talk with uh talk with people in the chat as we're doing these things so yes i can also say i miss talking to people even my introverted self is a little overly introverted these days yes all right so i'm going to screen share i'm going to show folks what we're doing um so the lesson that we're going through again is you can find this cs101 live stream series it's in our catalog you can probably search for it in the search bar it's linked in the youtube description and we have made it all the way down to the last lesson on classes so let's go ahead and jump right into this and okay cool uh let me jump back to the start all right so this lesson is all about classes and objects in um a programming language in this case python and so again let's focus on the main ideas behind uh classes and objects before diving into the python code and so jamie how would you describe what a class is um so i kind of describe a class like what i always view it as is it's kind of like a blueprint for like um different objects you can create so like let's say you're like trying to i don't know write a class that kind of like represented i don't know like the attributes of a pet or something so you might have like a blueprint for like what pets might have like they have names they have ages they have you know like dogs might bark or cats might meow make different sounds or something and then like you can create a blueprint where you can kind of create a lot of different objects from that class so that's kind of like the way i view classes and how they can be helpful in python or any other programming language yeah exactly so classes are really similar to things that we've seen before in fact we've already worked with a couple of classes already so in this exercise i've actually already done this which is kind of nice i don't have to um i won't have to type all this code but in this exercise we're asking you to call the type function on things that we've already used so if i call the type function on uh just the number five i get okay this thing is the class integer the dictionary is the class dict and an empty list is of the class list and again these can change right if i if i change my list to have two things in it it's still a list right like you were saying jamie the class itself the idea of the list is kind of like the blueprint it's this is what it means to be a list you can store items you can have a length you can um you know get the last item but the objects themselves are specific instances of that list an instance sounds like a very fancy word but basically means it's a unit of that type so i can create two list instances here um and i can print both out or i can print the type of both out and there you go you can see okay i have two things of class list they both are objects of the list class so that's number one that's the that's the first big takeaway here is that classes which we haven't really looked at how you define a class but classes are like the theoretical blueprint of what does it mean to be a list and then objects are actual instances or actual examples of that blueprint and so you can have multiple objects with different properties right this list has a four and an eight in it this one has a one and a five in it so they're two objects but they're slightly different even though they uh contain similar properties so that's big idea number one what a class is and what an object is all right so as jamie was saying a class uh actually so i'm gonna kind of be jumping around this uh this lesson to teach it in a slightly different order um let's look very briefly at how you define a class in python similar to functions you're going to define it with a keyword in in the case of function the keyword was def now that we're not defining a function we're defining a class that keyword is class you give the class a name so the name of our class uh back in this example uh was what was it i think it was int dict and list so that was the name of our classes we're creating a new class like facade we give it a name and then just like with functions we give it a colon and then anything that we want to be a part of that class needs to be indented one exact same thing to functions where it's kind of saying this line of code belongs to this class because it's indented one after this colon so let me um i forgot to reset my code so again this one's pretty basic so i won't uh i won't even retype my code but you can see we're creating a class facade here and then i think in the next uh in the next exercise yeah okay in the next exercise we're actually asked to create objects of the class so it's again this this idea of i'm going to define the class it's the blueprint for what the thing does and then i can make as many of those things as i want so let me see so i can say um i can create a variable named facade one and then we'll talk about this in a second but in order to create a new class uh a new class that you create oops and i uh what did i do here um oh i don't even use the word new that's uh that's java uh there we go in order to create a new class um we're gonna end up calling a constructor we're gonna look at constructors in a little bit but for now let's just just uh just believe me when i say calling this uh setting a variable equal to the name of the class with parentheses is the thing that creates an object of that class so again i can print i can create both of these i can print out the thing itself and i can print out the second frame so you can see i have two things and again i can uh let me go back how did i do this it's type yeah so if i if i do type uh i can see the type of this class so let me both print out the object itself and then i'll also print out the type of both of these guys and jamie that when i when i print out the object itself i get something fairly weird um i don't know if you know the answer this if you're not a python person but what is what is your sense of what's happening here when i just print out my two facade objects here um so basically when you print out like just the object it's telling you that it's like in main which is like your like specific like python file i believe and then it's saying like you're looking at the fake hate object i do not know what the zero x like i don't know what the la that last thing is um but i don't know do you know what that thing is alex yeah so that that's actually the memory location of this thing okay um and what's interesting right now is that this is like probably getting two in the weeds but these are actually at the exact same memory location which is kind of weird because they're they should be two different objects but because this class is so basic it really has nothing associated with it the computer's probably just throwing out the same memory location that's that's way too much that's like way too much in the weeds not really important the important thing is look at we've created two objects of facade and uh we can print them out which prints this weird memory location thing and then we can also check their type also um alex we have a question from someone in the chat sami so they're asking why when we look for type the result is class so like we get like class and class um you know something like especially when we call like a list or something else yeah and then also we're asking why are we calling class two times here why are we calling class two times here uh well i think maybe like why is the result twice oh yeah yeah yeah or why are we creating two of these um yeah great questions so um i'll answer the first one of like what is the deal with this print statement of saying class honestly it's something that i i don't know the answer to why why does it say class four i bet there are certain types of things that you could ask the class of and or you could ask the type of and it's not a class um it could be something different so you know i imagine there's something else here that i could pass and it wouldn't necessarily be a class but those things are probably pretty rare most things in python are going to be a class and then it just tells you the name of the class the main here is a little bit funky it's just telling me that this is a class that was defined in my you know in the file that i'm running um whereas back over here these classes uh you didn't have anything to do with maine because these are builtin classes right we didn't define them ourselves python defined them for us right somewhere somebody has written code that says this is what a python dictionary means and what it does and so we didn't define that class we just used that class to make a dictionary object or to make two list objects all right the question of um what why are we why are we doing two or you know why are we calling this facade thing twice um that's a good question so we've created two objects of a facade but right now we can't really see what they're doing because a facade essentially does nothing right it's it hasn't it has nothing associated with it we put this this keyword pass here just to say don't do anything so let's actually i'm going to break from the lesson for for a second and just create our own class because i think that at this point we want to start actually letting our class do something so i'm going to do the same thing i'm going to make it a dog rather than facade just because a facade is like hard to wrap your mind around jamie i think we talked about dogs in a in another livestream that we did yeah probably i'll always bring up dogs um okay so i'm gonna i'm gonna bring um i'm going to do the same thing that we have but with the dog instead of a song here so i'm going to say um jamie's dog jamie's dog and alex's dog okay so i can create both these let me print these out um just or i'll print one of them out just so we make sure that that was like actually created okay so now we need to start talking about what does a dog what do we even do with classes right because right now we've done all this setup but our dog doesn't do anything right we're just saying pass so the idea behind classes and jamie you talked about this a little bit at the start is that classes can have things and classes can do things so i always when i when i teach this i always say there are classes can have things so like nouns and adjectives and then classes can do things which are like verbs so let's do the verbs first because giving giving a class nouns and adjectives is slightly more complicated um let's uh do the verbs first so the verbs or things a class can do is referred to as a method but it's going to basically look exactly like a function so i'm going to say okay a dog can speak and here's something new uh so let me print hello i'm a doc [Laughter] this this is something new that again i'm going to kind of gloss over for now all methods all the things that you say okay a class you can do this the first parameter is always going to be self and this is basically not worth worrying about for right now i in fact i've been programming python for like 10 years i have a vague understanding of what self does i don't have a great understanding what self does and so i i understand that it's annoying when teachers say like don't worry about this but really don't worry about it right the thing that you should be focusing on here is that we are giving the dog class a verb or letting a dog do something so uh let me run my code make sure it doesn't error if i forgot self i think it might never no it actually didn't there would error once i try to call the method okay so i've now given a dog the ability to sleep so now i can tell a specific dog after i've created it i can say okay let's tell jamie's dog to speak and there we go we can see jamie's dog just said hello i'm a dog can also tell alex's dog to speak and as you might expect he's going to do the exact same thing as jamie's dog all right they can both speak they can both do this this function um they can you know they can do it multiple times uh there we go all right any questions in the chat about methods about these verbs that we can ask the uh ask a class to do um no questions about that but someone did ask is this course that we're going through paid on codecademy like is it a pro course yeah so right now this this one that we're specifically going through is a pro course um you can probably find really similar content in python 2 which is a free course i and again the differences between python 2 and 3 are minimal enough for a beginner that i i believe it doesn't matter i believe that you can take that python 2 course um it's an owned version of python but again if your goal is to learn the basics of coding you can do that in python 2 and there'll be a there'll be a lesson about classes and methods in that python 2 course this is also a pro course if you want to take this exact course um then you can you know upgrade to pro which uh you know would be great also someone uh commented that they believe self is just a pointer to itself um which i think is like pretty much what it's basically like self is just telling python to like that you're like working with like this specific object so it's kind of i like view it basically just as a placeholder for jamie's dog yeah like we make like uh instance variable jamie's dog or alex's dog within the class blueprint itself like it wow i'm saying itself and now i'm just within the class blueprint dog self is basically just a placeholder for like an instant variable instance variable that you might make later um yeah so that that will all become relevant once we um let me get rid of that pass actually that will all become relevant once we get into instance variables i think the thing that's confusing for methods is that you know previously in functions i could like define a function of add together a and b sorry my keyboard is breaking um and then i could return all right let me just say print a plus b i think what's confusing about methods is that within normal functions right if i if i try to call this function um you know one and two i have to pass it to when i'm actually calling this function i have to pass it two parameters because i've i've said this function takes two parameters right it takes a and b i think what's confusing about methods and the reason why i like to skip over self for methods is because that pattern doesn't hold up when we're actually calling these methods right it looks like this speak method takes a parameter named self but then down here when i'm calling it i don't pass in anything and so that's that's why it's confusing where it's just different than how functions work where i i don't need to pass anything into this speak function even though i've declared that it takes it takes this self parameter okay let's now talk instance variables and in order to talk instance variables we're going to have to talk about the constructor which let me write the constructor here first okay okay cool so whoops spelled that which would have really screwed things up okay so the job of the constructor is to create the object and so we've actually been using constructors all along this was um on lines nine and ten this is us using the dog constructor it's the thing that constructs the dog um it's also called an initializer which is when if you're writing your own constructor in python you use this init init method basically this is our thing um where we define this is what it uh this is how we create a dog and by default if we don't write our own constructor a basic one exists that takes no parameters so that's how we've been able to create dogs so far is that we've just been using the the constructor that automatically exists but let's say we wanted to write our own constructor where we can give a dog a name so uh let me let me change this to input so the constructor is where you can now start to define the nouns and adjectives associated with um associated with a class so i can say this dot name equals input name and so let's see if i run this i think yeah okay so i've just written a constructor and now when i run my code i get an error jamie why do you think let's let's first let's do a little work to debug this error what do you think is happening here it says missing one required potential uh argument input name yeah so basically before we didn't have this init constructor method um and this niche constructor method has this argument called input name so now basically what's happening is if you look you know the type error is init missing one required positional argument input name so now whenever we call the class dog it's looking for this input name it's looking for the dog's name and right now basically python isn't finding it so it's throwing this error yeah you can see on line nine on line nine we're saying i want to make a dog but i haven't given you an input name and the reason why this worked before was again because by default if you don't define a constructor python will just say fine i'll let you make an object with this default constructor with no parameters but as soon as i define a constructor that that default one python is no longer going to make that it's going to make you use the constructor that you define so i can say um jamie what do you want your dog's name to be clemmy c what's up e clemmy clemmy clemmy my dog's name will be winston is clemmy your your actual dog's name or your family so now that we're now that we're calling the constructor with this input um ah this is not this dot name it's self.name this is used in a lot of other programming languages python uses itself okay cool so now i've made a dog and each of these dogs has a separate name right jamie's dog's name is clemmy my dog's name is winston and now i can use that variable differently so for example i can go in and edit this speak function and say hello i am a dog my name is plus self dot name and jamie this is where you were talking about what self is doing where self is saying it's like a pointer back to myself so when when jamie's dog calls this call speak jamie's dog is gonna say okay what name what is the name of specifically jamie's dog not alex's dog not any other dog what's the name of my own name right or myself myself's name um so now if i do this i'll see let me add a space here to make that print statement nice so let's get rid of this stuff this function example okay so um i'm saying okay i want jamie to speak jamie's dog has been initialized so its name is equal to whatever i pass into here into clemmy and so when he speaks says hello i'm a dog my name is clemmy when alex's dog speaks it uses its version of the instance variable which is set equal to winston so this is kind of showing the power of classes right i can create this blueprint for a dog where i can make any dog in the world that i want i can give it any name but then all dogs are going to speak in the same way where they're going to say hello my name is a dog and my name is whatever their particular name is so this is really kind of like our class is is completely built out built out now um jamie anything that you want to add or anything from the chat that we can uh that we want to talk about here yeah so uh someone like uh because i think someone was asking before like why were we calling um you know dog twice and running it twice before when i was just saying hello i'm a dog so like this is like where just as alex said like when we add a constructor it kind of allows us to like give our different instance variables in this case jamie's dog alex's dog we could have any dog as alex said we can give specific attributes to them so that when we use the methods we can kind of make it more unique for each dog so before we was just saying hello i'm a dog each time which like doesn't seem that useful right like it's like doesn't really tie to a specific thing but now it's hello i'm a dog and my name is the specific name and we can add different things like age um we can have different commands like i don't know like whether or not your dog barks or not you can like build out methods that will tell you when it sparks you can compare different dogs um stuff like that so you can create a lot of different methods that will make the class much more powerful and build out the blueprint yeah and so that's a good point about adding other instance variables and again instance variable i always say it's your nouns and adjectives right a dog has a name a dog has an age a dog could have a um you know an adjective like well i guess you know whatever a dog could have a color of brown and one thing that i want to point out here is that as i've written my constructor right now i can't really set the age of a dog any dog that i made i've hardcoded in its ages too its color is brown and so the way that you kind of can add um variability again is through these parameters where i can say okay rather than it always being you know every dog being two again let me print out let me print jamie's dog dot age right jamie's dog is set to two here because when i create it it automatically gets set to two if i want that to be variable again i could come in here and say um input age um also alex we're getting a good question in the chat about why is it self.name equals input name versus self.input name equals input name yes uh cool let me right so let me uh let's see self.inputname equals input name yeah so right so the job of the constructor is to define the instance variables and give them value so when i could name this whatever i want i could name this input name but that's not a great name for it um because then later when i use this variable in other methods or elsewhere i would have to remember okay every dog has an input name so i'm saying this is where i define the instance variable i say every dog has a name and when a dog is created when i initialize it or when i construct it i'm going to set that instance variable name which can be used elsewhere right it can be used in these other methods it can be printed out down below um i set that equal to whatever value i pass in here oftentimes uh let me get rid of this briefly oftentimes you'll see the name of the parameter mirror the name of the uh of the instance variable and so if i run this code right now it's actually going to error because it doesn't know what input name is right it's trying to set self.name equal to input name but input name doesn't exist anywhere because i changed the name of the parameter so i could do self.name equals name what this does this is the same exact thing basically it's saying set the instance variable equal to um whatever gets passed into the to the parameter when people are first learning about classes i like to make these things different names just to make it really clear that we're setting the instance variable the thing that starts self dot equal to um the thing that i'm inputting into my uh into my constructor let me finish uh so i can do input age and again there's nothing magical about these um these variable names i could name it whatever i could just name this a maybe that's a good example i'm going to set self.h equal to a now when i run my code i'm going to get this same error right on line 11. i'm missing one required potential argument a that's saying on line 11 i'm trying to create a dog just using one parameter when i've said there should actually be two parameters there should be input name and then there should be a second parameter named a so i can set this dog's age to uh uh is is clemmy still around jamie or how old is columbia so chlamy is 11 years old okay and uh winston is sadly no longer around so uh i can do n a which actually is a bad idea i shouldn't mix these nanotypes um i'll say winston's 100 years old um right and now i can print out jamie's dog's age and i can print out alex's talk savage there we go jamie's dog is 11 my dog is 100. all because i defined it that way in the constructor any other questions that i could that i could take from the chat jamie someone just asked a really interesting question i'm actually not certain of can we only create like um an init variable like self.name equals input name in the constructor or can we create it in other methods it's a great question um i don't know the answer to it either let's try um self dot um whatever what's another attribute of a dog number of teeth i'm gonna try to create this okay yeah this this will be interesting um this will be really interesting so i've created my dogs if i try to print jamie's dog jamie's dog dot number of teeth i believe this will error yeah dog attribute has no attribute number of teeth but if i make jamie's dog speak first jamie's dog dot speak now this this is where it's interesting right because speak might create this instance variable and then it might just exist it does so yeah so that actually works um but it's weird right really i i always stress the job of the constructor or the initializer is to set the initial value of all of um of all of the instance variables you know you might eventually have other methods that modify those instance variables right i could do def have birthday remember instance variables are always verbs so i kind of always like to or sorry uh methods are always verbs it's things a dog can do and so i even like naming my methods with a verb right a dog can have a birthday and in this case self dot age um plus equals one right so i'm going to let's print jamie's dog dot age let's make jamie's dog have a birthday it's actually my dog's birthday soon oh almost 12 years old for uh for columbia yeah her birthday and halloween that's very nice do you dress up your dog in that halloween costume no she would hate that she would lose her mind okay cool so i can uh i'm gonna print jamie's uh dog's age then i'm gonna make it have a birthday which will increase the h by one and then i'll print it off again so we should see there we go 11 and 12. so you know you can have methods that change the value of the instance variables after it's being created but going back to that question of like can instance variables be created in other methods that you can but that's really unusual i don't know if i've ever done that ever um so you can but it's unusual another really good question so someone's uh sammy just asked um why are we using self in each method like why are we saying self.name and self.age yeah um and the reason for that is because like um each of these instance variables is like tied to a specific you know like tied specifically to jamie's dog or alex's dog so like self.name is basically telling this method that this is jamie's dog when we use it on jamie's dog so it like knows it's clemmy if we just said name or like input name and like didn't you know specify it with self um it wouldn't work yeah actually and this is probably a good error to show right so if i change this method from self.age to just age the error that it's going to throw is i have no idea what variable you mean by age right the instance variables all methods can access those right this guy can talk to you know speak can access self.name have birthday can access self.age but if i do this when i try calling the method right you can see my code actually runs right i'm able to create a dog able to create a second dog i can print jamie's dog's age and 11 comes out but here when i try calling my happy birthday method i hit an error where local variable age referenced before assignment basically that means i have no idea what variable i i don't have a variable age for you to add one to it never existed and that's because we're trying to access a local variable a variable that only this method would have access to rather than the instance variable cool any other questions that we that we can take or someone did ask is there a limit to the number of attributes or like parameters you can put in the unit method um and they pointed out like maybe storage memory and i said there's probably like not a limit until you hit that memory capacity but that would be like a lot of parameters but yeah i don't think yeah uh there's there's always a limit right our computers are only as big as they can be they're not truly infinite but it would have to be so preposterously large that again you're never you're never really going to encounter that yeah um one other thing that i want to show that i think is helpful as we're just like talking about um constructors is that you know my number of inputs doesn't always have to match my number of instance variables so i could have like self dot dog years and then i could have self dot human years and i could pass in like input human years and set human years equal to that and the dog years equal to that times seven right so and basically what this is doing is my stuff is gonna error now because i don't have age anymore um basically this is going to still i'm going to have three instance variables but i i'm using the same input for two of them right i can use this input to say okay the dog's age in human ears is just the h that you pass it to me and then the dog's age in dog years is that age times seven um so i think one thing that i see a lot of students do early on is that they kind of think that the only thing a constructor or initial initializer can do is set the value of these variables and realistically that's what its job is its job is to set the value of the variables but if it needs to do some crazy math right if i need to like create a variable a equals human years times seven and then do a crazy for loop to loop through something right i can for i in range a you know basically i can write any code i want to write inside my my initializer and that code will run still fine but remember the job of the initializer is really to create the instance variables the nouns and adjectives associated with associated with the um the class so we have one more really good question um someone asked why is each method followed by self um like define speak and then why does it say self yeah so again this is like i don't have a great answer for this basically if we don't yeah do you have a great answer for jamie i just kind of view as like a placeholder for our instance variables so it's like like self kind of refers to um like like a placeholder for like jamie's dogs when we call jamie's dog speak we just need it there so that um like when we call it on our instance variables like it it knows that it's tied to that instance variable yeah um i think it is a little bit confusing because like methods are very similar to functions and like that's not really how like functions kind of work outside of a class yeah um but basically like self is just kind of like it just like points to like that specific object yeah yeah and i think probably to tie to the initialized object which is basically yeah i think i think you can actually even um change the name of this to anything that you want and then that's just the keyword that you use for all of these things so in a lot of other programming languages you'll see this be the the keyword and so if i say you see actually what happens here so this don't yeah that runs i created my two dogs let me see if i can let me print out my dogs just to show you that exists or i can print jamie's dog dot name there's clemmy let me now try uh doing jamie's dog dot speak i actually don't know if this won't work because i've set up this keyword to be this here and i'm using selfie here i don't think it will work but we'll see yeah it's still it still works um let me let me show something else and then we can uh i'm gonna change all these back to self really briefly um let me let me introduce another topic and then we can do another little experiment to see if something works or not which might clarify what this deal itself is um the thing that i want to show is that methods can call other methods so you know outside everything once i have jamie's dog i can make jamie's dog speak um by doing jamie's dog.speak i'm saying use jamie's dog to call the speak function but let's say i wanted this method to then call have a birthday i could call self dot have birthday right and that would be just like i'm using jamie's dog to speak basically this would this is saying whoever calls speak first prints this and then that thing whoever called speak then calls half birthday and so now if i make uh let me print off jamie's dog dot age uh whoops let's change this back to age um and let me print it after speaking input age is not defined i left off my e there we go so right so jamie's dog is 11. i then we then tell jaime's dog to speak um jamie's dog then speaks and then it calls the thing that spoke self cause it calms happy birthday and so again i think i i wanted to show this because again i think you don't have to call this um self you could call it whatever um so i could call it this it's just that when you're using the reference to the thing so now when you're saying okay who who do i want to call happy birthday on it's not self anymore it's this that doesn't work ah and self is not defined so maybe it's this dot name yeah um right so this is like basically this is the key word for what do i want to say what is the keyword that i want to use to refer to myself it could be this it could be self it could be a right it's it's a complicated question and like you can see that it gets into it's a little bit confusing basically just always keep itself you should always remember that um that you need to give itself as the first parameter and in fact it's useful here to show if i forget this when i ask a dog to speak this is a really common error message that you'll see all the time when because i you know i forget to put self in there all the time as well because it's just a weird thing if i forget this you'll see this error message all the time of takes zero positional arguments but one was given that means on line 17 there's like an implicit self being called there but because i haven't said that this takes one argument it basically it's saying this method on line eight takes zero but i'm giving it one because the self is secretly being passed into there um so this this is an error message that you'll see all the time and usually it's like oh yeah i forgot to put self in my uh in my method at least i run into that problem a lot any any questions that we should take from the chat jamie um i think he was actually just answering one of the questions really well because someone just someone had asked is it mandatory to put self in a method and you just did like a great demonstration of that yeah yeah and people have been giving like really good explanations of like what self does likes um someone wrote self binds to the attributes that are initialized and someone wrote the first parameter argument is always pointing to itself and reserved for that any arguments you want will have to go after that yeah so like pointing out that if you want to add arguments to a method on you like the aren't self like initialize variables uh you can yeah yeah and again i would say that all this stuff is good to have a kind of uh you know understanding of when you're a new programmer but you don't really need to know all of the details again i i've been writing python code for like 10 years at this point and um you know i'm comfortable enough with coding that i can like play around with it and try to develop an understanding of this for myself but really if you're a new programmer or if you're just learning to program and specifically just learning to program python i think the more important thing is like understanding what a class is what an object is this idea that classes can have instance variables which are nouns and adjectives the idea that classes can have uh methods which are like the verbs and then the idea that i can create multiple ver you know multiple objects of a class and each have them do different things and each have they each have different variables like those are the big picture ideas and this discussion about self it's important to to know because obviously your code is going to crash if you don't uh you know if you don't have the exact rate syntax but the nitty gritty details of like what self is doing to me is not really that important if you're a new programmer it's like hey just remember to put self in places and then focus on like the more big picture ideas behind what is a class what is an object what are instance variables what are methods um that sort of stuff cool um okay so we basically didn't do this last night i just basically just sat on this page and wrote a bunch of code and talked for a while um you can see that this this lesson covers a lot of stuff that we just talked about this one's interesting um this one is you know what i'm just gonna go back to my dog because we've been working with our dog right now if i just print out my dog oops i just deleted my dogs if i just print my dog we get this weird um memory location thing it's not super helpful so what you can do is that uh you can say you can define a method called i forget what it's called let's see string representation what is it wrapper let me grab this all right there we go i'm printing out my dog it's the weird memory location i can define again a special method called wrapper which takes self and what this does is that i can define something that it can return so i can return this dog is named plus dot name plus and it is blank self dot age years old so the thing that's returned from this wrapper function is the thing that gets printed out when you ask to print the object so now instead of printing out jamie's instead of printing out the memory location when i print out jamie's dog it'll print out um and uh let me i'll go back and show this error once i show the correct output let me add a space there to make that print statement nice um this dog is named clemmy and it is 11 years old so i can print out jamie's dog i can now print out alex's dog basically this is just a nice function for if you want to be printing out your objects in order to know things about them instead of seeing the memory location which is not helpful at all you can define what gets printed out when you ask the object to be printed using this special function and it has to be named this way i'll go back and show that error that i had before um just to show a little bit of debugging uh online eight i am trying to return this dog's name self.name and it is self.h years old and i get the error must be string not int and so this error is saying i'm trying to use this plus function with a string and an integer and i can't do that uh some languages will let you do that it will like automatically make the integer a string in python you can't you have to specifically say i want that integer to be a string and now i can add a string and a string together so yeah i think that that's uh that's a cool little thing to show is that you can get rid of the printing out the memory location and instead define your own what does it mean to print out an object right okay let's jump to one of the code challenges real quick um one of them is very similar to what we just did yes it is a dog class i think i i like the very last one of televisions oh yeah so um okay cool let's all do this together and i could uh maybe even get input from the chat on what instance variables we should give it and what methods we should give it so we want to make a television class and the television class should have at least two instance variables so when thinking about this what do what are nouns and adjectives associated with a television so those will be our instance variables and then a television should be able to do things right it should have verbs associated with it those will be our methods and so we should think about okay what are things that tvs can do um so i'll start writing this and in chat if you want to start telling me what would be good instance variables for a television to have or good methods for television to have again adjectives nouns or verbs associated with the television so start writing out my class television and then i will create a television object because i know we're going to want to test it so my tv goes television which programming language uses on new is it java new is java and i think javascript um yeah in other programming languages in order to create a new in order to call the constructor you need to give the new keyword but that's not the case in python all right so do we have any did anyone in chat give us an instance variable or a method that a tv should have i don't have any yet okay i'll start off with um an instance variable so again i'm going to create a constructor here it's going to take self and a tv should an adjective associated with the tv is whether it's offer on right it's the uh is it powered on so i'll create self dot powered on we got some we actually do have some cool ideas now yeah so someone said screen type um and then someone not actually a like parameter but like a cool method a change channel method so maybe we can have like a what channel it's on now like yeah so right so in order for us to have a change channel method we probably a tv probably needs to know its current channel and let's say so by default right now i'm going to say that any tv that is made is powered on its fonts it's turned off and then it starts on channel one so i can confirm that that's working by printing my tv dot current channel see um did i misspell it let's see what am i doing oh whoops so this is a confusing error um i i want to be creating a television like this and i thought i was doing it like this i thought i was saying okay call my constructor but i named my constructor wrong right the constructor has to be that's the name of the constructor it's underscore underscore in its underscore underscore and so when it was just this that was just some other method that i was never calling and the default constructor was being called so now there we go i have a current i have my current channel um i think that's a really good example of like you know test your code as you're building it right i could have done a ton of work and uh like written my change channel function or method done all that stuff and then tried to create a tv and not have it work and now i have all of this code that i would have to go through it was way easier for me to you know to have screwed this up to have not created the constructor correctly and then say okay wait a minute why does why does current channel not exist why was this instance variable never created it was never created because this constructor was never called and it was never called because it wasn't named properly okay cool let's do that method to change the channel so def change channel you can actually do a couple of these we can do uh we'll also uh mention like volume yeah right yeah we can totally do volume um let's write two methods let's just do change channel to any channel so this is like you typing in the number right input channel so i'm gonna say self dot change channel or current channel um equals input channel um if i were i really should test this method before writing another one but i'm pretty sure that one will be okay and so i'm gonna then write a second method that is um uh i want to phrase this in the form of a verb how do you phrase like go up one increase increment increase channel by one another thing that i'm doing because i'm trying to go quickly here is my naming is all over the place here i'm using underscores here i'm using camelcase so um you know that's different here i don't need to give it an input i just want to say the current channel goes up by one someone's asking a question like what's the best way to find the best methods and the best attributes um for a class you're creating um i think for that it just really depends on like what you want your class to do like what you want your blueprint to do um because like for television like we can create like a lot of different things like we can change the channels change the volume change like a bunch of things um and they're like different ways we can set up those methods and attributes um i think it's probably a good idea like before you create your class or like you're creating something that's like pretty complicated to like write out or like map out on like paper everything you want to do and everything you want to include so that you don't just like jump in and realize you know later like after you've already created and built it out that like there's some way that you could have done it that was like more efficient or like more powerful totally i think um let me let me finish writing this code real quick to just test these methods and then i can speak to that um so i'm creating a tv uh its channel when it gets created should be one i'm then changing its channel to 10 and printing it out so we should see one then 10 and then i'm increasing the channel by one so it should go up to 11. that's what we see um yeah i think uh exactly what you said jamie you just have to right this is where you get to kind of just design your whole system where you you should ask yourself whatever class you're creating what things does it need to know about itself what nouns and adjectives does it need to have and then what does it need to do and those are the methods um i think one thing that you'll see a lot or one thing that might be a good way to organize yourself is to like um write dummy methods so it's like um what's the name of this so if i know that i want to change the channel i could write this method and just say pass and write this method and just say pass and then you know i might have a bunch of more methods and so you know this is one way to organize yourself is to um write out kind of all of the headers of your class write out all the methods right maybe you don't even want to give these uh these values yet but you know that uh you know you know that tv wants to have a power on or off and you want uh you want to have a channel you want to have a volume um right you can kind of like lay out the the bones of your class and then come in and fill them in one by one of like okay what does a you know what does this do what does that do cool any other questions that uh that we should take from uh from the chat i was muted sorry my roommates were being noisy in the background um someone just asked um why when we created self.powered and i think the other ones self.current channel why don't we put them as arguments in the init method sure yeah so we could have done that right we could have said whenever i create a television i have to give it a input power state right and then i could set power it on to whatever i give it but sometimes you want every tv to start the same way right i would argue that when you buy a tv it's when you buy a tv you could consider that you initializing the tv or you constructing this tv it's probably going to be off right every tv that gets created it's going to start off and so it's like sometimes you don't want to even give them the ability to say you know i want to start it true sometimes you want to say you know what every tv as soon as it gets created it's going to be off and then you know later on there's probably going to be like a turn on method that flips powered on self.powered on rather and this takes itself i already forgot it you know it flips it to true um so eventually there may be a method that can interact with those variables um right you're just setting the initial state and it might be the case that you want the initial state to always be the same for every object that you create and then later on you can change them however you want anything else i see michael can you add an array of preset screen settings such as bright dark vivid movie yeah so the reason why i wish we had like more classes because uh more classes is a funny word to use in class more sessions because we can start to now use everything that we know right so if i have let me get this into a state where it actually runs um see powered on will be false self dots channel or what is it uh current channel equals one whatever uh i can get rid of these for now um um and then the init i'm creating the tv it's a good example of takes one argument but two were given uh remember there's the implice itself that i'm calling here so right now this line 10 is failing because i'm giving it two things i'm giving it self and true even though the self was implied and i was only asking for one basically i forgot to remove that from when i had uh you know put that in as an example before and then it has no attribute change channel because i deleted that method so it's crashing online uh 12. the question was can we can we make a list of things right so i could have a list of things that was like self dot uh what was the question that michael said uh screen settings it's like yeah um equals let's just say it's you know i don't exactly know what that would be maybe it's brightness dark vivid movie something like that i could then write a def increase settings self i could then write something that loops through all of this so for setting in self.screen settings uh setting plus equals one right i don't think i don't think that exact code would do it actually but that's the idea is that you can that now start using everything that we know in python lists dictionaries loops conditionals all of this stuff can be used inside these methods inside instance you know you can set your instance is equal to other instance variables um you know i could have a class television and then i could also have a class uh i don't know what this would be channel and i could have a self.current channel equals channel right i could have an instance variable be an object of another class um where now this instance variable is going to create a new channel object and that channel object could have you know any sort of instance variables methods all that sort of stuff so all of this stuff can start to be layered together um okay um let's see we have more good questions in the chat um we're pretty much at the end of the session um this is our this is our last session um so i'm actually i also took the day off work uh so i actually have no meetings coming up so i can come and hang out with you all as long as you have questions to a reasonable extent i might leave in like 20 minutes jamie if you have to leave at any time feel free i can i can handle these questions but essentially that's the end of the lesson thank you for watching first of all if you if you made it this fall if you made it this far um yeah i one we would love feedback on this stuff if you if you've made it this far um you know drop us a comment on this youtube video or something i'm just like curious as how many people make it this far i know people watch these videos but i have no idea if they drop off after like five minutes or something um so first of all thank you if you're watching um leave us a comment on what we could do better what we could do um you know how we could make these things better this is the last planned stream for now um i hope that we'll run another series in hopefully a couple of weeks um but right now uh we are not planning to so hopefully eventually we will do another um series but it probably won't be for a little bit um yeah and then other than that thanks for thanks for watching thanks for hanging out with me jamie yeah thanks for hanging out with me on this one and also we did the what like the loops one together or something i don't remember we did a couple there's so many of these yeah um cool so yeah if you're watching this on youtube i'm gonna as long as people have questions i'm gonna sit here and answer your questions but uh yeah folks on youtube it might be a bit hard to follow if you're not like watching the chat also come on so feel free to drop off at this point if you're just like watching this in the archives but otherwise um yeah i'm happy to answer more questions and if nobody has questions we can shut this off i think there are a bunch of questions in the chat okay yeah so sammy has been asking about this this false variable and i think it's answered in the chat but again that's just an instance variable like all of my other instance variables so i could have you know just like i have my dog name i had self dot dot name i could make every dog dog's name winston right this could a variable could be a string it could be a list of integers or it could be a boolean and so this is just an example of one of our instance variables is a boolean that's either true or false cool all right i'm gonna give it another 90 seconds uh and then then we can take off um jamie what'd you eat for lunch today at chipotle oh that's very good right right before this actually yeah um yeah i'm i'm feeling full and happy and content nice um uh let's see i don't know how to pronounce your name par jury asks how do you increase problem solving skills um i would really encourage you to as you're going through codecademy lessons to do the kind of things that jamie and i did today of um you know playing around with your code as you're going if you don't really understand what self is doing you can play around with the code like like that and that will just allow you to like the more comfortable you become with seeing error messages debugging error messages um playing around with your code changing something in the code and printing values out the more comfortable you become with that sort of stuff i think that will increase your problemsolving skills because you won't hit a wall as soon as you run into um whatever problem you're trying to solve right you'll be able to start debugging it and so i would say a good way to increase your problem solving skills is even when learning syntax for the first time or the concept for a first time like experiment uh you know don't just trust our codecademy green check mark that you've like done it correctly ask yourself probing questions change your code see what see what happens as stuff changes and then move on i think that's that's really important um differentiate global variables and nested variables um yeah a couple of a couple of good questions in class there in the chat um so there's a question about the difference between global variables and uh the question said nested variables um local variables we showed this a little bit where let me go back to um let me even see if i can get back to my dog i wanna i want my dog class back uh we showed this a little bit where if you are not using um if you're not using the instance variable which can it's kind of global it's not really a global variable but it's global within the class um dog's still here come on dog here we go um if i have right if i take away this self dot this now becomes a local variable and so when i try to call happy birthday which is b let me do jamie's dog stops half birthday um if i try to do this i'm going to get an error message let me in fact get rid of these print segments just to clean it up this is a local variable age reference before its assignment um you know so because i'm not using self dot this is now local which doesn't exist i could create that local variable i could have age equals five this would now run but if i print out um prince jaime's dog dot age before and after happy birthday you'll see it didn't change right the thing that i changed wasn't the global again it's not really global but it's global within the within the class the instance variable i didn't change the instance variable age i changed the local variable age and then that local variable gets forgotten as soon as the method ends and so you'll see that my instance variable never actually changed if i change this to self dot it now will change and i just happened to create this local age variable that i never do anything with it's totally useless can you reexplain what the increase setting method is doing on the list yeah so i i went through that really quickly basically i just wanted to show that um i don't have a good example that makes sense off the top of my head but like dog west right um i don't know what this what this variable would be i don't have it i don't have a good example that like makes sense i just want to demonstrate that um that you can loop through um you know if one of your instance variables is a list you can look through the list so i can do um for item in self.dog list i can print item and so now when i call happy birthday i should see in addition to 11 and 12 being printed off i should see every item in this list being printed off so um yeah sami i think you asked that question sammy i went through that very quickly and it's not a great example because it doesn't really make sense in the context of my program but it's just an example showing hey your instance variables can be lists and then in your methods you can do anything that you know how to do with lists like loop through them increase their value by one you know all that sort of stuff cool okay jamie i think we should call it here sounds good yeah this is really fun okay cool well thank you for watching everyone and um yeah hopefully we will um we will see you again soon on some more live streams bye bye everyone
