With timestamps:

00:00 - you know if you see it hey everybody can
00:09 - everyone see me and hear me we're good
00:13 - awesome okay hello everyone welcome to
00:16 - another code Kadim ii livestream I'm
00:18 - super excited to be here my name is
00:19 - Patrick I've been with code Kadim II for
00:21 - about 7 months now and before that I was
00:23 - teaching at a web development boot camp
00:25 - for the past two years super excited
00:27 - about today's livestream se topic near
00:30 - and dear to my heart
00:31 - gaming video games a lot of people get
00:34 - into programming for video games or vice
00:36 - versa so I'm really excited to show all
00:39 - of you how you can make a simple web
00:41 - browser game and hopefully we can build
00:44 - it in a way that you can expand and add
00:45 - your own elements and really make it
00:47 - your own
00:48 - so thanks Mariel to get started I'm just
00:53 - going to show you what we're going to
00:55 - build at the very end are sort of an MVP
00:57 - of what we're trying to accomplish in
00:59 - this about half hour 45 minutes I've
01:01 - created a game called square adventure
01:03 - and the rules of square adventure are
01:06 - relatively simple I am a red pixel
01:10 - character you can see me moving around
01:11 - there and I want to move into the safe
01:15 - zone and as soon as I move into the safe
01:17 - zone it pops over to another area in the
01:20 - map and I can see at the bottom here I'm
01:22 - keeping score of how I've done so far
01:24 - and that is the game we are going to be
01:27 - building cool and I'm controlling my
01:30 - pixel with the keyboard I'm using the W
01:32 - a s and D keys
01:35 - cool awesome all right well I'm going to
01:40 - reset to a blank HTML document and we'll
01:44 - get started
01:46 - pay no attention to the man - curtain
01:48 - cool so just to orient ourselves with
01:52 - what we have on the screen let's clear
01:56 - that out cool I've got my index.html
01:59 - document so this is a your standard HTML
02:03 - document I have my doctype declaration
02:06 - my HTML tag the head tag we're not
02:09 - really doing much with that and I have
02:12 - my body tag here
02:13 - and we have a main tag so starting with
02:16 - pretty much nothing just a very very
02:18 - empty skeleton of HTML this is going to
02:21 - be our browser component so anything we
02:23 - add into our HTML document will show up
02:27 - here if it's an HTML element and then on
02:29 - the far right of my screen I have my
02:32 - console open you can open this if you're
02:35 - using Chrome with command option I I
02:37 - believe you can also double click and
02:41 - hit inspect to pop it up so what this is
02:45 - going to give me is all the power of
02:47 - JavaScript at my fingertips I can
02:49 - quickly type out some codes so I can do
02:51 - some math here 5 plus 12 is excuse me 5
02:55 - plus 7 is 12 I can do something called a
02:58 - console log and that's my way of like
03:00 - printing to the screen so I can say hey
03:02 - cool and what I'm gonna use this for is
03:05 - when I want to maybe prototype something
03:08 - out or test out an idea I can pop over
03:11 - here and type out some code and see how
03:12 - it runs so I can clear this if it gets
03:16 - too cluttered with command K so if I
03:18 - hold command and K on a Mac that will
03:20 - clear it out wonderful all right so now
03:24 - we're oriented today's stream is going
03:27 - to be based largely around an HTML
03:30 - element called canvas the canvas element
03:33 - so I'm going to add that in between our
03:36 - main tag nothing is going to go inside
03:39 - of it we typically don't put things
03:42 - inside of canvas but we are going to be
03:44 - able to paint a whole lot of graphics
03:45 - inside of it I'm also going to add an h1
03:50 - tag to name our game does anyone have
03:53 - any ideas of what they want to call our
03:55 - game I'll look in the chat for a
03:57 - suggestion I use square adventure but
03:59 - I'm getting kind of tired of that so
04:01 - anything I'll call it Metal Gear Square
04:08 - in honor of one of that classic one
04:11 - those classic games I'm also gonna make
04:13 - a section tag and this is where I'm
04:18 - gonna keep my score and I'm gonna make a
04:21 - span tag as well super cool game
04:27 - I see Mario so I'll add that in there as
04:30 - well great and so just to show the other
04:34 - way that we're going to evaluate code
04:35 - here I'm gonna press this Run button at
04:37 - the bottom left and we can see some
04:39 - changes in our browser components so
04:41 - there's gonna be two different ways I'm
04:42 - executing code either in this console on
04:44 - the right or running my index.html
04:47 - document on the left so we can see the
04:51 - changes we made to the HTML showed up we
04:52 - have Metal Gear Square Mario and we have
04:55 - our score we can also see that there's a
04:57 - little bit of space between these two
04:59 - and that's kind of giving us a clue to
05:01 - this canvas element to be able to see
05:04 - the canvas element a little more clearly
05:05 - because we're gonna be working with it a
05:06 - lot I'm going to add inside of my body a
05:09 - style tag again this is just HTML but
05:14 - inside of the style tag I can write CSS
05:17 - which is the sort of design language of
05:20 - the web and it will be evaluated and
05:22 - applied to the HTML in the document so
05:24 - I'm just doing this to give myself a
05:28 - little bit more of an outline of the
05:30 - canvas that I'm working with so I'll
05:32 - give it a border of one pixel that's
05:34 - gonna be solid black and again I'm gonna
05:37 - click the Run button to run the code and
05:39 - now I can see a nice little outline of
05:40 - the canvas that I'm going to be working
05:42 - with very cool and for my next step the
05:49 - majority of the work that I'm gonna be
05:51 - doing from now onward is going to be in
05:53 - JavaScript and again just like with a
05:56 - style tag I'm gonna make a script tag
05:59 - again this is HTML but anything inside
06:02 - of the script tag will be evaluated as
06:05 - JavaScript so just to test out that that
06:08 - is working I'll put in a console log of
06:11 - hello there console log if you're not
06:13 - familiar as a way for me to print
06:15 - something to this console over here so
06:18 - this is just sort of a sanity check for
06:20 - me to see whether this is being loaded
06:22 - properly so I'll click run and sure
06:26 - enough I see the hello there so looking
06:28 - good
06:29 - wonderful cool great awesome so as I
06:36 - said the majority of the work we're
06:37 - gonna be doing here is in JavaScript but
06:39 - I'm going to need a ref
06:40 - Prince to my canvas element so I need to
06:43 - grab this HTML element grab a reference
06:46 - to it and then I can start to do the
06:48 - work of building my game inside that
06:50 - element so instead of a console log of
06:52 - hello there
06:53 - I'm going to use a method I'm going to
06:59 - grab on the document I'm going to query
07:02 - for a selector selector if you're not
07:04 - familiar could reference any one of
07:07 - these HTML tags or CSS class and so on
07:12 - but for our purposes it's enough to just
07:14 - say I want the canvas element I'm
07:16 - querying for the selector of canvas and
07:18 - what that's going to give me is a
07:19 - reference to that HTML element so I'm
07:23 - gonna store this at a JavaScript
07:25 - variable I'll declare it with the kant's
07:27 - declaration and I'll call it canvas
07:29 - canva canvas and I'll set it equal to
07:32 - query selector canvas again as a sanity
07:36 - check just to make sure that I'm on the
07:37 - right track I'm at a console log that
07:40 - element and we'll see I'll click over
07:43 - here clear up my console and when I run
07:45 - it I should see something that gives me
07:48 - the impression that I'm grabbing that
07:49 - canvas element so we're gonna run it and
07:52 - sure enough there it is and the kind of
07:54 - cool thing in chrome is when I hover
07:56 - over it you can see it highlighted over
07:57 - here great so full disclosure for those
08:05 - of you that are watching this screen the
08:07 - stream and you're more familiar with
08:08 - JavaScript JavaScript can be written
08:11 - typically with like a semicolon at the
08:13 - end of every expression I am gonna
08:17 - choose not to write semicolons just
08:19 - because I'm lazy and I don't want to do
08:20 - the typing but I promise you that the
08:22 - code will execute properly so you won't
08:25 - see any semicolons sorry
08:27 - great back on track so our canvas
08:32 - element we can see right now by default
08:33 - is kind of got like a rectangular kind
08:36 - of shape to it
08:36 - I want our game board to be just a nice
08:39 - square it'll be easier to work with so
08:41 - what I'm gonna do is change the
08:42 - properties on this HTML element directly
08:45 - now that I have a reference to it I can
08:47 - say canvas dot width equals let's say
08:50 - 300 pixels and canvas height
08:54 - equals 300 pixels so now when I run the
08:59 - code we should see this rectangle kind
09:00 - of square out and we sure do perfect
09:05 - okay great so now that I have a
09:08 - reference to my HTML element I'm going
09:11 - to call a very special method on it so
09:13 - as I said this is just the HTML element
09:16 - on the page but I need to get what's
09:19 - called a rendering context to be able to
09:20 - paint the pixels of the game inside of
09:23 - it and the way I'm going to do that is
09:25 - I'm going to declare another variable
09:27 - I'm going to call it context or CTX and
09:30 - I'm going to call a method on the canvas
09:33 - element of get context and get context
09:38 - is a method that takes an argument of
09:40 - what type of context I want and for our
09:43 - purposes we're just going to have a 2-d
09:45 - game you can work with 3d and there's a
09:47 - couple other arguments you can pass in
09:48 - there but for our game we're just gonna
09:50 - keep it simple great and again just like
09:53 - before I think this is a really good
09:55 - practice especially when you're getting
09:56 - started just console.log things out just
09:58 - do sanity checks make sure you're
10:00 - grabbing the things that you think
10:01 - you're grabbing so now instead of the
10:02 - canvas I'm gonna console.log out the
10:04 - context whoops I want to clear this so I
10:08 - don't have any clutter and when I run it
10:11 - now I should see something that tells me
10:13 - I've made instantiated this context
10:16 - properly so I'm gonna run that and sure
10:19 - enough I can see my canvas rendering
10:21 - context cool so a lot of functionality
10:27 - here may feel a little overwhelming we
10:30 - can open it up we see lots of cool
10:32 - things here but what this instance of a
10:36 - canvas rendering context is gonna do is
10:38 - give us a lot of functionality this is
10:40 - what's going to allow us to paint to the
10:42 - canvas and dictate where we want pixels
10:44 - to be displayed how we want them to move
10:46 - etc cool so at this point I'll take a
10:50 - quick pause for questions if in the chat
10:53 - anything I've done so far is like what
10:55 - Patrick what are you talking about let
10:57 - me know
10:58 - I think sunny said this in another live
10:59 - stream but asking questions is super
11:01 - important always speak up and I'll try
11:05 - to help you as best you can all right
11:06 - moderator
11:07 - try to help you oh boy I hope for this
11:13 - semicolon thing isn't a distraction
11:14 - because life's too short how do you
11:17 - clear your consoles so I if you click
11:19 - into the console like I'll click into it
11:22 - and then hold command and then press K
11:25 - it'll clear it out and that will be
11:27 - necessary to just kind of make sure it's
11:29 - easy to focus on the most recent thing
11:31 - that's popped up cool alright it seems
11:41 - as though everyone's on board with what
11:42 - we've done so far so we're gonna
11:44 - continue on to new and exciting things
11:48 - now that we have our context we can
11:52 - start to paint into it and this will be
11:53 - kind of our first magical moment of
11:55 - putting a pixel inside of our canvas and
11:58 - I can do that
11:59 - on the canvas whoops not in caps though
12:01 - on the context there's a method many
12:04 - many many different methods that I can
12:06 - call the first one I'm going to do is
12:07 - called fill rect and that's going to
12:10 - paint a rectangle and fill it fill rec
12:13 - takes four arguments it takes the X and
12:16 - the y coordinate of where the rectangle
12:19 - starts how wide the rectangle is and how
12:24 - tall or high the rectangle is so the
12:29 - coordinate plane in canvas stock starts
12:31 - from this top left this is zero zero and
12:34 - it goes all the way down to however
12:36 - large the canvas is so in our case
12:39 - because we have a 300 by 300 canvas this
12:43 - bottom right pixel would be 300 300 so
12:47 - I'm gonna fill in these values
12:48 - I'll just hard code them for now let's
12:51 - say 20 50 and we'll make it a 50 by 50
12:56 - square cool so at pixel 20 from the left
13:01 - pixel 50 from the top I want to pay a 50
13:05 - by 50 square I'll run that code and whoa
13:08 - we got a pixel cool
13:11 - we painted something into canvas very
13:13 - very exciting so I've hard coded these
13:17 - values but that's not going to be very
13:19 - useful to me if I'm
13:20 - in a game I'm gonna want to be changing
13:22 - these values around a lot like we saw
13:24 - the player moves around the screen so
13:26 - I'm gonna store them in a variable and
13:29 - I'll try to use some semantic names here
13:31 - I'll say player X equals let's start
13:37 - them off xx and player Y also equals
13:41 - it's just do 20
13:43 - so I'm now gonna swap in those variables
13:46 - for the hard-coded values cool and it
13:52 - should be more or less the same it's
13:53 - moved up a little bit because I changed
13:54 - the Y value but now we have a little
13:57 - more flexibility and how we're affecting
13:59 - our canvas wonderful
14:01 - so one other thing is I believe our
14:04 - player was red and so I can do that with
14:06 - the fill style property so I set that as
14:13 - red and now my pixel should be red and
14:17 - it is wonderful and I'm gonna make my
14:19 - player a little bit smaller I'm gonna
14:22 - make him ten by ten cool so now I've got
14:25 - my player on the screen so wonderful any
14:30 - questions about what we've done so far
14:31 - our first steps of using the context
14:34 - instance I'm seeing a lot of sunglasses
14:40 - in the chat that makes me think that
14:41 - everything is cool sweet alright so our
14:46 - next step is we want to create that base
14:48 - that the player is trying to move into
14:50 - and so this is going to be another
14:51 - rectangle so again I'm going to use the
14:54 - context this time we noticed that that
14:57 - base wasn't a filled in square it was
14:59 - just an outline so I'm gonna use the
15:02 - stroke rect same argument order so it's
15:06 - the X the Y the width and the height so
15:10 - let's make it I don't know 100 150 and
15:15 - 50 and now we should see another square
15:19 - being painted to the canvas and sure
15:21 - enough there we do we've got our base
15:23 - here so for our game what we want is an
15:28 - rendom element to it like we want the
15:30 - player to not know where the base is
15:32 - going to show up
15:33 - they move towards it so we need to
15:35 - explore how we can bring some randomness
15:37 - into our game and so I'm gonna jump over
15:40 - to the console here and play around with
15:43 - it a little bit as I said earlier I have
15:45 - access to JavaScript in this console and
15:48 - one of the cool things I have access to
15:50 - is this math object it's got a lot of
15:52 - really helpful methods on it one of
15:54 - which is random so this is a method that
15:57 - when I invoke it I'm going to get a
15:59 - number between 0 and 1 as a float or a
16:03 - decimal so you can see there it's always
16:06 - not quite going up to 1 not quite going
16:07 - down to 0 now what I can do is use this
16:11 - as the basis for the coordinate so if I
16:14 - take math dot random and I multiply it
16:17 - by the dimensions of my canvas I can get
16:21 - a coordinate somewhere in that plane so
16:24 - I know my base is gonna be 50 so I want
16:28 - to subtract that from the width and the
16:30 - height so I will multiply random by 250
16:34 - and now I'm getting a number that's
16:36 - somewhere in that plane it's still a
16:39 - float or a decimal and I want to floor
16:41 - that because I can't paint like these
16:43 - decimal numbers so I'll use another math
16:47 - method called floor oh it's getting
16:49 - blocked by me sorry all right we'll
16:50 - bring this back up cool so I've got
16:55 - math.random and I'm gonna put all of
16:58 - that inside of another method call to
17:01 - math.floor and that's gonna floor the
17:03 - number and now I get a nice round number
17:07 - so this is what I'm gonna use to
17:09 - generate a random coordinate for my base
17:11 - I'm gonna just copy this code straight
17:14 - from the console and I'm gonna put it in
17:17 - another variable so this time I will
17:21 - call it like base x equals the
17:25 - calculation I just made base Y also
17:29 - equals the calculation I just made great
17:32 - and now I can put these into my stroke
17:34 - rec so instead of hard-coded values I'll
17:38 - put base X in there and base Y cool now
17:44 - let's clear that out
17:46 - when I click run here I should see the
17:48 - base in random locations so press that
17:51 - now it's in the bottom right click it
17:53 - again a little bit over to the left
17:55 - dancing all around sweet I've got a
17:58 - randomly generated base now I'm feeling
18:00 - real good I'm just gonna take a pause
18:03 - here and check out if there are any
18:05 - questions or anything that I've done
18:08 - that's really wild my head covers the
18:12 - console I apologize I have a big head so
18:21 - maybe let me just review what we've
18:22 - written so far just in case anyone's
18:24 - gotten a little lost in the weeds what
18:27 - I've done is I've grabbed I have my HTML
18:30 - right here one of my HTML elements is my
18:33 - canvas I'm using a script tag just to
18:37 - inject some JavaScript into my HTML
18:39 - document in that JavaScript I'm grabbing
18:43 - a reference to the canvas element here
18:45 - I'm setting some properties to give it a
18:48 - proper square dimension and then I'm
18:50 - creating a context with a method that's
18:52 - special to the canvas element called get
18:55 - context this context instance allows me
18:58 - to paint pixels inside of the element so
19:02 - I'm declaring some coordinate variables
19:04 - here and then I'm using these methods to
19:07 - paint inside of my canvas element so
19:09 - that's where we are at this point can we
19:13 - pass color as a fifth argument gotcha
19:19 - okay so I'm not sure if you can pass a
19:21 - fifth argument to fill rect or stroke
19:24 - rect I've always seen it as setting the
19:25 - property I did link the documentation
19:28 - for canvas if people want to check it
19:30 - out an experiment it's part of the fun
19:31 - another question is why are we setting
19:36 - the width and the height on the canvas
19:37 - element instead of using CSS it's a
19:40 - little bit tricky but our canvas element
19:42 - needs to actually have those dimensions
19:45 - not be represented in those dimensions
19:47 - CSS is something that will change the
19:50 - appearance of an element it won't change
19:52 - the element itself if that sounds a
19:54 - little bit weird I agree it's just sort
19:57 - of the way that canvas works
19:59 - if I tried to increase the canvas size
20:02 - just with CSS I wouldn't be able to
20:04 - paint in those areas that have been
20:05 - expanded by the CSS good question
20:10 - cool all right so just to kind of
20:12 - reorient ourselves we've got our pixel
20:14 - we've got our base we're definitely at
20:17 - the point now where we want to introduce
20:19 - some interactivity we want to be able to
20:22 - press the aw s or D keys and have our
20:26 - player move around the screen right now
20:29 - I can press those keys and nothing
20:30 - happens so when we're talking about
20:34 - interactivity on the web we're talking
20:37 - about events events are we can think of
20:40 - as pretty much anything a user will do
20:42 - in their webpage so when you're typing
20:44 - into an input box that's an event if
20:48 - you're clicking on a button that's an
20:49 - event if you're scrolling the screen
20:51 - that's an event in particular for our
20:55 - use case we care about the event of a
20:58 - key being pressed that's what we want to
21:01 - capture because when we press certain
21:03 - keys we want to move our player around
21:05 - so to be able to listen for certain
21:08 - types of events I have to call a method
21:11 - called add event listener so again I'm
21:13 - going to reference the document that's
21:15 - my HTML document and I'm going to add an
21:19 - event listener and the arguments for add
21:23 - event listener are going to be the event
21:24 - that I'm listening for and then whatever
21:27 - behavior I want to have execute when
21:29 - that event occurs so the first thing I'm
21:33 - listening for is key press and then I
21:36 - need to write a function to fill in that
21:37 - second argument so for now I'm going to
21:41 - call that function handle input and this
21:47 - function is going to receive an event as
21:49 - an argument so I'm going to write that
21:51 - in and for now just to get started just
21:53 - to make sure again that sanity check I'm
21:55 - gonna console.log the event just to make
21:57 - sure that things are working as they
21:59 - should so now that I've written my we
22:03 - called us a callback handler I'm gonna
22:04 - pass that in as the second argument
22:06 - handle input great
22:08 - so before I run this just to recap I'm
22:11 - adding an event listener I'm saying
22:13 - make sure that you keep your ear out for
22:15 - any key presses and when you do see a
22:20 - key press I want you to run this
22:22 - function and pass in an event cool
22:25 - so I'll click run and nothing's happened
22:28 - so far because we haven't pressed any
22:30 - keys yet but if I click into my browser
22:32 - component and then press a key in my
22:37 - console here I see I have an instance of
22:39 - a keyboard event being console logged
22:41 - out and so that's this line of code here
22:44 - is what's causing us to see this
22:46 - keyboard event so what is this keyboard
22:50 - event gonna do for us
22:51 - well it's giving us a lot of information
22:53 - I'm opening it up again and I can see
22:54 - it's kind of overwhelming a lot of
22:55 - different properties in this instance
22:58 - but one in particular that's going to be
23:00 - useful to me is there's a key property
23:02 - and that key property refers to the key
23:04 - that I pressed so just to make this a
23:07 - little more explicit what I'm gonna do
23:09 - is I have this event instance and I'm
23:12 - gonna use the dot notation to access a
23:14 - property on that instance
23:16 - so I'm saying in the event instance give
23:20 - me the information under the key
23:22 - property cool so slight squeak there I'm
23:25 - gonna run the code again I'm gonna do
23:27 - command K to clear out my console and
23:29 - now when I press keys I just see the key
23:33 - that I pressed right so the event
23:37 - objects gone but now I know okay I
23:39 - pressed a J and s and H etc cool key
23:44 - press a reserved word key press is not a
23:47 - reserved word so I could declare a
23:50 - variable named key press although that
23:51 - would be a little confusing for me cool
23:55 - great so now that I have an idea of
23:59 - which key is being pressed I want to
24:02 - sort of filter them and I'm gonna use
24:03 - some conditionals I'm gonna say okay
24:05 - it's great that a key was pressed but I
24:07 - only want to make sure I do something
24:09 - for an AWS or D key so I can do that
24:13 - with a series of conditionals inside my
24:15 - function I'm gonna remove the
24:16 - console.log for now and I'll say well
24:19 - I'll declare a variable of like key
24:21 - that's going to be event key so that's
24:23 - the key that I pressed and then if if
24:26 - key
24:27 - is equivalent to a I want to do
24:30 - something whoa I don't want to yell
24:32 - though else if ki is equivalent to W I
24:38 - want to do something else if ki is
24:43 - equivalent to a DD I want to do
24:47 - something and then one last else if if
24:51 - you're more familiar with JavaScript
24:53 - maybe you're thinking hey why don't you
24:54 - do a switch statement which is another
24:56 - way of writing these conditionals I
24:57 - could have done that as well and s is my
25:00 - last one great and so now I can put in
25:04 - some console logs here like a pressed
25:09 - and then I can have W pressed and D and
25:23 - let's get our alignment here all set
25:28 - okay Coolio depressed and s pressed okay
25:34 - wonderful so now we can run it let me
25:37 - clear out my console again and now when
25:39 - I click into the browser component and
25:42 - press these keys I see something if I
25:45 - press other Keys you'll maybe have to
25:47 - take my word for it pressing other keys
25:49 - that are at AWS or D and nothing's being
25:51 - wrong all right wonderful so at this
25:54 - point I know I press these keys but now
25:56 - what do I want to do with these keys and
26:00 - this question is going to take us back
26:01 - to why do we have this pixel here at all
26:04 - like where did this pixel come from
26:06 - right it came from this fill rect method
26:11 - right and the location specifically
26:13 - being 10 pixels down 10 or sorry 20
26:15 - pixels down 20 pixels over came from
26:18 - these variables so if I want to change
26:23 - the location of this pixel I need to use
26:26 - this method again with different values
26:29 - for these variables so let's see here
26:33 - for our first key of a if I'm pressing
26:38 - the a key that's like the left key I
26:40 - want my
26:40 - a player to move to the left of the
26:43 - screen I want to move in this direction
26:45 - can anyone tell me does anyone think
26:47 - like what would I do
26:49 - how which variable I want to affect what
26:51 - I want to affect the player X or player
26:53 - Y variable I'm gonna want to handle the
27:03 - player X variable wonderful thank you
27:05 - John more I'm going to want to handle
27:07 - the X because the X is what's handling
27:10 - this plane and if specifically I'm
27:12 - moving towards this direction I want to
27:15 - decrement or remove values or I want to
27:17 - lower the value so what I'm going to do
27:20 - here is take that player X variable and
27:23 - subtract 5 from it I'm cool
27:26 - and let's kind of just continue along
27:30 - down the line with a W I want to move up
27:33 - so if I want to move up what access am i
27:38 - moving on I'm going up and down in my
27:40 - square so now we're doing the W key
27:45 - which will move our player upwards why
27:49 - Deadpool T Y interwebs you got it and
27:52 - specifically how do I want to affect my
27:55 - Y axis do I want to decrement or
27:57 - increment if I'm pressing the W key if
28:05 - I'm pressing the W key I want to
28:06 - decrement it wonderful Utah by 5 got a
28:08 - negative why I will accept it and that's
28:11 - because if you'll recall the top left is
28:14 - 0 0 right so if I'm moving up in this
28:16 - plane my Y value is decreasing so I'm
28:19 - going to subtract 5 from play or Y let's
28:22 - move on to D so if I'm doing D I'm
28:26 - moving to the right and I'm going to add
28:30 - to the what the x value and if I'm
28:33 - pressing s I'm moving down and so I'm
28:37 - moving down which means I am increasing
28:40 - my Y value wonderful cool so I'm going
28:48 - to I click the Run button I'm going to
28:49 - clear my console out click run again
28:52 - just for good measure
28:54 - and now if I press the key who thinks
28:59 - that that pixel is gonna move maybe just
29:02 - in your own mind think yourself hey is
29:03 - this picture we're gonna move or not
29:04 - when I press the key I think it's really
29:06 - helpful when you're following along with
29:07 - things to try to like get an idea of
29:10 - what do I think is going to happen and
29:12 - then when you see it happen it's the
29:14 - thing that you thought and you're like
29:16 - hey I'm doing great move right along if
29:18 - it's not the thing that you thought then
29:20 - there's a disconnect in your
29:20 - understanding and that's when you slow
29:22 - it down and say okay why did I think
29:23 - this would happen and then that happened
29:26 - so right now if I press the key
29:29 - nothing's actually going to happen and
29:32 - again this goes back to why is the pixel
29:34 - on the screen at all and the reason it's
29:37 - on the screen is this method this fill
29:39 - rect method so I can't see the pixel
29:43 - move because it's not being repainted
29:46 - and we there's a couple different ways
29:51 - we can handle this I could just take
29:53 - this code here copy it and paste it
29:56 - inside of my event and that way every
29:59 - time the event fired I repainted in that
30:02 - way so I can run that and we can see
30:05 - that it does a little bit of funkiness
30:07 - but it does kind of move but I actually
30:09 - don't want to do it like that because
30:11 - it's a little weird to put that type of
30:13 - logic inside my event handler I'm going
30:16 - to introduce a new function called step
30:19 - so I'll declare step steps not going to
30:24 - take any arguments and what I really
30:26 - want step to do is to be like the
30:28 - moment-to-moment state of my game we can
30:32 - almost think of it like a loop except
30:35 - it's always going on there are there are
30:38 - other activities happening while the
30:39 - step function is being executed so I can
30:43 - take this logic of painting out my base
30:46 - in my player I can put it inside my step
30:49 - function here and then at the very
30:54 - bottom of my step function I'm gonna do
30:56 - something that's a little maybe this
30:59 - feels a little bit funky but it's given
31:01 - to us by the browser and it's called
31:02 - request animation frame this is a
31:07 - function that's given to us by
31:08 - browser and I'm gonna pass in the
31:11 - function that I just wrote
31:13 - so requestanimationframe comes from the
31:16 - browser it's a function that takes a
31:18 - function as an argument that function
31:21 - being the one I just wrote and what it's
31:24 - gonna do is basically say okay every
31:26 - 60th of a second or so I'm gonna run
31:28 - this function and to sort of kick
31:32 - everything off in the beginning outside
31:34 - of that function step I'm going to again
31:38 - call requestanimationframe just to kind
31:40 - of get things started this is probably
31:45 - the most like whoa what is happening
31:48 - part of this live stream but I feel like
31:52 - this steps pretty important because it's
31:53 - kind of how things continuously get
31:55 - painted to the screen it is recursion
31:58 - but don't worry about it we've got some
32:01 - great recursion courses if coke atom e
32:03 - if you want to check that out in more
32:04 - detail you don't really need to
32:05 - understand recursion for this step to
32:08 - work but just to recap I've defined my
32:12 - function step I put all my painting
32:15 - logic inside of step and I also told the
32:18 - browser hey just run this function like
32:20 - every sixtieth of a second I would be
32:22 - super cool great so I'm going to run the
32:25 - code again nothing's happens right away
32:29 - but now when I press my keys I am moving
32:33 - my player around there's a little bit of
32:36 - weirdness here in that wherever the
32:38 - player was is still being painted and
32:42 - that's because I haven't cleared the
32:45 - campus so essentially what I want to do
32:47 - is clear everything from the canvas and
32:49 - then repaint everything back onto the
32:52 - canvas it seems like a lot of work but
32:53 - computers are very fast
32:55 - requestanimationframe repaints every so
33:00 - requestanimationframe
33:01 - only does whatever functionality I put
33:04 - inside of it it's it's really just a way
33:06 - of saying hey just run this code every
33:08 - sixtieth of a second so at the very
33:11 - beginning what I want to do here is call
33:14 - another method on my context of clear
33:16 - rect and this is my way of like wiping
33:18 - clean the canvas
33:20 - clear rect just like Phil rector
33:22 - strrrike takes four arguments the x and
33:25 - y-coordinate of where I want to start
33:27 - clearing and then the extent of the
33:29 - width and height of what I want to clear
33:30 - so for our purposes I want to clear
33:33 - everything so I want to stop I want to
33:35 - start at the top left zero zero and go
33:38 - the whole width and height of the canvas
33:41 - cool so I made a change of adding clear
33:44 - back to the top of my step function I'll
33:46 - run it again and now when I move my
33:49 - player around I don't have that trail
33:52 - which was kind of cool but not great for
33:54 - our game wonderful okay I'm gonna take a
33:57 - brief pause here because we've done some
34:00 - crazy stuff and I want to make sure that
34:04 - no one feels left behind here so I'm
34:06 - just going to again go back over
34:07 - everything we've done so far so just
34:09 - kind of like up from the very top recap
34:11 - we have an HTML document super cool
34:15 - specifically inside of our HTML document
34:17 - we have a canvas element which is where
34:19 - all this magic is happening and it's
34:21 - kind of cool if you think like if we're
34:23 - looking at what's going on here this is
34:27 - the HTML element like this is what you
34:29 - can see from the HTML element like we
34:31 - can see our h1 tag and then this canvas
34:34 - is everything that's happening in here
34:37 - like really cool I think it's really
34:39 - cool I'm not just being paid to say that
34:41 - and then we have our section with our
34:44 - score below that I have a script tag and
34:48 - this is my way of injecting some
34:49 - JavaScript into my HTML document so I
34:51 - can do some of the functionality and
34:53 - interactivity of our game and within my
34:56 - JavaScript tag I'm grabbing a reference
34:59 - to that canvas element I'm setting some
35:01 - properties on it I'm getting a rendering
35:03 - context from the element this is what's
35:05 - going to allow me access to all those
35:07 - different methods that paint the pixels
35:09 - onto the canvas
35:10 - I'm declaring some variables to give me
35:13 - an idea of where my player and my base
35:16 - will be in the canvas I have a step
35:20 - function which is my like sort of every
35:22 - beat every moment of my game I want this
35:24 - to happen and I'm starting that loop or
35:28 - that recursive exchange right here I
35:31 - have what's called an event handler
35:34 - called handle in
35:35 - but this is what is happening every time
35:37 - there is a key press event because I
35:40 - added an event listener I'm looking for
35:43 - key presses and whenever those key
35:44 - presses happen I want to run this
35:46 - function and in the function I'm going
35:48 - to be looking at the event and saying
35:50 - hey was the key in a a w etc and that's
35:55 - where we're at oh my gosh Deadpool T Y
35:57 - interwebs you're the best cool if the
36:01 - frames aren't rendered equally fast how
36:02 - do you move the player at a constant
36:04 - rate so that's a good question this is a
36:07 - little bit more advanced step
36:10 - requestanimationframe does have some
36:12 - fine-tuning in it for our purposes today
36:15 - we're not really going to mess with it
36:16 - too much but maybe a really like drive
36:19 - home how often this is happening I'm
36:22 - going to do something just as a little
36:23 - experiment to illustrate it I'm gonna
36:26 - take that player X value and again this
36:28 - is what's dictating where on the x-axis
36:31 - my player is showing up and in my step
36:34 - function I'm going to increment it by 1
36:37 - so every 60th of a second my player X is
36:41 - gonna be incremented by 1 and then
36:42 - painted to the canvas and this this
36:44 - should be pretty cool I guess I don't
36:46 - know who knows so you can see like this
36:54 - is happening every 60th of a second my
36:56 - players running off the screen I don't
36:58 - actually want to do that right I want to
37:00 - be able to control how my player moves
37:01 - but that's kind of how we get some
37:03 - animation going on it's a little sneak
37:05 - peak so good question about the arrow
37:08 - keys instead of letter keys the reason
37:11 - why I chose the letter keys is sometimes
37:13 - people don't have arrow keys on their
37:14 - keyboard and also there's a little bit
37:17 - of weirdness with the key press event
37:20 - where it won't actually register an
37:22 - arrow key so I didn't want to go down
37:24 - that rabbit hole not worth pointing out
37:26 - but a wsd are kind of a classic like
37:29 - moving around great okay cool so enough
37:34 - jibber-jabber we have some interactivity
37:37 - in our game what I'm looking for now is
37:39 - sort of like the final cherry on the
37:43 - sundae I want to be able to sort of like
37:44 - have something happen when my player
37:46 - moves into the base
37:48 - like that I want the base to go to a
37:51 - different location I want like it to
37:53 - magically reappear somewhere else
37:54 - princess is in another castle that kind
37:57 - of an idea right so this is going to
37:59 - touch on a essential part of writing
38:03 - games it's a super super super important
38:06 - concept so I'm gonna kind of belabor it
38:08 - a lot we want to take a step back and
38:11 - ask ourselves what does it mean for our
38:14 - player our X dot to be inside of this
38:19 - square and when we're dealing with
38:23 - canvas we're just dealing with pixels we
38:26 - just know X Y coordinates on a plane so
38:30 - to be inside of the square means my x
38:35 - coordinate is greater than or equal to
38:37 - this other things x coordinate like
38:42 - right now I've got an x coordinate
38:43 - that's a little bit less than the base
38:45 - and now my x coordinate is greater than
38:49 - the base and similarly by the y
38:51 - coordinate perspective right now I have
38:53 - a lesser than y coordinate and now I've
38:57 - got a greater than y coordinate so
39:00 - that's how we're going to evaluate
39:02 - whether our player has moved inside of
39:05 - the base and this logic is something
39:09 - that I want to be checking for all the
39:10 - time and so this is a good candidate to
39:13 - put inside of our step function so I'm
39:15 - gonna use a conditional and say if my
39:20 - player X my x-coordinate is greater than
39:25 - or equal to my what did I call it base X
39:32 - then I know I've collided there are a
39:35 - couple others that I want to do here if
39:37 - my player if my player Y is greater than
39:43 - or equal to my base Y then I know I've
39:47 - gone past it so this is sort of my
39:50 - console dot log you won or you scored
39:54 - something like that right I don't want
39:56 - to take too many steps at once
40:00 - and mm-hmm all right so we'll just kind
40:03 - of see how this runs I'll run the code
40:05 - and now inside of my step function I'm
40:07 - always checking like have I gone into
40:09 - the base have I gone to the base so I
40:11 - will move over and we can see right now
40:15 - I haven't gone in the base I haven't
40:18 - gone in the base and if we keep ours
40:20 - over here whoa I have really gone in the
40:23 - base the reason why there's this number
40:25 - here is the step function is again
40:27 - running every sixtieth of a second so
40:28 - it's running a lot that just means that
40:30 - you one has been console logged multiple
40:32 - times in this case 700 times cool so I'm
40:36 - gonna clear the console one more time
40:39 - and I just kind of want to illustrate a
40:40 - bug that I kind of put intentionally in
40:43 - here one thing I didn't think about is
40:46 - what if I am not in the base right now
40:49 - but I move down and oh no I'm winning
40:53 - but I'm not really winning if you know
40:55 - what I mean and so what I haven't
40:58 - thought about here is there's an extent
41:00 - of like where the base is and that's
41:04 - going to be the start point of the base
41:06 - coordinate and then how wide it is
41:08 - so I need to add to my conditional here
41:10 - and let's see if I can do this my player
41:14 - X needs to be less than or equal to the
41:20 - base X plus the width of the base and
41:24 - the width of the base is
41:26 - it's 50 cool and then I want to do the
41:31 - same thing with my y-coordinate so play
41:34 - or why is got to be less than or equal
41:36 - to the base y plus 50 okay cool this is
41:42 - you know not going to be like the most
41:44 - precise coordinates ever and that's okay
41:46 - we don't want to get bogged down in the
41:48 - details but just to recap here I want to
41:52 - make sure that when I'm not really
41:53 - winning my game isn't throwing a bug
41:56 - there so now if I'm going down we can
41:59 - see that my coordinate is greater than
42:01 - but still within the bound so I'm not it
42:04 - looks like I fixed this problem cool I'm
42:07 - circling around the base oh when is it
42:09 - gonna happen oh I won all right cool
42:14 - awesome and so at this point yeah I have
42:18 - kind of a functioning game I am what
42:21 - I've done right now is a collision
42:24 - detection and the reason why I'm making
42:26 - such a big deal about it is it boils
42:29 - down to in your game when do you want to
42:32 - know when something contacts something
42:35 - else so think of it like when we want to
42:39 - know when Mario hits a mushroom we want
42:41 - to know when Mario is on top of a Koopa
42:43 - we want to know when Sonic has touched a
42:46 - ring we want to know when pac-man has
42:48 - eaten one of those little golden things
42:50 - I don't know what the word for it is but
42:53 - knowing when something has collided with
42:55 - or contacted something else is like so
42:58 - essential in game development right it's
42:59 - like you you have to know that it's it's
43:01 - what so many games are built on and
43:04 - ultimately this is what it comes down to
43:05 - is just XY coordinates in a 2-d game so
43:08 - it's pretty cool nice I'll just take a
43:14 - break now oh wow we're really we've done
43:18 - like almost 45 minutes that's wild time
43:20 - flies when you're having fun let's wrap
43:21 - this up really really quick the one last
43:25 - thing I want to do is like make this
43:26 - random base generation so pretty easy or
43:30 - not I shouldn't say that but the way
43:32 - that we built it out so far small tweak
43:34 - I just need to reset my base X and my
43:37 - base Y so this if
43:40 - additional is kind of like if I won then
43:43 - I want to make a new base location so
43:45 - I'll just copy that code of a random
43:49 - coordinate and now my step function will
43:52 - place the base somewhere else if I ever
43:54 - contact it and let's go for it let's see
43:58 - if this works
44:01 - all right I'm really making me work for
44:05 - it
44:05 - oh you scamp and there we go okay cool
44:09 - dancing around awesome okay so we didn't
44:13 - quite get to everything but I thought
44:15 - we'd pretty much have an MVP a Minimum
44:17 - Viable Product for yeah product for our
44:20 - game I had a lot of fun I really we
44:25 - could definitely play sounds like pretty
44:26 - much whatever logic we want to have
44:28 - happen when we like win or enter a base
44:30 - we could do right in there so the sky's
44:34 - the limit you're only bounded by your
44:36 - own imagination very cool stuff yeah so
44:41 - to recap I guess one last time we'll run
44:42 - through everything just at the sort of
44:45 - danger being a little verbose here we've
44:47 - got our HTML document we have our canvas
44:50 - element inside of our document that's
44:52 - where all the magic is happening I made
44:54 - a script tag so I can run some
44:56 - JavaScript in my HTML I'm grabbing a
44:58 - reference to that HTML element I'm
45:00 - setting the properties to give it a nice
45:02 - dimension I'm getting a context instance
45:05 - and this is very important because this
45:07 - is how I'm able to paint all the
45:08 - different pixels into the canvas I'm
45:11 - getting some XY coordinates for my base
45:14 - and my player I have a step function
45:18 - which is going to run every sixtieth of
45:20 - a second and every sixtieth of a second
45:22 - it's going to clear out the context set
45:26 - a color draw the base in the player or
45:29 - the player in the base check if the
45:32 - player has one if the player has one
45:34 - it's going to move the base to a
45:36 - different location and then it's just
45:38 - going to recursively keep calling itself
45:40 - it's just going to keep running this
45:41 - loop my other function is my handle
45:45 - input and this is the function I wrote
45:46 - to check what key I'm pressing and
45:48 - depending on the key I'm pressing I'm
45:51 - going to change these variables which
45:54 - dick
45:55 - we're on the canvas the player is so
45:58 - this is how I'm moving the player around
45:59 - the canvas and last but not least I'm
46:03 - adding an event listener and saying hey
46:04 - I want to make sure that whenever
46:06 - there's a key press you run this
46:07 - function and that pretty much takes us
46:10 - to the end of the stream I just want to
46:13 - say again I really appreciate everyone's
46:14 - attention super exciting stuff to give
46:17 - you some ideas of how you can change
46:19 - this let's say that every time my player
46:23 - moves into the base the base gets a
46:25 - little bit smaller so I want my base to
46:28 - get harder to get into well to do that
46:31 - what I could do is create another
46:33 - variable for my bases dimensions which I
46:35 - have right here and then I could
46:37 - decrement those dimensions
46:39 - every time I one another idea would be
46:42 - to set up a timer and so maybe there's
46:44 - like a five-second countdown so if my
46:46 - player doesn't arrive in the base in
46:48 - five seconds then I lose the game some
46:53 - other things that I could do are maybe
46:55 - there are some randomly generated
46:56 - power-ups like I could randomly put
46:59 - another square that's blue and if my
47:01 - player enters blue it can move twice as
47:03 - fast twice as fast means that instead of
47:08 - you know incrementing or decrementing by
47:09 - five maybe I'm incrementing or
47:11 - decrementing by ten pixels so the way
47:14 - that I would kind of phrase it is what
47:16 - do I want to have happen in my game what
47:18 - is making that happen in the game right
47:20 - now and how can I alter that usually
47:22 - you're gonna be storing it in a variable
47:23 - changing that variable around I would
47:27 - also say you know this is this is an
47:30 - example that kind of intentionally
47:31 - avoids using JavaScript classes and
47:33 - that's because I wanted to keep this as
47:36 - approachable as possible but it's
47:38 - definitely a good idea if you do feel
47:39 - comfortable with JavaScript classes and
47:41 - again we have some really great code
47:43 - Kadim e courses on them sort of
47:45 - packaging up the functionality of like I
47:47 - could have a player class and I could
47:49 - have a base class and then any specific
47:51 - functionality would live in that class
47:53 - and it would keep things a little bit
47:54 - tidier than the way I have it right now
47:58 - cool all right I guess that's it I don't
48:03 - know what am i oh yeah if you if you
48:06 - want to leave feedback if you're in
48:08 - this type of material I know that there
48:09 - has been some but please let us know we
48:12 - would love to build a course on game
48:13 - design something like this let us know
48:16 - we're always looking to improve and do
48:17 - better by our learners so yeah fill up
48:20 - the feedback form thanks everyone and go
48:22 - make some games

Cleaned transcript:

you know if you see it hey everybody can everyone see me and hear me we're good awesome okay hello everyone welcome to another code Kadim ii livestream I'm super excited to be here my name is Patrick I've been with code Kadim II for about 7 months now and before that I was teaching at a web development boot camp for the past two years super excited about today's livestream se topic near and dear to my heart gaming video games a lot of people get into programming for video games or vice versa so I'm really excited to show all of you how you can make a simple web browser game and hopefully we can build it in a way that you can expand and add your own elements and really make it your own so thanks Mariel to get started I'm just going to show you what we're going to build at the very end are sort of an MVP of what we're trying to accomplish in this about half hour 45 minutes I've created a game called square adventure and the rules of square adventure are relatively simple I am a red pixel character you can see me moving around there and I want to move into the safe zone and as soon as I move into the safe zone it pops over to another area in the map and I can see at the bottom here I'm keeping score of how I've done so far and that is the game we are going to be building cool and I'm controlling my pixel with the keyboard I'm using the W a s and D keys cool awesome all right well I'm going to reset to a blank HTML document and we'll get started pay no attention to the man curtain cool so just to orient ourselves with what we have on the screen let's clear that out cool I've got my index.html document so this is a your standard HTML document I have my doctype declaration my HTML tag the head tag we're not really doing much with that and I have my body tag here and we have a main tag so starting with pretty much nothing just a very very empty skeleton of HTML this is going to be our browser component so anything we add into our HTML document will show up here if it's an HTML element and then on the far right of my screen I have my console open you can open this if you're using Chrome with command option I I believe you can also double click and hit inspect to pop it up so what this is going to give me is all the power of JavaScript at my fingertips I can quickly type out some codes so I can do some math here 5 plus 12 is excuse me 5 plus 7 is 12 I can do something called a console log and that's my way of like printing to the screen so I can say hey cool and what I'm gonna use this for is when I want to maybe prototype something out or test out an idea I can pop over here and type out some code and see how it runs so I can clear this if it gets too cluttered with command K so if I hold command and K on a Mac that will clear it out wonderful all right so now we're oriented today's stream is going to be based largely around an HTML element called canvas the canvas element so I'm going to add that in between our main tag nothing is going to go inside of it we typically don't put things inside of canvas but we are going to be able to paint a whole lot of graphics inside of it I'm also going to add an h1 tag to name our game does anyone have any ideas of what they want to call our game I'll look in the chat for a suggestion I use square adventure but I'm getting kind of tired of that so anything I'll call it Metal Gear Square in honor of one of that classic one those classic games I'm also gonna make a section tag and this is where I'm gonna keep my score and I'm gonna make a span tag as well super cool game I see Mario so I'll add that in there as well great and so just to show the other way that we're going to evaluate code here I'm gonna press this Run button at the bottom left and we can see some changes in our browser components so there's gonna be two different ways I'm executing code either in this console on the right or running my index.html document on the left so we can see the changes we made to the HTML showed up we have Metal Gear Square Mario and we have our score we can also see that there's a little bit of space between these two and that's kind of giving us a clue to this canvas element to be able to see the canvas element a little more clearly because we're gonna be working with it a lot I'm going to add inside of my body a style tag again this is just HTML but inside of the style tag I can write CSS which is the sort of design language of the web and it will be evaluated and applied to the HTML in the document so I'm just doing this to give myself a little bit more of an outline of the canvas that I'm working with so I'll give it a border of one pixel that's gonna be solid black and again I'm gonna click the Run button to run the code and now I can see a nice little outline of the canvas that I'm going to be working with very cool and for my next step the majority of the work that I'm gonna be doing from now onward is going to be in JavaScript and again just like with a style tag I'm gonna make a script tag again this is HTML but anything inside of the script tag will be evaluated as JavaScript so just to test out that that is working I'll put in a console log of hello there console log if you're not familiar as a way for me to print something to this console over here so this is just sort of a sanity check for me to see whether this is being loaded properly so I'll click run and sure enough I see the hello there so looking good wonderful cool great awesome so as I said the majority of the work we're gonna be doing here is in JavaScript but I'm going to need a ref Prince to my canvas element so I need to grab this HTML element grab a reference to it and then I can start to do the work of building my game inside that element so instead of a console log of hello there I'm going to use a method I'm going to grab on the document I'm going to query for a selector selector if you're not familiar could reference any one of these HTML tags or CSS class and so on but for our purposes it's enough to just say I want the canvas element I'm querying for the selector of canvas and what that's going to give me is a reference to that HTML element so I'm gonna store this at a JavaScript variable I'll declare it with the kant's declaration and I'll call it canvas canva canvas and I'll set it equal to query selector canvas again as a sanity check just to make sure that I'm on the right track I'm at a console log that element and we'll see I'll click over here clear up my console and when I run it I should see something that gives me the impression that I'm grabbing that canvas element so we're gonna run it and sure enough there it is and the kind of cool thing in chrome is when I hover over it you can see it highlighted over here great so full disclosure for those of you that are watching this screen the stream and you're more familiar with JavaScript JavaScript can be written typically with like a semicolon at the end of every expression I am gonna choose not to write semicolons just because I'm lazy and I don't want to do the typing but I promise you that the code will execute properly so you won't see any semicolons sorry great back on track so our canvas element we can see right now by default is kind of got like a rectangular kind of shape to it I want our game board to be just a nice square it'll be easier to work with so what I'm gonna do is change the properties on this HTML element directly now that I have a reference to it I can say canvas dot width equals let's say 300 pixels and canvas height equals 300 pixels so now when I run the code we should see this rectangle kind of square out and we sure do perfect okay great so now that I have a reference to my HTML element I'm going to call a very special method on it so as I said this is just the HTML element on the page but I need to get what's called a rendering context to be able to paint the pixels of the game inside of it and the way I'm going to do that is I'm going to declare another variable I'm going to call it context or CTX and I'm going to call a method on the canvas element of get context and get context is a method that takes an argument of what type of context I want and for our purposes we're just going to have a 2d game you can work with 3d and there's a couple other arguments you can pass in there but for our game we're just gonna keep it simple great and again just like before I think this is a really good practice especially when you're getting started just console.log things out just do sanity checks make sure you're grabbing the things that you think you're grabbing so now instead of the canvas I'm gonna console.log out the context whoops I want to clear this so I don't have any clutter and when I run it now I should see something that tells me I've made instantiated this context properly so I'm gonna run that and sure enough I can see my canvas rendering context cool so a lot of functionality here may feel a little overwhelming we can open it up we see lots of cool things here but what this instance of a canvas rendering context is gonna do is give us a lot of functionality this is what's going to allow us to paint to the canvas and dictate where we want pixels to be displayed how we want them to move etc cool so at this point I'll take a quick pause for questions if in the chat anything I've done so far is like what Patrick what are you talking about let me know I think sunny said this in another live stream but asking questions is super important always speak up and I'll try to help you as best you can all right moderator try to help you oh boy I hope for this semicolon thing isn't a distraction because life's too short how do you clear your consoles so I if you click into the console like I'll click into it and then hold command and then press K it'll clear it out and that will be necessary to just kind of make sure it's easy to focus on the most recent thing that's popped up cool alright it seems as though everyone's on board with what we've done so far so we're gonna continue on to new and exciting things now that we have our context we can start to paint into it and this will be kind of our first magical moment of putting a pixel inside of our canvas and I can do that on the canvas whoops not in caps though on the context there's a method many many many different methods that I can call the first one I'm going to do is called fill rect and that's going to paint a rectangle and fill it fill rec takes four arguments it takes the X and the y coordinate of where the rectangle starts how wide the rectangle is and how tall or high the rectangle is so the coordinate plane in canvas stock starts from this top left this is zero zero and it goes all the way down to however large the canvas is so in our case because we have a 300 by 300 canvas this bottom right pixel would be 300 300 so I'm gonna fill in these values I'll just hard code them for now let's say 20 50 and we'll make it a 50 by 50 square cool so at pixel 20 from the left pixel 50 from the top I want to pay a 50 by 50 square I'll run that code and whoa we got a pixel cool we painted something into canvas very very exciting so I've hard coded these values but that's not going to be very useful to me if I'm in a game I'm gonna want to be changing these values around a lot like we saw the player moves around the screen so I'm gonna store them in a variable and I'll try to use some semantic names here I'll say player X equals let's start them off xx and player Y also equals it's just do 20 so I'm now gonna swap in those variables for the hardcoded values cool and it should be more or less the same it's moved up a little bit because I changed the Y value but now we have a little more flexibility and how we're affecting our canvas wonderful so one other thing is I believe our player was red and so I can do that with the fill style property so I set that as red and now my pixel should be red and it is wonderful and I'm gonna make my player a little bit smaller I'm gonna make him ten by ten cool so now I've got my player on the screen so wonderful any questions about what we've done so far our first steps of using the context instance I'm seeing a lot of sunglasses in the chat that makes me think that everything is cool sweet alright so our next step is we want to create that base that the player is trying to move into and so this is going to be another rectangle so again I'm going to use the context this time we noticed that that base wasn't a filled in square it was just an outline so I'm gonna use the stroke rect same argument order so it's the X the Y the width and the height so let's make it I don't know 100 150 and 50 and now we should see another square being painted to the canvas and sure enough there we do we've got our base here so for our game what we want is an rendom element to it like we want the player to not know where the base is going to show up they move towards it so we need to explore how we can bring some randomness into our game and so I'm gonna jump over to the console here and play around with it a little bit as I said earlier I have access to JavaScript in this console and one of the cool things I have access to is this math object it's got a lot of really helpful methods on it one of which is random so this is a method that when I invoke it I'm going to get a number between 0 and 1 as a float or a decimal so you can see there it's always not quite going up to 1 not quite going down to 0 now what I can do is use this as the basis for the coordinate so if I take math dot random and I multiply it by the dimensions of my canvas I can get a coordinate somewhere in that plane so I know my base is gonna be 50 so I want to subtract that from the width and the height so I will multiply random by 250 and now I'm getting a number that's somewhere in that plane it's still a float or a decimal and I want to floor that because I can't paint like these decimal numbers so I'll use another math method called floor oh it's getting blocked by me sorry all right we'll bring this back up cool so I've got math.random and I'm gonna put all of that inside of another method call to math.floor and that's gonna floor the number and now I get a nice round number so this is what I'm gonna use to generate a random coordinate for my base I'm gonna just copy this code straight from the console and I'm gonna put it in another variable so this time I will call it like base x equals the calculation I just made base Y also equals the calculation I just made great and now I can put these into my stroke rec so instead of hardcoded values I'll put base X in there and base Y cool now let's clear that out when I click run here I should see the base in random locations so press that now it's in the bottom right click it again a little bit over to the left dancing all around sweet I've got a randomly generated base now I'm feeling real good I'm just gonna take a pause here and check out if there are any questions or anything that I've done that's really wild my head covers the console I apologize I have a big head so maybe let me just review what we've written so far just in case anyone's gotten a little lost in the weeds what I've done is I've grabbed I have my HTML right here one of my HTML elements is my canvas I'm using a script tag just to inject some JavaScript into my HTML document in that JavaScript I'm grabbing a reference to the canvas element here I'm setting some properties to give it a proper square dimension and then I'm creating a context with a method that's special to the canvas element called get context this context instance allows me to paint pixels inside of the element so I'm declaring some coordinate variables here and then I'm using these methods to paint inside of my canvas element so that's where we are at this point can we pass color as a fifth argument gotcha okay so I'm not sure if you can pass a fifth argument to fill rect or stroke rect I've always seen it as setting the property I did link the documentation for canvas if people want to check it out an experiment it's part of the fun another question is why are we setting the width and the height on the canvas element instead of using CSS it's a little bit tricky but our canvas element needs to actually have those dimensions not be represented in those dimensions CSS is something that will change the appearance of an element it won't change the element itself if that sounds a little bit weird I agree it's just sort of the way that canvas works if I tried to increase the canvas size just with CSS I wouldn't be able to paint in those areas that have been expanded by the CSS good question cool all right so just to kind of reorient ourselves we've got our pixel we've got our base we're definitely at the point now where we want to introduce some interactivity we want to be able to press the aw s or D keys and have our player move around the screen right now I can press those keys and nothing happens so when we're talking about interactivity on the web we're talking about events events are we can think of as pretty much anything a user will do in their webpage so when you're typing into an input box that's an event if you're clicking on a button that's an event if you're scrolling the screen that's an event in particular for our use case we care about the event of a key being pressed that's what we want to capture because when we press certain keys we want to move our player around so to be able to listen for certain types of events I have to call a method called add event listener so again I'm going to reference the document that's my HTML document and I'm going to add an event listener and the arguments for add event listener are going to be the event that I'm listening for and then whatever behavior I want to have execute when that event occurs so the first thing I'm listening for is key press and then I need to write a function to fill in that second argument so for now I'm going to call that function handle input and this function is going to receive an event as an argument so I'm going to write that in and for now just to get started just to make sure again that sanity check I'm gonna console.log the event just to make sure that things are working as they should so now that I've written my we called us a callback handler I'm gonna pass that in as the second argument handle input great so before I run this just to recap I'm adding an event listener I'm saying make sure that you keep your ear out for any key presses and when you do see a key press I want you to run this function and pass in an event cool so I'll click run and nothing's happened so far because we haven't pressed any keys yet but if I click into my browser component and then press a key in my console here I see I have an instance of a keyboard event being console logged out and so that's this line of code here is what's causing us to see this keyboard event so what is this keyboard event gonna do for us well it's giving us a lot of information I'm opening it up again and I can see it's kind of overwhelming a lot of different properties in this instance but one in particular that's going to be useful to me is there's a key property and that key property refers to the key that I pressed so just to make this a little more explicit what I'm gonna do is I have this event instance and I'm gonna use the dot notation to access a property on that instance so I'm saying in the event instance give me the information under the key property cool so slight squeak there I'm gonna run the code again I'm gonna do command K to clear out my console and now when I press keys I just see the key that I pressed right so the event objects gone but now I know okay I pressed a J and s and H etc cool key press a reserved word key press is not a reserved word so I could declare a variable named key press although that would be a little confusing for me cool great so now that I have an idea of which key is being pressed I want to sort of filter them and I'm gonna use some conditionals I'm gonna say okay it's great that a key was pressed but I only want to make sure I do something for an AWS or D key so I can do that with a series of conditionals inside my function I'm gonna remove the console.log for now and I'll say well I'll declare a variable of like key that's going to be event key so that's the key that I pressed and then if if key is equivalent to a I want to do something whoa I don't want to yell though else if ki is equivalent to W I want to do something else if ki is equivalent to a DD I want to do something and then one last else if if you're more familiar with JavaScript maybe you're thinking hey why don't you do a switch statement which is another way of writing these conditionals I could have done that as well and s is my last one great and so now I can put in some console logs here like a pressed and then I can have W pressed and D and let's get our alignment here all set okay Coolio depressed and s pressed okay wonderful so now we can run it let me clear out my console again and now when I click into the browser component and press these keys I see something if I press other Keys you'll maybe have to take my word for it pressing other keys that are at AWS or D and nothing's being wrong all right wonderful so at this point I know I press these keys but now what do I want to do with these keys and this question is going to take us back to why do we have this pixel here at all like where did this pixel come from right it came from this fill rect method right and the location specifically being 10 pixels down 10 or sorry 20 pixels down 20 pixels over came from these variables so if I want to change the location of this pixel I need to use this method again with different values for these variables so let's see here for our first key of a if I'm pressing the a key that's like the left key I want my a player to move to the left of the screen I want to move in this direction can anyone tell me does anyone think like what would I do how which variable I want to affect what I want to affect the player X or player Y variable I'm gonna want to handle the player X variable wonderful thank you John more I'm going to want to handle the X because the X is what's handling this plane and if specifically I'm moving towards this direction I want to decrement or remove values or I want to lower the value so what I'm going to do here is take that player X variable and subtract 5 from it I'm cool and let's kind of just continue along down the line with a W I want to move up so if I want to move up what access am i moving on I'm going up and down in my square so now we're doing the W key which will move our player upwards why Deadpool T Y interwebs you got it and specifically how do I want to affect my Y axis do I want to decrement or increment if I'm pressing the W key if I'm pressing the W key I want to decrement it wonderful Utah by 5 got a negative why I will accept it and that's because if you'll recall the top left is 0 0 right so if I'm moving up in this plane my Y value is decreasing so I'm going to subtract 5 from play or Y let's move on to D so if I'm doing D I'm moving to the right and I'm going to add to the what the x value and if I'm pressing s I'm moving down and so I'm moving down which means I am increasing my Y value wonderful cool so I'm going to I click the Run button I'm going to clear my console out click run again just for good measure and now if I press the key who thinks that that pixel is gonna move maybe just in your own mind think yourself hey is this picture we're gonna move or not when I press the key I think it's really helpful when you're following along with things to try to like get an idea of what do I think is going to happen and then when you see it happen it's the thing that you thought and you're like hey I'm doing great move right along if it's not the thing that you thought then there's a disconnect in your understanding and that's when you slow it down and say okay why did I think this would happen and then that happened so right now if I press the key nothing's actually going to happen and again this goes back to why is the pixel on the screen at all and the reason it's on the screen is this method this fill rect method so I can't see the pixel move because it's not being repainted and we there's a couple different ways we can handle this I could just take this code here copy it and paste it inside of my event and that way every time the event fired I repainted in that way so I can run that and we can see that it does a little bit of funkiness but it does kind of move but I actually don't want to do it like that because it's a little weird to put that type of logic inside my event handler I'm going to introduce a new function called step so I'll declare step steps not going to take any arguments and what I really want step to do is to be like the momenttomoment state of my game we can almost think of it like a loop except it's always going on there are there are other activities happening while the step function is being executed so I can take this logic of painting out my base in my player I can put it inside my step function here and then at the very bottom of my step function I'm gonna do something that's a little maybe this feels a little bit funky but it's given to us by the browser and it's called request animation frame this is a function that's given to us by browser and I'm gonna pass in the function that I just wrote so requestanimationframe comes from the browser it's a function that takes a function as an argument that function being the one I just wrote and what it's gonna do is basically say okay every 60th of a second or so I'm gonna run this function and to sort of kick everything off in the beginning outside of that function step I'm going to again call requestanimationframe just to kind of get things started this is probably the most like whoa what is happening part of this live stream but I feel like this steps pretty important because it's kind of how things continuously get painted to the screen it is recursion but don't worry about it we've got some great recursion courses if coke atom e if you want to check that out in more detail you don't really need to understand recursion for this step to work but just to recap I've defined my function step I put all my painting logic inside of step and I also told the browser hey just run this function like every sixtieth of a second I would be super cool great so I'm going to run the code again nothing's happens right away but now when I press my keys I am moving my player around there's a little bit of weirdness here in that wherever the player was is still being painted and that's because I haven't cleared the campus so essentially what I want to do is clear everything from the canvas and then repaint everything back onto the canvas it seems like a lot of work but computers are very fast requestanimationframe repaints every so requestanimationframe only does whatever functionality I put inside of it it's it's really just a way of saying hey just run this code every sixtieth of a second so at the very beginning what I want to do here is call another method on my context of clear rect and this is my way of like wiping clean the canvas clear rect just like Phil rector strrrike takes four arguments the x and ycoordinate of where I want to start clearing and then the extent of the width and height of what I want to clear so for our purposes I want to clear everything so I want to stop I want to start at the top left zero zero and go the whole width and height of the canvas cool so I made a change of adding clear back to the top of my step function I'll run it again and now when I move my player around I don't have that trail which was kind of cool but not great for our game wonderful okay I'm gonna take a brief pause here because we've done some crazy stuff and I want to make sure that no one feels left behind here so I'm just going to again go back over everything we've done so far so just kind of like up from the very top recap we have an HTML document super cool specifically inside of our HTML document we have a canvas element which is where all this magic is happening and it's kind of cool if you think like if we're looking at what's going on here this is the HTML element like this is what you can see from the HTML element like we can see our h1 tag and then this canvas is everything that's happening in here like really cool I think it's really cool I'm not just being paid to say that and then we have our section with our score below that I have a script tag and this is my way of injecting some JavaScript into my HTML document so I can do some of the functionality and interactivity of our game and within my JavaScript tag I'm grabbing a reference to that canvas element I'm setting some properties on it I'm getting a rendering context from the element this is what's going to allow me access to all those different methods that paint the pixels onto the canvas I'm declaring some variables to give me an idea of where my player and my base will be in the canvas I have a step function which is my like sort of every beat every moment of my game I want this to happen and I'm starting that loop or that recursive exchange right here I have what's called an event handler called handle in but this is what is happening every time there is a key press event because I added an event listener I'm looking for key presses and whenever those key presses happen I want to run this function and in the function I'm going to be looking at the event and saying hey was the key in a a w etc and that's where we're at oh my gosh Deadpool T Y interwebs you're the best cool if the frames aren't rendered equally fast how do you move the player at a constant rate so that's a good question this is a little bit more advanced step requestanimationframe does have some finetuning in it for our purposes today we're not really going to mess with it too much but maybe a really like drive home how often this is happening I'm going to do something just as a little experiment to illustrate it I'm gonna take that player X value and again this is what's dictating where on the xaxis my player is showing up and in my step function I'm going to increment it by 1 so every 60th of a second my player X is gonna be incremented by 1 and then painted to the canvas and this this should be pretty cool I guess I don't know who knows so you can see like this is happening every 60th of a second my players running off the screen I don't actually want to do that right I want to be able to control how my player moves but that's kind of how we get some animation going on it's a little sneak peak so good question about the arrow keys instead of letter keys the reason why I chose the letter keys is sometimes people don't have arrow keys on their keyboard and also there's a little bit of weirdness with the key press event where it won't actually register an arrow key so I didn't want to go down that rabbit hole not worth pointing out but a wsd are kind of a classic like moving around great okay cool so enough jibberjabber we have some interactivity in our game what I'm looking for now is sort of like the final cherry on the sundae I want to be able to sort of like have something happen when my player moves into the base like that I want the base to go to a different location I want like it to magically reappear somewhere else princess is in another castle that kind of an idea right so this is going to touch on a essential part of writing games it's a super super super important concept so I'm gonna kind of belabor it a lot we want to take a step back and ask ourselves what does it mean for our player our X dot to be inside of this square and when we're dealing with canvas we're just dealing with pixels we just know X Y coordinates on a plane so to be inside of the square means my x coordinate is greater than or equal to this other things x coordinate like right now I've got an x coordinate that's a little bit less than the base and now my x coordinate is greater than the base and similarly by the y coordinate perspective right now I have a lesser than y coordinate and now I've got a greater than y coordinate so that's how we're going to evaluate whether our player has moved inside of the base and this logic is something that I want to be checking for all the time and so this is a good candidate to put inside of our step function so I'm gonna use a conditional and say if my player X my xcoordinate is greater than or equal to my what did I call it base X then I know I've collided there are a couple others that I want to do here if my player if my player Y is greater than or equal to my base Y then I know I've gone past it so this is sort of my console dot log you won or you scored something like that right I don't want to take too many steps at once and mmhmm all right so we'll just kind of see how this runs I'll run the code and now inside of my step function I'm always checking like have I gone into the base have I gone to the base so I will move over and we can see right now I haven't gone in the base I haven't gone in the base and if we keep ours over here whoa I have really gone in the base the reason why there's this number here is the step function is again running every sixtieth of a second so it's running a lot that just means that you one has been console logged multiple times in this case 700 times cool so I'm gonna clear the console one more time and I just kind of want to illustrate a bug that I kind of put intentionally in here one thing I didn't think about is what if I am not in the base right now but I move down and oh no I'm winning but I'm not really winning if you know what I mean and so what I haven't thought about here is there's an extent of like where the base is and that's going to be the start point of the base coordinate and then how wide it is so I need to add to my conditional here and let's see if I can do this my player X needs to be less than or equal to the base X plus the width of the base and the width of the base is it's 50 cool and then I want to do the same thing with my ycoordinate so play or why is got to be less than or equal to the base y plus 50 okay cool this is you know not going to be like the most precise coordinates ever and that's okay we don't want to get bogged down in the details but just to recap here I want to make sure that when I'm not really winning my game isn't throwing a bug there so now if I'm going down we can see that my coordinate is greater than but still within the bound so I'm not it looks like I fixed this problem cool I'm circling around the base oh when is it gonna happen oh I won all right cool awesome and so at this point yeah I have kind of a functioning game I am what I've done right now is a collision detection and the reason why I'm making such a big deal about it is it boils down to in your game when do you want to know when something contacts something else so think of it like when we want to know when Mario hits a mushroom we want to know when Mario is on top of a Koopa we want to know when Sonic has touched a ring we want to know when pacman has eaten one of those little golden things I don't know what the word for it is but knowing when something has collided with or contacted something else is like so essential in game development right it's like you you have to know that it's it's what so many games are built on and ultimately this is what it comes down to is just XY coordinates in a 2d game so it's pretty cool nice I'll just take a break now oh wow we're really we've done like almost 45 minutes that's wild time flies when you're having fun let's wrap this up really really quick the one last thing I want to do is like make this random base generation so pretty easy or not I shouldn't say that but the way that we built it out so far small tweak I just need to reset my base X and my base Y so this if additional is kind of like if I won then I want to make a new base location so I'll just copy that code of a random coordinate and now my step function will place the base somewhere else if I ever contact it and let's go for it let's see if this works all right I'm really making me work for it oh you scamp and there we go okay cool dancing around awesome okay so we didn't quite get to everything but I thought we'd pretty much have an MVP a Minimum Viable Product for yeah product for our game I had a lot of fun I really we could definitely play sounds like pretty much whatever logic we want to have happen when we like win or enter a base we could do right in there so the sky's the limit you're only bounded by your own imagination very cool stuff yeah so to recap I guess one last time we'll run through everything just at the sort of danger being a little verbose here we've got our HTML document we have our canvas element inside of our document that's where all the magic is happening I made a script tag so I can run some JavaScript in my HTML I'm grabbing a reference to that HTML element I'm setting the properties to give it a nice dimension I'm getting a context instance and this is very important because this is how I'm able to paint all the different pixels into the canvas I'm getting some XY coordinates for my base and my player I have a step function which is going to run every sixtieth of a second and every sixtieth of a second it's going to clear out the context set a color draw the base in the player or the player in the base check if the player has one if the player has one it's going to move the base to a different location and then it's just going to recursively keep calling itself it's just going to keep running this loop my other function is my handle input and this is the function I wrote to check what key I'm pressing and depending on the key I'm pressing I'm going to change these variables which dick we're on the canvas the player is so this is how I'm moving the player around the canvas and last but not least I'm adding an event listener and saying hey I want to make sure that whenever there's a key press you run this function and that pretty much takes us to the end of the stream I just want to say again I really appreciate everyone's attention super exciting stuff to give you some ideas of how you can change this let's say that every time my player moves into the base the base gets a little bit smaller so I want my base to get harder to get into well to do that what I could do is create another variable for my bases dimensions which I have right here and then I could decrement those dimensions every time I one another idea would be to set up a timer and so maybe there's like a fivesecond countdown so if my player doesn't arrive in the base in five seconds then I lose the game some other things that I could do are maybe there are some randomly generated powerups like I could randomly put another square that's blue and if my player enters blue it can move twice as fast twice as fast means that instead of you know incrementing or decrementing by five maybe I'm incrementing or decrementing by ten pixels so the way that I would kind of phrase it is what do I want to have happen in my game what is making that happen in the game right now and how can I alter that usually you're gonna be storing it in a variable changing that variable around I would also say you know this is this is an example that kind of intentionally avoids using JavaScript classes and that's because I wanted to keep this as approachable as possible but it's definitely a good idea if you do feel comfortable with JavaScript classes and again we have some really great code Kadim e courses on them sort of packaging up the functionality of like I could have a player class and I could have a base class and then any specific functionality would live in that class and it would keep things a little bit tidier than the way I have it right now cool all right I guess that's it I don't know what am i oh yeah if you if you want to leave feedback if you're in this type of material I know that there has been some but please let us know we would love to build a course on game design something like this let us know we're always looking to improve and do better by our learners so yeah fill up the feedback form thanks everyone and go make some games
