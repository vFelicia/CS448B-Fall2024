With timestamps:

00:00 - Hey everyone, I'm Martin and I'm a San Francisco-based software engineer and today we'll be talking about hosting.
00:07 - We're gonna cover what hosting is, why it matters, and what are some of the available options you have to host an application.
00:14 - Imagine you have an application.
00:17 - Let's say you built an application that lets users save snippets 
of code with explanations to them, like a flashcard.
00:24 - Imagine you've built a sleek user interface, maybe using React, you've built some back-end server, maybe using Node.js
00:32 - and you've hooked all this up to a database, it's working great but there's one problem:
00:38 - your app currently lives on your computer and you want to share it with the rest of the world.
00:44 - You can't give everyone access to your computer because that's just reckless, so what do you do?
00:50 - Is there any other computer that you can put your app on so that everyone else can see your work?
00:56 - This is what hosting does. To make your app available to the world, it needs to live somewhere.
01:02 - If you're like most people, you probably don't want to go out and buy a bunch of servers,
01:06 - hook them up yourself, and deal with network setup and everything else related.
01:10 - What you would do is rent a server by someone who's done all the hard work for you.
01:15 - This someone is known as a hosting provider.
01:18 - Hosting providers own and maintain lots of servers and make it easy for people to rent out service page to host their applications.
01:26 - There are lots of different types and categories of hosting so we won't cover every single one of them.
01:32 - Rather, we'll look at general categories and what they mean, and let's start with website builders.
01:38 - The user services like Wix, Squarespace, and different kinds of content management systems.
01:44 - They let you build a website, even if you aren't a developer.
01:48 - They sort out the hosting and managing of different components, like databases, emails, network servers, and everything else you can think of.
01:55 - Website builders are a good choice if you want to get a website up quickly and don't want to build it yourself
02:00 - or you don't have the time to actually do that.
02:03 - Next up, we have shared web hosting. If you've ever had roommates, then you already have an idea of what this type of web hosting is.
02:11 - Except replace roommates with apps that other people have built.
02:15 - When you use a shared hosting plan, you share a server with other people so essentially, you're getting a portion of the resources
02:23 - that machine has to offer.
02:25 - Much like having roommates, this makes rent cheaper but also like having roommates, you have to share evenly.
02:33 - If someone else's app starts consuming lots of resources, your 
app's performance will suffer.
02:38 - It'd be like trying to write that essay you've been putting off while your roommate is throwing a party in the same room and everyone in town is invited.
02:45 - Next up is dedicated web hosting. This is when you rent out your own dedicated apartment or server, in this case.
02:53 - You get peace of mind that your dedicated server belongs only to you but so does the rent.
02:59 - This type of web hosting is usually more expensive.
03:02 - Next up, we have cloud hosting. This is when you're running your app in the cloud. What is the cloud, you might be wondering.
03:11 - Well you can think of it as a vast network of data centers and different computing resources made available to consumers.
03:18 - This type of hosting is best suited for when you want to run different parts of your application on different types of machines.
03:26 - This could be because you need to scale out your application or 
because different parts of the application require different kinds of resources.
03:34 - One part, for example, might be very CPU hungry, while another part of your application might be very memory hungry.
03:41 - Cloud hosting, much like all the other categories, comes in different flavors.
03:45 - There's things like infrastructure as a service, platform as a service, and in recent years we've been seeing functions as a service.
03:52 - In infrastructure as a service, you get raw infrastructure resources.
03:56 - So the cloud provider gives you access to servers, storage, networks but you have to maintain them.
04:02 - In other words, you have to make sure you're getting the correct operating system, the correct version of your application,
04:08 - all the dependencies, all the network rules, stored, setup, and everything else involved.
04:12 - The cloud provider manages the infrastructure itself
04:15 - so, in other words, it makes sure that these servers are all alive in a data center somewhere, that the data center
04:21 - has adequate power, adequate security, adequate network, and everything else that a data center could need. 
04:29 - It is the cloud providers' responsibility to manage the infrastructure itself so, in other words, they make sure the servers are all alive in a data center,
04:38 - that data center itself has adequate power, adequate security, and adequate redundancies to make sure that your application is always going to be alive.
04:47 - The next subcategory is platform as a service. The cloud provider takes care of the servers for you and they give you a way to run your application.
04:55 - So instead of worrying whether you have installed and configured Linux properly, you just give the cloud provider your application,
05:01 - let's say it's a node.js app, and they take care of the rest from there.
05:06 - Functions as a service or server-less as it's called, is when you 
take this management to the extreme. 
05:12 - Instead of giving the cloud provider your application, you're giving them specific functions and then they take care of the actual execution of those functions.
05:21 - The cloud provider is responsible for configuring any runtime necessary to run your functions
05:26 - and everything else that would be involved in actually invoking them.
05:30 - By now, you're probably feeling a little overwhelmed by the sheer amount of choices available to you, so what do you go with?
05:38 - I'll give you three personal recommendations depending on what you're building.
05:43 - Number one is GitHub Pages. I have found that this is probably the simplest and most straightforward type of hosting.
05:51 - It is best suited for static files, so things like simple HTML and CSS files or maybe a compiled version of a React application.
06:01 - If you just want a place to put your portfolio, then GitHub Pages is free and easy to use and it's probably the best choice for you.
06:09 - Number two on our list is Heroku. This is a platform as a service and it is best suited for some full-stack applications.
06:18 - Maybe you have a node.js server and a sequel database, well Heroku will help you set both of these up quickly.
06:26 - It has a free trial that is more than good enough to get you started
06:30 - but if you want anything production-ready, it will very quickly start costing you a lot of money.
06:36 - I've found it helpful to get up and running at things like hackathons or if I'm building simple demos for applications
06:42 - that don't have to support massive traffic.
06:45 - Number three on our list is DigitalOcean. Now, DigitalOcean is a cloud provider
06:51 - but if you don't want to deal with the complexity that comes with some of the bigger players like Amazon Web Services or Google cloud platform,
06:59 - and a simple platform as a service like Heroku simply isn't cutting it for you, then DigitalOcean is a good resource to look at. 
07:08 - I found it easy to build out applications on DigitalOcean and they have a lot of resources on how to get started.
07:15 - Now, word of warning, these are just my recommendations, these are things that have worked for me
07:21 - but you should experiment with simple demo projects and see what works for you and what doesn't.
07:26 - Always make sure you evaluate your options against what it is you're actually trying to build,
07:31 - and remember that at the end of the day, all of these are just tools you can use, there is no one-size-fits-all solution.
07:39 - So you might use some of these, you might use none of 
these, or you might use a mixture of all three or even other solutions.
07:47 - Thanks for watching, I hope you've enjoyed this lesson.
07:50 - You can join the conversation by subscribing to this channel 
or by dropping a comment below.
07:54 - If you want to take your skills to the next level, you can start 
learning on Codecademy today. See you next time!

Cleaned transcript:

Hey everyone, I'm Martin and I'm a San Franciscobased software engineer and today we'll be talking about hosting. We're gonna cover what hosting is, why it matters, and what are some of the available options you have to host an application. Imagine you have an application. Let's say you built an application that lets users save snippets of code with explanations to them, like a flashcard. Imagine you've built a sleek user interface, maybe using React, you've built some backend server, maybe using Node.js and you've hooked all this up to a database, it's working great but there's one problem your app currently lives on your computer and you want to share it with the rest of the world. You can't give everyone access to your computer because that's just reckless, so what do you do? Is there any other computer that you can put your app on so that everyone else can see your work? This is what hosting does. To make your app available to the world, it needs to live somewhere. If you're like most people, you probably don't want to go out and buy a bunch of servers, hook them up yourself, and deal with network setup and everything else related. What you would do is rent a server by someone who's done all the hard work for you. This someone is known as a hosting provider. Hosting providers own and maintain lots of servers and make it easy for people to rent out service page to host their applications. There are lots of different types and categories of hosting so we won't cover every single one of them. Rather, we'll look at general categories and what they mean, and let's start with website builders. The user services like Wix, Squarespace, and different kinds of content management systems. They let you build a website, even if you aren't a developer. They sort out the hosting and managing of different components, like databases, emails, network servers, and everything else you can think of. Website builders are a good choice if you want to get a website up quickly and don't want to build it yourself or you don't have the time to actually do that. Next up, we have shared web hosting. If you've ever had roommates, then you already have an idea of what this type of web hosting is. Except replace roommates with apps that other people have built. When you use a shared hosting plan, you share a server with other people so essentially, you're getting a portion of the resources that machine has to offer. Much like having roommates, this makes rent cheaper but also like having roommates, you have to share evenly. If someone else's app starts consuming lots of resources, your app's performance will suffer. It'd be like trying to write that essay you've been putting off while your roommate is throwing a party in the same room and everyone in town is invited. Next up is dedicated web hosting. This is when you rent out your own dedicated apartment or server, in this case. You get peace of mind that your dedicated server belongs only to you but so does the rent. This type of web hosting is usually more expensive. Next up, we have cloud hosting. This is when you're running your app in the cloud. What is the cloud, you might be wondering. Well you can think of it as a vast network of data centers and different computing resources made available to consumers. This type of hosting is best suited for when you want to run different parts of your application on different types of machines. This could be because you need to scale out your application or because different parts of the application require different kinds of resources. One part, for example, might be very CPU hungry, while another part of your application might be very memory hungry. Cloud hosting, much like all the other categories, comes in different flavors. There's things like infrastructure as a service, platform as a service, and in recent years we've been seeing functions as a service. In infrastructure as a service, you get raw infrastructure resources. So the cloud provider gives you access to servers, storage, networks but you have to maintain them. In other words, you have to make sure you're getting the correct operating system, the correct version of your application, all the dependencies, all the network rules, stored, setup, and everything else involved. The cloud provider manages the infrastructure itself so, in other words, it makes sure that these servers are all alive in a data center somewhere, that the data center has adequate power, adequate security, adequate network, and everything else that a data center could need. It is the cloud providers' responsibility to manage the infrastructure itself so, in other words, they make sure the servers are all alive in a data center, that data center itself has adequate power, adequate security, and adequate redundancies to make sure that your application is always going to be alive. The next subcategory is platform as a service. The cloud provider takes care of the servers for you and they give you a way to run your application. So instead of worrying whether you have installed and configured Linux properly, you just give the cloud provider your application, let's say it's a node.js app, and they take care of the rest from there. Functions as a service or serverless as it's called, is when you take this management to the extreme. Instead of giving the cloud provider your application, you're giving them specific functions and then they take care of the actual execution of those functions. The cloud provider is responsible for configuring any runtime necessary to run your functions and everything else that would be involved in actually invoking them. By now, you're probably feeling a little overwhelmed by the sheer amount of choices available to you, so what do you go with? I'll give you three personal recommendations depending on what you're building. Number one is GitHub Pages. I have found that this is probably the simplest and most straightforward type of hosting. It is best suited for static files, so things like simple HTML and CSS files or maybe a compiled version of a React application. If you just want a place to put your portfolio, then GitHub Pages is free and easy to use and it's probably the best choice for you. Number two on our list is Heroku. This is a platform as a service and it is best suited for some fullstack applications. Maybe you have a node.js server and a sequel database, well Heroku will help you set both of these up quickly. It has a free trial that is more than good enough to get you started but if you want anything productionready, it will very quickly start costing you a lot of money. I've found it helpful to get up and running at things like hackathons or if I'm building simple demos for applications that don't have to support massive traffic. Number three on our list is DigitalOcean. Now, DigitalOcean is a cloud provider but if you don't want to deal with the complexity that comes with some of the bigger players like Amazon Web Services or Google cloud platform, and a simple platform as a service like Heroku simply isn't cutting it for you, then DigitalOcean is a good resource to look at. I found it easy to build out applications on DigitalOcean and they have a lot of resources on how to get started. Now, word of warning, these are just my recommendations, these are things that have worked for me but you should experiment with simple demo projects and see what works for you and what doesn't. Always make sure you evaluate your options against what it is you're actually trying to build, and remember that at the end of the day, all of these are just tools you can use, there is no onesizefitsall solution. So you might use some of these, you might use none of these, or you might use a mixture of all three or even other solutions. Thanks for watching, I hope you've enjoyed this lesson. You can join the conversation by subscribing to this channel or by dropping a comment below. If you want to take your skills to the next level, you can start learning on Codecademy today. See you next time!
