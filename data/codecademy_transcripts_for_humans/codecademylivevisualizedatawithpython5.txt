With timestamps:

00:05 - it's saying setting up webinars or
00:08 - custom streaming service it so your life
00:16 - all right we are live I am going to hey
00:23 - everyone thank you so much for joining
00:24 - us today this is another edition of code
00:28 - Academy live I am so a baktun I am a
00:31 - frequent product manager here at code
00:33 - Academy and we're going to be going
00:35 - continuing our journey through the
00:37 - visualized data with pythons towpath and
00:40 - I am joined here today with Marielle
00:43 - hey there I'm Marielle Frank I'm a
00:45 - senior curriculum developer here at code
00:47 - Academy and yeah I'm really excited to
00:51 - dig into the way that we use list
00:55 - comprehensions in Python so I'm actually
00:59 - one of the people who focuses on the
01:01 - data science area most specifically
01:03 - machine learning zoe actually has more
01:06 - experience and engage with visualization
01:08 - than i do but but i definitely can help
01:12 - out with questions related to data
01:14 - science in general and python of course
01:15 - yeah all right so with that should be
01:18 - dig in yeah
01:19 - so I'm gonna share my screen so fun
01:24 - facts for those who were with us in the
01:26 - first one this content comes from an old
01:29 - intensive that needs to have that was
01:32 - one of the first intensive I worked on
01:34 - so this is the skill path you can join
01:37 - us in your browser will be going through
01:40 - today is the list comprehensions article
01:45 - that's right here and we'll be going
01:48 - through the list comprehensions code
01:49 - challenge right here I'm super excited
01:51 - about this because it's been a long time
01:53 - since I've programmed in Python and
01:56 - let's cut branches I remember being
01:57 - super tricky when I first started so I'm
02:00 - glad Marielle is here with her expertise
02:03 - Sumeria why don't you walk us through
02:05 - the article sure alright so um we have
02:09 - an article here on list comprehensions I
02:11 - so they're a really
02:13 - great way of creating lists in Python
02:15 - and it's also sort of a shortcut to
02:18 - doing for loops so you can find most of
02:23 - the same stuff in that video if you want
02:24 - to go through that later but we're gonna
02:26 - skip the video for now so the basic idea
02:31 - is when we're doing data analysis we
02:34 - work with lists so ordered sets of data
02:37 - and we need to perform all kinds of
02:40 - computations on them so this can be on
02:42 - numbers this can be on strings this can
02:45 - be on different types of data so if we
02:50 - want to perform some operation on every
02:54 - single element in a list you know there
02:58 - there are multiple ways of doing this so
03:00 - it could be that we want to you know
03:03 - manually go in and modify every single
03:06 - variable but that's really
03:09 - time-consuming and what if this is a
03:11 - list that's it goes on for if that was
03:14 - in elements it's not really a really
03:16 - great way of doing it real so
03:22 - unfortunately Python gives us a shortcut
03:24 - which is list comprehensions so let's
03:28 - say we have this list of temperatures
03:30 - and it's you know negative 5 29 26
03:35 - negative 7 etc uh if we want to adjust
03:39 - the temperature you know if we're in a
03:43 - situation we found out our lab
03:44 - thermometer is actually consistently
03:46 - reporting 20 degrees lower than it
03:48 - should be we can adjust all of the
03:50 - temperatures at once using a list
03:52 - comprehension so we can look at this
03:55 - where it says temperatures and then it
03:58 - says temperatures adjusted what we can
04:01 - do is we can say for each temperature
04:04 - add 20 degrees for every single
04:09 - temperature in that list of temperatures
04:11 - so what you're doing is you're modifying
04:13 - an existing list but by making a copy of
04:17 - it so you don't actually affect the
04:19 - original list so the the order is you
04:23 - take an element in temperatures you're
04:26 - going to be doing this to every
04:27 - single element you're naming that
04:29 - element temp you're storing the value of
04:33 - temp plus 20 in a new list
04:37 - that's called temperatures adjusted and
04:39 - then you're repeating the steps one
04:42 - through three for every single value in
04:44 - temperatures so if you if you actually
04:49 - just wanted to create a copy you could
04:51 - technically just do that same thing
04:55 - except get rid of that plus 20 so it
04:58 - could be a temp for temp in temperatures
05:02 - but you know that's not necessarily the
05:05 - most convenient way of making a
05:07 - duplicate of the list so not something I
05:09 - would recommend but it's good to know
05:10 - that that's actually what you're doing
05:14 - so we can use list comprehensions in all
05:17 - different kinds of scenarios including a
05:19 - data visualization situations so in the
05:23 - example that we have here we're creating
05:25 - a bar chart using matplotlib and you
05:30 - know if we want to make an adjustment
05:33 - you know say from Fahrenheit to Celsius
05:35 - or vice versa we can add in that
05:39 - conversion within our list comprehension
05:43 - so we can say do this operation to temp
05:47 - for each temperature in temperatures and
05:51 - then what you get is the modified list
05:54 - so that's pretty neat and I think this
05:57 - is the moment where we're actually going
05:59 - to go through and do a quick demo of how
06:01 - you would get that that sort of chart
06:06 - right before we get into the rainfall
06:08 - yeah yeah let's do it um so before I go
06:13 - through this quick demo and I'm gonna
06:14 - increase my screen so we can actually
06:17 - read it all here does that uh I think so
06:21 - it might be good if it's a slightly
06:24 - larger at size 175 percent so before I
06:30 - get into this demo I just want plug
06:32 - Wilko lab notebooks so if you are with
06:35 - us last week and went through the
06:38 - project with sunny and Carolyn they
06:42 - mentioned how to do I believe how to
06:46 - install Jupiter netbooks
06:48 - interpreter notebooks are super common
06:51 - software data scientists use it's a
06:58 - super common software that data
06:59 - scientists use that's basically a
07:01 - virtual notebook that's built off of
07:04 - cells so this looks pretty different if
07:05 - you're used to writing code in an IDE
07:07 - like on code Academy you're used to just
07:09 - like one file you run it on once it's
07:12 - cool about this in google colab in
07:15 - jupiter notebooks is that you can run
07:16 - each piece of your stuff individually so
07:20 - I can friend this piece you can see the
07:23 - little play button over here is what I
07:25 - click stops running I can click the
07:28 - second piece it doesn't mean that you
07:31 - have to make sure to click yourself in
07:32 - order and you can also make sure that
07:34 - you can run them all run on the focus
07:36 - cell just in case so the plug for collab
07:40 - is that you don't have to download
07:42 - anything it is part of the Google suite
07:45 - so if you already have a Google account
07:47 - then you have access to collab and
07:50 - highly recommend digging into that
07:53 - digging into that stuff because I know
07:55 - also like installations anaconda anyways
08:00 - to the point of epidemic so what we're
08:04 - doing here is we are importing the map
08:06 - hot live charting library no worries if
08:10 - this is totally brand-new actually like
08:12 - kind of skipping ahead to next week
08:14 - which is when we actually get into the
08:15 - date of this stuff but we figured to
08:16 - talk about it now so I took the content
08:21 - from the article we have that
08:22 - temperatures array right here
08:25 - and then we have our adjusted or rate
08:28 - air temperatures adjusted array we're
08:30 - reusing this list comprehension to
08:32 - modify the temperatures by 20 degrees so
08:36 - 10 plus 24 10 in temperatures and this
08:40 - is what it would look like now so you
08:42 - can see in the comments so when it comes
08:44 - to doing the data visualization we want
08:47 - to think about what is going to be our
08:49 - visualization choice what we were
08:51 - looking at
08:52 - our charts let's imagine for a second
08:54 - that we wanted to compare how
08:56 - differently it looks with the original
08:58 - temperatures we got in the adjusted
09:00 - temperature so we want one color bar for
09:02 - the original temperature this is the
09:03 - second color bar to the second one we
09:06 - have an X and y axis and on the y axis
09:09 - we would want to see the temperature
09:11 - values right and then on the x axis it's
09:15 - really just a matter of kind of like
09:16 - moving them apart so that we can see the
09:19 - adjusted ones over time so ivory saved
09:22 - our temperatures here to Y values kind
09:26 - of an unnecessary step I'm sure I could
09:28 - clean it up no worries this interesting
09:32 - thing comes in where this is back in the
09:36 - article 2 we can plot the horizontal
09:39 - positions of the bars both sets of bars
09:41 - using list comprehensions so we know
09:44 - that we have eight values and we want to
09:48 - space them out by two and so we can take
09:52 - this is a list comprehension right here
09:54 - we're just using the range function to
09:57 - calculate an array from what is it Mary
10:01 - L 1 0 2 7 tell me sorry I'm I'm getting
10:07 - remonster okay should be that should be
10:16 - from 1 to 7 once so a range a range
10:18 - function will give you all everything
10:21 - from default starting at 1 up to right B
10:26 - for whatever number you pick in there
10:28 - cool
10:30 - so a bar chart the width of the bar
10:33 - chart in Matt cut live is 0.8 and so
10:39 - what we want to do for our second set of
10:40 - values is take what that number was a 20
10:43 - to it and then say we want to modify
10:47 - what X was in X values 1 so it's the
10:49 - same one so you could also write it
10:50 - separately looks a little bit more
10:53 - similar to this which was x times 2 plus
10:56 - 0.8 for the width of the column 4 again
11:01 - 2x in range
11:05 - so our last list comprehension is going
11:11 - to be calculating where the midpoint
11:13 - exists on two of these bars so I
11:18 - GBH to scrap this from the article lots
11:21 - of complicated stuff happening here but
11:24 - what we want to do is we want to look at
11:26 - the midpoint by calculating where is the
11:28 - location of the position of the x1 bar
11:33 - and the x2 bar right calculate that the
11:36 - average we divide by two would give us
11:39 - our value and then we're saying for X
11:42 - and X 2 in this tuple here and then
11:46 - we're also using a zip method to take
11:50 - two separate arrays and zip them into
11:53 - one array like that and so what you end
11:57 - up with in the end is an array of tuples
11:59 - yeah when you zip together two arrays
12:03 - which is why we're using a tuple here
12:05 - correct mm-hmm that's why so that's the
12:10 - last list comprehension that we have in
12:12 - here then we get to do the fun stuff or
12:14 - we take all of those things that we
12:17 - calculated beforehand and we're actually
12:19 - going to create our bar graph and our
12:21 - axes object with the labeling so what we
12:26 - just did here in the midpoints is that
12:28 - we defined the points where those ticks
12:31 - are going to be I just said that they're
12:33 - gonna be a set of years from 2010 to
12:37 - 2017 and you can see that I'm saying 2 X
12:40 - 6 to again that X values of midpoint and
12:43 - then I'm passing an array of values here
12:45 - now those x and y values that we
12:48 - calculated up above are now going to be
12:50 - pulled into this plot bar method here so
12:53 - you can see that the first argument is X
12:56 - I'll use one the second one is Y values
12:58 - one we're passing in the width of it
13:02 - again here - it's pretty cool about
13:04 - Google collab is that it has like
13:07 - intellisense in it as well so even if
13:09 - you haven't looked at this before you
13:11 - can
13:12 - and I'll actually give you the
13:15 - documentation about how to use this
13:18 - method that's actually one of the
13:20 - reasons why I always use Visual Studio
13:22 - code as it has the intellisense in it
13:25 - also here is that we have this plot
13:33 - title we're just giving the bar chart a
13:35 - name and then you have to call plot up
13:37 - show in order to show the plot that
13:39 - we've created and this is this is our
13:43 - handy dandy little visualization that we
13:45 - got here in the end so if you wanted to
13:49 - you could go back and compare the values
13:54 - that we had in each burg arrays remember
13:57 - that negative five we can see that right
13:58 - there and so then you can see how
14:02 - they've been adjusted so you can tell
14:04 - all right negative five got turned into
14:05 - fifteen because we added 20 to it etc
14:08 - etc and all of that stuff with the X
14:13 - values was to make this look very nice
14:16 - and clean have the two bars staying
14:19 - together you can try this out for
14:22 - yourself even collab and fiddle around
14:26 - and see what happens when you change
14:30 - awesome so we're actually about to dive
14:33 - a little bit more into the way that that
14:37 - zip function works but yeah well we'll
14:41 - get into how you do list comprehensions
14:43 - with zip functions in them so for for
14:49 - the chart of rainfall in two cities we
14:52 - had two data sets and we wanted to plot
14:54 - two different sets of X values and
14:56 - similarly to the one that so we was just
14:59 - going over there's a width of point
15:01 - eight which is the standard for the
15:03 - graphing library matplotlib which is
15:06 - what we've been using and what you'll
15:09 - actually be covering I think in the next
15:11 - section of data visualization with
15:14 - Python right yeah whoo so what you can
15:20 - do is you can actually make an
15:22 - adjustment to all of the X values
15:26 - so that they sit side by side rather
15:28 - than overlapping so we can use instead
15:35 - of doing these calculations like each by
15:37 - hand we can actually just use a list
15:38 - comprehension so we can say that the X
15:41 - values for the first set which would be
15:44 - the blue set I believe is gonna be 2
15:47 - times the index for each index I in the
15:51 - range of 1 to 4 because it's you know
15:55 - range 5 is again going to be 1 through 4
15:58 - I and then X values 2 is going to be 2
16:03 - times the index plus point 8 for the
16:06 - index for each index in range 5 so it's
16:11 - it's again just going to be off by one
16:12 - for each of those so to calculate each
16:19 - value we're going through and we're
16:21 - getting the values so it's actually 0
16:23 - starting with 0 oh my god I haven't used
16:26 - range in a while all right anyway I we
16:47 - can do the same kind of thing for the X
16:52 - check labels and then let's let's jump
16:54 - down I really want to get in yes
16:56 - zip situation a little down towards the
16:58 - bottom here um okay so if we want to
17:02 - bring together two lists so that we're
17:07 - affecting two lists at the same time and
17:11 - you know if each each first element in
17:17 - each one can be grouped together in each
17:19 - second element in each one can be
17:21 - grouped together so you have first
17:23 - elements second elements third elements
17:25 - etc etc I you can use the zip function
17:30 - so what you can do then is you can make
17:34 - changes to both first elements at the
17:37 - same time
17:39 - so we could do you know something over
17:41 - here it's like x-values mid points and
17:43 - we can say that the first element for
17:48 - the blue the blue bar set and the first
17:52 - element for the orange bar set divided
17:56 - by 2 for each of those when you zip
17:59 - those two lists together I'm hoping that
18:03 - made sense
18:04 - Zoey can you confirm that that made some
18:06 - yeah amount of sense this is gonna come
18:11 - up in the code challenge two is you can
18:14 - you can kind of break this up a bit
18:16 - right so yeah this demo here you can
18:19 - really think about this a couple parts
18:21 - so first we can have let's let's take
18:26 - the X values 1 and X I'll use 2 and sift
18:28 - them together so I'm going to call it
18:31 - combined my new variable is using the
18:35 - same method x values 1 look at that
18:38 - Britney or me X values - yep so now
18:46 - rather than having this in here I can
18:49 - just get rid of it maybe a few more
18:54 - lines of code but like I think it can be
18:56 - really clear this way so now again we
19:00 - have combined them so it's 1 and I can
19:05 - actually even I can print this I want it
19:07 - to so we can see what it looks like
19:09 - combined probably in here of course
19:14 - because I haven't run everything good
19:17 - Aires dip object all right so it's just
19:21 - going to show you what you can do I turn
19:25 - that convert that into a list
19:28 - so listen whisk function surrounding
19:32 - combined before you print it middle LSC
19:35 - mm-hmm Meriel for the win you can get a
19:47 - sense of what these values look like
19:50 - when they are combined together but
19:52 - before
19:53 - we've used our list comprehension to get
19:55 - the midpoints right now we know that
19:59 - here's X 1 here's X 2 X 1 2 yada yada
20:04 - yada yada ya and again what we're just
20:09 - doing is taking those two values so 0
20:13 - plus 0.8 dividing it by 2 for each one
20:18 - of those and these tuple sets here and
20:22 - this is what the outcome of that what
20:26 - yep
20:27 - so I think one thing that I got tripped
20:30 - up about with this comprehensions when I
20:33 - was first learning Python what is what
20:36 - names change what names stay the same
20:39 - this may be pretty obvious perfect in
20:41 - programming for a while and you know
20:43 - fortunately we have things like syntax
20:46 - highlighting that kind of calls some of
20:48 - this stuff out but I know for me I
20:53 - didn't necessarily realize like I was
20:55 - creating the name here
20:57 - maybe I'll yeah - we ran a real simple
21:00 - ones yeah where you can look at
21:03 - planetary planning exactly right so so
21:07 - again here we're creating a variable and
21:10 - setting it to the specific array same
21:13 - thing here this is you know going
21:15 - beardless comprehension and a new array
21:17 - comes out of that new list yeah I know I
21:21 - know you've been in JavaScript Flynn for
21:23 - coils there's such a thing as like numpy
21:27 - rays and I know lists so right here this
21:37 - yeah this is him is like a temporary
21:39 - temporary variable that we're just using
21:43 - right here in our list comprehensions
21:46 - but the keywords that we want to have
21:48 - our 4 so it's the merge you're like a
21:51 - for loop right so it's like each item
21:54 - like you want to do this calculation for
21:58 - each item in this list you know what we
22:02 - can actually turn that list
22:04 - comprehension directly into a for loop
22:07 - to show that it is actually the exact
22:09 - same thing alright now you're gonna have
22:12 - to walk me through this no worries no
22:14 - worries we're probably gonna need both
22:16 - the temperatures and temperatures
22:18 - adjusted okay right because that's gonna
22:20 - have to go from there exactly
22:23 - eagle eyes this is why pair programming
22:25 - is great okay so we've got our
22:32 - temperatures list we've got our list
22:35 - comprehension to get tensor suggested
22:38 - let's let's print out what temperature's
22:40 - adjusted just so we can see what that
22:41 - looks like
22:43 - yes you don't have to change it it's a
22:46 - ready list it's already gonna be a list
22:48 - when you create a list comprehension
22:52 - there we go
22:53 - all right awesome now let's do I let's
22:56 - do a twirl it
22:57 - well no leave it leave it leave it it's
22:59 - fine okay and what we're gonna do below
23:02 - that is we're gonna say for temp
23:07 - in temperatures so this should look
23:11 - familiar if you've done for loop before
23:14 - and then underneath we're gonna say uh
23:19 - temperature is adjusted to let's like
23:22 - create a new list hmm
23:24 - so equals blank new list or something
23:27 - right here that would probably have to
23:28 - be created outside all right before the
23:31 - for loop before the for loop we're just
23:36 - at you to set it equal to an empty list
23:39 - exactly and inside the for loop we're
23:42 - going to say um we can do Josh yeah
23:54 - we're gonna do dot append that's
23:57 - probably the easiest way of doing
23:58 - there's so many I remember and I always
24:02 - try to do it in JavaScript and I don't
24:04 - like that it's different yeah I know
24:06 - it's super annoying that it's not the
24:07 - same all right anyway we're doing dot
24:10 - append and we're gonna say dot append
24:11 - and we're gonna take the exact same
24:13 - thing that we
24:14 - had in the list comprehension so it's 10
24:16 - plus 20 all right and then outside of
24:21 - that for loop at the end we're going to
24:24 - print out temperature adjusted to and
24:28 - we'll see that we're gonna actually have
24:30 - that same list twice or willies we
24:32 - should unless we did something wrong so
24:39 - yeah that we actually can turn ellis
24:44 - comprehension directly into you a for
24:46 - loop because they are doing the exact
24:48 - same thing and a really good point here
24:51 - is that you can actually do nested lists
24:57 - in the same way so mm-hmm usually for
25:00 - nested lists i like to do for loops
25:02 - because i think they're a little bit
25:04 - clearer but it's good to know that you
25:06 - can do them as list comprehensions as
25:11 - well yeah and I have seen them plenty of
25:14 - times that way yeah um so with that
25:17 - should we dig into our code challenges
25:21 - yes get into the code challenges whoo
25:26 - all right caddy me and I'm pretty sure I
25:32 - went I did these last night just like
25:42 - you know refreshed everything all right
25:44 - awesome so the first thing we're gonna
25:48 - be doing is doubling every single
25:50 - element in this list in the list called
25:53 - nums so we're gonna create a new list
25:55 - called double numbs sounds like cookie
26:07 - dough Yemen double young ones actually
26:10 - some kind of gum I think that's double
26:18 - min okay gonna we're gonna create a list
26:25 - comprehension here and actually I
26:27 - I'd really love to see if anyone in the
26:29 - chat wants to try and figure out what
26:33 - we're gonna put in here
26:34 - what is double nums going to look like
26:36 - so we might have to wait a second and in
26:40 - the meantime we'll chat YouTube on my
26:47 - second screen okay I got it I got it oh
26:51 - parrot Mario's got an open she's
26:53 - listening to all of you she will pass me
26:56 - your secrets yes Bubble Yum bubblicious
27:02 - and Doublemint YUM if I could actually
27:09 - write a song it would alright um by the
27:18 - way we got folks from India and Kenya
27:20 - and Nigeria all over the world joining
27:23 - us incredible thank you all for joining
27:26 - yesterday I'm normally in Brooklyn but
27:31 - we're in New York at code Academy his
27:33 - office but today and we for the most
27:38 - most of this year I'm out in
27:42 - Massachusetts yeah
27:44 - Mario's my neighbor live in Brooklyn
27:49 - still sticking sticking it out here
27:54 - still good place to be especially now
27:58 - that the weather's getting warmer yep
28:02 - did make it down to Philadelphia last
28:05 - week first time I left my house during
28:06 - quarantine Wow
28:08 - I guess what's the city I should say
28:10 - during quarantine so that was exciting
28:13 - that's eat delicious Philadelphian food
28:20 - so I think folks are getting folks are a
28:25 - little bit shy here uh I want to see I
28:30 - was hoping somebody would jump in and
28:33 - offer the solution for double numbs but
28:38 - if we
28:39 - you aren't getting anything we can throw
28:42 - this together ourselves
28:43 - alright and maybe after UCSD this one
28:46 - you'll be like oh right that is exactly
28:48 - how I thought it would work
28:49 - yeah what's nice about these code
28:51 - challenges is that they start off unlike
28:54 - the easier end and then they get more
28:56 - complicated so yep you can you're gonna
28:59 - have yeah gonna have a bunch of zips
29:02 - towards the end all right so let's do it
29:04 - yeah
29:05 - all right so we are multiplying every
29:09 - number by two so what are we gonna call
29:12 - these numbers let's say num mama but
29:16 - again like so we mentioned this is
29:18 - totally arbitrary we could have called
29:20 - it YUM
29:21 - we could have called it gum we couldn't
29:23 - called it bubble it doesn't matter but
29:28 - let's let's call it num for the sake of
29:30 - consistency because the list is called
29:32 - nums that we're pulling from so we're
29:34 - gonna do num times 2 for num so what
29:43 - that does is it's it's multiplying each
29:46 - number by 2 for each number in nums and
29:52 - to make sure that we do this right we
29:55 - can either run our code but if we want
29:57 - to see it and make sure that we actually
29:59 - got what we're expecting we can always
30:01 - print that list so we're gonna print
30:02 - double nums sense yeah that's just
30:06 - saying that it doesn't have you print it
30:09 - but it has a console but yeah we can see
30:15 - that every number is doubled so 4
30:18 - becomes 8 in double nums a becomes 16
30:21 - etc awesome so sweet let's move on to
30:26 - the next one so it's really fun about
30:29 - these code challenges is that you get
30:30 - lots of practice
30:32 - mm-hmm all right so here we are we're
30:35 - going to do squares and this time we're
30:38 - going to be using a range so the range
30:41 - actually creates a list for us
30:46 - and in the case of range 11 we should
30:49 - see numbers 0 through 10 all right so
31:02 - we're going to be squaring and we can
31:05 - actually use either style of squaring I
31:08 - usually use the star star - mm-hmm
31:13 - variant which is actually what we're
31:15 - probably going to have to do and or not
31:17 - have to but it's it's just I like it a
31:19 - little bit better I don't know maybe
31:20 - it's a perfect a personal preference you
31:25 - can just copy no yeah all right so we're
31:32 - gonna create a new list called squares
31:35 - and we're gonna set that equal to and
31:40 - we're gonna use num again instead of
31:42 - some other arbitrary name and we're
31:48 - gonna do star star - and what that's
31:51 - going to give us is a square of each
31:55 - number for numb in nums sounds good I
32:08 - agree by the way there's a comment in
32:10 - the chat repetition helps when learning
32:13 - and I totally agree yes well there we go
32:27 - we can see we have the original numbers
32:29 - and then we have all of the squares yay
32:31 - and in fairness we got that green
32:34 - checkmark and if any point you're doing
32:38 - it for challenge on your own or any time
32:40 - that you're coding you're not sure
32:42 - remember that print or console log
32:45 - you're doing JavaScript or whatever it
32:47 - may be in your chosen language is your
32:49 - friend so you can make sure that you're
32:51 - seeing what's coming out not just
32:53 - relying on code Catanese lovely tests
32:56 - and
32:57 - error messages to help you so here we
33:02 - are again alright so this time we are
33:04 - adding 10 to each element in the list
33:07 - nums
33:09 - so so you want to try this one
33:11 - sure so I'm gonna go again with the word
33:16 - no since you say I'm gonna do plus 10
33:22 - for each num and no let's print it
33:31 - [Music]
33:35 - Wow alright anyone can get some learner
33:39 - participation in the next one right
33:43 - fingers crossed folks aren't as shy
33:45 - anymore I feel a little bit more
33:47 - confidence as you've been watching yeah
33:50 - I even felt a little nervous I know it's
33:57 - one of those things I felt like I was
33:58 - gonna do you know my range Fiasco all
34:01 - over again
34:06 - yep absolutely so so hopefully yeah not
34:16 - quite yet but we also have a delay
34:17 - remember so let me make sure that we've
34:22 - gotten to / - yep we're there now and
34:28 - hopefully somebody will give their idea
34:33 - of what they think / - is going to be
34:36 - equal to I'll start us off with just
34:40 - declaring the next one oh we got we got
34:46 - one submission here so um
34:51 - corvier I don't know if I'm pronouncing
34:53 - that right uh says numb / - hmm for
35:02 - num-nums
35:07 - well this is what I like in the Le
35:14 - alright and so she girl you got or sock
35:18 - girl I don't know if it's a girl or
35:19 - social girl uh it looks like you have
35:23 - the same response so yay awesome so yes
35:28 - as you may have seen for yourself and
35:30 - you can see here um number two or friend
35:34 - slash everyone I call that character I
35:37 - will be the dividing part be the
35:41 - calculation for each of that noun for
35:44 - each them in the list
35:46 - excellent alright let's move on to the
35:48 - next one oh it's Sasha okay or so she
35:55 - okay another thing concept that's taught
36:08 - and up in math but you got all the time
36:10 - in programming um so it's it's this
36:14 - really nifty method that actually gives
36:18 - us the remainder when you've divided two
36:21 - by two numbers so if you if you take you
36:24 - know ten and you do modulo two you're
36:28 - gonna get a remainder of zero but if you
36:32 - take 11 modulo two you're gonna get a
36:36 - remainder of one so it's actually a
36:38 - really helpful way of identifying odd
36:41 - versus even numbers which is one of the
36:43 - ways that folks use it all the time yes
36:46 - absolutely because then it really helps
36:48 - if you have write some kind of
36:50 - conditional statement that depends on
36:52 - whether something is or even you could
36:55 - do something different in your program
36:57 - based off of that so in addition to the
37:01 - ones that Marielle shared you can see
37:02 - some other examples of numbers getting
37:05 - divided and what their remainders would
37:07 - look like and yeah four meters not
37:11 - talked about it this dual oh definitely
37:13 - did not come up with my math classes
37:16 - yeah all right so let's find out how
37:20 - we're using modular here yeah so we're
37:24 - creating a new list called parity and
37:31 - it's either gonna contain a 1 or a 0 for
37:35 - each element of nums so how do we do
37:38 - that well using modulo I we're going to
37:43 - again like I mentioned using modular to
37:46 - identify even versus odd numbers so if
37:49 - you have an even number you should have
37:54 - a remainder of 0 when you divide that
37:57 - number by 2 and if you divide an odd
38:02 - number by 2 you're gonna have a
38:05 - remainder of 1 oh we already got a
38:07 - suggestion on what this is gonna look
38:09 - like so scroll let's do this all right
38:16 - we have num modulo 2 yep you're in front
38:25 - of your keyboard for a numb in nomes and
38:31 - I think we definitely need to print this
38:34 - one out if you get that green checkmark
38:44 - and you want to explore the code further
38:47 - you just stay in the LD and modify your
38:49 - code obviously the Run button will still
38:52 - come up but this way you know if you're
38:56 - like wait I want to really make sure
38:58 - that I got this idea before moving on
38:59 - you can modify your code don't worry it
39:03 - won't take that green checkmark away
39:04 - awesome
39:05 - all right so yay Lisa you can see that
39:08 - your code worked us and you can also see
39:13 - here so from nums we know that 4 8 16
39:19 - and 42 are all the even numbers and for
39:22 - each of those we now have a 0 in the
39:24 - same place I and for our odd numbers 15
39:28 - and 23
39:30 - each one has a 1 in that place so again
39:33 - modulo great great method to use when
39:37 - you might want to identify odds or evens
39:40 - there's also just you know figuring out
39:44 - whether numbers are divisible by any
39:45 - other specific number mm-hmm all right
39:48 - let's move on yes print is your friend I
39:52 - totally agree absolutely and it's a good
39:57 - reminder that were using Python 3 2 3 oh
40:01 - yeah the parentheses you're gonna get an
40:07 - error that was something you had to
40:09 - adjust you had to adjust you I had to
40:12 - adjust to that also because I actually
40:13 - started with Ruby before moving into
40:15 - Python so in Ruby you don't need and
40:18 - almost nobody uses parentheses yeah I
40:21 - also surprisingly still using console I
40:35 - just you know if it's like it's like
40:39 - being fluent in the language it's just
40:41 - like what you default to and then you
40:43 - have to yep code switch okay all right
40:47 - so let's move into add hello so you can
40:50 - do this not only with numbers you can do
40:52 - this with strings woohoo
40:54 - alright so in this case we have Seinfeld
40:58 - characters it looks like yes and we're
41:01 - gonna be saying hello to each of them so
41:06 - we're going to create a new list called
41:07 - greetings and we're going to be adding
41:13 - hello in front of each name in the list
41:16 - of names so let's see whether we can get
41:18 - learners to answer on this great
41:23 - Seinfeld episode when they find out that
41:26 - Kramer's first name is Cosmo
41:29 - doing a little bit remember we've been
41:32 - doing a bit of a Seinfeld rewatching in
41:34 - quarantine you know Jeff even though
41:37 - we're still in New York yeah
41:41 - I actually have a photo from when I was
41:46 - in high school outside of Tom's
41:47 - restaurant which is that like oh yes
41:50 - aren't they using it you know go to
41:52 - school in the memory something you know
41:56 - about that yeah yeah my friends and I it
42:00 - was when I did that um they did like a
42:02 - summer program from high school students
42:03 - at Columbia so my friends and I were in
42:05 - it really we all got to identify with
42:08 - one of the characters I was Elaine
42:13 - which is funny cause my mom thinks she's
42:15 - such an Elaine so how it works
42:21 - so she girl says that was a good episode
42:23 - there are no bad Seinfeld episodes
42:25 - agreed but still no takers on how we
42:32 - create this greetings list so I guess
42:35 - let's just do it yeah I think we have
42:37 - some more string one so we can warm up
42:39 - with this one you can see how it works
42:41 - Yemen can add more absolutely all right
42:44 - so let's start with we're gonna put that
42:48 - greeting hello you can even copy paste
42:50 - from oh okay mmm-hmm and with a space
42:54 - yes employees remember that space and
43:00 - outside of the quotes you're gonna put a
43:02 - plus sign and because that list is
43:08 - called names that we're pulling from
43:10 - we're just gonna call it name for name
43:15 - in names for names names well and so
43:22 - don't forget to print yes and if you're
43:26 - new to working with strings and Python
43:30 - yet lots of material on that and our
43:34 - pace on 3-course I definitely recommend
43:41 - also fun fact if you want to run your
43:45 - code without clicking the Run button
43:47 - there's an if he command return or I
43:50 - think on PCs control return is
43:54 - a time-saver we also have other key
43:57 - bindings which I believe if you yeah you
43:59 - hover over you can you can see them see
44:01 - those keyboard shortcuts um so yeah we
44:05 - got hello Elaine hello George hello
44:07 - Jerry and hello a Cosmo so we've said
44:09 - hello to every single character of our
44:12 - main characters in Seinfeld's somebody
44:18 - just said hello in the chat at the same
44:20 - time I've been reading a lot of good
44:29 - night me recently yet let's move into
44:36 - the next one alright so this is another
44:39 - really fun string method hello Newman
44:42 - you're right we didn't get new alright
44:47 - so first character we only want to get a
44:51 - specific character from a string so what
44:54 - do we do we can use a really fun
44:57 - indexing method which I think can also
45:00 - be it's also called slicing um so what
45:04 - we're doing is we're just grabbing the
45:08 - yep we got a demo right there don't
45:12 - worry about there um yes so if we if we
45:18 - get the first element of my string it
45:25 - should be which is which is represented
45:28 - by 0 it's the it's at index 0 the first
45:32 - element is always that I'm saying yes so
45:36 - that's gonna be a capital W and if we go
45:40 - into my string and we count 0 1 2 2 we
45:45 - should get an O so we see that we get
45:48 - that oh and if we go to my string and we
45:52 - start again and we go 0 1 2 3 4 we
45:57 - should get an exclamation point so
46:01 - that's why we have W Oh an exclamation
46:04 - point getting printed over in our
46:08 - uh terminal right there yeah yeah so I
46:14 - mean I think what was always helpful for
46:16 - me it's like strings are basically just
46:18 - lists right there lists of characters I
46:23 - like thinking of it as characters that
46:26 - are strung like beads on a necklace you
46:30 - see ever learn how to code nice metaphor
46:33 - I couldn't there yes it's helpful to
46:36 - think about that because then you can do
46:37 - the same type of methods on string on
46:41 - strings that you would do on this yep oh
46:45 - and I do want to note that in the
46:48 - example there you can see that and you
46:51 - might have noticed when Zoey originally
46:53 - printed before she changed the third
46:57 - print statement to my string slice for
47:02 - there was nothing getting printed after
47:05 - w100 and that's because there is a space
47:07 - that was at that particular point within
47:11 - this string yeah so just to clarify yeah
47:15 - a space is still considered a character
47:18 - in a string it still takes up memory in
47:21 - the computer it's not just like genus
47:25 - yeah I can't forget about those those
47:28 - spaces same with like you can have new
47:31 - lines all these different things all
47:33 - right so let's get the first character
47:35 - in each of these names um so what we're
47:43 - gonna do is we're gonna say name and
47:49 - then open brackets zero because that's
47:55 - gonna be the first and then outside of
48:00 - the brackets the first set I should say
48:02 - um the intercept I'm gonna say for name
48:05 - Oh
48:07 - we even got the full thing here yes name
48:11 - sliced 0 for name in names
48:14 - thank you Manuel's oh and Michael Cruz
48:18 - really appreciates what you said about
48:21 - strings are like
48:22 - lists of characters he said boom I've
48:25 - never heard that before yeah it's
48:27 - something that I don't think he's like
48:29 - often often taught I think it's a great
48:31 - way of of thinking about it and can
48:33 - really help you again understand how you
48:37 - can use the same types of methods on
48:40 - strings like you would with lists like
48:42 - we're doing right now with this
48:42 - comprehensions right there Cutlass
48:44 - apprehensions do you think you can only
48:46 - do it with a list but oh so sure you can
48:48 - do it with a string well it's it's still
48:51 - a list of strings
48:55 - [Laughter]
49:02 - anyways I would be curious to see if you
49:05 - could do this you could probably do a
49:06 - comprehension just don't like the name
49:08 - itself right all right so let's print
49:12 - that out let's see if this works
49:15 - thank you sir girl yep you got it to e j
49:20 - g JC that's what we would have expected
49:24 - so we're good to go
49:29 - we're straight we have sighs um so to
49:34 - find the size the number which is the
49:38 - number of characters in a string we can
49:41 - use the Len function which gives us the
49:44 - length of the string again just like you
49:52 - know so it looks like we're creating a
49:56 - new list same lengths and then it
49:58 - contains the size of each name in the
50:00 - list of names oh we got a really good
50:03 - question from Michael crews by the way
50:05 - uh so he's asking so this is actually in
50:09 - the previous exercise so why is it named
50:13 - slice 0 and not names slice 0 so that's
50:17 - a really great question
50:18 - so what we're referring to with name is
50:24 - each element in that list names so it
50:29 - actually refers to each individual name
50:31 - so what we want isn't just the first
50:35 - element
50:35 - in that entire list which would be
50:37 - Elaine what we want is the first
50:40 - character of each string so each name in
50:46 - that list so what we want is actually
50:49 - the e the G the J and the C so all of
50:53 - the capital letters that exist in that
50:55 - list yeah so like we mentioned each one
50:59 - of these can be considered kind of like
51:00 - a listen to themselves so we can use
51:02 - that slice method on it but to Mario's
51:06 - point if we were to change this to names
51:09 - we're no longer looking at each
51:12 - character in each string now we're just
51:15 - looking at each entire string in the
51:18 - list so I actually I want to print this
51:20 - out so that we can see what happens
51:21 - because wait before you before you run
51:24 - that code I just want to explain what we
51:26 - expect to happen so in the place of each
51:30 - name in that list of names we're going
51:35 - to expect to see the first name in that
51:38 - entire list so what we should see is
51:40 - Elaine Elaine Elaine Elaine and now
51:44 - let's run this code and let's see
51:45 - whether I got that right boom there we
51:52 - go all right and we can move on again
52:02 - like you know you can you can take the
52:05 - moment to do like what Marielle to
52:07 - reason it out and think about okay right
52:09 - what is this actually asking like if I'm
52:12 - saying names zero what does that mean
52:15 - okay that's gonna be a lien but I'm
52:17 - still saying it for each element in that
52:19 - list mm-hmm and you know that's what it
52:22 - is so you can reason out and you can
52:24 - also you know we could put it down first
52:26 - and then like let's let's see what
52:28 - happens yeah and this also brings up a
52:30 - really good point that you can actually
52:32 - substitute literally anything for each
52:36 - element like we could just create a new
52:38 - string and make that what exists for
52:42 - every element we could put a number for
52:45 - every element we can put any any kind of
52:48 - data there
52:49 - yes we could just have a list of Numan
52:54 - but that's that's also a really a really
52:57 - great point yeah all right next one this
53:05 - is where we're getting the the length of
53:08 - each string so so you want to take this
53:10 - one away
53:10 - sure so we are creating a new list
53:14 - called length equal to I'm going to say
53:22 - you're gonna use the Len method and I'm
53:25 - going to use name again so the length of
53:28 - name for each name in the list names
53:33 - names grace blanks run and there we go
53:42 - excellent she's saying even split
53:45 - between 6 6 & 5 5 yeah all right should
53:52 - we try to do one more and then let's do
53:55 - yeah let's do one more if folks have
53:57 - questions please feel free to ask them
54:00 - in the chat at this point and then we're
54:02 - going to just you know let you know
54:04 - details about where to find more events
54:08 - and such things
54:14 - yeah and Jesus or hey Zeus I just want
54:18 - to say you say you suck at code but
54:21 - everybody sucks at code when they start
54:23 - and it's all about practicing it's all
54:27 - about learning and practicing and the
54:29 - more you do it the better you get at it
54:30 - yeah no one you know comes into this
54:33 - world as a natural-born coder no one no
54:36 - one has that facility so definitely be
54:40 - kind to yourself and continue practicing
54:43 - continue to do code challenges like this
54:46 - projects like that and take your time
54:48 - forget it all right so let's do one more
54:54 - of these and then we'll we'll get into
54:55 - wrapping up I like that this goes
54:57 - through the different data types - right
55:00 - we started with integers
55:02 - we moved on to strings and now we're
55:05 - looking at how we could use a boolean
55:08 - data type as well operations so it looks
55:17 - like you can use the not operator to
55:20 - flip the value of a boolean so a becomes
55:25 - true becomes false what the instructions
55:30 - are asking us is to create a new list
55:32 - named opposite that contains the
55:34 - opposite boolean value for each element
55:37 - in the list so we would expect our new
55:39 - list to be false true false um yep
55:49 - do you want to get a second to see if
55:52 - folks have any thoughts on how they yeah
55:55 - sure and actually while while we're
55:58 - waiting for folks
55:59 - Michael Cruz is asking what's the
56:01 - difference between Coke ad imme premium
56:03 - versus pro I noticed your screen it's it
56:15 - was it was a experimental product that
56:18 - the lessons from which we are putting
56:22 - into our product so keep an eye out for
56:25 - some some changes to happen to the
56:29 - platform and maybe the upcoming months
56:32 - so it's it's a no longer no longer a
56:38 - thing but it's the throat Pro is going
56:41 - to get a premium experience experience
56:46 - yeah um all right so I'm not seeing any
56:52 - suggestions on this but that's okay ISO
56:56 - real quick we're gonna do um and because
57:02 - this is a list of boolean's we're gonna
57:04 - call each element boolean I think so not
57:08 - boolean and what that's gonna do is flip
57:12 - the value of what that value is for
57:16 - boolean in boolean's
57:21 - [Laughter]
57:25 - let's print that out real quick right
57:31 - also and we see the opposites
57:36 - excellent all right well thank you
57:38 - everyone for joining and if you want to
57:42 - catch Oh actually Manuel has has
57:46 - something here was opposite is not Gould
57:48 - for bull and billions and I would love
57:50 - for that to be a thing that we could do
57:52 - but unfortunately because bull is the
57:54 - actual Python encoded type for boolean
57:58 - it unfortunately would not work errors
58:08 - is funny actually
58:15 - yep it's a built-in data type so it's
58:18 - it's gonna not work out the way that you
58:21 - wanted to yes and make them safe and
58:27 - you're not overwrite any built-in
58:41 - yeah so thank you everyone you can take
58:43 - a look at code Academy I think it's is
58:47 - it Kadim e / events I can't see on your
58:49 - buzzer I'm sorry caddy me calm / events
58:54 - you can find a whole bunch more events
58:57 - in the series next week we actually get
58:59 - into visualization a little bit more
59:02 - than we did this time yeah wrapping up
59:05 - the Python syntax yes I wanted to spend
59:08 - some time on list comprehension as you
59:10 - can see they're super useful for your
59:12 - code but they can also get a bit complex
59:15 - it's a good thing to have a bit of
59:17 - hand-holding with as you start learning
59:18 - them as I said they may be nervous when
59:21 - I first started programming
59:23 - uh Michael Cruz is asking when do you
59:26 - use list comprehension when you useless
59:28 - comprehensions how does the computer
59:30 - know you are using a singular variable
59:33 - can you use any name I actually was
59:35 - confused by that also when I was first
59:36 - getting started I you don't have to use
59:40 - a single singular name the computer has
59:42 - no idea of what the name is as long as
59:45 - it's not a built-in data type it just
59:47 - knows that you're naming it something
59:48 - it's more for your sake that you know
59:52 - what you're referring to within a list
59:54 - yeah so that's a really great question
59:57 - show that really fast it's just
60:01 - it recognizes this specific pattern so I
60:04 - just changed it to cats mm-hmm or you
60:09 - know Oh what is it is it fish fish that
60:12 - doesn't have a plural fish's know what
60:14 - those fishes shows you how long so as
60:21 - long as it's it's the same and it's
60:25 - distinct from what the name of the list
60:28 - is yeah so just again really quickly we
60:34 - have a session this Thursday which I
60:37 - sell to Marielle for those who've been
60:40 - with us for the past couple weeks you
60:42 - know that Tuesdays have been for all
60:44 - live streamed on YouTube and Thursday we
60:48 - do a more intimate session with pro
60:50 - learners and it's going to be a Q&A so
60:54 - again bring your questions to the
60:57 - Thursday session I would definitely
60:58 - recommend if you're here today coming
61:00 - with us on Thursday to do the rest of
61:03 - these code challenges we got halfway
61:05 - through so you can finish up the other
61:07 - ten on your own you get more complicated
61:10 - so if you have any questions about those
61:12 - last ten here we'd be more than happy to
61:17 - answer them on Thursday but we could
61:20 - also generally talk more about data
61:22 - visualization questions that you may
61:24 - have about that subject in data science
61:26 - or company ever you want all right thank
61:30 - you everyone
61:30 - yeah thank you everyone have a great day
61:33 - I have a great day

Cleaned transcript:

it's saying setting up webinars or custom streaming service it so your life all right we are live I am going to hey everyone thank you so much for joining us today this is another edition of code Academy live I am so a baktun I am a frequent product manager here at code Academy and we're going to be going continuing our journey through the visualized data with pythons towpath and I am joined here today with Marielle hey there I'm Marielle Frank I'm a senior curriculum developer here at code Academy and yeah I'm really excited to dig into the way that we use list comprehensions in Python so I'm actually one of the people who focuses on the data science area most specifically machine learning zoe actually has more experience and engage with visualization than i do but but i definitely can help out with questions related to data science in general and python of course yeah all right so with that should be dig in yeah so I'm gonna share my screen so fun facts for those who were with us in the first one this content comes from an old intensive that needs to have that was one of the first intensive I worked on so this is the skill path you can join us in your browser will be going through today is the list comprehensions article that's right here and we'll be going through the list comprehensions code challenge right here I'm super excited about this because it's been a long time since I've programmed in Python and let's cut branches I remember being super tricky when I first started so I'm glad Marielle is here with her expertise Sumeria why don't you walk us through the article sure alright so um we have an article here on list comprehensions I so they're a really great way of creating lists in Python and it's also sort of a shortcut to doing for loops so you can find most of the same stuff in that video if you want to go through that later but we're gonna skip the video for now so the basic idea is when we're doing data analysis we work with lists so ordered sets of data and we need to perform all kinds of computations on them so this can be on numbers this can be on strings this can be on different types of data so if we want to perform some operation on every single element in a list you know there there are multiple ways of doing this so it could be that we want to you know manually go in and modify every single variable but that's really timeconsuming and what if this is a list that's it goes on for if that was in elements it's not really a really great way of doing it real so unfortunately Python gives us a shortcut which is list comprehensions so let's say we have this list of temperatures and it's you know negative 5 29 26 negative 7 etc uh if we want to adjust the temperature you know if we're in a situation we found out our lab thermometer is actually consistently reporting 20 degrees lower than it should be we can adjust all of the temperatures at once using a list comprehension so we can look at this where it says temperatures and then it says temperatures adjusted what we can do is we can say for each temperature add 20 degrees for every single temperature in that list of temperatures so what you're doing is you're modifying an existing list but by making a copy of it so you don't actually affect the original list so the the order is you take an element in temperatures you're going to be doing this to every single element you're naming that element temp you're storing the value of temp plus 20 in a new list that's called temperatures adjusted and then you're repeating the steps one through three for every single value in temperatures so if you if you actually just wanted to create a copy you could technically just do that same thing except get rid of that plus 20 so it could be a temp for temp in temperatures but you know that's not necessarily the most convenient way of making a duplicate of the list so not something I would recommend but it's good to know that that's actually what you're doing so we can use list comprehensions in all different kinds of scenarios including a data visualization situations so in the example that we have here we're creating a bar chart using matplotlib and you know if we want to make an adjustment you know say from Fahrenheit to Celsius or vice versa we can add in that conversion within our list comprehension so we can say do this operation to temp for each temperature in temperatures and then what you get is the modified list so that's pretty neat and I think this is the moment where we're actually going to go through and do a quick demo of how you would get that that sort of chart right before we get into the rainfall yeah yeah let's do it um so before I go through this quick demo and I'm gonna increase my screen so we can actually read it all here does that uh I think so it might be good if it's a slightly larger at size 175 percent so before I get into this demo I just want plug Wilko lab notebooks so if you are with us last week and went through the project with sunny and Carolyn they mentioned how to do I believe how to install Jupiter netbooks interpreter notebooks are super common software data scientists use it's a super common software that data scientists use that's basically a virtual notebook that's built off of cells so this looks pretty different if you're used to writing code in an IDE like on code Academy you're used to just like one file you run it on once it's cool about this in google colab in jupiter notebooks is that you can run each piece of your stuff individually so I can friend this piece you can see the little play button over here is what I click stops running I can click the second piece it doesn't mean that you have to make sure to click yourself in order and you can also make sure that you can run them all run on the focus cell just in case so the plug for collab is that you don't have to download anything it is part of the Google suite so if you already have a Google account then you have access to collab and highly recommend digging into that digging into that stuff because I know also like installations anaconda anyways to the point of epidemic so what we're doing here is we are importing the map hot live charting library no worries if this is totally brandnew actually like kind of skipping ahead to next week which is when we actually get into the date of this stuff but we figured to talk about it now so I took the content from the article we have that temperatures array right here and then we have our adjusted or rate air temperatures adjusted array we're reusing this list comprehension to modify the temperatures by 20 degrees so 10 plus 24 10 in temperatures and this is what it would look like now so you can see in the comments so when it comes to doing the data visualization we want to think about what is going to be our visualization choice what we were looking at our charts let's imagine for a second that we wanted to compare how differently it looks with the original temperatures we got in the adjusted temperature so we want one color bar for the original temperature this is the second color bar to the second one we have an X and y axis and on the y axis we would want to see the temperature values right and then on the x axis it's really just a matter of kind of like moving them apart so that we can see the adjusted ones over time so ivory saved our temperatures here to Y values kind of an unnecessary step I'm sure I could clean it up no worries this interesting thing comes in where this is back in the article 2 we can plot the horizontal positions of the bars both sets of bars using list comprehensions so we know that we have eight values and we want to space them out by two and so we can take this is a list comprehension right here we're just using the range function to calculate an array from what is it Mary L 1 0 2 7 tell me sorry I'm I'm getting remonster okay should be that should be from 1 to 7 once so a range a range function will give you all everything from default starting at 1 up to right B for whatever number you pick in there cool so a bar chart the width of the bar chart in Matt cut live is 0.8 and so what we want to do for our second set of values is take what that number was a 20 to it and then say we want to modify what X was in X values 1 so it's the same one so you could also write it separately looks a little bit more similar to this which was x times 2 plus 0.8 for the width of the column 4 again 2x in range so our last list comprehension is going to be calculating where the midpoint exists on two of these bars so I GBH to scrap this from the article lots of complicated stuff happening here but what we want to do is we want to look at the midpoint by calculating where is the location of the position of the x1 bar and the x2 bar right calculate that the average we divide by two would give us our value and then we're saying for X and X 2 in this tuple here and then we're also using a zip method to take two separate arrays and zip them into one array like that and so what you end up with in the end is an array of tuples yeah when you zip together two arrays which is why we're using a tuple here correct mmhmm that's why so that's the last list comprehension that we have in here then we get to do the fun stuff or we take all of those things that we calculated beforehand and we're actually going to create our bar graph and our axes object with the labeling so what we just did here in the midpoints is that we defined the points where those ticks are going to be I just said that they're gonna be a set of years from 2010 to 2017 and you can see that I'm saying 2 X 6 to again that X values of midpoint and then I'm passing an array of values here now those x and y values that we calculated up above are now going to be pulled into this plot bar method here so you can see that the first argument is X I'll use one the second one is Y values one we're passing in the width of it again here it's pretty cool about Google collab is that it has like intellisense in it as well so even if you haven't looked at this before you can and I'll actually give you the documentation about how to use this method that's actually one of the reasons why I always use Visual Studio code as it has the intellisense in it also here is that we have this plot title we're just giving the bar chart a name and then you have to call plot up show in order to show the plot that we've created and this is this is our handy dandy little visualization that we got here in the end so if you wanted to you could go back and compare the values that we had in each burg arrays remember that negative five we can see that right there and so then you can see how they've been adjusted so you can tell all right negative five got turned into fifteen because we added 20 to it etc etc and all of that stuff with the X values was to make this look very nice and clean have the two bars staying together you can try this out for yourself even collab and fiddle around and see what happens when you change awesome so we're actually about to dive a little bit more into the way that that zip function works but yeah well we'll get into how you do list comprehensions with zip functions in them so for for the chart of rainfall in two cities we had two data sets and we wanted to plot two different sets of X values and similarly to the one that so we was just going over there's a width of point eight which is the standard for the graphing library matplotlib which is what we've been using and what you'll actually be covering I think in the next section of data visualization with Python right yeah whoo so what you can do is you can actually make an adjustment to all of the X values so that they sit side by side rather than overlapping so we can use instead of doing these calculations like each by hand we can actually just use a list comprehension so we can say that the X values for the first set which would be the blue set I believe is gonna be 2 times the index for each index I in the range of 1 to 4 because it's you know range 5 is again going to be 1 through 4 I and then X values 2 is going to be 2 times the index plus point 8 for the index for each index in range 5 so it's it's again just going to be off by one for each of those so to calculate each value we're going through and we're getting the values so it's actually 0 starting with 0 oh my god I haven't used range in a while all right anyway I we can do the same kind of thing for the X check labels and then let's let's jump down I really want to get in yes zip situation a little down towards the bottom here um okay so if we want to bring together two lists so that we're affecting two lists at the same time and you know if each each first element in each one can be grouped together in each second element in each one can be grouped together so you have first elements second elements third elements etc etc I you can use the zip function so what you can do then is you can make changes to both first elements at the same time so we could do you know something over here it's like xvalues mid points and we can say that the first element for the blue the blue bar set and the first element for the orange bar set divided by 2 for each of those when you zip those two lists together I'm hoping that made sense Zoey can you confirm that that made some yeah amount of sense this is gonna come up in the code challenge two is you can you can kind of break this up a bit right so yeah this demo here you can really think about this a couple parts so first we can have let's let's take the X values 1 and X I'll use 2 and sift them together so I'm going to call it combined my new variable is using the same method x values 1 look at that Britney or me X values yep so now rather than having this in here I can just get rid of it maybe a few more lines of code but like I think it can be really clear this way so now again we have combined them so it's 1 and I can actually even I can print this I want it to so we can see what it looks like combined probably in here of course because I haven't run everything good Aires dip object all right so it's just going to show you what you can do I turn that convert that into a list so listen whisk function surrounding combined before you print it middle LSC mmhmm Meriel for the win you can get a sense of what these values look like when they are combined together but before we've used our list comprehension to get the midpoints right now we know that here's X 1 here's X 2 X 1 2 yada yada yada yada ya and again what we're just doing is taking those two values so 0 plus 0.8 dividing it by 2 for each one of those and these tuple sets here and this is what the outcome of that what yep so I think one thing that I got tripped up about with this comprehensions when I was first learning Python what is what names change what names stay the same this may be pretty obvious perfect in programming for a while and you know fortunately we have things like syntax highlighting that kind of calls some of this stuff out but I know for me I didn't necessarily realize like I was creating the name here maybe I'll yeah we ran a real simple ones yeah where you can look at planetary planning exactly right so so again here we're creating a variable and setting it to the specific array same thing here this is you know going beardless comprehension and a new array comes out of that new list yeah I know I know you've been in JavaScript Flynn for coils there's such a thing as like numpy rays and I know lists so right here this yeah this is him is like a temporary temporary variable that we're just using right here in our list comprehensions but the keywords that we want to have our 4 so it's the merge you're like a for loop right so it's like each item like you want to do this calculation for each item in this list you know what we can actually turn that list comprehension directly into a for loop to show that it is actually the exact same thing alright now you're gonna have to walk me through this no worries no worries we're probably gonna need both the temperatures and temperatures adjusted okay right because that's gonna have to go from there exactly eagle eyes this is why pair programming is great okay so we've got our temperatures list we've got our list comprehension to get tensor suggested let's let's print out what temperature's adjusted just so we can see what that looks like yes you don't have to change it it's a ready list it's already gonna be a list when you create a list comprehension there we go all right awesome now let's do I let's do a twirl it well no leave it leave it leave it it's fine okay and what we're gonna do below that is we're gonna say for temp in temperatures so this should look familiar if you've done for loop before and then underneath we're gonna say uh temperature is adjusted to let's like create a new list hmm so equals blank new list or something right here that would probably have to be created outside all right before the for loop before the for loop we're just at you to set it equal to an empty list exactly and inside the for loop we're going to say um we can do Josh yeah we're gonna do dot append that's probably the easiest way of doing there's so many I remember and I always try to do it in JavaScript and I don't like that it's different yeah I know it's super annoying that it's not the same all right anyway we're doing dot append and we're gonna say dot append and we're gonna take the exact same thing that we had in the list comprehension so it's 10 plus 20 all right and then outside of that for loop at the end we're going to print out temperature adjusted to and we'll see that we're gonna actually have that same list twice or willies we should unless we did something wrong so yeah that we actually can turn ellis comprehension directly into you a for loop because they are doing the exact same thing and a really good point here is that you can actually do nested lists in the same way so mmhmm usually for nested lists i like to do for loops because i think they're a little bit clearer but it's good to know that you can do them as list comprehensions as well yeah and I have seen them plenty of times that way yeah um so with that should we dig into our code challenges yes get into the code challenges whoo all right caddy me and I'm pretty sure I went I did these last night just like you know refreshed everything all right awesome so the first thing we're gonna be doing is doubling every single element in this list in the list called nums so we're gonna create a new list called double numbs sounds like cookie dough Yemen double young ones actually some kind of gum I think that's double min okay gonna we're gonna create a list comprehension here and actually I I'd really love to see if anyone in the chat wants to try and figure out what we're gonna put in here what is double nums going to look like so we might have to wait a second and in the meantime we'll chat YouTube on my second screen okay I got it I got it oh parrot Mario's got an open she's listening to all of you she will pass me your secrets yes Bubble Yum bubblicious and Doublemint YUM if I could actually write a song it would alright um by the way we got folks from India and Kenya and Nigeria all over the world joining us incredible thank you all for joining yesterday I'm normally in Brooklyn but we're in New York at code Academy his office but today and we for the most most of this year I'm out in Massachusetts yeah Mario's my neighbor live in Brooklyn still sticking sticking it out here still good place to be especially now that the weather's getting warmer yep did make it down to Philadelphia last week first time I left my house during quarantine Wow I guess what's the city I should say during quarantine so that was exciting that's eat delicious Philadelphian food so I think folks are getting folks are a little bit shy here uh I want to see I was hoping somebody would jump in and offer the solution for double numbs but if we you aren't getting anything we can throw this together ourselves alright and maybe after UCSD this one you'll be like oh right that is exactly how I thought it would work yeah what's nice about these code challenges is that they start off unlike the easier end and then they get more complicated so yep you can you're gonna have yeah gonna have a bunch of zips towards the end all right so let's do it yeah all right so we are multiplying every number by two so what are we gonna call these numbers let's say num mama but again like so we mentioned this is totally arbitrary we could have called it YUM we could have called it gum we couldn't called it bubble it doesn't matter but let's let's call it num for the sake of consistency because the list is called nums that we're pulling from so we're gonna do num times 2 for num so what that does is it's it's multiplying each number by 2 for each number in nums and to make sure that we do this right we can either run our code but if we want to see it and make sure that we actually got what we're expecting we can always print that list so we're gonna print double nums sense yeah that's just saying that it doesn't have you print it but it has a console but yeah we can see that every number is doubled so 4 becomes 8 in double nums a becomes 16 etc awesome so sweet let's move on to the next one so it's really fun about these code challenges is that you get lots of practice mmhmm all right so here we are we're going to do squares and this time we're going to be using a range so the range actually creates a list for us and in the case of range 11 we should see numbers 0 through 10 all right so we're going to be squaring and we can actually use either style of squaring I usually use the star star mmhmm variant which is actually what we're probably going to have to do and or not have to but it's it's just I like it a little bit better I don't know maybe it's a perfect a personal preference you can just copy no yeah all right so we're gonna create a new list called squares and we're gonna set that equal to and we're gonna use num again instead of some other arbitrary name and we're gonna do star star and what that's going to give us is a square of each number for numb in nums sounds good I agree by the way there's a comment in the chat repetition helps when learning and I totally agree yes well there we go we can see we have the original numbers and then we have all of the squares yay and in fairness we got that green checkmark and if any point you're doing it for challenge on your own or any time that you're coding you're not sure remember that print or console log you're doing JavaScript or whatever it may be in your chosen language is your friend so you can make sure that you're seeing what's coming out not just relying on code Catanese lovely tests and error messages to help you so here we are again alright so this time we are adding 10 to each element in the list nums so so you want to try this one sure so I'm gonna go again with the word no since you say I'm gonna do plus 10 for each num and no let's print it Wow alright anyone can get some learner participation in the next one right fingers crossed folks aren't as shy anymore I feel a little bit more confidence as you've been watching yeah I even felt a little nervous I know it's one of those things I felt like I was gonna do you know my range Fiasco all over again yep absolutely so so hopefully yeah not quite yet but we also have a delay remember so let me make sure that we've gotten to / yep we're there now and hopefully somebody will give their idea of what they think / is going to be equal to I'll start us off with just declaring the next one oh we got we got one submission here so um corvier I don't know if I'm pronouncing that right uh says numb / hmm for numnums well this is what I like in the Le alright and so she girl you got or sock girl I don't know if it's a girl or social girl uh it looks like you have the same response so yay awesome so yes as you may have seen for yourself and you can see here um number two or friend slash everyone I call that character I will be the dividing part be the calculation for each of that noun for each them in the list excellent alright let's move on to the next one oh it's Sasha okay or so she okay another thing concept that's taught and up in math but you got all the time in programming um so it's it's this really nifty method that actually gives us the remainder when you've divided two by two numbers so if you if you take you know ten and you do modulo two you're gonna get a remainder of zero but if you take 11 modulo two you're gonna get a remainder of one so it's actually a really helpful way of identifying odd versus even numbers which is one of the ways that folks use it all the time yes absolutely because then it really helps if you have write some kind of conditional statement that depends on whether something is or even you could do something different in your program based off of that so in addition to the ones that Marielle shared you can see some other examples of numbers getting divided and what their remainders would look like and yeah four meters not talked about it this dual oh definitely did not come up with my math classes yeah all right so let's find out how we're using modular here yeah so we're creating a new list called parity and it's either gonna contain a 1 or a 0 for each element of nums so how do we do that well using modulo I we're going to again like I mentioned using modular to identify even versus odd numbers so if you have an even number you should have a remainder of 0 when you divide that number by 2 and if you divide an odd number by 2 you're gonna have a remainder of 1 oh we already got a suggestion on what this is gonna look like so scroll let's do this all right we have num modulo 2 yep you're in front of your keyboard for a numb in nomes and I think we definitely need to print this one out if you get that green checkmark and you want to explore the code further you just stay in the LD and modify your code obviously the Run button will still come up but this way you know if you're like wait I want to really make sure that I got this idea before moving on you can modify your code don't worry it won't take that green checkmark away awesome all right so yay Lisa you can see that your code worked us and you can also see here so from nums we know that 4 8 16 and 42 are all the even numbers and for each of those we now have a 0 in the same place I and for our odd numbers 15 and 23 each one has a 1 in that place so again modulo great great method to use when you might want to identify odds or evens there's also just you know figuring out whether numbers are divisible by any other specific number mmhmm all right let's move on yes print is your friend I totally agree absolutely and it's a good reminder that were using Python 3 2 3 oh yeah the parentheses you're gonna get an error that was something you had to adjust you had to adjust you I had to adjust to that also because I actually started with Ruby before moving into Python so in Ruby you don't need and almost nobody uses parentheses yeah I also surprisingly still using console I just you know if it's like it's like being fluent in the language it's just like what you default to and then you have to yep code switch okay all right so let's move into add hello so you can do this not only with numbers you can do this with strings woohoo alright so in this case we have Seinfeld characters it looks like yes and we're gonna be saying hello to each of them so we're going to create a new list called greetings and we're going to be adding hello in front of each name in the list of names so let's see whether we can get learners to answer on this great Seinfeld episode when they find out that Kramer's first name is Cosmo doing a little bit remember we've been doing a bit of a Seinfeld rewatching in quarantine you know Jeff even though we're still in New York yeah I actually have a photo from when I was in high school outside of Tom's restaurant which is that like oh yes aren't they using it you know go to school in the memory something you know about that yeah yeah my friends and I it was when I did that um they did like a summer program from high school students at Columbia so my friends and I were in it really we all got to identify with one of the characters I was Elaine which is funny cause my mom thinks she's such an Elaine so how it works so she girl says that was a good episode there are no bad Seinfeld episodes agreed but still no takers on how we create this greetings list so I guess let's just do it yeah I think we have some more string one so we can warm up with this one you can see how it works Yemen can add more absolutely all right so let's start with we're gonna put that greeting hello you can even copy paste from oh okay mmmhmm and with a space yes employees remember that space and outside of the quotes you're gonna put a plus sign and because that list is called names that we're pulling from we're just gonna call it name for name in names for names names well and so don't forget to print yes and if you're new to working with strings and Python yet lots of material on that and our pace on 3course I definitely recommend also fun fact if you want to run your code without clicking the Run button there's an if he command return or I think on PCs control return is a timesaver we also have other key bindings which I believe if you yeah you hover over you can you can see them see those keyboard shortcuts um so yeah we got hello Elaine hello George hello Jerry and hello a Cosmo so we've said hello to every single character of our main characters in Seinfeld's somebody just said hello in the chat at the same time I've been reading a lot of good night me recently yet let's move into the next one alright so this is another really fun string method hello Newman you're right we didn't get new alright so first character we only want to get a specific character from a string so what do we do we can use a really fun indexing method which I think can also be it's also called slicing um so what we're doing is we're just grabbing the yep we got a demo right there don't worry about there um yes so if we if we get the first element of my string it should be which is which is represented by 0 it's the it's at index 0 the first element is always that I'm saying yes so that's gonna be a capital W and if we go into my string and we count 0 1 2 2 we should get an O so we see that we get that oh and if we go to my string and we start again and we go 0 1 2 3 4 we should get an exclamation point so that's why we have W Oh an exclamation point getting printed over in our uh terminal right there yeah yeah so I mean I think what was always helpful for me it's like strings are basically just lists right there lists of characters I like thinking of it as characters that are strung like beads on a necklace you see ever learn how to code nice metaphor I couldn't there yes it's helpful to think about that because then you can do the same type of methods on string on strings that you would do on this yep oh and I do want to note that in the example there you can see that and you might have noticed when Zoey originally printed before she changed the third print statement to my string slice for there was nothing getting printed after w100 and that's because there is a space that was at that particular point within this string yeah so just to clarify yeah a space is still considered a character in a string it still takes up memory in the computer it's not just like genus yeah I can't forget about those those spaces same with like you can have new lines all these different things all right so let's get the first character in each of these names um so what we're gonna do is we're gonna say name and then open brackets zero because that's gonna be the first and then outside of the brackets the first set I should say um the intercept I'm gonna say for name Oh we even got the full thing here yes name sliced 0 for name in names thank you Manuel's oh and Michael Cruz really appreciates what you said about strings are like lists of characters he said boom I've never heard that before yeah it's something that I don't think he's like often often taught I think it's a great way of of thinking about it and can really help you again understand how you can use the same types of methods on strings like you would with lists like we're doing right now with this comprehensions right there Cutlass apprehensions do you think you can only do it with a list but oh so sure you can do it with a string well it's it's still a list of strings [Laughter] anyways I would be curious to see if you could do this you could probably do a comprehension just don't like the name itself right all right so let's print that out let's see if this works thank you sir girl yep you got it to e j g JC that's what we would have expected so we're good to go we're straight we have sighs um so to find the size the number which is the number of characters in a string we can use the Len function which gives us the length of the string again just like you know so it looks like we're creating a new list same lengths and then it contains the size of each name in the list of names oh we got a really good question from Michael crews by the way uh so he's asking so this is actually in the previous exercise so why is it named slice 0 and not names slice 0 so that's a really great question so what we're referring to with name is each element in that list names so it actually refers to each individual name so what we want isn't just the first element in that entire list which would be Elaine what we want is the first character of each string so each name in that list so what we want is actually the e the G the J and the C so all of the capital letters that exist in that list yeah so like we mentioned each one of these can be considered kind of like a listen to themselves so we can use that slice method on it but to Mario's point if we were to change this to names we're no longer looking at each character in each string now we're just looking at each entire string in the list so I actually I want to print this out so that we can see what happens because wait before you before you run that code I just want to explain what we expect to happen so in the place of each name in that list of names we're going to expect to see the first name in that entire list so what we should see is Elaine Elaine Elaine Elaine and now let's run this code and let's see whether I got that right boom there we go all right and we can move on again like you know you can you can take the moment to do like what Marielle to reason it out and think about okay right what is this actually asking like if I'm saying names zero what does that mean okay that's gonna be a lien but I'm still saying it for each element in that list mmhmm and you know that's what it is so you can reason out and you can also you know we could put it down first and then like let's let's see what happens yeah and this also brings up a really good point that you can actually substitute literally anything for each element like we could just create a new string and make that what exists for every element we could put a number for every element we can put any any kind of data there yes we could just have a list of Numan but that's that's also a really a really great point yeah all right next one this is where we're getting the the length of each string so so you want to take this one away sure so we are creating a new list called length equal to I'm going to say you're gonna use the Len method and I'm going to use name again so the length of name for each name in the list names names grace blanks run and there we go excellent she's saying even split between 6 6 & 5 5 yeah all right should we try to do one more and then let's do yeah let's do one more if folks have questions please feel free to ask them in the chat at this point and then we're going to just you know let you know details about where to find more events and such things yeah and Jesus or hey Zeus I just want to say you say you suck at code but everybody sucks at code when they start and it's all about practicing it's all about learning and practicing and the more you do it the better you get at it yeah no one you know comes into this world as a naturalborn coder no one no one has that facility so definitely be kind to yourself and continue practicing continue to do code challenges like this projects like that and take your time forget it all right so let's do one more of these and then we'll we'll get into wrapping up I like that this goes through the different data types right we started with integers we moved on to strings and now we're looking at how we could use a boolean data type as well operations so it looks like you can use the not operator to flip the value of a boolean so a becomes true becomes false what the instructions are asking us is to create a new list named opposite that contains the opposite boolean value for each element in the list so we would expect our new list to be false true false um yep do you want to get a second to see if folks have any thoughts on how they yeah sure and actually while while we're waiting for folks Michael Cruz is asking what's the difference between Coke ad imme premium versus pro I noticed your screen it's it was it was a experimental product that the lessons from which we are putting into our product so keep an eye out for some some changes to happen to the platform and maybe the upcoming months so it's it's a no longer no longer a thing but it's the throat Pro is going to get a premium experience experience yeah um all right so I'm not seeing any suggestions on this but that's okay ISO real quick we're gonna do um and because this is a list of boolean's we're gonna call each element boolean I think so not boolean and what that's gonna do is flip the value of what that value is for boolean in boolean's [Laughter] let's print that out real quick right also and we see the opposites excellent all right well thank you everyone for joining and if you want to catch Oh actually Manuel has has something here was opposite is not Gould for bull and billions and I would love for that to be a thing that we could do but unfortunately because bull is the actual Python encoded type for boolean it unfortunately would not work errors is funny actually yep it's a builtin data type so it's it's gonna not work out the way that you wanted to yes and make them safe and you're not overwrite any builtin yeah so thank you everyone you can take a look at code Academy I think it's is it Kadim e / events I can't see on your buzzer I'm sorry caddy me calm / events you can find a whole bunch more events in the series next week we actually get into visualization a little bit more than we did this time yeah wrapping up the Python syntax yes I wanted to spend some time on list comprehension as you can see they're super useful for your code but they can also get a bit complex it's a good thing to have a bit of handholding with as you start learning them as I said they may be nervous when I first started programming uh Michael Cruz is asking when do you use list comprehension when you useless comprehensions how does the computer know you are using a singular variable can you use any name I actually was confused by that also when I was first getting started I you don't have to use a single singular name the computer has no idea of what the name is as long as it's not a builtin data type it just knows that you're naming it something it's more for your sake that you know what you're referring to within a list yeah so that's a really great question show that really fast it's just it recognizes this specific pattern so I just changed it to cats mmhmm or you know Oh what is it is it fish fish that doesn't have a plural fish's know what those fishes shows you how long so as long as it's it's the same and it's distinct from what the name of the list is yeah so just again really quickly we have a session this Thursday which I sell to Marielle for those who've been with us for the past couple weeks you know that Tuesdays have been for all live streamed on YouTube and Thursday we do a more intimate session with pro learners and it's going to be a Q&A so again bring your questions to the Thursday session I would definitely recommend if you're here today coming with us on Thursday to do the rest of these code challenges we got halfway through so you can finish up the other ten on your own you get more complicated so if you have any questions about those last ten here we'd be more than happy to answer them on Thursday but we could also generally talk more about data visualization questions that you may have about that subject in data science or company ever you want all right thank you everyone yeah thank you everyone have a great day I have a great day
