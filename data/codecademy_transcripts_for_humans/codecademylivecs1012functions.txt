With timestamps:

00:00 - hello everyone welcome to another
00:02 - edition of codecademy live my name is
00:04 - alex koontz i'm here with my co-worker
00:06 - kenny kenny how's it going
00:08 - hale glad to be here this is our second
00:11 - time doing functions
00:12 - that's right yeah kenny and i went over
00:14 - this exact lesson in another live stream
00:16 - a little bit ago so we are uh well
00:17 - prepared to lead this one but
00:19 - we're going to also go through a couple
00:20 - of new uh content items which will be
00:23 - really fun
00:24 - um i see lots of people in the chat
00:26 - already so
00:27 - if this is your first time watching one
00:28 - of these shows um we are
00:30 - doing this live stream series called
00:32 - cs101
00:34 - yeah i see lisa saying kenny is in the
00:35 - woods uh i lost here
00:39 - uh we are doing this livestream series
00:41 - called cs101
00:42 - we are going through kind of the
00:43 - fundamental um programming topics so
00:46 - this might be stuff that you might see
00:47 - in your first few weeks of a college
00:49 - level
00:50 - course or even a high school course one
00:52 - of the reasons why we're doing this
00:54 - is that we just announced a new student
00:56 - pricing plan we have a discount for
00:58 - students
00:58 - uh there's lots of information on our
01:00 - website if there's like a giant banner
01:02 - so if you're if you're curious about
01:03 - that you can go ahead and check that out
01:05 - but that's kind of the reason why we're
01:06 - doing this live stream in particular is
01:08 - that we really kind of want to
01:10 - uh teach the very fundamentals of coding
01:13 - uh right now we are streaming on a bunch
01:15 - of different platforms
01:17 - i think we're on twitch twitter youtube
01:20 - and
01:20 - uh facebook kenny and i are uh primarily
01:24 - looking at the
01:24 - youtube chat so i see lots of people are
01:26 - talking in the chat already hello we are
01:28 - so glad
01:28 - that you are here thanks for chatting we
01:30 - want this to be as interactive as
01:32 - possible
01:32 - so feel free to ask us comments in that
01:35 - chat
01:36 - um as we go through this lesson and then
01:38 - yeah if you're watching on another
01:40 - platform and want to interact with us i
01:42 - would say
01:43 - probably the best place to go is to
01:45 - youtube to
01:46 - chat with us there yeah at us yes
01:51 - uh kenny i'm so glad that you're here uh
01:53 - kenny's done a couple of these live
01:55 - streams
01:55 - with me and uh you know the people love
01:58 - kenny uh
02:00 - hashtag kenny rocks can you build it out
02:04 - i'm trying to put on a more professional
02:06 - setting right now right here in the
02:07 - woods
02:08 - i'm reinventing myself yeah
02:11 - cool all right so let me show you what
02:13 - we are doing today
02:14 - so i'm going to share my screen let me
02:17 - figure out the
02:18 - trolls all right
02:22 - so right so this entire um live stream
02:25 - series there's gonna be eight of them
02:26 - total this is the second one that you're
02:28 - watching
02:28 - and what we are doing is we are walking
02:30 - through this cs101 live stream series
02:32 - course that's on our page
02:34 - if you want to code along with us you
02:36 - can do so you can find this in the
02:37 - catalog i've also linked to this course
02:40 - on the youtube description all that sort
02:41 - of stuff so we're going to be walking
02:43 - through
02:44 - this course and every week we're going
02:46 - to be doing a different module
02:47 - from this course so last week we did
02:50 - variables and now we are on to functions
02:53 - um cool uh right and then uh one final
02:57 - thing before we get started
02:58 - all of these are recorded and put up on
02:59 - youtube after the fact so it's likely
03:01 - that you are not watching this live that
03:03 - you're watching on youtube after the
03:04 - fact
03:04 - we are uh we air these live every
03:08 - tuesday at 1 pm eastern time so
03:10 - if you're checking this out in the
03:11 - recorded version of it and want to join
03:13 - a live version in the future
03:14 - you can find us 1 p.m on tuesdays and we
03:17 - would love to uh
03:18 - we'd love to see you there i just want
03:20 - to say like for people making full use
03:22 - of chat while we're here or
03:23 - we're live definitely add us definitely
03:25 - like just ask questions as we go along
03:27 - i'll mostly be in charge of looking at
03:29 - the chat and answering questions
03:30 - but as people bring up like really good
03:32 - points i would love to raise that to
03:33 - alex who's going to be walking us
03:35 - through that content
03:36 - and like taking breaks and stopping
03:37 - along the way to see what else
03:39 - people are thinking cool all right let's
03:41 - do it so
03:42 - uh we have two lessons here and actually
03:44 - one of the cool things about this
03:46 - live stream series is that we're able to
03:47 - kind of pick some of our favorite
03:49 - lessons across the codecademy catalog
03:51 - and so this first this first lesson is
03:54 - teaching the idea of functions from a
03:56 - very language agnostic sense
03:59 - kenny what do i mean by language
04:00 - agnostic that's like kind of pretentious
04:02 - wording for me to be
04:04 - using what am i talking about that's
04:05 - that's like the technical way of saying
04:07 - it right like i think
04:08 - language agnostic it could be applied to
04:11 - any sort of language it's just a very
04:13 - common like programming idea and
04:16 - concepts that are used throughout right
04:18 - yeah exactly and again kind of like one
04:21 - of the things i really want to focus
04:22 - on is that everything that we're going
04:25 - to be learning today can be applied
04:27 - for the most part to any coding language
04:29 - that or any programming language that
04:30 - you're going to start with so certainly
04:32 - python javascript
04:33 - java swift um c
04:36 - plus c sharp like all of these share
04:39 - these same fundamental ideas
04:40 - and so you know when i teach when i was
04:43 - teaching high school classes
04:45 - um i actually jumped around across these
04:47 - languages a lot because really the
04:48 - important thing is like
04:49 - understanding the fundamental concepts
04:52 - more so than the syntax itself
04:53 - and so we we've built these little
04:56 - applets to
04:56 - kind of make the syntax easier right
04:58 - there's still syntax here it's just
05:00 - rather than typing code
05:01 - i'm going to be clicking on buttons um
05:03 - in this lesson
05:05 - it's that's kind of like the same
05:06 - principle of swift have you ever sorry
05:08 - not swift i've scratched have you
05:09 - scratched before kenny i was gonna bring
05:11 - that up i just had someone email me
05:13 - about like
05:13 - ideas that they want implemented and
05:15 - they showed us showed me a screenshot of
05:17 - what scratch looks like and i was like
05:19 - this looks like what we're talking about
05:20 - today how
05:21 - convenient yeah scratch is a great
05:24 - programming language
05:25 - uh developed by mit that's really good
05:27 - for beginners again because the syntax
05:29 - is very minimal it's mostly
05:30 - gui based it's mostly you know buttons
05:33 - and drag and drops and that that sort of
05:34 - thing and so
05:35 - yeah let's uh let's get into some of our
05:37 - little outputs here
05:39 - so right this week we're talking about
05:41 - functions
05:42 - and kind of the main idea of a function
05:44 - is that it's going well there are many
05:45 - different things
05:46 - it's going to bring together different
05:50 - uh tools in your programming toolbelt so
05:52 - you might know how to add something you
05:53 - might know how to print something you
05:55 - might know how to do all of these things
05:56 - and we can combine multiple statements
05:58 - into a single block of code with a
06:00 - function so in this example our like
06:02 - single statements are the steps that it
06:06 - takes to build
06:06 - a uh sandwich or a hamburger i guess um
06:10 - so i can do things like add bread add
06:13 - the burger patty
06:14 - pickles let's put another burger and i
06:17 - can add
06:18 - more bread um
06:21 - kenny any thoughts on this you were
06:22 - smiling i i was just thinking how you
06:25 - you mentioned uh making a sandwich and
06:27 - then bringing up the burger and i was
06:29 - like that could be a very divisive topic
06:31 - but i don't want us to get derailed yeah
06:33 - all right yeah is a burger sandwich it's
06:35 - cereal
06:35 - soup all that good stuff i think that's
06:38 - a really good point about like how
06:39 - these like even mundane things like task
06:42 - of making
06:43 - a sandwich making a burger it seems so
06:45 - intuitive to us but like breaking it
06:47 - down into these smaller steps
06:49 - and then knowing that this one big step
06:51 - is just a combination of all of it
06:52 - really highlights like how functions are
06:54 - used and why we would want to use one
06:57 - yeah and in fact one of the things that
06:59 - i from doing the
07:00 - this series uh doing last week's stream
07:02 - one of the things i noticed is as i was
07:04 - going through
07:05 - um these guise i was kind of doing
07:08 - things
07:09 - that were kind of so obvious that it
07:12 - wasn't even worth
07:12 - pointing like pointing out like when i
07:15 - clicked on something something happened
07:17 - and something i'm going to try to do as
07:18 - we go through this is really like
07:20 - highlight
07:20 - the very subtle things that are
07:21 - happening here that then become very
07:23 - important when we're
07:24 - writing in a programming language like
07:27 - python
07:28 - so to start that let's look at this
07:30 - second exercise
07:32 - which will show uh the reusability of
07:36 - functions
07:37 - so rather than having to make
07:40 - uh to click on each one of these to make
07:42 - the hamburger we've now
07:44 - added this function make hamburger which
07:47 - should do all three at once
07:48 - right bread patty pickle another piece
07:52 - of bread
07:53 - and all of that is happening at the same
07:55 - time
07:56 - so kenny what are some of the like
07:59 - subtleties going on
08:01 - just in this image alone that is going
08:03 - to be important once we bring
08:04 - things into the python um yeah i think
08:07 - like those individual steps
08:09 - the ordering of which it's done and then
08:12 - showing it that it's done as a
08:14 - collective uh
08:16 - so like if things start going wrong with
08:19 - our burger let's say like uh a burger
08:22 - patty is missing
08:23 - or pickles are on top of a bread
08:26 - like we can look back instead of going
08:28 - through
08:29 - each individual uh statement and we can
08:32 - look at it as a collective like what's
08:33 - wrong with our function rather than
08:34 - looking through all those lines of code
08:36 - or
08:36 - all those little buttons to see what
08:38 - order it was probably done
08:40 - yeah totally i think this this kind of
08:43 - goes along with what you were saying but
08:44 - these curly brackets here
08:46 - so that's how in this programming
08:49 - language in this
08:50 - syntax that we've created here that's
08:51 - how we are saying what's inside a
08:53 - function or what's part of a function
08:54 - right
08:55 - it's everything that's inside the curly
08:56 - brackets and again that might be
08:58 - something that
08:59 - is so kind of self-evident from just
09:01 - looking at this picture that you don't
09:02 - really realize
09:03 - but once we move into a
09:07 - program like programming language that
09:09 - uses text like python
09:12 - defining how a statement is part of a
09:14 - function
09:15 - is important right you might throw a
09:16 - syntax error if you if you do it
09:18 - incorrectly right you might have a bug
09:19 - in your program
09:20 - and so realizing that okay in this
09:22 - programming language
09:23 - we use these curly brackets in python
09:25 - it's going to be a little bit different
09:26 - python is all about indentation
09:28 - so that's something to that's something
09:31 - to realize
09:32 - um another thing to point out here is
09:34 - that our function has a name
09:36 - right our function's name is make
09:38 - hamburger we can talk about these
09:40 - parentheses in a second
09:41 - but that's going to be something that's
09:43 - explicitly important
09:44 - is when we define a function in python
09:46 - we're going to have to give it a name
09:49 - and then finally beyond defining the
09:52 - function
09:53 - in order for the function to actually do
09:55 - anything we need to use it
09:57 - and so in this syntax i can use it by
10:00 - clicking on the button make as many
10:02 - hamburgers as i want
10:05 - and in python we're going to use the
10:07 - function again in a different way we're
10:08 - not going to be able to click on
10:09 - something directly but we can
10:10 - define the function and then later use
10:12 - it
10:15 - yeah i see uh lisa in the chat is
10:17 - talking about uh or indentation with
10:18 - python exactly
10:21 - cool um let's move on to the next one
10:32 - all right cool this one is this one's
10:34 - definitely very important so this is
10:36 - uh we've called this the flexibility or
10:38 - function for flexibility
10:41 - so one of the things that you can do
10:44 - with a function
10:45 - is add add parameters or add
10:48 - you know elements that you have control
10:51 - over that you can change
10:52 - so last time our function was static
10:56 - basically it couldn't change every time
10:58 - that we clicked on make sandwich it was
10:59 - going to make the exact same sandwich
11:01 - in this example we now have a little bit
11:04 - of control
11:04 - over the input to our function so we can
11:08 - say
11:08 - instead of a burger patty let's add
11:11 - peanut butter and instead of pickles
11:13 - let's add cheese
11:18 - kenny how does this relate to uh
11:22 - programming in a more traditional
11:23 - programming language um
11:26 - gives you a lot of options to make
11:28 - choices like customize
11:30 - what your function is able to do so
11:32 - before we were always stuck with like
11:34 - a burger patty pickles um as our like
11:38 - filling but now with inputs with
11:41 - parameters
11:42 - uh we can actually customize them this
11:44 - time around it looks like we're going to
11:45 - put
11:45 - peanut butter and cheese together which
11:48 - perfect
11:52 - yeah and again i think there are subtle
11:54 - things happening here where
11:56 - notice when i change peanut butter to
11:58 - ham
12:00 - the content of the function itself kind
12:02 - of automatically changes
12:04 - that's something that's probably a
12:06 - little bit too complex to do
12:09 - really easily in python to like change
12:10 - the content of the function itself in
12:12 - python you might
12:14 - imagine like an if statement if you're
12:16 - familiar with those like
12:18 - if this first input was burger patty
12:21 - then we want to do
12:22 - at burger patty otherwise if it was
12:24 - peanut butter then we would want to add
12:26 - peanut butter
12:26 - right in a real python function there
12:28 - might be some like control flow
12:30 - elements here where depending on what
12:33 - the input is
12:34 - the different lines of code would be
12:36 - wrong
12:38 - what am i getting into control flow
12:40 - though alex can you talk a little bit
12:41 - more about that
12:43 - yeah so i think that's our next next
12:44 - week section and yeah again that's the
12:46 - idea of
12:48 - you want your program to do different
12:50 - things depending on
12:51 - certain inputs or certain settings
12:53 - basically and so
12:55 - here we're kind of defining our setting
12:57 - or our input
12:58 - and unfortunately we're not i mean it's
13:01 - it makes for a you know pretty concise
13:04 - little applet here but we're not really
13:05 - showing the control flow of like
13:07 - if burr patty then add burger patty
13:10 - um you know if um what about like
13:14 - customize like making it easier for the
13:16 - second option to make sense like if it's
13:18 - a burger patty let's add some pickles
13:20 - rather than like if it's a burger
13:22 - or like a peanut butter let's not add
13:24 - cheese to it
13:25 - um i'm really harping on that peanut
13:27 - butter cheese conduit
13:28 - i'll stop yeah yeah so that's a good
13:31 - point right maybe
13:32 - maybe we only needed one parameter here
13:35 - and if we chose
13:36 - burger patty then that defines that hey
13:38 - we're probably not gonna put like jelly
13:40 - on it
13:40 - right but if we chose peanut butter then
13:42 - we would put jelly on it
13:44 - um nice and and you'll know one final
13:48 - little thing is that you'll notice that
13:49 - we have parentheses
13:51 - around these two inputs and if you go
13:53 - back to our last
13:54 - one i said like oh there are these
13:56 - parentheses here
13:59 - right there are these open close
14:01 - parentheses here which was basically
14:02 - saying
14:03 - this has no input right we didn't have
14:06 - any ability to
14:07 - give the function any input and so in
14:09 - this one
14:11 - we do and that input is between the
14:13 - parentheses
14:15 - i just want to say it right now like too
14:16 - thank you alex because i think you're
14:18 - outlining a lot of things that i'm
14:19 - taking for granted right now and
14:20 - visiting this topic it's like it's very
14:22 - refreshing
14:24 - yeah i mean so this is something that i
14:25 - know as i was going through we did
14:26 - variables last week right and there's
14:28 - like
14:29 - there's so many like small little things
14:31 - that you don't even notice even like
14:33 - okay i've defined the variable but then
14:35 - nothing happens with it until i use it
14:37 - and so that's the same thing here where
14:38 - i can define this make sandwich function
14:40 - but you know that doesn't do me anything
14:42 - until i actually use the function
14:47 - all right this one function for
14:49 - organization
14:51 - so beyond kind of
14:55 - combining code to make it reusable right
14:58 - i can make multiple sandwiches at once
15:00 - um another good benefit of functions is
15:03 - just organizing your code
15:05 - kenny can you talk to a little bit about
15:07 - why you might want to break your code
15:09 - into
15:09 - several uh chunks or several functions
15:13 - yeah i think one topic that we don't
15:15 - talk too much about is just like
15:17 - how to read code how to go back and
15:19 - understand what it's
15:20 - uh actually doing like building upon the
15:23 - literacy that you're
15:24 - you're developing as you write code um
15:28 - and it just makes it easier to go back
15:31 - like
15:31 - to create uh these programs that do very
15:34 - precise things
15:35 - rather than having as you see in that
15:37 - organization that first bullet point of
15:40 - a giant blob of text which is fine it's
15:42 - readable
15:43 - it's just it takes that much more effort
15:46 - to break down
15:47 - and really understand what it's doing
15:48 - rather than if you were to segment this
15:50 - into uh
15:51 - so these different functions like make
15:53 - sandwich make fries
15:54 - make ice cream where everything has its
15:56 - own place it occurs at a very specific
15:58 - time and you know
16:00 - what they're doing at each individual
16:01 - point
16:03 - yeah exactly and and i'd like to point
16:05 - out that the naming here is also pretty
16:07 - important where
16:08 - as you develop more and more functions
16:11 - naming them appropriately so you can
16:12 - remember what the heck these functions
16:14 - do after the fact
16:16 - really kind of like one of the benefits
16:18 - of of a function is that
16:20 - after you write it and you validate that
16:22 - it works exactly how you want want it to
16:23 - work
16:24 - you can kind of forget about what's
16:25 - inside of it right unless it unless that
16:27 - starts breaking later on and you have to
16:28 - dive back into the function to figure
16:30 - out okay what's actually happening
16:32 - happening inside the function one of the
16:34 - nice things is that
16:35 - i don't really need to know what makes
16:37 - some fries does as long as i'm
16:38 - happy with whatever it's doing
16:44 - all right so this last exercise
16:47 - in uh in this lesson is
16:51 - kind of translating these uh the gui
16:54 - the button version of this code into
16:57 - a more traditional programming language
16:59 - in this case uh this is javascript
17:01 - um but we will shortly be doing python
17:04 - uh
17:04 - let's see what they are asking us to do
17:07 - the bottle
17:08 - bottom of the code change burger patty
17:10 - and pickles to peanut butter and jelly
17:16 - right
17:22 - and then so if i make that change and
17:24 - then run the code let's see
17:26 - there we go cool so this was this was an
17:29 - example of
17:31 - calling a function again with different
17:34 - input
17:34 - but rather than using that drop down
17:36 - menu like i was in the previous exercise
17:39 - now we are kind of in a more you know a
17:41 - more traditional programming uh
17:43 - environment where i have to type out the
17:46 - parameters that i want
17:48 - um this is maybe a good opportunity to
17:51 - show like
17:53 - you know as you're making your function
17:54 - you have to consider things like
17:56 - what if the user inputs something that i
17:58 - don't expect
17:59 - so so if i just like typo jelly
18:02 - if i make it 1l let's see what happens
18:06 - here so
18:07 - jelly is the second parameter so that's
18:09 - going to be topping 2.
18:11 - so topping 2 gets thrown into this
18:14 - sandwiched string
18:15 - and then something is eventually going
18:17 - to happen with the sandwich string
18:18 - but let's see what happens i bet this
18:20 - totally breaks yeah there we go
18:22 - one or more ingredients are not valid so
18:25 - yeah this is actually a good example of
18:28 - whoever wrote this little applet which
18:31 - was
18:32 - uh some of our brilliant curriculum
18:34 - developers either zoe or nick i think
18:35 - this is a nick creation
18:36 - [Laughter]
18:40 - he wrote his function or whatever is
18:42 - using this function
18:43 - to be a little bit versatile right it
18:45 - expect it handled this error pretty
18:48 - um pretty well where this is uh
18:51 - this is an input it didn't expect and so
18:52 - as a result it says hey that's not valid
18:57 - alex can you try strawberry scoop in
18:59 - there because i think this is based on
19:01 - like
19:01 - the functions that are available from
19:03 - the other let's see
19:07 - like the app yeah strawberry scoop let's
19:10 - see if he built in
19:11 - yeah nice nice nice there you go so you
19:14 - can mix and match your
19:15 - sandwich stuff with your ice cream stuff
19:18 - sometimes
19:18 - what you want yeah this is kind of fun i
19:20 - always like looking at this although i
19:22 - feel like it's potentially
19:23 - overwhelming uh i have my like special
19:26 - codecademy author mode turned on so i
19:28 - can actually go and look at the files
19:30 - that are
19:30 - building this and so we're asking that
19:33 - you that
19:34 - you know the student right in maine.js
19:36 - but if we take a peek
19:38 - at sketch.js i would bet it's in topping
19:41 - oh no you're right you're right sketch
19:43 - oh interesting there's also topping yeah
19:45 - we can look at toppings.js
19:46 - so you know there are multiple files
19:48 - here but you can kind of see
19:50 - um how we built this we have different
19:54 - images for brackets we have
19:57 - you know we're like defining the uh size
20:00 - of the canvas
20:01 - um the thing that we ended up building
20:04 - here was
20:05 - let's see if we can find this make
20:07 - sandwich function
20:10 - um i think you can
20:14 - our search
20:17 - no not on this one
20:22 - so let's see
20:25 - oh and then we have a bunch of code
20:26 - commented out i think
20:28 - we'd be going through a bunch of yeah
20:30 - like a bunch of commenting out code and
20:32 - just a lot more stuff that we don't
20:34 - intend to teach at the moment
20:36 - so yeah while this is a nice behind the
20:37 - scenes glance we're so close to
20:39 - finishing
20:40 - like the basics of this can go on to
20:42 - then python
20:43 - yeah cool so let's do that um let's see
20:46 - if there's anything in this last review
20:48 - section um yeah so let's cover this
20:51 - review
20:51 - very briefly so great a function
20:54 - is a sequence of instructions that
20:56 - perform a specific task packaged as a
20:58 - unit
20:58 - so that's you know all three of these
21:00 - things are packaged together
21:02 - into the make sandwich function um when
21:04 - we define a function we specify the
21:06 - instructions
21:07 - input and name of the function so that's
21:09 - kind of three parts the instructions
21:11 - are the curly brackets right the things
21:14 - between the curly brackets are the
21:15 - instructions for the function
21:17 - the name is make sandwich or make some
21:20 - fries or make ice cream
21:21 - and inputs in this case all three of
21:24 - these functions have no inputs
21:26 - right they're all open close parentheses
21:28 - meaning no inputs
21:30 - um when we call a function all of its
21:33 - instructions are executed so calling a
21:34 - function
21:35 - in this case is me clicking on the
21:37 - function button
21:39 - functions can be executed many times so
21:41 - as you've seen i've already made two
21:42 - sandwiches that can make a third or
21:44 - a fourth and fill this up and see if it
21:45 - breaks the
21:47 - breaks oh my god it starts maybe
21:51 - looping i think somehow like bread got
21:55 - pushed past that table of it or
21:56 - i don't know or not yeah it's funny uh
21:59 - yeah a little bread popped up there
22:00 - you're all out in fact for you alex this
22:02 - is actually
22:03 - it looks like when i was looking through
22:04 - the code it looks like it's based off p5
22:06 - so
22:07 - yeah this definitely is i really love p5
22:09 - it's so it's so much fun to make kind of
22:11 - little interactive things like this um
22:14 - let me reset to get rid of
22:15 - all these functions can have parameters
22:18 - which accept inputs
22:19 - input values making it flexible again
22:21 - that's kind of what we talked about
22:22 - these have no parameters but we could
22:24 - give it a parameter to say hey instead
22:26 - of burger patty add peanut butter
22:28 - and then finally um functions organize a
22:31 - program into distinct units making
22:33 - interchanging and editing them easier
22:34 - this makes your entire program organized
22:36 - and modular
22:37 - right so i can uh
22:40 - kind of break up my program into
22:41 - different chunks i can it makes it
22:43 - better easier to find errors where if i
22:46 - know something is wrong and make ice
22:47 - cream
22:48 - well make ice cream is only this code
22:50 - right so
22:51 - in general making a program as modular
22:53 - as possible is
22:54 - really nice
22:57 - all great points kenny any leftover
23:00 - comments from the chat that
23:02 - uh you want to get into i don't think so
23:04 - i think we covered most of the basics
23:06 - of functions um and people wanting to
23:10 - like get into specific examples maybe so
23:13 - it sounds like a great time for us to
23:15 - just dive into python and what like
23:17 - functions in python look like how we
23:19 - translate this
23:20 - very conceptual topic into something
23:22 - more concrete cool let's do it so
23:25 - uh yeah let's jump into this second
23:27 - lesson in the functions module
23:29 - this is now all going to be functions in
23:34 - python
23:36 - right and the point is just like again
23:38 - we could have chosen any language but
23:40 - python is probably one of our more
23:41 - popular offerings
23:42 - right now yeah python's uh popular
23:45 - offering i think it's also pretty good
23:47 - for
23:47 - introductory or for like new students
23:49 - where
23:50 - you know they're like all programming
23:52 - languages there's some things that are
23:54 - confusing or could cause a bug or an
23:57 - error
23:57 - but in comparison to others i think it's
24:01 - relatively minimal i know
24:02 - um the very first time i was in a
24:05 - classroom i taught the ap
24:06 - computer science class which is which is
24:09 - taught in java
24:10 - and there's like so much stuff in java
24:13 - that
24:14 - makes it hard to even do anything and so
24:17 - once i wasn't teaching the ap i started
24:19 - teaching python which is
24:20 - um a little bit easier to just like get
24:22 - off the ground get writing code
24:24 - um yeah
24:27 - okay cool um so in this exercise we
24:32 - again
24:32 - do kind of a conceptual thing at the
24:33 - start i think we can kind of go past
24:35 - this since the conceptual lesson
24:37 - covered all of this but this is a cool
24:38 - little example of the function
24:40 - is adding one side the input is a shape
24:44 - and then the output is another shape
24:46 - with one more side
24:50 - all right so in python
24:54 - so here's an example of our first
24:56 - function let's kind of
24:58 - since we've already we already have a
24:59 - conceptual understanding of what a
25:01 - function
25:01 - a function is from the burger stuff
25:04 - let's look at
25:06 - let's translate the stuff that we
25:07 - understood from the burgers into python
25:10 - code
25:10 - so kenny what is the equivalent of the
25:13 - curly brackets here like what is the
25:15 - how do you define that these lines of
25:17 - code are inside the function
25:18 - in python i guess for python
25:22 - it's more that they're all on the same
25:24 - indentation plane
25:27 - is that right yeah exactly so um
25:30 - one really subtle thing is that it's it
25:33 - has to come
25:34 - after the definition of a function which
25:37 - uses this def keyword
25:39 - uh the name of the function the number
25:41 - of parameters and a colon
25:42 - and then after that colon they're all
25:44 - going to be indented
25:46 - one level from there so if i did
25:49 - something like
25:50 - this where this is now
25:53 - no longer indented this is probably
25:55 - going to cause a syntax error because
25:57 - uh this is now outside the function
26:01 - the function is going to be considered
26:02 - to be ended and then this is indented
26:04 - and it's going to be crazy right uh yeah
26:07 - it aired on line 5 because
26:09 - this is this line is indented once uh
26:12 - because it thinks it's inside
26:13 - the function but the function actually
26:15 - ended right here
26:17 - because the indentation stopped so
26:20 - that's kind of one of the
26:21 - small little subtleties in python it's
26:23 - all about indentation and indentation
26:24 - matters
26:26 - all right how about the function name i
26:28 - kind of touched on that already but uh
26:30 - kenny how do you use the player function
26:32 - in python
26:34 - it's good that you brought it up because
26:35 - sonic uh money i just
26:37 - asks what does death mean and uh def i
26:40 - guess
26:40 - in python is short for define or like to
26:43 - define a function so
26:44 - after death you provide a function name
26:47 - in which
26:47 - that block of code that follows in that
26:50 - indentation will be associated so you
26:52 - first
26:52 - write depth function name some
26:55 - parentheses
26:56 - uh we'll get into like filling in those
26:58 - parentheses a little later
26:59 - and then a colon followed by the
27:01 - indentation that's how you
27:02 - define the function nice and then
27:06 - final thing right we'll get we'll get
27:07 - into the parentheses later for now
27:09 - it's actually the same as our hamburger
27:10 - example where we have
27:12 - open closed parentheses to signify no
27:14 - parameters right no
27:15 - input into this function uh meaning that
27:17 - it's gonna be pretty static it's always
27:18 - gonna do the same thing
27:20 - but final thing that was pretty
27:22 - intuitive
27:23 - in the clickable burger version how do
27:25 - we call a function now
27:27 - we've defined the sing-song but how do
27:29 - we call it kenny you wanna
27:35 - i i imagine so last time we when we had
27:39 - the button
27:39 - it just had the name itself so i guess
27:42 - in this case sing
27:43 - song uh and it's since we don't provide
27:46 - anything
27:46 - inside the prince we just add
27:48 - parentheses in there awesome and
27:49 - that should be it yep there we go so
27:53 - and you can see it now that i've called
27:54 - it when this line of code is
27:57 - is run it goes to find wherever singsong
28:00 - is defined and runs the code blocks in
28:01 - there
28:02 - which is for print statements so
28:05 - showing the reusability of functions
28:07 - just like i can you know
28:08 - spam click the make hamburger button i
28:10 - can
28:11 - spam sing song right i can call this as
28:14 - many times as i want
28:17 - mad lad alex oh my god i could i could
28:20 - make a for loop
28:21 - right but you know we'll get into all of
28:23 - that later spoilers come on
28:26 - yeah okay cool
28:29 - um
28:32 - and anu yeah we just did the second step
28:35 - so
28:36 - we'll be covering all the steps as we go
28:37 - along or we'll try to
28:40 - all right cool so we kind of already
28:41 - went over this but uh in the last
28:43 - exercise
28:44 - we already have the function defined for
28:46 - us let's define a new function ourself
28:49 - so this the name of this function that
28:51 - we want is
28:52 - a loading screen so again i'm going to
28:54 - use that def keyword to signify
28:57 - that i'm giving i'm defining a function
28:58 - i'm giving it a name that name will be a
29:00 - loading screen
29:04 - something that we don't say here is that
29:06 - a loading screen should take no
29:07 - parameters
29:09 - um so i'm going to do open close
29:12 - parentheses
29:13 - and then a colon and then what does this
29:16 - function do
29:16 - well for right now all this function
29:19 - does is prints
29:21 - uh this page is loading
29:28 - all right cool so i just ran my code why
29:30 - did nothing
29:32 - appear in my output kenny oh remember uh
29:35 - even though we provide those
29:36 - instructions and we wrote in the code
29:38 - for our functions it doesn't actually do
29:40 - anything until we call it
29:43 - exactly so i can go ahead and now call
29:46 - that function
29:47 - and there we go we can kind of confirm
29:50 - that the function
29:51 - ran by seeing the output
29:54 - one thing i want to note is that not all
29:56 - functions necessarily have output
29:58 - right this one prints this message this
30:00 - page is loading
30:01 - but you know other functions don't
30:03 - necessarily need to give you output
30:05 - might be a little bit hard to verify
30:07 - that you're actually calling them right
30:08 - you would never actually
30:09 - see the output but a lot of functions
30:11 - might just like
30:12 - change a variable that exists elsewhere
30:14 - in your code or
30:15 - do something like that you know
30:18 - ultimately
30:19 - somehow you will probably see some
30:20 - output from calling a function at some
30:22 - point
30:23 - because otherwise you know why are we
30:25 - even programming if we don't get any
30:26 - output
30:27 - but you know a function doesn't need to
30:29 - provide output
30:32 - a great question from mark lam when
30:35 - doesn't a function
30:36 - take parameters or i guess the question
30:37 - could be phrase like when don't we have
30:39 - to provide
30:40 - parameters to a function yeah that's a
30:42 - great question i think
30:44 - probably most functions that you
30:47 - write will take a parameter of some sort
30:50 - so the advantages of parameters is that
30:53 - they give you a little bit of
30:54 - flexibility
30:55 - right they can change what your function
30:57 - does in some way like
30:58 - back to the hamburger example like i
31:00 - could change it to be peanut butter
31:01 - rather than a patty
31:02 - um so it gives you a little bit of
31:05 - flexibility it lets you do different
31:06 - things with your functions
31:08 - functions that don't have parameters
31:09 - like this this one they're always going
31:11 - to do the same thing
31:12 - but that might be useful right like
31:17 - functions without parameters are
31:18 - probably most useful for like the
31:20 - organizational part of
31:21 - or the organizational benefit of
31:23 - functions where you know this could have
31:25 - a bunch of print statements
31:27 - right like if for whatever reason i
31:29 - wanted to print this out
31:30 - six times rather than having to do this
31:34 - you know write these seven print
31:35 - statements every single time i want
31:37 - these seven print statements to appear
31:38 - i could put it all in a function have it
31:40 - have no parameters
31:42 - and then run my function a couple of
31:43 - times and you know
31:45 - it kind of that's kind of like helping
31:46 - for the organizational um
31:49 - structure of my code
31:53 - um a couple of interesting points here
31:55 - uh in this in these community forums
31:57 - section
31:58 - the question is is it okay to place
32:00 - function calls inside of another
32:01 - function
32:03 - uh the answer is definitely yes that
32:05 - even gets into something called
32:06 - recursion
32:07 - um but if i had another function um
32:14 - and this is
32:20 - and that does a different print
32:22 - statement and then this function
32:23 - let's say it calls that other function
32:27 - and notice the indentation
32:32 - let's have it call it twice
32:35 - all right so right now nothing happens
32:40 - i haven't actually called any functions
32:42 - right i've
32:43 - defined a function i've defined another
32:44 - function but none of those neither of
32:46 - those functions have been called
32:48 - if i now call or use loading screen
32:55 - there we go so this function happens
32:58 - once
32:58 - which prints something and then calls
33:00 - another function twice
33:05 - a third point i think one thing that i
33:07 - was confused about when
33:08 - i was starting to learn code is it looks
33:10 - like in
33:11 - loading screen we are calling another
33:13 - function and we're actively calling it
33:16 - but this just kind of reminds me like
33:17 - none of that code inside a function is
33:19 - actually executed or runs
33:21 - those instructions aren't told to the
33:23 - computer until we actually
33:25 - call the main function there which is in
33:27 - this case loadings
33:29 - yeah exactly and again the the subtlety
33:32 - of the indentation is really important
33:33 - where if i
33:35 - if i do that now all of a sudden
33:38 - loading screen the definition of loading
33:40 - screen is only that
33:42 - and then i'm calling this function after
33:45 - that so i've
33:45 - it's like you know the spacing kind of
33:47 - helps help show that but it's like the
33:49 - same thing as that
33:50 - where um i'm calling another function
33:53 - once
33:53 - i'm never calling loading screen so the
33:55 - indentation there is really kind of
33:56 - important and a little bit subtle
34:01 - um and just for completion's sake alex
34:04 - if you put like
34:05 - uh a line in between print and another
34:08 - function
34:08 - calling that does that affect anything
34:11 - like
34:12 - yeah let me uh let me call loading or
34:14 - yeah so if i if i run this now
34:16 - um nothing gets run again no functions
34:18 - are being called
34:20 - that's because both of these are in the
34:22 - function definition of loading screen
34:24 - so um if i call loading screen if i use
34:27 - that function
34:28 - again the parallel is me clicking on the
34:31 - button back in the gui version
34:33 - yep you can see that both are a part of
34:35 - the function so this
34:36 - this new line uh doesn't end the
34:40 - function or anything as long as you know
34:41 - the next line of code is still at that
34:43 - level of indentation
34:45 - it's still defined as inside the
34:46 - function and this would be like
34:48 - this question is specific to python but
34:50 - does tabbing
34:51 - matter or is it like do you have to do
34:53 - two spaces
34:54 - what's what's the deal with that yeah
34:56 - that's a good question and something
34:57 - that
34:58 - uh might be you might find bugs on our
35:01 - or you might
35:02 - find an error message on our platform
35:04 - about this and be fairly confused about
35:06 - it
35:06 - so right the difference between a tab
35:08 - and a space does matter
35:09 - so right now actually we might have
35:12 - fixed it so
35:13 - right now if i tab there it actually is
35:16 - two spaces
35:17 - and that's because if uh
35:20 - shoot what's happening uh
35:24 - that's because if this was actually a
35:25 - tab and then
35:27 - this was two spaces that would cause
35:29 - that would cause a
35:31 - syntax error in python and so yeah
35:34 - that's a really good
35:34 - point of um you have to make sure your
35:36 - tabs and
35:38 - spaces uh are consistent
35:42 - another thing is that some people uh
35:45 - so right now this is two spaces uh four
35:47 - spaces also works
35:49 - um but mix mixing and matching does not
35:52 - so
35:53 - four two four
35:56 - yeah lisa just came out with a
36:00 - controversial opinion of us saying
36:01 - spaces is better i think again debatable
36:05 - we'll see
36:06 - form your opinions yeah
36:09 - um i don't know if i have a strong take
36:11 - on this honestly do you
36:13 - uh i'm i guess i'm just lazy i like
36:16 - tabbing
36:17 - um and i have it configured in my uh
36:20 - text editor so that tabbing is two
36:22 - spaces
36:23 - yes i don't know if that's like a middle
36:24 - ground for anyone um that's where
36:28 - just the lazy just like whatever my text
36:30 - editor will take care of it
36:32 - prettify it that's what libraries all
36:34 - right we're getting totally off topic
36:35 - but let's come back to this white space
36:36 - because we kind of talked about
36:38 - yeah um actually yeah i scroll down here
36:40 - to look at this question and python is a
36:41 - single tab equivalent to two spaces or
36:43 - four sometimes
36:44 - so can it be mixed we just covered that
36:45 - so that's great nice um
36:48 - cool so great let me run this code right
36:50 - now and look what's printed out
36:52 - so uh kenny looking at this code what do
36:55 - you expect to be printed out here
36:57 - looks like the function is about this
36:59 - computer
37:00 - has two print statements um and then
37:03 - calling it
37:04 - is gonna execute those two print
37:06 - statements yep they're both part of the
37:08 - function because they're both indented
37:09 - uh
37:10 - um once this is like what uh what a
37:13 - dated reference of
37:14 - this computer is running on a version of
37:16 - everest puma i feel like this was a joke
37:18 - of like all the old
37:19 - mac operating systems used to be big
37:21 - cats right
37:22 - now and a mountain and what does it now
37:25 - event deserts
37:26 - they're all uh national parks i think
37:28 - right like uh
37:30 - yeah um yeah so our old reference to
37:34 - everest puma um
37:36 - all right cool remove the indent on the
37:38 - second print statement run the file
37:40 - now what's printed uh yeah and so the
37:43 - order here matters so
37:44 - note that in this version this computer
37:47 - is running
37:48 - on virgin everest pumbaa came first and
37:50 - now if we do this
37:54 - what do we think is going to happen so i
37:57 - kind of made the spacing
37:58 - uh to kind of give you a hint but
38:02 - now that print the the order is going to
38:04 - be reversed
38:05 - because this print statement is no
38:08 - longer part of the function definition
38:10 - so that happens and then we call the
38:12 - function
38:15 - yeah if we do it here now they're both
38:18 - part of the function and so
38:19 - it happens one two rather than
38:23 - two one
38:29 - all right
38:32 - all right so parameters awesome so
38:35 - parameters
38:36 - as we've kind of talked about are the
38:37 - thing that allows you to manipulate
38:40 - what your function does so right now
38:44 - let's see function multi to add three
38:47 - prints a number multiplied by two and
38:48 - added
38:49 - and added to three as is it as it is
38:52 - written right now that number is always
38:54 - five
38:54 - so if i call mult to
38:58 - add three no parameters
39:01 - i'm gonna do five as the number
39:04 - times two plus three so this is kind of
39:08 - like
39:08 - with our hamburgers that button without
39:11 - parameters would always give us the
39:12 - patty with pickles so
39:16 - instead of doing that modify the
39:17 - function definition so that can have a
39:19 - has a parameter called number then
39:22 - delete number
39:23 - number equals 5 on the first line of the
39:25 - function
39:27 - so if i get rid of this give it a
39:30 - parameter name number
39:33 - now i need to when i call the function i
39:36 - need to
39:36 - give it a number so i can put 1 into my
39:40 - function
39:42 - but now i do 1 times 2 plus 3 which
39:43 - gives me 5.
39:46 - i can also call it
39:49 - with 5 using the parameter
39:53 - i can call it using negative one
39:56 - as the parameter and i can call it
40:00 - using um zero as the parameter
40:09 - cool so our function
40:13 - is now a little bit more versatile right
40:15 - it's always doing the same thing
40:17 - it's always multiplying 2 and adding 3
40:18 - to a given number but we now have the
40:20 - power to
40:21 - say what that number is um
40:24 - dimpledes asks why use prints
40:27 - instead of return i think that's is that
40:30 - our next exercise
40:31 - yeah let's get to let's look at what we
40:33 - have coming up multiple
40:34 - parameters keyword arguments okay so i'm
40:36 - gonna go through this next one pretty
40:38 - quickly
40:39 - um let's see
40:43 - um so this is asking us so instead of
40:46 - multiply by two and add three let's
40:49 - change the name to multiply by x and add
40:54 - y um
40:58 - x add not and
41:02 - add y cool
41:05 - so right now i'm still multiplying by
41:08 - two adding three
41:09 - but let's add some new parameters so
41:11 - again i have power over what these
41:13 - multiplication and addition um values
41:15 - are
41:16 - so if i now say okay this now takes x
41:19 - and y as parameters
41:21 - i'm still not actually using those right
41:23 - i've still hard coded in
41:25 - my two and my three but now i can say
41:28 - okay rather than two
41:29 - give me whatever x is and rather than
41:31 - three give me whatever y
41:33 - is let's stop you there real quick for a
41:35 - second alex because
41:36 - we kind of touched upon this last time
41:38 - but we didn't come up with the term of
41:39 - hard-coded
41:40 - and i think there might be some
41:42 - confusion in the chats like what what it
41:44 - means when something is hard-coded
41:46 - can you explain that a little yeah so
41:48 - that's um
41:49 - that's exactly so let me go back to
41:52 - this so right i would say that two and
41:55 - three are hard
41:56 - coded here meaning that they
41:59 - basically as as the user i have no power
42:03 - to change what they are
42:05 - right um if i was a programmer i could
42:07 - come in and edit the code
42:08 - but um as the user they're set right
42:12 - they're not flexible
42:13 - i can't change them they're not attached
42:14 - to a parameter of any kind
42:16 - they're not attached to any of my input
42:17 - any of any kind they're hard-coded into
42:19 - the code itself
42:20 - um can you think of like a a real
42:24 - example of something that's hard-coded
42:26 - um yeah i mean when we were let's go
42:28 - back to that
42:29 - example uh before about making
42:31 - sandwiches we're making a burger where
42:33 - we always wanted a burger
42:34 - and we'd always have our bread we'd
42:37 - always have our
42:38 - pickles i would say lettuce but pickles
42:41 - sure
42:41 - and then patty followed by bread and so
42:43 - all those values were hard-coded for us
42:46 - and i'm seeing some great examples where
42:47 - people are saying a hard-coded isn't one
42:49 - is when we don't use a variable
42:51 - uh we don't allow for input in that um
42:54 - emily says it's
42:55 - fixed yeah um uh lisa says embedded
42:58 - within and all these things yeah are
43:00 - reminding you just like
43:01 - like you mentioned we can't interact
43:02 - with them they're provided for they're
43:04 - fixed in place
43:06 - yeah um yeah i'm trying to think of
43:10 - i always like to relate it to
43:13 - something like a real application right
43:15 - i would say
43:16 - right something that's like not
43:17 - hard-coded is maybe your
43:20 - um username on an app right on instagram
43:23 - you have your username which is
43:25 - a variable it's not hard coded in it can
43:27 - be changed it can be displayed just
43:29 - depending on who's logged in
43:31 - and then what's something that is like
43:32 - hard-coded into instagram what's
43:33 - something that's like
43:34 - static oh my god worst person to ask
43:36 - because i don't have an insta
43:38 - but i imagine something like background
43:40 - pages are those colors like always the
43:42 - same thing
43:43 - always sure yeah yeah kind of just like
43:46 - static things probably the
43:47 - the image of the like heart right that
43:50 - image is probably hard coded into their
43:52 - um into their code where that heart is
43:55 - like
43:56 - it's gonna you know gonna be used
43:57 - everywhere and it's never gonna be alex
43:58 - i just have to take your word for it
43:59 - that there's a heart and it appears
44:01 - somewhere in instagram
44:02 - so sure yeah i could uh yeah oh man we
44:05 - really had the opportunity to convince
44:06 - kenny that instagram was like uh
44:09 - something completely different
44:12 - it's like what cats it's just about cats
44:14 - yeah exactly
44:16 - um okay cool so i'm to the point where i
44:19 - have replaced my hard-coded values i've
44:21 - replaced my two and three
44:22 - with my parameters so now i can call
44:26 - my function so i can call mont
44:29 - x add y i give it a number of five
44:34 - so i want five to be multiplied by x
44:36 - which i'll make two
44:38 - and then added to three
44:42 - there we go and then i can call it again
44:44 - but with different parameters
44:46 - one three one
44:52 - there we go i think one thing that
44:55 - people
44:57 - one thing that's a little bit tricky
44:58 - with the um
45:00 - with functions and parameters is that
45:04 - people get confused about this about
45:06 - like the variable name
45:07 - of like okay i've named this x
45:10 - i'm using x down here but what value
45:14 - does x have and
45:17 - really the answer to that is that x can
45:19 - be anything and it depends on when you
45:21 - use it right so i'm using it down here
45:23 - and in this case i substitute 2 for x
45:26 - which will then make you know it
45:29 - multiplied by 2 and then 3 for x
45:31 - this is actually something that i think
45:33 - didn't we didn't really show in the
45:35 - hamburger example we didn't give our
45:37 - um our parameters names i think let me
45:40 - actually i'm so curious
45:41 - that i'm going to go and look though
45:44 - we are running low on time um
45:50 - let's see my hamburger example
45:54 - when i had flexibility because we didn't
45:57 - yeah i don't think we ever showed like
45:59 - the defining of the function
46:00 - in that sense it's more like these are
46:03 - yeah
46:05 - right so we we're not showing that
46:08 - this right we're giving it value here
46:11 - just like
46:12 - in our code we're calling the function
46:14 - and giving it value here
46:15 - but we never actually show
46:18 - right if we were writing this code in
46:20 - python we would first need to define
46:22 - make sandwich
46:22 - having two parameter names um something
46:25 - like patty type
46:27 - and you know condiment type or something
46:29 - like that
46:30 - and we never actually did that in this
46:31 - uh in this exercise so again another
46:33 - good example of like some of this stuff
46:35 - is like so kind of
46:36 - um you don't even realize that it's
46:38 - happening which i think is
46:39 - kind of it's kind of the point of an
46:42 - introductory programming class where
46:43 - it's like
46:44 - it's to get you to realize these like
46:46 - small subtle things
46:47 - that are super important for programming
46:49 - because if you don't pick up on them
46:51 - you're gonna have errors and you're not
46:52 - gonna you know your program is not gonna
46:54 - run
46:55 - but they're like small enough that you
46:56 - almost don't even notice that they're
46:58 - happening at first
46:59 - um to me that's really like the goal of
47:01 - an intra-level programming class is to
47:03 - get people to see
47:05 - um to just like start viewing the world
47:07 - from this like really precise
47:10 - um framework where you know things need
47:12 - names in order to
47:14 - uh be referenced and over in our example
47:15 - we weren't giving it a name
47:18 - one good point all right um i'm gonna
47:20 - jump to
47:25 - and then i think we should do some of
47:26 - those code challenges at the end kenny
47:29 - so so far we've always been using print
47:32 - but a function can also return something
47:34 - and there's a kind of a
47:38 - for our purposes there's kind of a very
47:39 - subtle difference to these right now
47:41 - because really all that we can do is
47:42 - print
47:43 - but right now this function is doing
47:46 - something with age it's doing current
47:48 - year minus birth year
47:49 - and i can use the return keyword
47:54 - to return age
47:59 - um and let me my system's all screwed up
48:01 - because
48:02 - i skipped an exercise because i have
48:09 - all right cool so there we go i'm
48:10 - returning the age and now
48:13 - when i call my function so i can call
48:15 - calculate age
48:20 - i can say the current year is 2049
48:23 - according to our little prompt
48:25 - and whoever wrote this must have been
48:26 - born in 1993
48:28 - cool so i can do this but
48:32 - and nothing's going to happen i can run
48:33 - my code uh and
48:35 - i actually got an error birth year
48:40 - oh i did a minus not a comma
48:43 - that's a that's a good catch uh yeah so
48:46 - another really subtle thing
48:47 - is that a comma is the thing that
48:49 - differentiates your parameters and i had
48:50 - a
48:51 - minus there um
48:54 - so i can do this nothing happens nothing
48:56 - prints out
48:57 - i can right i could have done
49:00 - print age in here
49:04 - and now that i call this function that
49:06 - print statement won't print out
49:08 - but rather than printing the age i can
49:10 - return the age from that function
49:13 - and assign it to a variable and call it
49:16 - my age
49:20 - again nothing prints out i have no print
49:22 - statement here but now i
49:24 - can print my age i don't know if that's
49:26 - what it's asking me to do
49:27 - that's me to do dad a bunch more yeah
49:32 - kenny why like this is it's always hard
49:35 - to
49:35 - explain return statements when we're not
49:37 - doing a ton of stuff in our functions
49:38 - uh to begin with like why what's the
49:41 - value of being able to return something
49:42 - out of a function
49:44 - um you know like let's see when we're
49:46 - manipulating
49:47 - all these different values and we're
49:50 - performing some sort of calculation
49:52 - it's not it's not like it's a one-time
49:53 - use thing oftentimes we want to come
49:55 - back to it we want to store it somewhere
49:57 - and so like being able to return it it
49:59 - tells the computer to say like hey
50:02 - uh after you perform all these
50:04 - calculations
50:06 - let's have the option of saving it
50:07 - somewhere let's have the option of like
50:09 - storing it so that we can reuse it
50:11 - uh rather than print statements which is
50:13 - more or less for human readers where
50:15 - we want to see some sort of output as
50:17 - you've shown like without a print
50:18 - statement we can't see
50:19 - we don't know what's going on sometimes
50:21 - and so those print statements are
50:23 - reassuring
50:24 - reassurance for us that things are
50:26 - happening in the background
50:28 - and if we ever need to debug or
50:29 - understand what's happening we can use
50:31 - print statements but for the computer to
50:32 - use that information later on we would
50:34 - use return is how i sort of think of it
50:36 - yeah it's to get a value out that's a
50:38 - that's a great explanation to get a
50:39 - value out of the function so the
50:41 - computer can then do something else with
50:42 - it
50:43 - right so i could let i can then you know
50:46 - use my age
50:46 - in i can do my age plus 10. how am i am
50:49 - i going to be in 10 years right
50:51 - uh that should print 66.
50:54 - looking pretty spry for a 66 or 15 in 20
50:57 - in 2049 uh you know i'll be well
51:01 - i wasn't born in 93 but you know looking
51:04 - forward to 2049
51:09 - more kind of subtle things is that
51:12 - let me let me show a couple of things
51:14 - instead of doing return age i'm going to
51:17 - print age here so
51:21 - now two things print out which is a
51:23 - little bit confusing 56 prints out
51:25 - because i call the function here
51:29 - which does everything inside the
51:32 - function including printing something
51:34 - and then it stores the return value of
51:37 - this function
51:38 - in my age and because i don't explicitly
51:41 - tell it to return anything
51:42 - that value is the special python term
51:44 - none
51:46 - so it would be as if i had written
51:49 - return
51:50 - none so if you choose not to do a return
51:53 - statement it's like you do a return none
51:55 - at the end of the function
51:57 - the other thing that i want to point out
52:00 - is that
52:01 - if i return i'm just going to return
52:04 - hello here
52:09 - yeah i if i return something from the
52:11 - function
52:13 - the function is over it it stops it
52:15 - takes you back out to wherever
52:17 - wherever you called the function so if i
52:19 - run this code
52:22 - you'll see that age was never actually
52:24 - printed even though
52:25 - i called the function and that's because
52:28 - uh
52:29 - it hits this return statement and kicks
52:31 - me out of my function right so the only
52:33 - thing that's printed is
52:34 - hello a little bit confusing because
52:38 - it's like this is still part of the
52:39 - function it's still at the
52:40 - correct indentation level even though
52:42 - this line of code
52:44 - is guaranteed to never be executed
52:45 - because this return statement will
52:47 - always happen first
52:51 - so cool all right kenny i think we
52:54 - should jump to it
52:55 - do at least one of the code challenges
52:58 - uh yeah going to jump
52:59 - out of the lesson
53:04 - and function code challenges
53:08 - all right seven minutes let's see how
53:10 - far we get
53:12 - so right so these code challenges are
53:15 - something that exists on codecad me
53:17 - which i
53:17 - i think are harder than the average
53:20 - codecademy lesson
53:21 - but i think that they're really
53:22 - important and so if you come across
53:25 - these code challenges
53:26 - um in other codecademy lessons i think
53:30 - really do yourself a favor and take the
53:32 - time to like try to do these rather than
53:34 - skipping them or immediately asking for
53:36 - the answer or
53:37 - or stuff like that because i think that
53:38 - this is like really where you get to
53:42 - develop the computational thinking
53:43 - skills that you need to be
53:45 - uh to be a good programmer rather than
53:47 - just understanding the syntax
53:49 - there's a big difference between
53:50 - understanding syntax and being able to
53:52 - kind of think programmatically or
53:53 - computationally
53:54 - so let's do this first one so create a
53:57 - function called win percentage so i can
53:59 - do that
54:00 - easily so i can do win percentage
54:04 - that takes two parameters named wins and
54:07 - losses
54:09 - all right so it's defined so we're
54:12 - to return the total percentage of games
54:14 - won by the team based on these two
54:16 - numbers
54:17 - so let's see if i've won six games and
54:19 - i've lost four games
54:20 - i've won six out of ten games and so i
54:23 - should print
54:24 - uh 60. right so in this example it says
54:28 - five wins five losses should print 50 10
54:30 - wins
54:31 - zero losses should print 100. so
54:35 - what should what should i do how am i
54:36 - going to get this number to return from
54:38 - this function
54:40 - um let's let's do this step-by-step
54:42 - let's just find out
54:44 - how many total games there are first can
54:46 - we
54:48 - yeah create a variable for that
54:49 - excellent so that's going to be wins
54:52 - plus
54:52 - losses um
54:56 - and then i guess like let's define wind
54:58 - percentage
55:02 - yep so that's going to be winds divided
55:04 - by total games
55:08 - and then it seems like uh
55:11 - this is being asked to be to be
55:13 - multiplied by 100 right rather than 0.5
55:15 - i want uh 50 yeah right so this is going
55:19 - to give me
55:20 - again if it's if it's five and five
55:22 - total games is going to be 10
55:24 - wins is gonna be five so five divided by
55:27 - ten is point five
55:29 - times once i guess the naming i put win
55:32 - percentage not even realizing that
55:33 - that's the name of the uh
55:35 - function itself maybe we should change
55:37 - that a little bit yeah that's a good
55:39 - call that could be confusing i think it
55:40 - would work but it could definitely be
55:42 - confusing
55:42 - um so so
55:45 - um i'll just call it percent sure excuse
55:48 - me
55:49 - that sounds good cool and then final
55:52 - step
55:52 - is that i need to return
55:56 - percentage nice that's the thing that i
55:59 - want to
56:01 - be thrown out of my function to come out
56:03 - of my function and so now i can call my
56:05 - function twice
56:06 - and there we go and test it out
56:10 - and i can even come down here and say
56:12 - check answer and get a little
56:14 - fingers crossed okay cool that was a lot
56:16 - of pressure alex got a second breath
56:19 - yeah uh so to note uh we could do this
56:22 - all in one line i could do something
56:24 - like
56:24 - return wins divided by
56:27 - wins plus losses well i think you're
56:30 - gonna have a
56:31 - syntax yeah yes uh so yeah i didn't
56:35 - i didn't define win i just did wins
56:38 - cool and then yeah and there we go same
56:41 - uh
56:42 - oh and then i didn't multiply it by 100.
56:47 - there we go same answer
56:51 - all right um let's do one more
56:54 - and then we are out of time or any any
56:56 - questions that you think we should hit
56:57 - first kenny
57:00 - so far none of the specifics can do you
57:02 - mind talking about like what a value is
57:04 - really quickly and maybe the data types
57:06 - in python and how we're able to do all
57:08 - this computation stuff
57:10 - yeah so that's something that we went
57:11 - over in the last week's
57:13 - session and more specifically in
57:16 - all of these variable lessons but yeah
57:19 - that's a good point where
57:21 - right now right so if you want to take a
57:23 - look at that more detail
57:24 - um variables and basic syntax
57:28 - has a lot of that information in it but
57:30 - it's a good
57:31 - point where right now i'm uh kind of
57:33 - doing this
57:34 - addition and division and multiplication
57:37 - assuming that these are going to be
57:38 - numbers
57:39 - if i passed in a string it's probably
57:41 - going to break horribly
57:42 - let me pass in kenny and
57:46 - yeah so i get an error right and it has
57:48 - something to do with type error
57:50 - must be string not integer so uh
57:54 - let's see i'm using kenny as my wins so
57:57 - when i try to divide a string by a
57:59 - number or when i try to add a string and
58:00 - a number
58:01 - together something goes wrong so that's
58:04 - a quick example of how
58:06 - data type is really important where um
58:09 - you know these operators are going to do
58:11 - different things depending on the
58:12 - different types
58:14 - good to know thanks for the overview
58:16 - yeah
58:17 - um any other questions um no i think we
58:20 - can
58:21 - try to squeeze out the second one and
58:23 - then
58:24 - leave the third one the last few ones
58:26 - for uh
58:27 - everyone else to try on their own sounds
58:30 - good yeah this uh this one is
58:32 - fairly similar we're just gonna try to
58:34 - find the average of two numbers
58:36 - um so that's going to be f average
58:40 - again two inputs this time we're asking
58:42 - you to define them num1 and num2
58:45 - so the average of two numbers is just
58:47 - those numbers
58:48 - added together so um i'll just do
58:52 - added equals num1 plus number two i
58:56 - could probably call it sum
58:57 - although some might be a function name
58:59 - might get funny
59:00 - um and then i'm just going to straight
59:02 - up return added
59:04 - divided by 2. then again let me test
59:08 - this function by actually using it and
59:10 - printing the results and there we go
59:16 - i really want to kind of stress like i i
59:18 - think i think as i was doing this last
59:20 - time and then
59:21 - you know i realized let's switch this
59:23 - back to 10.
59:26 - as i was writing this function i kind of
59:28 - tested as i went along where i first had
59:30 - this
59:31 - and i saw this output and was like oh
59:33 - shoot i forgot to multiply them apply it
59:34 - by 100 that's not what i expected
59:37 - as you're working on these code
59:39 - challenges i would i really suggest
59:41 - doing kind of exactly what i'm doing
59:43 - where it's like write your function test
59:44 - it out
59:45 - see the output and if it's not what you
59:47 - expect iterate on it
59:49 - and do and try that a little bit before
59:52 - you know
59:52 - checking the answer um and usually we'll
59:55 - we'll give you comments here like
59:56 - describing what the answer should be
59:59 - um so you know check answers should be
60:00 - pretty redundant of
60:02 - you know if you see the write out but
60:04 - there's a high chance that you got the
60:06 - uh
60:06 - that you got the answer right i really
60:08 - kind of want to encourage people to
60:12 - do that cycle of write their function
60:15 - uh test their function look at the
60:17 - output
60:18 - test the function on different types of
60:20 - input and output to make sure all of
60:21 - your bases are covered
60:22 - all the different situations are covered
60:24 - and then after like thorough testing and
60:26 - as long as the function
60:27 - is um doing what you expect it to do
60:30 - then you can kind of say yeah i think
60:31 - this function is working correctly
60:34 - i think that's a really good point alex
60:35 - because i think like in you describing
60:38 - that it helps catch errors
60:40 - really early on rather than like having
60:42 - written a whole bunch of code and then
60:44 - going back to see
60:45 - where in all that code you had some
60:47 - weird error come up so
60:49 - they would very much recommend your
60:50 - approach as well
60:53 - all right cool we are basically out of
60:55 - time um i want to
60:57 - call out yeah mark lam in chat said
61:00 - uh it was helpful to take these lessons
61:03 - beforehand
61:04 - before watching the um series and so i
61:07 - think that that's
61:08 - a great way to do this there are a
61:09 - couple of ways to interact with this
61:10 - content but
61:11 - yeah this course is sitting on
61:13 - codecademy it's it's sitting here
61:14 - forever
61:15 - right next week on tuesday we're going
61:17 - to be going through this control flow
61:19 - section
61:20 - which will be similar format of there's
61:22 - going to be a conceptual lesson and then
61:24 - a lesson in python
61:25 - and then some control flow challenges so
61:28 - if you want to do that ahead of time
61:29 - come prepared for questions
61:31 - um you can do that i want to show off
61:33 - the events
61:34 - page um you can register
61:39 - for these events on our events page on
61:42 - codecademy codecademy.com
61:43 - events you can also find it through you
61:45 - know the homepage
61:48 - so next week we're doing control flow if
61:51 - you do
61:52 - do the um lesson ahead
61:55 - of time and have questions um there's a
61:57 - form
61:58 - for where you can submit questions ahead
62:00 - of time that we can cover
62:01 - and then similarly if you have any
62:03 - feedback about these live stream series
62:05 - um we'd love to hear from you this form
62:07 - is linked on all of these events as well
62:09 - so yeah if you're if you're watching
62:11 - this right now and want to give us
62:12 - feedback
62:13 - um let me post this link
62:19 - post this link in the chat kenny might
62:22 - have got it already
62:23 - no here i i just pasted it in uh
62:26 - the events page but that feedback
62:30 - yeah um okay cool let me
62:35 - any other questions that people have we
62:38 - should cover kenny
62:39 - becca actually brought up a really great
62:40 - point uh because in our average
62:43 - example in our average function we
62:44 - shouldn't really be using length or
62:46 - trying to accommodate like however many
62:49 - numbers rather than just
62:51 - two but going back to what we talked
62:52 - about hard code
62:54 - we only hard coded and allowed for two
62:56 - inputs
62:57 - um which makes it easier for us to do as
63:00 - a code challenge
63:01 - um but later on difficulty does increase
63:04 - with other code challenges so
63:05 - definitely try them out yeah that's
63:07 - actually um right
63:09 - that's kind of how i like to build up
63:11 - like our
63:12 - our toolkit of things that we know in
63:14 - programming where right now we know how
63:15 - to do it with one variable maybe two
63:17 - variables
63:18 - but as we learn about arrays or lists or
63:21 - whatever the
63:22 - you know the structure is that you're
63:24 - using
63:25 - um we can then start to do different
63:27 - things like
63:28 - find the length of that list to get the
63:29 - total number of things that you're using
63:31 - loop through the list to add them all
63:32 - together right so
63:33 - we're kind of starting small individual
63:35 - blocks individual variables
63:36 - and then as we learn more and more
63:38 - things together we can do
63:40 - um similar things a bit different
63:44 - all right cool um again let me plug uh
63:48 - we're doing this again this is um
63:51 - material similar to an intro college or
63:54 - intro high school
63:55 - course we're doing it because uh we have
63:57 - a back to school campaign
63:59 - if you're a student there's a new
64:00 - student discount price for
64:02 - pro membership um there's all of these
64:05 - you know lots of lessons and tons of
64:07 - different programming language so
64:09 - this is a thing that seems interesting
64:11 - to you i would definitely
64:12 - um suggest getting on the student um
64:15 - membership
64:16 - i'm super excited that we have it now i
64:17 - think uh tons of students could benefit
64:19 - from
64:19 - especially you know being in quarantine
64:21 - or if their
64:22 - college or high school is remote all
64:25 - that sort of stuff
64:26 - this could potentially be a good
64:27 - resource there's also some free courses
64:28 - on there too so even if you don't want
64:30 - to be a
64:31 - paid member there's some uh good courses
64:33 - that go over these like fundamental
64:35 - topics
64:35 - as well um so yeah if you if you like it
64:39 - um
64:40 - we'd love for you to join more and yeah
64:42 - anything
64:43 - anything from you kenny oh just glad
64:46 - everyone was able to
64:48 - take some time and join us today and
64:49 - wouldn't really be a lesson without
64:50 - other people joining in so
64:52 - and really the interaction that's going
64:54 - on in chat appreciate you guys
64:56 - yeah chat if you could spam kenny rox
65:03 - i've never volunteered for this again
65:04 - alex yeah
65:06 - so that was we had a live stream like
65:08 - months ago where uh where chat started
65:09 - to do that and
65:10 - uh i loved it kenny was uh uh
65:13 - made kenny blush oh am i turning red i
65:16 - gotta
65:17 - i gotta sign off this is it all right
65:20 - kenny
65:20 - this is fun uh we'll see you all we'll
65:22 - see you all next week

Cleaned transcript:

hello everyone welcome to another edition of codecademy live my name is alex koontz i'm here with my coworker kenny kenny how's it going hale glad to be here this is our second time doing functions that's right yeah kenny and i went over this exact lesson in another live stream a little bit ago so we are uh well prepared to lead this one but we're going to also go through a couple of new uh content items which will be really fun um i see lots of people in the chat already so if this is your first time watching one of these shows um we are doing this live stream series called cs101 yeah i see lisa saying kenny is in the woods uh i lost here uh we are doing this livestream series called cs101 we are going through kind of the fundamental um programming topics so this might be stuff that you might see in your first few weeks of a college level course or even a high school course one of the reasons why we're doing this is that we just announced a new student pricing plan we have a discount for students uh there's lots of information on our website if there's like a giant banner so if you're if you're curious about that you can go ahead and check that out but that's kind of the reason why we're doing this live stream in particular is that we really kind of want to uh teach the very fundamentals of coding uh right now we are streaming on a bunch of different platforms i think we're on twitch twitter youtube and uh facebook kenny and i are uh primarily looking at the youtube chat so i see lots of people are talking in the chat already hello we are so glad that you are here thanks for chatting we want this to be as interactive as possible so feel free to ask us comments in that chat um as we go through this lesson and then yeah if you're watching on another platform and want to interact with us i would say probably the best place to go is to youtube to chat with us there yeah at us yes uh kenny i'm so glad that you're here uh kenny's done a couple of these live streams with me and uh you know the people love kenny uh hashtag kenny rocks can you build it out i'm trying to put on a more professional setting right now right here in the woods i'm reinventing myself yeah cool all right so let me show you what we are doing today so i'm going to share my screen let me figure out the trolls all right so right so this entire um live stream series there's gonna be eight of them total this is the second one that you're watching and what we are doing is we are walking through this cs101 live stream series course that's on our page if you want to code along with us you can do so you can find this in the catalog i've also linked to this course on the youtube description all that sort of stuff so we're going to be walking through this course and every week we're going to be doing a different module from this course so last week we did variables and now we are on to functions um cool uh right and then uh one final thing before we get started all of these are recorded and put up on youtube after the fact so it's likely that you are not watching this live that you're watching on youtube after the fact we are uh we air these live every tuesday at 1 pm eastern time so if you're checking this out in the recorded version of it and want to join a live version in the future you can find us 1 p.m on tuesdays and we would love to uh we'd love to see you there i just want to say like for people making full use of chat while we're here or we're live definitely add us definitely like just ask questions as we go along i'll mostly be in charge of looking at the chat and answering questions but as people bring up like really good points i would love to raise that to alex who's going to be walking us through that content and like taking breaks and stopping along the way to see what else people are thinking cool all right let's do it so uh we have two lessons here and actually one of the cool things about this live stream series is that we're able to kind of pick some of our favorite lessons across the codecademy catalog and so this first this first lesson is teaching the idea of functions from a very language agnostic sense kenny what do i mean by language agnostic that's like kind of pretentious wording for me to be using what am i talking about that's that's like the technical way of saying it right like i think language agnostic it could be applied to any sort of language it's just a very common like programming idea and concepts that are used throughout right yeah exactly and again kind of like one of the things i really want to focus on is that everything that we're going to be learning today can be applied for the most part to any coding language that or any programming language that you're going to start with so certainly python javascript java swift um c plus c sharp like all of these share these same fundamental ideas and so you know when i teach when i was teaching high school classes um i actually jumped around across these languages a lot because really the important thing is like understanding the fundamental concepts more so than the syntax itself and so we we've built these little applets to kind of make the syntax easier right there's still syntax here it's just rather than typing code i'm going to be clicking on buttons um in this lesson it's that's kind of like the same principle of swift have you ever sorry not swift i've scratched have you scratched before kenny i was gonna bring that up i just had someone email me about like ideas that they want implemented and they showed us showed me a screenshot of what scratch looks like and i was like this looks like what we're talking about today how convenient yeah scratch is a great programming language uh developed by mit that's really good for beginners again because the syntax is very minimal it's mostly gui based it's mostly you know buttons and drag and drops and that that sort of thing and so yeah let's uh let's get into some of our little outputs here so right this week we're talking about functions and kind of the main idea of a function is that it's going well there are many different things it's going to bring together different uh tools in your programming toolbelt so you might know how to add something you might know how to print something you might know how to do all of these things and we can combine multiple statements into a single block of code with a function so in this example our like single statements are the steps that it takes to build a uh sandwich or a hamburger i guess um so i can do things like add bread add the burger patty pickles let's put another burger and i can add more bread um kenny any thoughts on this you were smiling i i was just thinking how you you mentioned uh making a sandwich and then bringing up the burger and i was like that could be a very divisive topic but i don't want us to get derailed yeah all right yeah is a burger sandwich it's cereal soup all that good stuff i think that's a really good point about like how these like even mundane things like task of making a sandwich making a burger it seems so intuitive to us but like breaking it down into these smaller steps and then knowing that this one big step is just a combination of all of it really highlights like how functions are used and why we would want to use one yeah and in fact one of the things that i from doing the this series uh doing last week's stream one of the things i noticed is as i was going through um these guise i was kind of doing things that were kind of so obvious that it wasn't even worth pointing like pointing out like when i clicked on something something happened and something i'm going to try to do as we go through this is really like highlight the very subtle things that are happening here that then become very important when we're writing in a programming language like python so to start that let's look at this second exercise which will show uh the reusability of functions so rather than having to make uh to click on each one of these to make the hamburger we've now added this function make hamburger which should do all three at once right bread patty pickle another piece of bread and all of that is happening at the same time so kenny what are some of the like subtleties going on just in this image alone that is going to be important once we bring things into the python um yeah i think like those individual steps the ordering of which it's done and then showing it that it's done as a collective uh so like if things start going wrong with our burger let's say like uh a burger patty is missing or pickles are on top of a bread like we can look back instead of going through each individual uh statement and we can look at it as a collective like what's wrong with our function rather than looking through all those lines of code or all those little buttons to see what order it was probably done yeah totally i think this this kind of goes along with what you were saying but these curly brackets here so that's how in this programming language in this syntax that we've created here that's how we are saying what's inside a function or what's part of a function right it's everything that's inside the curly brackets and again that might be something that is so kind of selfevident from just looking at this picture that you don't really realize but once we move into a program like programming language that uses text like python defining how a statement is part of a function is important right you might throw a syntax error if you if you do it incorrectly right you might have a bug in your program and so realizing that okay in this programming language we use these curly brackets in python it's going to be a little bit different python is all about indentation so that's something to that's something to realize um another thing to point out here is that our function has a name right our function's name is make hamburger we can talk about these parentheses in a second but that's going to be something that's explicitly important is when we define a function in python we're going to have to give it a name and then finally beyond defining the function in order for the function to actually do anything we need to use it and so in this syntax i can use it by clicking on the button make as many hamburgers as i want and in python we're going to use the function again in a different way we're not going to be able to click on something directly but we can define the function and then later use it yeah i see uh lisa in the chat is talking about uh or indentation with python exactly cool um let's move on to the next one all right cool this one is this one's definitely very important so this is uh we've called this the flexibility or function for flexibility so one of the things that you can do with a function is add add parameters or add you know elements that you have control over that you can change so last time our function was static basically it couldn't change every time that we clicked on make sandwich it was going to make the exact same sandwich in this example we now have a little bit of control over the input to our function so we can say instead of a burger patty let's add peanut butter and instead of pickles let's add cheese kenny how does this relate to uh programming in a more traditional programming language um gives you a lot of options to make choices like customize what your function is able to do so before we were always stuck with like a burger patty pickles um as our like filling but now with inputs with parameters uh we can actually customize them this time around it looks like we're going to put peanut butter and cheese together which perfect yeah and again i think there are subtle things happening here where notice when i change peanut butter to ham the content of the function itself kind of automatically changes that's something that's probably a little bit too complex to do really easily in python to like change the content of the function itself in python you might imagine like an if statement if you're familiar with those like if this first input was burger patty then we want to do at burger patty otherwise if it was peanut butter then we would want to add peanut butter right in a real python function there might be some like control flow elements here where depending on what the input is the different lines of code would be wrong what am i getting into control flow though alex can you talk a little bit more about that yeah so i think that's our next next week section and yeah again that's the idea of you want your program to do different things depending on certain inputs or certain settings basically and so here we're kind of defining our setting or our input and unfortunately we're not i mean it's it makes for a you know pretty concise little applet here but we're not really showing the control flow of like if burr patty then add burger patty um you know if um what about like customize like making it easier for the second option to make sense like if it's a burger patty let's add some pickles rather than like if it's a burger or like a peanut butter let's not add cheese to it um i'm really harping on that peanut butter cheese conduit i'll stop yeah yeah so that's a good point right maybe maybe we only needed one parameter here and if we chose burger patty then that defines that hey we're probably not gonna put like jelly on it right but if we chose peanut butter then we would put jelly on it um nice and and you'll know one final little thing is that you'll notice that we have parentheses around these two inputs and if you go back to our last one i said like oh there are these parentheses here right there are these open close parentheses here which was basically saying this has no input right we didn't have any ability to give the function any input and so in this one we do and that input is between the parentheses i just want to say it right now like too thank you alex because i think you're outlining a lot of things that i'm taking for granted right now and visiting this topic it's like it's very refreshing yeah i mean so this is something that i know as i was going through we did variables last week right and there's like there's so many like small little things that you don't even notice even like okay i've defined the variable but then nothing happens with it until i use it and so that's the same thing here where i can define this make sandwich function but you know that doesn't do me anything until i actually use the function all right this one function for organization so beyond kind of combining code to make it reusable right i can make multiple sandwiches at once um another good benefit of functions is just organizing your code kenny can you talk to a little bit about why you might want to break your code into several uh chunks or several functions yeah i think one topic that we don't talk too much about is just like how to read code how to go back and understand what it's uh actually doing like building upon the literacy that you're you're developing as you write code um and it just makes it easier to go back like to create uh these programs that do very precise things rather than having as you see in that organization that first bullet point of a giant blob of text which is fine it's readable it's just it takes that much more effort to break down and really understand what it's doing rather than if you were to segment this into uh so these different functions like make sandwich make fries make ice cream where everything has its own place it occurs at a very specific time and you know what they're doing at each individual point yeah exactly and and i'd like to point out that the naming here is also pretty important where as you develop more and more functions naming them appropriately so you can remember what the heck these functions do after the fact really kind of like one of the benefits of of a function is that after you write it and you validate that it works exactly how you want want it to work you can kind of forget about what's inside of it right unless it unless that starts breaking later on and you have to dive back into the function to figure out okay what's actually happening happening inside the function one of the nice things is that i don't really need to know what makes some fries does as long as i'm happy with whatever it's doing all right so this last exercise in uh in this lesson is kind of translating these uh the gui the button version of this code into a more traditional programming language in this case uh this is javascript um but we will shortly be doing python uh let's see what they are asking us to do the bottle bottom of the code change burger patty and pickles to peanut butter and jelly right and then so if i make that change and then run the code let's see there we go cool so this was this was an example of calling a function again with different input but rather than using that drop down menu like i was in the previous exercise now we are kind of in a more you know a more traditional programming uh environment where i have to type out the parameters that i want um this is maybe a good opportunity to show like you know as you're making your function you have to consider things like what if the user inputs something that i don't expect so so if i just like typo jelly if i make it 1l let's see what happens here so jelly is the second parameter so that's going to be topping 2. so topping 2 gets thrown into this sandwiched string and then something is eventually going to happen with the sandwich string but let's see what happens i bet this totally breaks yeah there we go one or more ingredients are not valid so yeah this is actually a good example of whoever wrote this little applet which was uh some of our brilliant curriculum developers either zoe or nick i think this is a nick creation [Laughter] he wrote his function or whatever is using this function to be a little bit versatile right it expect it handled this error pretty um pretty well where this is uh this is an input it didn't expect and so as a result it says hey that's not valid alex can you try strawberry scoop in there because i think this is based on like the functions that are available from the other let's see like the app yeah strawberry scoop let's see if he built in yeah nice nice nice there you go so you can mix and match your sandwich stuff with your ice cream stuff sometimes what you want yeah this is kind of fun i always like looking at this although i feel like it's potentially overwhelming uh i have my like special codecademy author mode turned on so i can actually go and look at the files that are building this and so we're asking that you that you know the student right in maine.js but if we take a peek at sketch.js i would bet it's in topping oh no you're right you're right sketch oh interesting there's also topping yeah we can look at toppings.js so you know there are multiple files here but you can kind of see um how we built this we have different images for brackets we have you know we're like defining the uh size of the canvas um the thing that we ended up building here was let's see if we can find this make sandwich function um i think you can our search no not on this one so let's see oh and then we have a bunch of code commented out i think we'd be going through a bunch of yeah like a bunch of commenting out code and just a lot more stuff that we don't intend to teach at the moment so yeah while this is a nice behind the scenes glance we're so close to finishing like the basics of this can go on to then python yeah cool so let's do that um let's see if there's anything in this last review section um yeah so let's cover this review very briefly so great a function is a sequence of instructions that perform a specific task packaged as a unit so that's you know all three of these things are packaged together into the make sandwich function um when we define a function we specify the instructions input and name of the function so that's kind of three parts the instructions are the curly brackets right the things between the curly brackets are the instructions for the function the name is make sandwich or make some fries or make ice cream and inputs in this case all three of these functions have no inputs right they're all open close parentheses meaning no inputs um when we call a function all of its instructions are executed so calling a function in this case is me clicking on the function button functions can be executed many times so as you've seen i've already made two sandwiches that can make a third or a fourth and fill this up and see if it breaks the breaks oh my god it starts maybe looping i think somehow like bread got pushed past that table of it or i don't know or not yeah it's funny uh yeah a little bread popped up there you're all out in fact for you alex this is actually it looks like when i was looking through the code it looks like it's based off p5 so yeah this definitely is i really love p5 it's so it's so much fun to make kind of little interactive things like this um let me reset to get rid of all these functions can have parameters which accept inputs input values making it flexible again that's kind of what we talked about these have no parameters but we could give it a parameter to say hey instead of burger patty add peanut butter and then finally um functions organize a program into distinct units making interchanging and editing them easier this makes your entire program organized and modular right so i can uh kind of break up my program into different chunks i can it makes it better easier to find errors where if i know something is wrong and make ice cream well make ice cream is only this code right so in general making a program as modular as possible is really nice all great points kenny any leftover comments from the chat that uh you want to get into i don't think so i think we covered most of the basics of functions um and people wanting to like get into specific examples maybe so it sounds like a great time for us to just dive into python and what like functions in python look like how we translate this very conceptual topic into something more concrete cool let's do it so uh yeah let's jump into this second lesson in the functions module this is now all going to be functions in python right and the point is just like again we could have chosen any language but python is probably one of our more popular offerings right now yeah python's uh popular offering i think it's also pretty good for introductory or for like new students where you know they're like all programming languages there's some things that are confusing or could cause a bug or an error but in comparison to others i think it's relatively minimal i know um the very first time i was in a classroom i taught the ap computer science class which is which is taught in java and there's like so much stuff in java that makes it hard to even do anything and so once i wasn't teaching the ap i started teaching python which is um a little bit easier to just like get off the ground get writing code um yeah okay cool um so in this exercise we again do kind of a conceptual thing at the start i think we can kind of go past this since the conceptual lesson covered all of this but this is a cool little example of the function is adding one side the input is a shape and then the output is another shape with one more side all right so in python so here's an example of our first function let's kind of since we've already we already have a conceptual understanding of what a function a function is from the burger stuff let's look at let's translate the stuff that we understood from the burgers into python code so kenny what is the equivalent of the curly brackets here like what is the how do you define that these lines of code are inside the function in python i guess for python it's more that they're all on the same indentation plane is that right yeah exactly so um one really subtle thing is that it's it has to come after the definition of a function which uses this def keyword uh the name of the function the number of parameters and a colon and then after that colon they're all going to be indented one level from there so if i did something like this where this is now no longer indented this is probably going to cause a syntax error because uh this is now outside the function the function is going to be considered to be ended and then this is indented and it's going to be crazy right uh yeah it aired on line 5 because this is this line is indented once uh because it thinks it's inside the function but the function actually ended right here because the indentation stopped so that's kind of one of the small little subtleties in python it's all about indentation and indentation matters all right how about the function name i kind of touched on that already but uh kenny how do you use the player function in python it's good that you brought it up because sonic uh money i just asks what does death mean and uh def i guess in python is short for define or like to define a function so after death you provide a function name in which that block of code that follows in that indentation will be associated so you first write depth function name some parentheses uh we'll get into like filling in those parentheses a little later and then a colon followed by the indentation that's how you define the function nice and then final thing right we'll get we'll get into the parentheses later for now it's actually the same as our hamburger example where we have open closed parentheses to signify no parameters right no input into this function uh meaning that it's gonna be pretty static it's always gonna do the same thing but final thing that was pretty intuitive in the clickable burger version how do we call a function now we've defined the singsong but how do we call it kenny you wanna i i imagine so last time we when we had the button it just had the name itself so i guess in this case sing song uh and it's since we don't provide anything inside the prince we just add parentheses in there awesome and that should be it yep there we go so and you can see it now that i've called it when this line of code is is run it goes to find wherever singsong is defined and runs the code blocks in there which is for print statements so showing the reusability of functions just like i can you know spam click the make hamburger button i can spam sing song right i can call this as many times as i want mad lad alex oh my god i could i could make a for loop right but you know we'll get into all of that later spoilers come on yeah okay cool um and anu yeah we just did the second step so we'll be covering all the steps as we go along or we'll try to all right cool so we kind of already went over this but uh in the last exercise we already have the function defined for us let's define a new function ourself so this the name of this function that we want is a loading screen so again i'm going to use that def keyword to signify that i'm giving i'm defining a function i'm giving it a name that name will be a loading screen something that we don't say here is that a loading screen should take no parameters um so i'm going to do open close parentheses and then a colon and then what does this function do well for right now all this function does is prints uh this page is loading all right cool so i just ran my code why did nothing appear in my output kenny oh remember uh even though we provide those instructions and we wrote in the code for our functions it doesn't actually do anything until we call it exactly so i can go ahead and now call that function and there we go we can kind of confirm that the function ran by seeing the output one thing i want to note is that not all functions necessarily have output right this one prints this message this page is loading but you know other functions don't necessarily need to give you output might be a little bit hard to verify that you're actually calling them right you would never actually see the output but a lot of functions might just like change a variable that exists elsewhere in your code or do something like that you know ultimately somehow you will probably see some output from calling a function at some point because otherwise you know why are we even programming if we don't get any output but you know a function doesn't need to provide output a great question from mark lam when doesn't a function take parameters or i guess the question could be phrase like when don't we have to provide parameters to a function yeah that's a great question i think probably most functions that you write will take a parameter of some sort so the advantages of parameters is that they give you a little bit of flexibility right they can change what your function does in some way like back to the hamburger example like i could change it to be peanut butter rather than a patty um so it gives you a little bit of flexibility it lets you do different things with your functions functions that don't have parameters like this this one they're always going to do the same thing but that might be useful right like functions without parameters are probably most useful for like the organizational part of or the organizational benefit of functions where you know this could have a bunch of print statements right like if for whatever reason i wanted to print this out six times rather than having to do this you know write these seven print statements every single time i want these seven print statements to appear i could put it all in a function have it have no parameters and then run my function a couple of times and you know it kind of that's kind of like helping for the organizational um structure of my code um a couple of interesting points here uh in this in these community forums section the question is is it okay to place function calls inside of another function uh the answer is definitely yes that even gets into something called recursion um but if i had another function um and this is and that does a different print statement and then this function let's say it calls that other function and notice the indentation let's have it call it twice all right so right now nothing happens i haven't actually called any functions right i've defined a function i've defined another function but none of those neither of those functions have been called if i now call or use loading screen there we go so this function happens once which prints something and then calls another function twice a third point i think one thing that i was confused about when i was starting to learn code is it looks like in loading screen we are calling another function and we're actively calling it but this just kind of reminds me like none of that code inside a function is actually executed or runs those instructions aren't told to the computer until we actually call the main function there which is in this case loadings yeah exactly and again the the subtlety of the indentation is really important where if i if i do that now all of a sudden loading screen the definition of loading screen is only that and then i'm calling this function after that so i've it's like you know the spacing kind of helps help show that but it's like the same thing as that where um i'm calling another function once i'm never calling loading screen so the indentation there is really kind of important and a little bit subtle um and just for completion's sake alex if you put like uh a line in between print and another function calling that does that affect anything like yeah let me uh let me call loading or yeah so if i if i run this now um nothing gets run again no functions are being called that's because both of these are in the function definition of loading screen so um if i call loading screen if i use that function again the parallel is me clicking on the button back in the gui version yep you can see that both are a part of the function so this this new line uh doesn't end the function or anything as long as you know the next line of code is still at that level of indentation it's still defined as inside the function and this would be like this question is specific to python but does tabbing matter or is it like do you have to do two spaces what's what's the deal with that yeah that's a good question and something that uh might be you might find bugs on our or you might find an error message on our platform about this and be fairly confused about it so right the difference between a tab and a space does matter so right now actually we might have fixed it so right now if i tab there it actually is two spaces and that's because if uh shoot what's happening uh that's because if this was actually a tab and then this was two spaces that would cause that would cause a syntax error in python and so yeah that's a really good point of um you have to make sure your tabs and spaces uh are consistent another thing is that some people uh so right now this is two spaces uh four spaces also works um but mix mixing and matching does not so four two four yeah lisa just came out with a controversial opinion of us saying spaces is better i think again debatable we'll see form your opinions yeah um i don't know if i have a strong take on this honestly do you uh i'm i guess i'm just lazy i like tabbing um and i have it configured in my uh text editor so that tabbing is two spaces yes i don't know if that's like a middle ground for anyone um that's where just the lazy just like whatever my text editor will take care of it prettify it that's what libraries all right we're getting totally off topic but let's come back to this white space because we kind of talked about yeah um actually yeah i scroll down here to look at this question and python is a single tab equivalent to two spaces or four sometimes so can it be mixed we just covered that so that's great nice um cool so great let me run this code right now and look what's printed out so uh kenny looking at this code what do you expect to be printed out here looks like the function is about this computer has two print statements um and then calling it is gonna execute those two print statements yep they're both part of the function because they're both indented uh um once this is like what uh what a dated reference of this computer is running on a version of everest puma i feel like this was a joke of like all the old mac operating systems used to be big cats right now and a mountain and what does it now event deserts they're all uh national parks i think right like uh yeah um yeah so our old reference to everest puma um all right cool remove the indent on the second print statement run the file now what's printed uh yeah and so the order here matters so note that in this version this computer is running on virgin everest pumbaa came first and now if we do this what do we think is going to happen so i kind of made the spacing uh to kind of give you a hint but now that print the the order is going to be reversed because this print statement is no longer part of the function definition so that happens and then we call the function yeah if we do it here now they're both part of the function and so it happens one two rather than two one all right all right so parameters awesome so parameters as we've kind of talked about are the thing that allows you to manipulate what your function does so right now let's see function multi to add three prints a number multiplied by two and added and added to three as is it as it is written right now that number is always five so if i call mult to add three no parameters i'm gonna do five as the number times two plus three so this is kind of like with our hamburgers that button without parameters would always give us the patty with pickles so instead of doing that modify the function definition so that can have a has a parameter called number then delete number number equals 5 on the first line of the function so if i get rid of this give it a parameter name number now i need to when i call the function i need to give it a number so i can put 1 into my function but now i do 1 times 2 plus 3 which gives me 5. i can also call it with 5 using the parameter i can call it using negative one as the parameter and i can call it using um zero as the parameter cool so our function is now a little bit more versatile right it's always doing the same thing it's always multiplying 2 and adding 3 to a given number but we now have the power to say what that number is um dimpledes asks why use prints instead of return i think that's is that our next exercise yeah let's get to let's look at what we have coming up multiple parameters keyword arguments okay so i'm gonna go through this next one pretty quickly um let's see um so this is asking us so instead of multiply by two and add three let's change the name to multiply by x and add y um x add not and add y cool so right now i'm still multiplying by two adding three but let's add some new parameters so again i have power over what these multiplication and addition um values are so if i now say okay this now takes x and y as parameters i'm still not actually using those right i've still hard coded in my two and my three but now i can say okay rather than two give me whatever x is and rather than three give me whatever y is let's stop you there real quick for a second alex because we kind of touched upon this last time but we didn't come up with the term of hardcoded and i think there might be some confusion in the chats like what what it means when something is hardcoded can you explain that a little yeah so that's um that's exactly so let me go back to this so right i would say that two and three are hard coded here meaning that they basically as as the user i have no power to change what they are right um if i was a programmer i could come in and edit the code but um as the user they're set right they're not flexible i can't change them they're not attached to a parameter of any kind they're not attached to any of my input any of any kind they're hardcoded into the code itself um can you think of like a a real example of something that's hardcoded um yeah i mean when we were let's go back to that example uh before about making sandwiches we're making a burger where we always wanted a burger and we'd always have our bread we'd always have our pickles i would say lettuce but pickles sure and then patty followed by bread and so all those values were hardcoded for us and i'm seeing some great examples where people are saying a hardcoded isn't one is when we don't use a variable uh we don't allow for input in that um emily says it's fixed yeah um uh lisa says embedded within and all these things yeah are reminding you just like like you mentioned we can't interact with them they're provided for they're fixed in place yeah um yeah i'm trying to think of i always like to relate it to something like a real application right i would say right something that's like not hardcoded is maybe your um username on an app right on instagram you have your username which is a variable it's not hard coded in it can be changed it can be displayed just depending on who's logged in and then what's something that is like hardcoded into instagram what's something that's like static oh my god worst person to ask because i don't have an insta but i imagine something like background pages are those colors like always the same thing always sure yeah yeah kind of just like static things probably the the image of the like heart right that image is probably hard coded into their um into their code where that heart is like it's gonna you know gonna be used everywhere and it's never gonna be alex i just have to take your word for it that there's a heart and it appears somewhere in instagram so sure yeah i could uh yeah oh man we really had the opportunity to convince kenny that instagram was like uh something completely different it's like what cats it's just about cats yeah exactly um okay cool so i'm to the point where i have replaced my hardcoded values i've replaced my two and three with my parameters so now i can call my function so i can call mont x add y i give it a number of five so i want five to be multiplied by x which i'll make two and then added to three there we go and then i can call it again but with different parameters one three one there we go i think one thing that people one thing that's a little bit tricky with the um with functions and parameters is that people get confused about this about like the variable name of like okay i've named this x i'm using x down here but what value does x have and really the answer to that is that x can be anything and it depends on when you use it right so i'm using it down here and in this case i substitute 2 for x which will then make you know it multiplied by 2 and then 3 for x this is actually something that i think didn't we didn't really show in the hamburger example we didn't give our um our parameters names i think let me actually i'm so curious that i'm going to go and look though we are running low on time um let's see my hamburger example when i had flexibility because we didn't yeah i don't think we ever showed like the defining of the function in that sense it's more like these are yeah right so we we're not showing that this right we're giving it value here just like in our code we're calling the function and giving it value here but we never actually show right if we were writing this code in python we would first need to define make sandwich having two parameter names um something like patty type and you know condiment type or something like that and we never actually did that in this uh in this exercise so again another good example of like some of this stuff is like so kind of um you don't even realize that it's happening which i think is kind of it's kind of the point of an introductory programming class where it's like it's to get you to realize these like small subtle things that are super important for programming because if you don't pick up on them you're gonna have errors and you're not gonna you know your program is not gonna run but they're like small enough that you almost don't even notice that they're happening at first um to me that's really like the goal of an intralevel programming class is to get people to see um to just like start viewing the world from this like really precise um framework where you know things need names in order to uh be referenced and over in our example we weren't giving it a name one good point all right um i'm gonna jump to and then i think we should do some of those code challenges at the end kenny so so far we've always been using print but a function can also return something and there's a kind of a for our purposes there's kind of a very subtle difference to these right now because really all that we can do is print but right now this function is doing something with age it's doing current year minus birth year and i can use the return keyword to return age um and let me my system's all screwed up because i skipped an exercise because i have all right cool so there we go i'm returning the age and now when i call my function so i can call calculate age i can say the current year is 2049 according to our little prompt and whoever wrote this must have been born in 1993 cool so i can do this but and nothing's going to happen i can run my code uh and i actually got an error birth year oh i did a minus not a comma that's a that's a good catch uh yeah so another really subtle thing is that a comma is the thing that differentiates your parameters and i had a minus there um so i can do this nothing happens nothing prints out i can right i could have done print age in here and now that i call this function that print statement won't print out but rather than printing the age i can return the age from that function and assign it to a variable and call it my age again nothing prints out i have no print statement here but now i can print my age i don't know if that's what it's asking me to do that's me to do dad a bunch more yeah kenny why like this is it's always hard to explain return statements when we're not doing a ton of stuff in our functions uh to begin with like why what's the value of being able to return something out of a function um you know like let's see when we're manipulating all these different values and we're performing some sort of calculation it's not it's not like it's a onetime use thing oftentimes we want to come back to it we want to store it somewhere and so like being able to return it it tells the computer to say like hey uh after you perform all these calculations let's have the option of saving it somewhere let's have the option of like storing it so that we can reuse it uh rather than print statements which is more or less for human readers where we want to see some sort of output as you've shown like without a print statement we can't see we don't know what's going on sometimes and so those print statements are reassuring reassurance for us that things are happening in the background and if we ever need to debug or understand what's happening we can use print statements but for the computer to use that information later on we would use return is how i sort of think of it yeah it's to get a value out that's a that's a great explanation to get a value out of the function so the computer can then do something else with it right so i could let i can then you know use my age in i can do my age plus 10. how am i am i going to be in 10 years right uh that should print 66. looking pretty spry for a 66 or 15 in 20 in 2049 uh you know i'll be well i wasn't born in 93 but you know looking forward to 2049 more kind of subtle things is that let me let me show a couple of things instead of doing return age i'm going to print age here so now two things print out which is a little bit confusing 56 prints out because i call the function here which does everything inside the function including printing something and then it stores the return value of this function in my age and because i don't explicitly tell it to return anything that value is the special python term none so it would be as if i had written return none so if you choose not to do a return statement it's like you do a return none at the end of the function the other thing that i want to point out is that if i return i'm just going to return hello here yeah i if i return something from the function the function is over it it stops it takes you back out to wherever wherever you called the function so if i run this code you'll see that age was never actually printed even though i called the function and that's because uh it hits this return statement and kicks me out of my function right so the only thing that's printed is hello a little bit confusing because it's like this is still part of the function it's still at the correct indentation level even though this line of code is guaranteed to never be executed because this return statement will always happen first so cool all right kenny i think we should jump to it do at least one of the code challenges uh yeah going to jump out of the lesson and function code challenges all right seven minutes let's see how far we get so right so these code challenges are something that exists on codecad me which i i think are harder than the average codecademy lesson but i think that they're really important and so if you come across these code challenges um in other codecademy lessons i think really do yourself a favor and take the time to like try to do these rather than skipping them or immediately asking for the answer or or stuff like that because i think that this is like really where you get to develop the computational thinking skills that you need to be uh to be a good programmer rather than just understanding the syntax there's a big difference between understanding syntax and being able to kind of think programmatically or computationally so let's do this first one so create a function called win percentage so i can do that easily so i can do win percentage that takes two parameters named wins and losses all right so it's defined so we're to return the total percentage of games won by the team based on these two numbers so let's see if i've won six games and i've lost four games i've won six out of ten games and so i should print uh 60. right so in this example it says five wins five losses should print 50 10 wins zero losses should print 100. so what should what should i do how am i going to get this number to return from this function um let's let's do this stepbystep let's just find out how many total games there are first can we yeah create a variable for that excellent so that's going to be wins plus losses um and then i guess like let's define wind percentage yep so that's going to be winds divided by total games and then it seems like uh this is being asked to be to be multiplied by 100 right rather than 0.5 i want uh 50 yeah right so this is going to give me again if it's if it's five and five total games is going to be 10 wins is gonna be five so five divided by ten is point five times once i guess the naming i put win percentage not even realizing that that's the name of the uh function itself maybe we should change that a little bit yeah that's a good call that could be confusing i think it would work but it could definitely be confusing um so so um i'll just call it percent sure excuse me that sounds good cool and then final step is that i need to return percentage nice that's the thing that i want to be thrown out of my function to come out of my function and so now i can call my function twice and there we go and test it out and i can even come down here and say check answer and get a little fingers crossed okay cool that was a lot of pressure alex got a second breath yeah uh so to note uh we could do this all in one line i could do something like return wins divided by wins plus losses well i think you're gonna have a syntax yeah yes uh so yeah i didn't i didn't define win i just did wins cool and then yeah and there we go same uh oh and then i didn't multiply it by 100. there we go same answer all right um let's do one more and then we are out of time or any any questions that you think we should hit first kenny so far none of the specifics can do you mind talking about like what a value is really quickly and maybe the data types in python and how we're able to do all this computation stuff yeah so that's something that we went over in the last week's session and more specifically in all of these variable lessons but yeah that's a good point where right now right so if you want to take a look at that more detail um variables and basic syntax has a lot of that information in it but it's a good point where right now i'm uh kind of doing this addition and division and multiplication assuming that these are going to be numbers if i passed in a string it's probably going to break horribly let me pass in kenny and yeah so i get an error right and it has something to do with type error must be string not integer so uh let's see i'm using kenny as my wins so when i try to divide a string by a number or when i try to add a string and a number together something goes wrong so that's a quick example of how data type is really important where um you know these operators are going to do different things depending on the different types good to know thanks for the overview yeah um any other questions um no i think we can try to squeeze out the second one and then leave the third one the last few ones for uh everyone else to try on their own sounds good yeah this uh this one is fairly similar we're just gonna try to find the average of two numbers um so that's going to be f average again two inputs this time we're asking you to define them num1 and num2 so the average of two numbers is just those numbers added together so um i'll just do added equals num1 plus number two i could probably call it sum although some might be a function name might get funny um and then i'm just going to straight up return added divided by 2. then again let me test this function by actually using it and printing the results and there we go i really want to kind of stress like i i think i think as i was doing this last time and then you know i realized let's switch this back to 10. as i was writing this function i kind of tested as i went along where i first had this and i saw this output and was like oh shoot i forgot to multiply them apply it by 100 that's not what i expected as you're working on these code challenges i would i really suggest doing kind of exactly what i'm doing where it's like write your function test it out see the output and if it's not what you expect iterate on it and do and try that a little bit before you know checking the answer um and usually we'll we'll give you comments here like describing what the answer should be um so you know check answers should be pretty redundant of you know if you see the write out but there's a high chance that you got the uh that you got the answer right i really kind of want to encourage people to do that cycle of write their function uh test their function look at the output test the function on different types of input and output to make sure all of your bases are covered all the different situations are covered and then after like thorough testing and as long as the function is um doing what you expect it to do then you can kind of say yeah i think this function is working correctly i think that's a really good point alex because i think like in you describing that it helps catch errors really early on rather than like having written a whole bunch of code and then going back to see where in all that code you had some weird error come up so they would very much recommend your approach as well all right cool we are basically out of time um i want to call out yeah mark lam in chat said uh it was helpful to take these lessons beforehand before watching the um series and so i think that that's a great way to do this there are a couple of ways to interact with this content but yeah this course is sitting on codecademy it's it's sitting here forever right next week on tuesday we're going to be going through this control flow section which will be similar format of there's going to be a conceptual lesson and then a lesson in python and then some control flow challenges so if you want to do that ahead of time come prepared for questions um you can do that i want to show off the events page um you can register for these events on our events page on codecademy codecademy.com events you can also find it through you know the homepage so next week we're doing control flow if you do do the um lesson ahead of time and have questions um there's a form for where you can submit questions ahead of time that we can cover and then similarly if you have any feedback about these live stream series um we'd love to hear from you this form is linked on all of these events as well so yeah if you're if you're watching this right now and want to give us feedback um let me post this link post this link in the chat kenny might have got it already no here i i just pasted it in uh the events page but that feedback yeah um okay cool let me any other questions that people have we should cover kenny becca actually brought up a really great point uh because in our average example in our average function we shouldn't really be using length or trying to accommodate like however many numbers rather than just two but going back to what we talked about hard code we only hard coded and allowed for two inputs um which makes it easier for us to do as a code challenge um but later on difficulty does increase with other code challenges so definitely try them out yeah that's actually um right that's kind of how i like to build up like our our toolkit of things that we know in programming where right now we know how to do it with one variable maybe two variables but as we learn about arrays or lists or whatever the you know the structure is that you're using um we can then start to do different things like find the length of that list to get the total number of things that you're using loop through the list to add them all together right so we're kind of starting small individual blocks individual variables and then as we learn more and more things together we can do um similar things a bit different all right cool um again let me plug uh we're doing this again this is um material similar to an intro college or intro high school course we're doing it because uh we have a back to school campaign if you're a student there's a new student discount price for pro membership um there's all of these you know lots of lessons and tons of different programming language so this is a thing that seems interesting to you i would definitely um suggest getting on the student um membership i'm super excited that we have it now i think uh tons of students could benefit from especially you know being in quarantine or if their college or high school is remote all that sort of stuff this could potentially be a good resource there's also some free courses on there too so even if you don't want to be a paid member there's some uh good courses that go over these like fundamental topics as well um so yeah if you if you like it um we'd love for you to join more and yeah anything anything from you kenny oh just glad everyone was able to take some time and join us today and wouldn't really be a lesson without other people joining in so and really the interaction that's going on in chat appreciate you guys yeah chat if you could spam kenny rox i've never volunteered for this again alex yeah so that was we had a live stream like months ago where uh where chat started to do that and uh i loved it kenny was uh uh made kenny blush oh am i turning red i gotta i gotta sign off this is it all right kenny this is fun uh we'll see you all we'll see you all next week
