With timestamps:

00:00 - um i see some people in the chat already
00:03 - saying hi before the show starts
00:05 - hello give us a couple of seconds here
00:10 - oh someone from greece oh i honest i
00:13 - recognize you oh i think
00:17 - i think you might have sent in some uh
00:19 - some suggestions to me
00:20 - for this uh this path
00:23 - i honest and they were very helpful so
00:27 - thank you
00:28 - keep them coming cool so we we are live
00:31 - uh yeah so sophie you want to kick it
00:33 - off sure yeah
00:35 - so welcome everybody um this is
00:38 - a eight-week series that we're starting
00:40 - today
00:41 - going through the new master statistics
00:44 - with python
00:46 - path skill path um but this live stream
00:49 - series is going to be
00:50 - done um off platforms and we've provided
00:54 - a bunch of
00:55 - code for you to download and data sets
00:57 - so um
00:58 - even if you're not uh if you don't have
01:02 - a codecademy pro
01:04 - subscription yet like you can still
01:05 - participate in all of these and we
01:07 - really welcome
01:08 - anybody who wants to join and learn a
01:10 - little bit of statistics
01:12 - um i'm really excited for this alex can
01:15 - alex can confirm that i've been excited
01:17 - about this for a while
01:19 - yeah this has really been susie's like
01:20 - baby that she's been uh she's been
01:22 - working on for the past couple of months
01:23 - um
01:24 - sophia i know that this is like the
01:25 - content that you've been wanting to
01:26 - write for a long time
01:27 - uh for folks watching live right now so
01:30 - we are live on a couple of different
01:31 - platforms
01:32 - uh sophie and i are gonna be watching
01:33 - the youtube chat primarily so if you're
01:35 - watching on facebook or twitter or
01:36 - twitch
01:37 - um come over to youtube if you want to
01:39 - chat with us if you're watching this
01:40 - in the archives um we're going to be uh
01:43 - so we post all these on youtube after
01:45 - the fact um if you're watching
01:46 - there we are streaming these um tuesdays
01:49 - tuesday afternoon uh 4 p.m on the east
01:52 - coast um and we're going to be doing it
01:53 - for the next eight weeks
01:54 - we're going to be doing this stats
01:56 - series so if you want to watch us live
01:57 - uh hopefully you can you can join us
01:59 - then yeah
02:01 - um are there any other housekeeping
02:04 - items alex that i'm forgetting before we
02:06 - get started
02:07 - no i don't think so i think um yeah uh
02:09 - people in the youtube chat right now we
02:11 - want this to be super interactive
02:12 - so uh feel free to say hello to us where
02:15 - you're coming from
02:16 - uh yeah we we have someone from greece
02:18 - which is which is pretty cool
02:20 - and then uh yeah sophie before we get
02:22 - actually started i wanted you to talk a
02:24 - little bit about
02:25 - um what is this path about why are you
02:27 - super excited about this content
02:29 - um what makes this content special can
02:31 - you kind of give us a preview of the
02:32 - like overall thing before we dive into
02:34 - the first lesson yeah
02:36 - totally um so this path
02:40 - and i also add this past is not done so
02:43 - um i'm actually working on even more
02:45 - content that's going to
02:46 - go into the path uh in the next couple
02:49 - of months
02:50 - um but but this path is all about
02:54 - how to take a look at some data and make
02:56 - sense of it
02:57 - um it's we're calling it statistics but
03:01 - i feel like
03:02 - there's a lot of different names that
03:03 - you can assign to essentially the same
03:05 - thing
03:06 - right like statistics data analytics
03:08 - data science
03:09 - um all of these fields are
03:12 - focused on essentially trying to be like
03:15 - a
03:15 - sleuth and make sense of a data set when
03:18 - you have a lot of information
03:20 - and you need to condense it down somehow
03:23 - and
03:23 - and use it then to make some sort of
03:26 - decision
03:27 - a lot of the time or maybe understand
03:30 - something
03:30 - better like how a process works um
03:34 - and so yeah so this this content is
03:37 - really about the full process
03:39 - of taking we're gonna work with tabular
03:41 - data which is basically just
03:43 - data that's organized into rows and
03:45 - columns um
03:47 - and just taking like a large data set
03:50 - that
03:50 - is kind of unwieldy that we can't make
03:52 - sense of by just looking at it
03:54 - and then turning it into something that
03:55 - we can actually do something with
03:58 - um yeah and i i'd say would you say that
04:01 - it's fair to even say that this is kind
04:02 - of a
04:03 - this could be a replacement for your
04:05 - like intro level stats course or you're
04:07 - covering concepts that
04:08 - traditionally are taught in inter-level
04:10 - stats course in like a really mafi kind
04:12 - of way and instead we're going to start
04:13 - looking at them from this
04:14 - simulation based approach this um like
04:18 - almost less math and more like
04:20 - conceptual understanding
04:21 - yeah so um yeah a little background on
04:25 - me i actually i taught high school math
04:27 - for
04:28 - four years um and then i also taught
04:31 - at the masters and phd level as like an
04:33 - assistant
04:34 - um throughout my master's degree
04:38 - and i've seen a lot of different
04:40 - statistics classes a lot of different
04:42 - math classes
04:43 - um for that matter and
04:47 - i feel like um
04:50 - a lot of them really focus on this kind
04:53 - of
04:54 - wrote like you do this then this then
04:56 - this then this
04:57 - kind of steps um and
05:01 - a lot of times that makes it hard to
05:03 - remember
05:04 - in the future so i've heard a lot of
05:05 - people say like 10 years down the line
05:07 - they don't remember anything they
05:09 - learned in their statistics class
05:11 - um and so later in life it was kind of
05:14 - presented to me in this different way
05:16 - um and really focusing on conceptual
05:20 - ideas using
05:22 - programming um and i think that while
05:25 - there's a little bit of
05:26 - a hump to get over in terms of
05:29 - understanding some of the programming
05:31 - concepts
05:32 - i think that overall it makes it easier
05:34 - to understand the concepts and easier to
05:36 - remember
05:37 - um into the future so and the other
05:39 - thing i'll say about that
05:40 - too really quickly before we get started
05:42 - is that
05:43 - throughout this entire um series and if
05:46 - you're working through the path
05:47 - we're working in python um there are
05:50 - some
05:50 - like syntactical things like just how
05:53 - you write code
05:54 - that you're gonna have to learn in order
05:55 - to implement what we're doing
05:57 - in python um or in any programming
05:59 - language but
06:01 - what i really want to focus on over the
06:03 - next
06:04 - few sessions is just like the concepts
06:07 - and
06:08 - why we're doing what we're doing and not
06:09 - necessarily the syntax
06:11 - i know there's like six different ways
06:13 - to do anything you might
06:15 - want and um with varying levels of
06:19 - complexity and
06:20 - um and and whatever but
06:24 - um but i really i think the more
06:27 - important thing is understanding what
06:28 - you're doing so that you can do it in
06:30 - any language that you might encounter or
06:32 - any software um that you might need to
06:34 - use in a job for example
06:36 - so yeah i actually think that it's it's
06:38 - a good example of like how to use
06:40 - codecademy effectively because a lot of
06:43 - times i think
06:44 - folks will like memorize the
06:47 - memorize how to call a function or write
06:48 - a function or whatever and like
06:50 - not learn the thing behind that or like
06:54 - not see the big picture because they're
06:55 - just like learning syntax and like oh i
06:57 - got this syntax which means
06:58 - i know the thing and i think what's cool
06:59 - about this course is that um
07:02 - the syntax is like a means to the to an
07:04 - end where it's like it's almost okay if
07:05 - you don't entirely understand the syntax
07:07 - where the thing that we want you to
07:08 - understand are the
07:09 - statistical concepts um that
07:13 - were that we're demonstrating through
07:14 - code um
07:16 - so this is i think all of that is to say
07:18 - that this is very intro friendly it's
07:19 - totally fine if you don't know how to
07:20 - code or you don't understand the python
07:22 - syntax that we're using
07:23 - um really focus on these stats concepts
07:26 - that are being taught here
07:27 - yes okay i'm gonna get started without
07:30 - further ado
07:32 - um i'm gonna share my screen
07:35 - uh and you guys are gonna get to see my
07:39 - whole desktop which is very
07:41 - exciting and a dog and a dog
07:44 - um this is my dad's dog juno uh
07:47 - also just so you know i'm gonna be
07:49 - looking up to the side every once in a
07:50 - while because i've got the chat
07:51 - on another screen um and so i'm just
07:54 - keeping an eye on things over here as
07:55 - well so
07:56 - if you see me looking at the side i'm
07:58 - i'm not lost
08:00 - i'm just just checking on you um
08:03 - okay so and pulling over
08:06 - um some windows so
08:10 - uh if you saw the blog post or hopefully
08:13 - um i think on the youtube link as well
08:16 - um there's a link
08:17 - to this uh github repository
08:22 - and um yeah
08:25 - and within this repository i'm going to
08:28 - add the
08:28 - co or the uh code and data for every
08:32 - single
08:33 - session in here and we're going to start
08:35 - with number one
08:37 - um and so uh if you click into
08:40 - that folder you'll see the starting and
08:43 - ending code
08:44 - and the data file that we're going to be
08:45 - using if you're interested in coding
08:48 - along i just want to say
08:50 - a good idea would be at this point to
08:53 - just if you have if you have github up
08:56 - and working you can just clone the
08:57 - repository
08:58 - if you don't know how to use github
08:59 - that's totally fine just download
09:02 - this um this whole repository as a zip
09:05 - file
09:06 - um and then you can double click it to
09:07 - unzip it and then you'll have all the
09:10 - um files on your computer so you can
09:12 - just open them right up
09:13 - along with me if you have downloaded
09:16 - anaconda
09:17 - as well um which i think we also noted
09:20 - on the
09:21 - um on the instructions but uh
09:25 - worth doing yeah there's some setup
09:26 - required if you if you want to code
09:28 - along with us
09:29 - um they're uh describing this in this
09:31 - readme here
09:32 - yes okay um all right with that said
09:36 - i am going to
09:40 - demonstrate the reason why i'm sharing
09:42 - my full desktop is that
09:44 - um just in case anybody wants to
09:48 - kind of do their own analysis later um
09:52 - i think seeing the full process of how
09:54 - i'm organizing my files and how i'm
09:56 - opening um applications is just useful
10:00 - um it might seem like silly but
10:04 - i think i don't know that's what i
10:06 - wanted when i was first
10:08 - learning yeah i think one of the things
10:10 - that's really difficult um when you're
10:11 - first starting is like
10:13 - where are my files going how do i open
10:14 - them uh you know one of the benefits of
10:16 - codecademy is that we do that all
10:18 - for you but then once you try to start
10:19 - doing things on your own machine it can
10:21 - feel overwhelming and so
10:22 - demoing that is uh is useful right
10:25 - so yeah so i just have this this folder
10:27 - which is exactly what you'll get
10:29 - if you download that whole file i also
10:31 - saw someone ask about miniconda i think
10:34 - that will work i'm not totally sure
10:36 - um i'm not real i imagine yeah we're not
10:38 - using anything fancy
10:40 - um okay so i'm gonna go ahead and
10:43 - actually
10:43 - open up my anaconda navigator
10:46 - because i like to do things not from the
10:49 - terminal
10:52 - you can also open a jupiter notebook
10:54 - from the terminal but
10:56 - i i like this nice interface um
11:00 - and then what i'm gonna do is i'm gonna
11:01 - launch a jupiter notebook
11:04 - um because we're working with jupiter
11:06 - notebooks
11:07 - and of course it loaded over there so
11:11 - i'm gonna pull this over here
11:13 - okay so now this just gives me my file
11:16 - structure on my um
11:17 - on my computer and i'm gonna navigate to
11:21 - the file that um we're working with
11:24 - today
11:25 - uh or the folder that we're working with
11:27 - today and that has
11:28 - all of my code and the data set that
11:30 - we're going to be using
11:32 - and then i'm going to just open up this
11:34 - starting code
11:36 - and that will launch a jupyter notebook
11:38 - which is
11:39 - essentially just it's a code editor but
11:42 - it allows us to run
11:44 - code um and see the output and then like
11:47 - run some more code and keep all the
11:49 - output um
11:51 - on the same page and it also renders
11:54 - like
11:55 - marked down so essentially i can write
11:57 - regular text
11:58 - and not just code yeah it's a nice way
12:01 - to kind of
12:01 - integrate regular text with code you'll
12:04 - see like a lot of
12:05 - reports being written up in jupyter
12:06 - notebook because it formats really
12:08 - nicely
12:09 - yeah um and
12:12 - one thing i'll note is that i downloaded
12:16 - or i chose this data set
12:17 - um and i downloaded it from the uci
12:21 - machine learning repository um and you
12:24 - can get to that repository with this
12:26 - link
12:26 - um it i would i swear
12:29 - like i they don't pay me for this but i
12:32 - think that
12:33 - uh this is a really good resource if
12:35 - you're looking for data sets to just
12:37 - work with
12:38 - as you're getting started as a
12:39 - statistician or in data analytics
12:42 - um it's really helpful to just
12:45 - mess around with some data and if you're
12:47 - looking for
12:48 - a variety of data sets with different
12:50 - levels of
12:52 - cleaning um i think this is a really
12:54 - good place to look
12:55 - uh the other thing i'll mention so this
12:57 - is the link to the data set
12:59 - um the other thing i want to quickly
13:00 - mention just in case anybody is trying
13:02 - to like reproduce this from the very
13:04 - beginning
13:06 - is that um
13:09 - this data set which is the process
13:12 - cleveland data
13:14 - from here is in this like weird format
13:17 - it's in a dot data format um and i
13:21 - before uploading it i changed this to a
13:24 - csv
13:25 - um and i also added the
13:28 - column names which weren't in the data
13:30 - set itself
13:32 - but that i got from the um
13:36 - from here so yeah yeah
13:40 - so just as a side note i won't go into
13:43 - too much detail
13:44 - uh but if you download the data directly
13:47 - it's not going to be in quite the right
13:48 - format which is why downloading it from
13:50 - the github will be
13:51 - a little bit easier yeah it's kind of a
13:53 - good lesson already on
13:55 - just like different levels of cleanness
13:57 - that a data set can come in
13:58 - where part of what we're going to be
14:00 - doing this lesson is seeing like oh
14:01 - isn't this weird like
14:03 - this column is represented as a string
14:05 - where we really want to be integers and
14:06 - we need to fix that
14:07 - but even before we get to that kind of
14:09 - step um
14:10 - yeah doing things like this data is
14:12 - coming in a weird format and
14:14 - it would be really nice to have the
14:15 - label you know the labels of each column
14:17 - on this um when i before i even start
14:20 - working on it so
14:21 - you know all data set come all data sets
14:23 - come in varying degrees of like neatness
14:25 - or
14:25 - usability for what you're trying to do
14:27 - with it um so
14:28 - yeah yeah exactly and i will also say
14:31 - like
14:33 - knowing what to do with a dot data file
14:36 - um is not something that i just like
14:39 - know how to do
14:40 - um when i first was looking at this data
14:43 - set
14:44 - um i downloaded it i couldn't i
14:47 - looked up ways to load a data file in
14:49 - python
14:50 - and then none of them were working like
14:53 - it was breaking down
14:54 - and so i googled what to do and found
14:57 - something on stack overflow that said
14:59 - like
14:59 - turn it into a txt file then turn it
15:02 - into a
15:02 - csv file on your desktop and i just
15:05 - followed the instructions
15:07 - um so that's another like
15:10 - just general note is that
15:13 - we're going to go through this but even
15:15 - we don't always know exactly how to
15:17 - solve every problem and
15:19 - what i do is i spend a lot of time on
15:22 - stack of
15:23 - overflow just like looking for other
15:25 - people's solutions to problems
15:27 - so cool okay
15:30 - so we're gonna get started with this
15:32 - data set
15:33 - so uh i i'll say right off the bat so
15:37 - a a csv file is just a type of file that
15:40 - we can read into python there's other
15:42 - types of files you can read into python
15:44 - as i mentioned
15:45 - um basically like the first step of any
15:49 - analysis if you're going to use python
15:51 - or r
15:51 - or any software whatsoever
15:55 - is to get your data into that software
15:59 - and make sure that your software can
16:01 - understand
16:02 - some basic things about that data or can
16:04 - interact with that data in the way that
16:06 - you want
16:07 - and there are a bunch of python
16:09 - libraries that we can use
16:11 - um to work with data and those python
16:14 - libraries kind of assume that our data
16:16 - is in a particular format so
16:18 - um uh like pandas and
16:22 - nunpai and matplotlib and seaborn if
16:24 - you've heard of any of these
16:26 - um they're really easy to work with if
16:29 - you have
16:30 - data that is saved in a data frame um
16:33 - which is essentially just this like
16:36 - this structure where you've got your
16:38 - rows and your columns each of the
16:39 - columns has
16:41 - a name your rows also have a name by
16:43 - default they're just going to get named
16:45 - with the numbers starting from zero
16:49 - um so you'll see when i print this out
16:51 - i'm just getting
16:53 - some bolded row names and column names
16:57 - and then i've got each of my rows of
17:00 - data
17:01 - so okay first thing i'm going to do
17:05 - or first thing i've already provided
17:06 - code for is just
17:08 - reading this this file into python and
17:11 - saving it
17:12 - as something called heart i could save
17:15 - it as something else
17:17 - but i'm going to save it as heart so i
17:19 - remember that this is my
17:20 - heart disease data um and
17:23 - this is as background this is a data set
17:26 - that is used i think in like a bunch of
17:29 - papers to
17:30 - essentially predict who is going to be
17:34 - diagnosed with heart disease and so
17:35 - these are patients at a clinic
17:37 - who had a bunch of tests done and then
17:40 - it was determined whether or not they
17:41 - had
17:42 - clinical heart disease and this is all
17:44 - the information from those patients
17:46 - um and then what all i've done here and
17:50 - i think this is all in the starting code
17:52 - is i've just taken a look at the first
17:54 - five rows of the data
17:55 - um and here we go so we've got
17:59 - for each patient we've got some
18:00 - information we've got age
18:02 - sex cp i've copied down the data
18:06 - dictionary here so cp is a chest pain
18:08 - type
18:11 - t rest bps which is a resting blood
18:14 - pressure
18:15 - a cholesterol level an indicator of
18:19 - whether someone's fasting blood sugar is
18:20 - greater than
18:21 - 120 um and then
18:25 - a bunch of other things as well i won't
18:27 - go through all of them because we're
18:28 - going to
18:29 - look a little bit more in detail as we
18:31 - go through this
18:33 - but you'll see right off the bat that
18:35 - there are some maybe
18:37 - weird things or some things that just by
18:39 - looking at the data itself
18:41 - you might not necessarily understand so
18:43 - for example
18:45 - in the sex column we have numbers one
18:48 - and
18:48 - zero it seems like and we see if we look
18:51 - at the data dictionary that one equals
18:53 - male and zero equals female so we can we
18:55 - can figure that out
18:57 - but maybe these numbers
19:00 - as we're looking at the data prevent us
19:03 - from like immediately gleaning something
19:05 - about the patient in this row
19:08 - and so that those are the types of
19:10 - things that we're gonna look at in the
19:11 - next couple of steps
19:14 - okay um all right so
19:18 - the purpose of today i'm gonna add
19:21 - another code chunk down here
19:22 - um so the purpose of today's lesson is
19:24 - really just
19:26 - to go through the process primarily of
19:28 - cleaning a data set
19:30 - i know that data cleaning is not the
19:34 - most
19:34 - doesn't sound like the most fun
19:37 - however i would encourage you to think
19:39 - about this
19:40 - step as being kind of like a detective
19:44 - um we've got a pretty big data set
19:48 - on our hands i mean it's not huge we
19:52 - could have a larger data set and
19:53 - in real life people work with really big
19:55 - data sets um
19:57 - but you're kind of like a sleuth trying
20:00 - to figure out
20:01 - how you can best represent this
20:02 - information so you can do something with
20:04 - it later
20:05 - um the other thing i'll say is i i kind
20:08 - of want to start
20:09 - today with something that's not data
20:12 - cleaning because i think it sets
20:14 - up the importance of these steps really
20:17 - really well
20:18 - so um the first thing i'm going to do is
20:21 - i'm going to
20:24 - print out some summary statistics uh
20:28 - for this data set i think it's
20:36 - i don't know if it's capitalized let's
20:38 - see
20:40 - oops oh here's a good okay i should have
20:44 - said this before
20:45 - a good thing to know is that uh you have
20:48 - to run this
20:49 - this code um all i'm doing here is i'm
20:52 - importing some
20:53 - some libraries that are gonna help us
20:55 - with our analysis so
20:57 - these are essentially like they contain
20:59 - some of the functions
21:01 - that we're going to be using they
21:02 - contain some of the the tools that we
21:04 - that we need for our analysis
21:08 - and i'm saving them as these aliases
21:10 - which is just going to make it easier to
21:11 - reference them
21:15 - i'm gonna run it i'm gonna actually run
21:18 - this
21:18 - um so it's not saved from before
21:22 - and now yeah if you look at that error
21:23 - message it basically said uh
21:25 - it didn't know where hart was um because
21:28 - that was our data set that we never
21:29 - loaded in
21:31 - yeah exactly so sophie you said that
21:33 - we're going to look at summary
21:34 - statistics
21:35 - what is the what what is a summary
21:37 - statistic that is a great question alex
21:40 - thank you for teeing me up so perfectly
21:43 - um okay so essentially
21:46 - talking through this process right now
21:48 - step one is gonna be
21:49 - cleaning up our data set step two is
21:52 - gonna be
21:54 - figuring out some way to condense the
21:56 - information in our data set down
21:58 - to a smaller number of to a smaller set
22:01 - of numbers or
22:03 - visualizations that we can actually make
22:05 - sense of
22:06 - so um in our data set right now we have
22:10 - for example a whole long list of um
22:14 - let's say ages we have a whole long list
22:16 - of ages
22:17 - uh and i think there's like 370
22:21 - patients so we've got like 370 ages
22:25 - we can't really say much based on just
22:27 - like eyeballing
22:28 - those ages so we want to condense that
22:32 - down into some sort of number that can
22:34 - give us some
22:34 - insight into what that column contains
22:38 - and that's all a summary statistic is
22:39 - it's a it's a number that can summarize
22:42 - some information
22:43 - about one of these attributes that we
22:45 - have for a patient
22:47 - um cool
22:51 - and so you'll notice and in our next
22:54 - live stream we're going to specifically
22:56 - talk about some of these summary
22:58 - statistics
22:59 - and visualizations that could go along
23:01 - with them
23:03 - but one thing i want you to know is
23:05 - notices so
23:07 - this describe function it's like a
23:09 - built-in
23:10 - essentially a method that's associated
23:13 - with data frames so
23:15 - um it's like uh it's something that we
23:18 - can apply to anything that we've
23:20 - any data that we've stored in this way
23:24 - and it makes it really easy to super
23:26 - quickly calculate
23:27 - things about our data set um
23:31 - which is you know super nice that's why
23:32 - we use
23:34 - software like python is to be able to
23:37 - really simply in a
23:38 - one uh press of a button get all this
23:41 - information about our data set
23:44 - so each one of these rows is a different
23:46 - summary statistic
23:47 - where uh you know the mean is the
23:49 - summary
23:50 - statistic the count is a summary
23:52 - statistic the standard deviation all
23:54 - these are so each row is a different
23:55 - summary statistic for each column
23:57 - exactly yes
23:58 - i just saw in the chat hi tong jin
24:02 - one of my classmates uh former
24:04 - classmates
24:05 - uh is joining us this is so fun um
24:09 - okay so anyway one thing i want you to
24:11 - notice about the output of this
24:14 - is uh is that
24:17 - this this function is making some
24:20 - assumptions about our data
24:21 - so um for example we pointed out before
24:24 - that sex
24:25 - was coded as ones and zeros and now we
24:27 - look at this
24:28 - and we see that we're getting
24:31 - a mean for this variable we're getting
24:34 - that like
24:34 - the mean of the sex variable or the
24:37 - average the mean is another word for
24:38 - average
24:39 - um if you're familiar the average of the
24:42 - sex variable
24:43 - is nine 0.6798
24:46 - whatever that's kind of a weird
24:51 - thing to report um if you know how
24:54 - this variable is coded you you can
24:57 - figure out how to
24:58 - word that um you could say like the
25:01 - they're like 68 of
25:04 - the people in this um in this data set
25:08 - are male 1 you don't have to worry about
25:11 - how i know that
25:12 - right now cp is another good example
25:15 - where that's
25:16 - uh if you scroll up to the description
25:17 - of cp it's like four different types of
25:19 - chest pain
25:20 - and so what does it mean that the the
25:22 - mean or the average is 3.1 right it's
25:25 - not like
25:25 - on average people have 3.1 level of
25:28 - chest pain it's like right that's
25:29 - that's really hard to interpret right
25:32 - exactly
25:33 - and then you'll notice over here we have
25:36 - two other ones
25:37 - so ca and thal
25:40 - so ca is a number of major vessels zero
25:43 - to three
25:44 - um and so that actually is a should be a
25:47 - number
25:48 - um it should be a number zero to three
25:50 - and if you look back at the data set
25:52 - or or when we load it in you'll notice
25:54 - that we see mostly
25:56 - numbers like 0.0 3.0 2.0
26:00 - um and yet for some reason it's not
26:03 - giving us a mean
26:05 - it's not giving us that information it's
26:07 - instead giving us
26:08 - um this top row which gives us
26:12 - it gives us the number of unique
26:14 - categories
26:15 - um or unique values and then the most
26:19 - frequent value and the frequency of that
26:21 - so
26:22 - um this is just saying that like the um
26:27 - there are four possible values of this
26:31 - three is the number three is the most
26:33 - common of them and there are 166
26:36 - threes um and same over here we've got
26:38 - five different values
26:40 - zero is the most common and there's 176
26:44 - zeros
26:45 - and this is a way that we would usually
26:48 - summarize categorical data so something
26:50 - like sex
26:50 - where there's male and female um but
26:53 - yeah it's being applied to something
26:55 - that we know
26:56 - based on looking at our data looks like
27:00 - numerical output um so
27:03 - that's kind of a weird thing and we're
27:05 - not getting that for some of these other
27:07 - ones that we probably
27:08 - want that information for right likes
27:11 - for cp
27:12 - we would like to know hey there's four
27:13 - different kinds you're seeing three most
27:14 - often
27:15 - um right we don't we don't care about
27:17 - the mean of cp
27:19 - whereas for this um ca
27:22 - we probably do care about it right it's
27:24 - like almost even reversed where
27:26 - where we want the numerical summary
27:29 - statistics the summary statistics about
27:30 - how do i describe those variables not
27:32 - categorical what's the what's the
27:34 - opposite of categorical
27:35 - i would call them quantitative or
27:37 - numerical either
27:39 - is fine but yeah yeah exactly
27:43 - so this is again still motivation for
27:46 - why it matters
27:47 - um how our data is stored but it
27:51 - but to summarize all all of the summary
27:54 - statistics that we just looked at
27:56 - my my point here is that we have these
27:58 - built-in tools that can do
28:00 - things really quickly for us but they're
28:03 - looking
28:04 - at how the data is stored in and making
28:06 - some decisions about how to
28:08 - summarize them for us and they're
28:10 - getting some things wrong
28:11 - and that's because our data isn't stored
28:14 - in
28:15 - a way that in the way that it needs to
28:18 - be in order for us to use these tools to
28:20 - do our analysis
28:21 - so that's why it's super important um
28:25 - okay the other thing that i'm going to
28:27 - take so
28:29 - focus of the next 30 minutes then is
28:31 - going to be to look at
28:32 - how our data is stored and try to make
28:35 - sure that
28:36 - we make changes that we need to in order
28:39 - to store it in a way
28:40 - that will make our analysis more
28:44 - sensical so in order to
28:47 - do that um the first thing i want to do
28:50 - is i'm going to take
28:52 - a look at the
28:55 - info um about this data set
28:59 - and the other thing i'll say is in
29:02 - jupyter notebooks i like this
29:04 - i don't have to use a print statement um
29:07 - for the last line for it to actually
29:09 - print it out although
29:11 - um if you're working in like us uh
29:14 - a different ide like you'll in order to
29:16 - get this to actually print
29:18 - you'll have to do this yeah codecademy
29:20 - for example if you're working and on
29:21 - code
29:22 - stuff on platform you'll need to
29:23 - explicitly save the print principle
29:26 - exactly
29:27 - um okay so this gives us some
29:30 - information
29:31 - specifically i think the most important
29:34 - um
29:34 - column here that i'm going to look at is
29:36 - this d type column
29:39 - and the d type column tells us what
29:42 - um data type each variable
29:45 - is stored as um so
29:49 - this looks a little complicated but
29:51 - basically all you need to know
29:52 - is that float and int are
29:56 - um are ways that numerical data is going
29:59 - to get stored
30:00 - so if you see float or in it means that
30:03 - it's storing it
30:04 - as a number and that means that you can
30:07 - do
30:08 - number e things with it so you can like
30:11 - add numbers and subtract numbers and
30:15 - all the things that you would normally
30:17 - need to find you find the knee and
30:18 - finally that makes more sense yeah
30:20 - um so you can you can do a bunch of
30:22 - stuff with numbers and so
30:24 - if you want to be able to do those
30:25 - things then you need to store numbers
30:27 - as numbers um so that would be floater
30:30 - and
30:30 - if you see oh yeah we've got an in down
30:32 - here
30:33 - um if you see something
30:36 - that says object in python this means
30:40 - that it's getting stored as a string
30:42 - um i think it's
30:45 - probably it's not worth going into right
30:48 - now
30:48 - why this gets printed as object
30:52 - and not something like string um but
30:55 - this is
30:56 - something i don't know how it works in
30:58 - other programming languages besides r
31:00 - but in r you would see
31:04 - like the that the data type is is like
31:06 - str or string
31:08 - but because of how data gets stored in
31:10 - python um
31:12 - it's a little bit different it gets
31:13 - stored in the memory and then
31:15 - with a pointer towards that memory so
31:18 - um anyway yeah but
31:21 - this is this is a good example of like
31:23 - why the summary statistics are being
31:24 - different you can even see
31:26 - the the two things that are being stored
31:28 - as an object or a string are the ones
31:30 - where
31:30 - it's able to do those first uh three
31:33 - rows which was again the like
31:35 - the frequency count the like types of of
31:38 - answers right uh and it can't do all of
31:41 - the numbery things it can't do mean it
31:42 - can't do standard deviation whereas the
31:44 - other ones are reversed the things that
31:45 - are floats and ins
31:46 - can do all these number things but then
31:48 - can't do the things that
31:49 - are associated with categorical
31:51 - variables exactly
31:53 - yeah so so this is this is right here
31:55 - telling us like you said
31:57 - exactly why this whole business is
31:59 - happening
32:01 - um okay so now i think it's time to
32:04 - start trying to
32:06 - address some of these things and see if
32:08 - we can change
32:10 - um how these variables are stored so
32:12 - that we can make more sense of
32:15 - this data um
32:18 - everybody's saying that they're on like
32:20 - python 5
32:21 - python 66 i think the highest is
32:25 - python python 3 still does like python
32:29 - 3.7
32:30 - so uh yeah it was a big deal when when
32:33 - they went from python 2 to python 3
32:34 - officially
32:35 - yeah yeah it's causing a lot of things
32:38 - to break um okay
32:42 - so the first thing i'm going to do is
32:43 - i'm actually going to
32:45 - go a little bit out of order the first
32:46 - thing i want to understand
32:48 - um or the kind of the weirdest thing to
32:51 - me in this output
32:53 - is that these two variables
32:56 - ca and thal which i can see when i print
32:59 - out the data
33:01 - seem to be numbers um those are getting
33:04 - stored as strings
33:05 - um and that that to me is like the most
33:09 - concerning thing that i see here
33:10 - or not concerning but the most like
33:13 - obviously
33:14 - yeah obviously weird thing um because
33:16 - you know
33:17 - python is pretty smart it looks at it
33:20 - looked at most of these and saw numbers
33:21 - and stored it as a number
33:23 - um so the the question is why is that
33:26 - happening
33:27 - um and so what i'm gonna do to kind of
33:29 - investigate that
33:31 - um oh and the other thing i'll just
33:33 - point out i know i'm scrolling up and
33:35 - down a lot
33:36 - is that um so for ca for example
33:40 - um it says that there's five unique
33:42 - values
33:44 - whereas in our data um dictionary it
33:47 - said
33:48 - zero to three so that would be zero one
33:51 - two three that's
33:52 - four different um and same thing for
33:55 - thal there were three different values
33:57 - three six or seven
33:58 - i don't know why they chose three six
34:00 - and seven but
34:02 - i i see what you mean about the like
34:04 - being uh
34:05 - being a detective where like we have our
34:07 - clue right we have like
34:08 - wait there's five things but over here
34:10 - it only says there's four things i would
34:12 - love in the chat
34:14 - post your predictions for like where
34:15 - what is this extra like the
34:18 - you know it's the it's the case in the
34:19 - clue like what is this extra value
34:21 - that's from this uh
34:22 - this variable that's screwing things up
34:24 - yeah and i feel like this is why i like
34:27 - statistics so much and data science so
34:29 - much is that
34:30 - i like being a detective like
34:34 - i i feel like if you can and if you can
34:36 - reframe your data cleaning
34:37 - as like an investigation then maybe it
34:40 - feels more fun
34:42 - yeah the less nearest data cleaning
34:45 - takes some like
34:46 - some narrative behind it in order to be
34:49 - fun and exciting
34:52 - i'm trying to keep everyone
34:55 - i want i awareness i hope i'm saying
34:58 - that right is saying that
34:59 - the unique function will will give us
35:02 - some
35:03 - some clues i agree with you so i'm going
35:05 - to go for
35:06 - that um
35:10 - oops so okay so let me talk through what
35:13 - i'm doing
35:14 - i've got the heart data set um i'm going
35:16 - to pull out the
35:18 - let's do ca first
35:21 - the ca column and then i'm going to
35:24 - apply this unique function to that
35:28 - to adjust that column because otherwise
35:29 - we'd like to look at every column and it
35:31 - would be
35:31 - confusing oh yeah
35:35 - and this makes some sense so we've got
35:37 - um
35:38 - there's our five unique values we've got
35:40 - a zero a three
35:42 - a two a one and a question mark
35:45 - um and the question mark is our
35:48 - is our fifth value and then i'm gonna do
35:52 - the same thing
35:53 - for the foul one
35:56 - yeah an interesting thing thing here is
35:58 - that you can even see that there's
35:59 - strings there you can see the quotation
36:00 - marks around each of those values
36:02 - um and again it's probably that like in
36:05 - the csv file i bet there
36:06 - was no quotation marks but because the
36:09 - question mark was also in there it just
36:10 - forced everything to be a string because
36:12 - it didn't know how to interpret the
36:13 - question mark as a number
36:15 - yes exactly um pierre says data cleaning
36:19 - is fun
36:20 - yes i agree right i don't mean to make
36:22 - fun of dating
36:23 - love to hear it um okay so
36:26 - okay so we've kind of answered our
36:28 - question um there was something that
36:31 - that python couldn't recognize as i'm
36:33 - assuming right this question mark means
36:35 - that
36:35 - that information wasn't available for
36:37 - that patient um
36:39 - and there's actually in python there's
36:42 - ways of indicating that something is
36:44 - missing
36:45 - um that like a cell of your data frame
36:48 - should be blank
36:49 - and we need to make sure that we tell
36:52 - python that
36:52 - so that it can categor so that we can
36:55 - change everything else
36:56 - um to be like a number if that's what
37:00 - it should be um okay so with that in
37:03 - mind what i'm gonna go ahead and do
37:06 - is um i'm gonna replace
37:10 - all of these question marks with
37:14 - something that python can recognize as
37:17 - missing
37:18 - um and i'm gonna do that
37:22 - by using the replace method so
37:25 - we've got heart dot replace
37:29 - um and then
37:32 - we're gonna replace i'm gonna just do
37:35 - this in the entire data set so that'll
37:37 - do
37:37 - both of these at once i'm going to
37:40 - replace this question mark
37:43 - with um this np
37:47 - dot nan so mp
37:50 - is just our like shorthand
37:53 - for the numpy library which is just a
37:56 - python library that's used for data
37:58 - science
37:59 - um and then nan stands for not a number
38:02 - um but it's just a one form
38:06 - of um missing
38:09 - data in python yeah i honestly
38:12 - brought something up which is there's a
38:14 - couple of different ways to do this
38:15 - another thing that we could do would be
38:16 - to just
38:17 - drop those rows entirely like removing
38:19 - them from the data set as if they
38:20 - already existed
38:22 - um i think let's walk through this way
38:25 - but then
38:26 - i don't know if you can talk about like
38:28 - the differences in the two of like
38:30 - because there's implications like if we
38:31 - if we remove a row then that's gonna
38:33 - affect the other columns like that's
38:35 - gonna affect the mean of other columns
38:37 - um yeah so actually i
38:40 - i would say um
38:43 - they're like a whole other field of data
38:47 - cleaning
38:48 - is like what to do with missing data um
38:51 - and so there's lots of things you can do
38:52 - you can delete the row
38:54 - you could try to impute missing data
38:56 - which means basically that you can try
38:58 - to like
38:59 - guess what that value should be in a way
39:02 - that doesn't affect the other data
39:04 - um so you can say like okay other
39:07 - if we look at this um if we look at this
39:10 - row of the data
39:11 - can we find other patients that look
39:13 - really similar to this person and what
39:15 - were their value here
39:17 - um so you could try to fill it in um
39:21 - with something that at least is not
39:22 - surprising um
39:25 - so basically there's like there there's
39:27 - a whole field
39:29 - devoted to that and i think that's a
39:31 - really good point i'm glad you brought
39:33 - it up
39:33 - um but yeah uh the other thing i'm just
39:37 - noticing so when i do this
39:39 - um it's just printing it out if i want
39:42 - to re-save it
39:43 - i need to do this there's probably also
39:46 - like an in-place
39:47 - equals true parameter
39:50 - but i'm going to do this so so
39:52 - essentially
39:54 - this prints out the replace this data
39:57 - frame with the replace values but it
39:58 - doesn't change it in the actual
40:01 - thing that we're going to be using the
40:02 - actual data frame so i'm going to go
40:04 - ahead
40:04 - and do this um to actually save it
40:10 - and now um i'm just going to check
40:13 - really quickly
40:15 - this again because my memory
40:18 - is that actually python didn't change
40:24 - them
40:26 - so you were expecting now that we've
40:28 - removed the question marks that it would
40:30 - just auto change them
40:31 - all to numbers yeah um okay i need to
40:35 - then i don't remember actually the uh
40:38 - the syntax this is a good example um so
40:41 - it didn't change them automatically but
40:44 - we should be able to change them now
40:46 - um so so we want to change them to
40:48 - integers
40:49 - uh or to
40:52 - or to uh floats actually
40:56 - [Music]
40:59 - just uh i think i think ionis is right
41:02 - where you can use the as type
41:04 - yes um i think
41:07 - which one so ca we want to change to a
41:10 - number
41:11 - thal actually we want to change to
41:15 - eventually we probably want to change it
41:16 - to these category names so
41:18 - i'm just going to change ca for right
41:20 - now
41:21 - um thank you ionis
41:25 - uh as type and then i'm going to just
41:29 - say
41:30 - uh change it to int
41:34 - i think i don't think i need to say n64
41:37 - i think that will just work but let's
41:38 - try it
41:40 - oops heart
41:46 - let's try in 64. sorry guys
41:51 - yeah and it has to be a strong invalid
41:54 - oh oh okay i know exactly what
41:58 - so um so because actually these got
42:01 - these got saved as values with decimal
42:05 - places
42:06 - um even though the decimal place is dot
42:08 - zero for all of them
42:10 - um we can't save them as integers
42:13 - because they have that precision
42:16 - or they have that decimal place so we
42:17 - need to actually save them
42:19 - as floats
42:22 - and we're going to re-save that as
42:25 - the as that
42:29 - as that column and now this should work
42:32 - hard
42:37 - great so now we've changed that um it
42:40 - said object before
42:41 - now it says float um and so now we can
42:43 - interpret that column
42:45 - as a number yeah one thing to note here
42:48 - is in the chat i posted the
42:50 - documentation for the as
42:51 - type uh effect function i think uh
42:54 - sophie and i just like talked it out
42:56 - here and also looked at chat to say oh
42:58 - yeah the as type
43:00 - function will probably do the trick but
43:03 - uh
43:03 - i googled let's see what was my term
43:06 - data frame change column type
43:08 - and you know the very first school
43:09 - result was the ass type function and so
43:11 - that's like a good example of like hey
43:12 - we need to do this thing we don't know
43:13 - how or we don't remember how
43:15 - and uh you know that kind of stuff
43:16 - happening all the time yeah
43:18 - yeah my my first like programming
43:21 - language for
43:21 - statistical analysis was r so um
43:25 - so as i do more work in python
43:29 - um i feel like i often need to
43:32 - search for things um but i think
43:35 - the i may be the like side point i want
43:37 - to make here is that
43:39 - the the important thing is that you know
43:42 - that you need to change this to a
43:44 - different data type so
43:45 - in in any programming language if you
43:48 - understand
43:49 - that there's a data typing issue here
43:52 - then you'll be able to figure it out and
43:54 - google how to do like what's the exact
43:56 - syntax so this is a perfect example of
43:58 - why like
43:59 - this is great to know off the top of
44:01 - your head but this is like not the most
44:03 - important thing
44:04 - um for being able to go through this
44:07 - analysis like
44:08 - the more important thing is conceptually
44:10 - understanding that this is something you
44:11 - should check
44:11 - and this is something that you should um
44:14 - like
44:15 - fix if it's not right nice
44:18 - um okay so let's kind of go through i
44:21 - think there are some other ones that are
44:23 - that are interesting um i've seen time
44:26 - on these live streams just goes by
44:28 - so darn fast like i don't even know i i
44:31 - want to make sure that we get through
44:32 - at least a couple more um different
44:34 - examples and you can
44:36 - look through the final code that i
44:38 - posted um
44:39 - if you want to see kind of like a little
44:41 - bit more of what you can do
44:44 - um but let's pick a let's pick something
44:47 - fun
44:48 - um so i think
44:52 - one of the one of the things that is
44:54 - worth doing
44:55 - is for anything that's coded as a number
44:58 - but it's
44:59 - really a categorical variable um
45:01 - especially a categorical variable where
45:03 - there's no order
45:04 - um so these are just like different
45:06 - types of chest pain it's not like one
45:08 - type of chest pain is worse than the
45:10 - other
45:10 - um if if that was the case i would see
45:14 - more of a
45:15 - reasoning to maybe code something as one
45:16 - two three four where if it was like
45:19 - mild chest pain moderate chest pain
45:23 - severe chest pain very severe or
45:25 - something like that then maybe you could
45:27 - leave it coded as a number but since
45:28 - this seems to be unordered
45:30 - um i think you you definitely want to
45:34 - change this so that
45:35 - python can recognize what so that you
45:39 - and so that python can recognize that
45:40 - this is a categorical variable
45:42 - um and there's no like ordering or num
45:45 - numbering you shouldn't perform
45:47 - numerical operations on it
45:49 - um so let's go ahead and try to do that
45:54 - i'm gonna do that for the ca
45:56 - or sorry for the cp variable i'm gonna
45:59 - just
46:00 - copy this over down below
46:03 - so i can use it
46:07 - as we go um sophie i wonder can you
46:11 - increase the size of your uh ooh
46:16 - yes hopefully that works
46:21 - sorry guys that is something i
46:23 - definitely should have
46:24 - done no worries okay so i'm gonna just
46:28 - do this one really fast
46:30 - um okay so we've got uh
46:33 - heart dot
46:36 - cp dot replace
46:40 - um i'm going to i'm going to use
46:43 - a dictionary which again this is like
46:45 - python syntax that
46:48 - you don't have to know um
46:51 - right off the bat but instead of just
46:53 - replacing all the ones and then
46:55 - replacing all the twos and then the
46:56 - threes and then the four
46:57 - so i'm going to just pass all that
46:59 - information to python at once
47:01 - so i'm going to replace the value 1.0
47:06 - with typical
47:10 - angina um while i'm typing this out
47:15 - are there any like questions maybe that
47:18 - yeah
47:19 - let me take a look we have a question of
47:22 - what is this uh yes
47:24 - i can i can give a brief summary as
47:25 - you're talking about this this is kind
47:27 - of a companion live stream to the
47:29 - new um master statistics with python
47:33 - uh uh skill path on codecademy uh this
47:36 - session in particular we're looking to
47:39 - how to
47:40 - um clean the data set the different
47:42 - types of variables that you can have
47:44 - so uh in particular the thing that we're
47:46 - doing here
47:47 - is that we have something that's encoded
47:49 - as a number but
47:51 - in reality the data is an unordered uh
47:54 - categorical data type and so we're
47:56 - changing that data type to
47:58 - to be that right now exactly um and i
48:01 - think this should work
48:02 - i just want to check one more thing so
48:05 - um
48:05 - cp was getting coded
48:09 - as one point z yeah so it had
48:12 - decimals everything had decimals okay
48:16 - run that um and now let's take a look
48:19 - again
48:20 - at um
48:23 - i'm actually now interested heart dot
48:26 - info did that change it yeah that
48:30 - automatically changed that's interesting
48:33 - so
48:34 - um so yeah so that's because you just
48:37 - changed
48:38 - numbers to strings right mm-hmm yeah
48:41 - yeah so but in the other one when we
48:43 - changed
48:44 - strings to all the numbers
48:48 - well it was we removed the question
48:50 - marks but then we didn't
48:51 - say anything about all those other
48:52 - strings that were still sitting there
48:54 - okay fair
48:55 - um okay so yeah we've essentially
48:57 - replaced all these numbers with strings
48:59 - and now this is getting stored as an
49:01 - object
49:02 - and i'll just print out again if i do
49:05 - heart
49:06 - dot describe again
49:09 - um you'll see
49:12 - oops sorry uh included
49:16 - all you'll see that now we're getting
49:19 - different information about this
49:20 - variable
49:21 - so before we got like a mean and a
49:23 - standard deviation and a minimum
49:25 - and all this stuff now we're getting
49:27 - that the um
49:29 - the most there's four different
49:30 - categories the most common is
49:32 - asymptomatic
49:33 - and there's 144 people who are
49:35 - asymptomatic so that's great that
49:37 - already means that we can do
49:39 - we can do more with that variable we can
49:41 - make sense of it um
49:43 - cool let me think oh i see
49:46 - a question about in place equals true um
49:49 - so essentially i will demo this
49:54 - so if i remove this piece um
49:59 - and i run this code it's actually just
50:01 - gonna
50:02 - print out um that column
50:06 - so all that this does is it creates
50:09 - um it creates like a list of values that
50:13 - match up with that column um changing
50:16 - like all the ones to typical
50:17 - angina etc but it doesn't change it in
50:19 - the actual
50:20 - data that we have stored um and so
50:24 - there's two ways to kind of
50:25 - go about fixing that i could just like
50:29 - save it on top of that column
50:32 - so i could say like heart.cp equals
50:35 - heart.cp.replace
50:36 - so i'm saying like i want to take this
50:40 - column and i want to replace it with
50:41 - this column that we just created
50:44 - um or i can say in place equals true
50:48 - which just means that like i don't want
50:50 - you to print it out i actually want you
50:51 - to
50:52 - change the the data set that i have
50:54 - stored
50:55 - in this way um
50:59 - sometimes the reason not to do it in
51:00 - place is if you're like
51:02 - just experimenting with the data and you
51:04 - don't want to completely forget about
51:06 - the original data and like you know you
51:09 - still want to call this replace function
51:10 - but you want to store it in some
51:11 - different variable and leave the
51:12 - original data unchanged
51:14 - um in place i guess is like slightly
51:16 - riskier because when you do it the old
51:18 - data is
51:19 - replaced yeah you've now like wiped it
51:22 - wipe things clean
51:23 - i almost always actually that's a good
51:25 - point if i'm doing an analysis
51:27 - for real i almost always don't do it in
51:29 - place the first time
51:31 - um i usually just like print it out to
51:33 - kind of do a gut check
51:35 - to make sure that it looks like what i
51:38 - expect
51:38 - and then i'll go and i'll um actually
51:41 - change the data itself
51:43 - yeah and as always i mean i was just
51:45 - saying like oh it's more dangerous and
51:46 - as always
51:47 - there's really nothing dangerous right
51:49 - it's not like you couldn't get that data
51:50 - back the csv is still sitting
51:52 - on your file in your computer you could
51:54 - reload that data into another new
51:55 - variable and now all of that
51:57 - original data is back into python you
51:58 - can do whatever you want with it
52:00 - um so yeah i hesitate to say like oh
52:02 - this is dangerous because it's like you
52:03 - can't
52:04 - you can't screw up that badly right you
52:06 - can always reload the data from the very
52:07 - start and
52:08 - and start over yeah exactly
52:12 - um that's true um okay i'm trying to
52:15 - quickly think through what are the
52:16 - best ones to go over in this last little
52:19 - bit of time that we have
52:21 - um this i have two ideas
52:25 - so um one of the ones i think is
52:28 - is useful to look at is the uh
52:32 - is the slope column so
52:35 - this is a little bit of a stretch i'm
52:38 - going to say that
52:39 - i want i wanted in this live stream to
52:41 - at least have one example
52:42 - of an ordered category and i
52:46 - i'm not really sure if there is an
52:48 - ordered category in here
52:50 - um but i think slope
52:53 - is the closest to an ordered category um
52:57 - mostly because i did some research and i
52:59 - forget
53:00 - exactly which one was like good and
53:01 - which one was bad but basically
53:05 - i think good one i think one was good
53:07 - medium and bad in terms of like
53:10 - what you would expect for this test um
53:13 - and so
53:15 - based off of that i would say that there
53:17 - is some kind of ordering to this like
53:19 - it makes more sense to have like the
53:22 - upslope
53:23 - no slope down slope in that order
53:26 - versus like and especially if that means
53:28 - like good medium bad
53:30 - um versus for
53:34 - some of these other ones i don't see why
53:37 - it
53:37 - why it matters if something is in a
53:39 - particular order or not
53:41 - yeah i i think the most common ordered
53:44 - categorical
53:44 - variable or maybe you can correct me if
53:46 - i'm wrong about this but like any survey
53:48 - that's asking you to rate something from
53:50 - one to ten right that's ordered it's
53:52 - categorical because they're not letting
53:53 - you put in
53:54 - 5.56 right you only have 10 categories
53:57 - to pick from
53:58 - and one is worse than two which is worse
54:00 - than three and so on and so we're trying
54:02 - to
54:02 - yeah i agree it's a little bit of a
54:03 - stretch but that's what we're looking
54:04 - for where it's like
54:05 - these things go in some order and
54:07 - there's only categories
54:09 - yeah exactly um
54:12 - so for that purpose
54:15 - sometimes like i was saying before if
54:17 - you have an ordered category sometimes
54:20 - you want it
54:20 - represented in your data as both a
54:22 - number and
54:24 - um and a string like you want to know
54:27 - what the order
54:28 - of the categories is um but you
54:31 - also want to know what each of the
54:34 - categories means
54:35 - like in alex's example if it says like
54:38 - in a survey rate your agreement
54:40 - and it's like don't disagree
54:43 - or sorry disagree disagree strongly
54:46 - disagree disagree
54:47 - neutral agree strongly agree or whatever
54:50 - um
54:50 - if you're running an analysis you you
54:52 - might want to
54:54 - print out a plot where like you have
54:55 - those those levels of agreement in order
54:58 - because you want to understand like
55:00 - if someone agrees more with this then
55:02 - how are they different
55:03 - by some other factor or by based on some
55:06 - other attribute
55:08 - so you want to you want to have that
55:09 - information but you also
55:11 - want to know what it means um and in
55:14 - that case
55:15 - um there is a special data type that you
55:18 - can use
55:19 - in in python and there's a special data
55:21 - type you can use an
55:22 - r um i think a lot of these sort of
55:26 - statistics language focused libraries or
55:29 - languages have something like this where
55:31 - you can store data in both ways at once
55:34 - so i'm going to demo that really quickly
55:36 - we're running a little bit low on time
55:37 - so i'm going to actually just
55:39 - copy some code over
55:44 - and then we'll talk it through so the
55:48 - first thing i'm going to do
55:49 - is i'm just going to replace just like
55:50 - we did before i'm going to replace the
55:52 - numbers
55:53 - with um their definitions and i'm going
55:57 - to do it in place
55:58 - even though it's bold decisions right
56:00 - now um
56:02 - now is the time for bullying five
56:03 - minutes left in the last i know
56:06 - and then um and then i'm gonna also
56:09 - uh change this to a categorical data
56:13 - type so i'm gonna specifically
56:14 - tell python this is a categorical
56:17 - variable
56:18 - and then i'm gonna give it the three
56:21 - categories
56:22 - and i'm gonna say that this is ordered
56:25 - in this order so
56:26 - upsloping comes first flat comes next
56:29 - down sloping comes third
56:31 - um and i'm going to also
56:36 - i don't think i need to use in place
56:37 - equals true we'll automatically do that
56:40 - um oh actually because i'm just
56:42 - re-saving it
56:43 - as that column that's why um
56:47 - i don't know why that like this bar
56:49 - appeared no i can't make it go away
56:52 - um okay so now i've saved this as this
56:55 - um this kind of dual
56:59 - variable type where i now have the
57:02 - the label so if i re-print um
57:06 - the first few rows of this data set
57:10 - um i'm gonna see that um
57:13 - that first slope now i've i've listed i
57:15 - see like down sloping flat
57:17 - flat down sloping up sloping so it's
57:19 - replaced it with these
57:21 - strings um but if i now
57:24 - say heart dot slope
57:30 - dot cat dot codes um
57:34 - it's going to print out the numerical
57:37 - equivalence
57:38 - so it's saying down sloping is
57:41 - um that was it's numbering these from
57:45 - zero upwards so upsloping is going to
57:47 - get
57:48 - switched to it or is going to get the
57:50 - value 0
57:51 - flat is going to get the value 1 and
57:53 - down sloping gets the value two
57:55 - and so you'll see like downsloping got a
57:57 - two flat
57:58 - got a one that's why we have two one one
58:01 - then two and then zero was up sloping
58:05 - um and so this just enables us to now
58:08 - work with those
58:08 - numbers if we want um and it also
58:12 - signals to python for like plotting
58:14 - functions for example
58:16 - um if we wanted to make a bar plot i
58:18 - think it will now
58:19 - automatically like before it would order
58:22 - them
58:23 - alphabetically on the x-axis now it will
58:26 - order them
58:27 - um based off of these numbers if if we
58:30 - do the
58:30 - summary statistics now will it do both
58:33 - the category ones
58:34 - and the numeric ones i don't think so
58:38 - um also another thing to note is that
58:41 - for ordered categories like we still
58:43 - probably
58:44 - we still should not calculate the
58:46 - average of ordered categories so that's
58:48 - still like
58:50 - not something not something that you
58:52 - should report
58:53 - um and i think to that
58:56 - to that and it will not get reported
58:59 - but um we can try
59:03 - we're almost out of time
59:06 - um well let's see
59:10 - yeah so it's just printing the
59:13 - categorical variable ones
59:15 - cool no what do you think do you have do
59:18 - we have time for one more
59:19 - probably yeah i mean i can you know uh
59:22 - if you want to go
59:22 - if you want to go a little bit longer if
59:23 - you want to do another one uh i can't i
59:25 - was going to say i think uh
59:26 - this is also a good plug for the the
59:28 - course itself where
59:30 - you talk about like what can you do for
59:31 - with categorical variables what can you
59:33 - do with ordered stuff
59:34 - yes yeah i guess i'll skip the code but
59:38 - i'll just talk like conceptually really
59:40 - quickly
59:40 - um about one other concept that's useful
59:43 - um and so so this what i just showed
59:47 - with the cat.codes
59:48 - is um is
59:51 - a one form of categorical encoding
59:55 - um and this is something that happens a
59:57 - lot when you want to
59:58 - like put a predictive model on your data
60:01 - or something like that
60:02 - um where a lot of
60:06 - models that machine a machine learning
60:09 - specialist would try to fit on some data
60:12 - only can work with
60:14 - numerical data or they can only work
60:16 - with numbers they they don't know what
60:17 - to do
60:19 - or they they can't operate with um
60:23 - with strings and so
60:26 - a lot of times that means that you need
60:29 - to come up with some way
60:31 - to represent your categorical variables
60:33 - using
60:34 - numbers which you can do um
60:38 - and which also makes it i think easier
60:41 - to
60:42 - analyze your data if you're just doing
60:44 - like an exploratory data analysis
60:46 - um which is to say that
60:51 - sorry which is to say that uh there
60:54 - there's multiple ways of doing this
60:56 - and um depending on what your goal
60:59 - ultimate goal is you might do it in
61:00 - different ways um
61:02 - so here we we had a
61:06 - uh ordered category and we set this up
61:09 - so that we could
61:10 - easily translate that ordered category
61:12 - over to numbers another way that you
61:14 - could categorically encode
61:16 - a categorical variable is you could do
61:19 - something called one hot encoding
61:21 - which essentially means like breaking
61:23 - one categorical variable
61:25 - up into um separate columns where
61:28 - each column is just a one or a zero
61:31 - depending on
61:32 - if um if it was that category
61:35 - if it's in that category or not and so
61:38 - like
61:39 - just from a data analysis standpoint
61:42 - i think an example of when you might
61:44 - want to do this
61:45 - is well actually probably the best
61:47 - example when you might want to do this
61:49 - is
61:50 - the last column of the data set um
61:54 - which actually has it has values one
61:58 - two three four and zero where
62:01 - zero means that there is um
62:04 - no heart disease so no presence of heart
62:07 - disease
62:07 - and then um one through four means that
62:10 - there is heart disease
62:12 - um and so if you're trying to build a
62:15 - model to predict whether someone had
62:16 - heart disease or not and you don't care
62:18 - about the one two three and the four
62:20 - you might want to change that column so
62:22 - that
62:23 - you just represent um you instead you
62:27 - just have
62:27 - one column and it's just like heart
62:30 - disease or not
62:31 - um and then it's going to be equal to a
62:33 - one or
62:34 - true or whatever you want if there is
62:36 - heart disease and a zero
62:38 - otherwise right rather than like four
62:40 - different designations of heart disease
62:42 - which
62:42 - exactly which you might not necessarily
62:44 - care about yeah
62:46 - okay i'm gonna leave it there um there's
62:48 - like a whole
62:49 - exercise about this on the lesson on
62:51 - codecademy there's code
62:53 - in the code that uh i i posted so if you
62:56 - wanna play with it and you wanna see how
62:58 - that
62:59 - that looks you should go for it and
63:01 - explore on your own
63:02 - post questions um i like you can post in
63:05 - the comments on
63:06 - youtube even after the fact and i'll
63:08 - take a look at things
63:10 - um i love to hear your thoughts so
63:13 - um sophie do you want to show the course
63:16 - super briefly to just show like
63:18 - the lesson in particular that uh that
63:20 - aligns with this
63:21 - uh yes
63:24 - so i can also do it if you don't have a
63:27 - browser set let's see
63:32 - get to see my my setup
63:40 - on internet
63:45 - okay yeah so this is the master
63:48 - statistics with python
63:50 - uh path and this is within variable
63:54 - types
63:54 - this lesson on variable types is
63:58 - really the content that we just covered
64:00 - today
64:01 - um also the article as well has a little
64:04 - bit of it
64:05 - um here's the stuff on one hot encoding
64:08 - if you're interested
64:09 - in what you missed um another thing i'll
64:12 - say is i recognize some of the names
64:14 - on the chat uh as people who have
64:18 - submitted
64:18 - bug requests this or bug reports i feel
64:21 - like this is a weird plug to submit bug
64:24 - reports
64:24 - but i'm actually really grateful um like
64:27 - alex said this
64:28 - like this course is kind of my baby and
64:30 - um
64:31 - and i really want it to be good and if
64:33 - you're confused about something it
64:35 - probably means that somebody else is
64:36 - confused
64:37 - um and even if it's not just like even
64:39 - if it's
64:40 - you don't understand not that like
64:42 - something is really broken if
64:43 - something's really broken please tell me
64:45 - um but if you don't understand something
64:48 - you can also submit a report or
64:49 - ask in youtube chat or on
64:52 - our forums on codecademy like i really
64:54 - want to hear from you
64:56 - um and one of the weird things about
64:57 - this whole
64:59 - online education that like many of us
65:02 - are turning to especially in the time of
65:03 - this pandemic is that
65:05 - i don't know like i come from teaching
65:07 - in the classroom and you get this
65:08 - immediate feedback of how people
65:11 - are interacting with your content um and
65:13 - i really miss it that's why i love these
65:15 - live streams so much so
65:17 - um so if you want to
65:20 - provide that to me
65:23 - um cool anything you want to add alex
65:28 - no we'll be back again next week uh
65:30 - tuesdays at four
65:31 - if you want to catch us live um yeah
65:33 - other
65:34 - sophie do you want to do a 30 second
65:35 - plug of what we're doing next week
65:37 - sure yeah so next week i'm gonna pick a
65:39 - different data set because
65:41 - i feel like this data set is a lot um or
65:43 - it's like a little
65:45 - boring so um i'm gonna pick a different
65:48 - data set and we're gonna do
65:49 - some summary statistics and
65:50 - visualization so we're gonna we're gonna
65:52 - try to
65:53 - look at some of the variables and
65:54 - visualize them and um
65:56 - and summarize them with numbers cool

Cleaned transcript:

um i see some people in the chat already saying hi before the show starts hello give us a couple of seconds here oh someone from greece oh i honest i recognize you oh i think i think you might have sent in some uh some suggestions to me for this uh this path i honest and they were very helpful so thank you keep them coming cool so we we are live uh yeah so sophie you want to kick it off sure yeah so welcome everybody um this is a eightweek series that we're starting today going through the new master statistics with python path skill path um but this live stream series is going to be done um off platforms and we've provided a bunch of code for you to download and data sets so um even if you're not uh if you don't have a codecademy pro subscription yet like you can still participate in all of these and we really welcome anybody who wants to join and learn a little bit of statistics um i'm really excited for this alex can alex can confirm that i've been excited about this for a while yeah this has really been susie's like baby that she's been uh she's been working on for the past couple of months um sophia i know that this is like the content that you've been wanting to write for a long time uh for folks watching live right now so we are live on a couple of different platforms uh sophie and i are gonna be watching the youtube chat primarily so if you're watching on facebook or twitter or twitch um come over to youtube if you want to chat with us if you're watching this in the archives um we're going to be uh so we post all these on youtube after the fact um if you're watching there we are streaming these um tuesdays tuesday afternoon uh 4 p.m on the east coast um and we're going to be doing it for the next eight weeks we're going to be doing this stats series so if you want to watch us live uh hopefully you can you can join us then yeah um are there any other housekeeping items alex that i'm forgetting before we get started no i don't think so i think um yeah uh people in the youtube chat right now we want this to be super interactive so uh feel free to say hello to us where you're coming from uh yeah we we have someone from greece which is which is pretty cool and then uh yeah sophie before we get actually started i wanted you to talk a little bit about um what is this path about why are you super excited about this content um what makes this content special can you kind of give us a preview of the like overall thing before we dive into the first lesson yeah totally um so this path and i also add this past is not done so um i'm actually working on even more content that's going to go into the path uh in the next couple of months um but but this path is all about how to take a look at some data and make sense of it um it's we're calling it statistics but i feel like there's a lot of different names that you can assign to essentially the same thing right like statistics data analytics data science um all of these fields are focused on essentially trying to be like a sleuth and make sense of a data set when you have a lot of information and you need to condense it down somehow and and use it then to make some sort of decision a lot of the time or maybe understand something better like how a process works um and so yeah so this this content is really about the full process of taking we're gonna work with tabular data which is basically just data that's organized into rows and columns um and just taking like a large data set that is kind of unwieldy that we can't make sense of by just looking at it and then turning it into something that we can actually do something with um yeah and i i'd say would you say that it's fair to even say that this is kind of a this could be a replacement for your like intro level stats course or you're covering concepts that traditionally are taught in interlevel stats course in like a really mafi kind of way and instead we're going to start looking at them from this simulation based approach this um like almost less math and more like conceptual understanding yeah so um yeah a little background on me i actually i taught high school math for four years um and then i also taught at the masters and phd level as like an assistant um throughout my master's degree and i've seen a lot of different statistics classes a lot of different math classes um for that matter and i feel like um a lot of them really focus on this kind of wrote like you do this then this then this then this kind of steps um and a lot of times that makes it hard to remember in the future so i've heard a lot of people say like 10 years down the line they don't remember anything they learned in their statistics class um and so later in life it was kind of presented to me in this different way um and really focusing on conceptual ideas using programming um and i think that while there's a little bit of a hump to get over in terms of understanding some of the programming concepts i think that overall it makes it easier to understand the concepts and easier to remember um into the future so and the other thing i'll say about that too really quickly before we get started is that throughout this entire um series and if you're working through the path we're working in python um there are some like syntactical things like just how you write code that you're gonna have to learn in order to implement what we're doing in python um or in any programming language but what i really want to focus on over the next few sessions is just like the concepts and why we're doing what we're doing and not necessarily the syntax i know there's like six different ways to do anything you might want and um with varying levels of complexity and um and and whatever but um but i really i think the more important thing is understanding what you're doing so that you can do it in any language that you might encounter or any software um that you might need to use in a job for example so yeah i actually think that it's it's a good example of like how to use codecademy effectively because a lot of times i think folks will like memorize the memorize how to call a function or write a function or whatever and like not learn the thing behind that or like not see the big picture because they're just like learning syntax and like oh i got this syntax which means i know the thing and i think what's cool about this course is that um the syntax is like a means to the to an end where it's like it's almost okay if you don't entirely understand the syntax where the thing that we want you to understand are the statistical concepts um that were that we're demonstrating through code um so this is i think all of that is to say that this is very intro friendly it's totally fine if you don't know how to code or you don't understand the python syntax that we're using um really focus on these stats concepts that are being taught here yes okay i'm gonna get started without further ado um i'm gonna share my screen uh and you guys are gonna get to see my whole desktop which is very exciting and a dog and a dog um this is my dad's dog juno uh also just so you know i'm gonna be looking up to the side every once in a while because i've got the chat on another screen um and so i'm just keeping an eye on things over here as well so if you see me looking at the side i'm i'm not lost i'm just just checking on you um okay so and pulling over um some windows so uh if you saw the blog post or hopefully um i think on the youtube link as well um there's a link to this uh github repository and um yeah and within this repository i'm going to add the co or the uh code and data for every single session in here and we're going to start with number one um and so uh if you click into that folder you'll see the starting and ending code and the data file that we're going to be using if you're interested in coding along i just want to say a good idea would be at this point to just if you have if you have github up and working you can just clone the repository if you don't know how to use github that's totally fine just download this um this whole repository as a zip file um and then you can double click it to unzip it and then you'll have all the um files on your computer so you can just open them right up along with me if you have downloaded anaconda as well um which i think we also noted on the um on the instructions but uh worth doing yeah there's some setup required if you if you want to code along with us um they're uh describing this in this readme here yes okay um all right with that said i am going to demonstrate the reason why i'm sharing my full desktop is that um just in case anybody wants to kind of do their own analysis later um i think seeing the full process of how i'm organizing my files and how i'm opening um applications is just useful um it might seem like silly but i think i don't know that's what i wanted when i was first learning yeah i think one of the things that's really difficult um when you're first starting is like where are my files going how do i open them uh you know one of the benefits of codecademy is that we do that all for you but then once you try to start doing things on your own machine it can feel overwhelming and so demoing that is uh is useful right so yeah so i just have this this folder which is exactly what you'll get if you download that whole file i also saw someone ask about miniconda i think that will work i'm not totally sure um i'm not real i imagine yeah we're not using anything fancy um okay so i'm gonna go ahead and actually open up my anaconda navigator because i like to do things not from the terminal you can also open a jupiter notebook from the terminal but i i like this nice interface um and then what i'm gonna do is i'm gonna launch a jupiter notebook um because we're working with jupiter notebooks and of course it loaded over there so i'm gonna pull this over here okay so now this just gives me my file structure on my um on my computer and i'm gonna navigate to the file that um we're working with today uh or the folder that we're working with today and that has all of my code and the data set that we're going to be using and then i'm going to just open up this starting code and that will launch a jupyter notebook which is essentially just it's a code editor but it allows us to run code um and see the output and then like run some more code and keep all the output um on the same page and it also renders like marked down so essentially i can write regular text and not just code yeah it's a nice way to kind of integrate regular text with code you'll see like a lot of reports being written up in jupyter notebook because it formats really nicely yeah um and one thing i'll note is that i downloaded or i chose this data set um and i downloaded it from the uci machine learning repository um and you can get to that repository with this link um it i would i swear like i they don't pay me for this but i think that uh this is a really good resource if you're looking for data sets to just work with as you're getting started as a statistician or in data analytics um it's really helpful to just mess around with some data and if you're looking for a variety of data sets with different levels of cleaning um i think this is a really good place to look uh the other thing i'll mention so this is the link to the data set um the other thing i want to quickly mention just in case anybody is trying to like reproduce this from the very beginning is that um this data set which is the process cleveland data from here is in this like weird format it's in a dot data format um and i before uploading it i changed this to a csv um and i also added the column names which weren't in the data set itself but that i got from the um from here so yeah yeah so just as a side note i won't go into too much detail uh but if you download the data directly it's not going to be in quite the right format which is why downloading it from the github will be a little bit easier yeah it's kind of a good lesson already on just like different levels of cleanness that a data set can come in where part of what we're going to be doing this lesson is seeing like oh isn't this weird like this column is represented as a string where we really want to be integers and we need to fix that but even before we get to that kind of step um yeah doing things like this data is coming in a weird format and it would be really nice to have the label you know the labels of each column on this um when i before i even start working on it so you know all data set come all data sets come in varying degrees of like neatness or usability for what you're trying to do with it um so yeah yeah exactly and i will also say like knowing what to do with a dot data file um is not something that i just like know how to do um when i first was looking at this data set um i downloaded it i couldn't i looked up ways to load a data file in python and then none of them were working like it was breaking down and so i googled what to do and found something on stack overflow that said like turn it into a txt file then turn it into a csv file on your desktop and i just followed the instructions um so that's another like just general note is that we're going to go through this but even we don't always know exactly how to solve every problem and what i do is i spend a lot of time on stack of overflow just like looking for other people's solutions to problems so cool okay so we're gonna get started with this data set so uh i i'll say right off the bat so a a csv file is just a type of file that we can read into python there's other types of files you can read into python as i mentioned um basically like the first step of any analysis if you're going to use python or r or any software whatsoever is to get your data into that software and make sure that your software can understand some basic things about that data or can interact with that data in the way that you want and there are a bunch of python libraries that we can use um to work with data and those python libraries kind of assume that our data is in a particular format so um uh like pandas and nunpai and matplotlib and seaborn if you've heard of any of these um they're really easy to work with if you have data that is saved in a data frame um which is essentially just this like this structure where you've got your rows and your columns each of the columns has a name your rows also have a name by default they're just going to get named with the numbers starting from zero um so you'll see when i print this out i'm just getting some bolded row names and column names and then i've got each of my rows of data so okay first thing i'm going to do or first thing i've already provided code for is just reading this this file into python and saving it as something called heart i could save it as something else but i'm going to save it as heart so i remember that this is my heart disease data um and this is as background this is a data set that is used i think in like a bunch of papers to essentially predict who is going to be diagnosed with heart disease and so these are patients at a clinic who had a bunch of tests done and then it was determined whether or not they had clinical heart disease and this is all the information from those patients um and then what all i've done here and i think this is all in the starting code is i've just taken a look at the first five rows of the data um and here we go so we've got for each patient we've got some information we've got age sex cp i've copied down the data dictionary here so cp is a chest pain type t rest bps which is a resting blood pressure a cholesterol level an indicator of whether someone's fasting blood sugar is greater than 120 um and then a bunch of other things as well i won't go through all of them because we're going to look a little bit more in detail as we go through this but you'll see right off the bat that there are some maybe weird things or some things that just by looking at the data itself you might not necessarily understand so for example in the sex column we have numbers one and zero it seems like and we see if we look at the data dictionary that one equals male and zero equals female so we can we can figure that out but maybe these numbers as we're looking at the data prevent us from like immediately gleaning something about the patient in this row and so that those are the types of things that we're gonna look at in the next couple of steps okay um all right so the purpose of today i'm gonna add another code chunk down here um so the purpose of today's lesson is really just to go through the process primarily of cleaning a data set i know that data cleaning is not the most doesn't sound like the most fun however i would encourage you to think about this step as being kind of like a detective um we've got a pretty big data set on our hands i mean it's not huge we could have a larger data set and in real life people work with really big data sets um but you're kind of like a sleuth trying to figure out how you can best represent this information so you can do something with it later um the other thing i'll say is i i kind of want to start today with something that's not data cleaning because i think it sets up the importance of these steps really really well so um the first thing i'm going to do is i'm going to print out some summary statistics uh for this data set i think it's i don't know if it's capitalized let's see oops oh here's a good okay i should have said this before a good thing to know is that uh you have to run this this code um all i'm doing here is i'm importing some some libraries that are gonna help us with our analysis so these are essentially like they contain some of the functions that we're going to be using they contain some of the the tools that we that we need for our analysis and i'm saving them as these aliases which is just going to make it easier to reference them i'm gonna run it i'm gonna actually run this um so it's not saved from before and now yeah if you look at that error message it basically said uh it didn't know where hart was um because that was our data set that we never loaded in yeah exactly so sophie you said that we're going to look at summary statistics what is the what what is a summary statistic that is a great question alex thank you for teeing me up so perfectly um okay so essentially talking through this process right now step one is gonna be cleaning up our data set step two is gonna be figuring out some way to condense the information in our data set down to a smaller number of to a smaller set of numbers or visualizations that we can actually make sense of so um in our data set right now we have for example a whole long list of um let's say ages we have a whole long list of ages uh and i think there's like 370 patients so we've got like 370 ages we can't really say much based on just like eyeballing those ages so we want to condense that down into some sort of number that can give us some insight into what that column contains and that's all a summary statistic is it's a it's a number that can summarize some information about one of these attributes that we have for a patient um cool and so you'll notice and in our next live stream we're going to specifically talk about some of these summary statistics and visualizations that could go along with them but one thing i want you to know is notices so this describe function it's like a builtin essentially a method that's associated with data frames so um it's like uh it's something that we can apply to anything that we've any data that we've stored in this way and it makes it really easy to super quickly calculate things about our data set um which is you know super nice that's why we use software like python is to be able to really simply in a one uh press of a button get all this information about our data set so each one of these rows is a different summary statistic where uh you know the mean is the summary statistic the count is a summary statistic the standard deviation all these are so each row is a different summary statistic for each column exactly yes i just saw in the chat hi tong jin one of my classmates uh former classmates uh is joining us this is so fun um okay so anyway one thing i want you to notice about the output of this is uh is that this this function is making some assumptions about our data so um for example we pointed out before that sex was coded as ones and zeros and now we look at this and we see that we're getting a mean for this variable we're getting that like the mean of the sex variable or the average the mean is another word for average um if you're familiar the average of the sex variable is nine 0.6798 whatever that's kind of a weird thing to report um if you know how this variable is coded you you can figure out how to word that um you could say like the they're like 68 of the people in this um in this data set are male 1 you don't have to worry about how i know that right now cp is another good example where that's uh if you scroll up to the description of cp it's like four different types of chest pain and so what does it mean that the the mean or the average is 3.1 right it's not like on average people have 3.1 level of chest pain it's like right that's that's really hard to interpret right exactly and then you'll notice over here we have two other ones so ca and thal so ca is a number of major vessels zero to three um and so that actually is a should be a number um it should be a number zero to three and if you look back at the data set or or when we load it in you'll notice that we see mostly numbers like 0.0 3.0 2.0 um and yet for some reason it's not giving us a mean it's not giving us that information it's instead giving us um this top row which gives us it gives us the number of unique categories um or unique values and then the most frequent value and the frequency of that so um this is just saying that like the um there are four possible values of this three is the number three is the most common of them and there are 166 threes um and same over here we've got five different values zero is the most common and there's 176 zeros and this is a way that we would usually summarize categorical data so something like sex where there's male and female um but yeah it's being applied to something that we know based on looking at our data looks like numerical output um so that's kind of a weird thing and we're not getting that for some of these other ones that we probably want that information for right likes for cp we would like to know hey there's four different kinds you're seeing three most often um right we don't we don't care about the mean of cp whereas for this um ca we probably do care about it right it's like almost even reversed where where we want the numerical summary statistics the summary statistics about how do i describe those variables not categorical what's the what's the opposite of categorical i would call them quantitative or numerical either is fine but yeah yeah exactly so this is again still motivation for why it matters um how our data is stored but it but to summarize all all of the summary statistics that we just looked at my my point here is that we have these builtin tools that can do things really quickly for us but they're looking at how the data is stored in and making some decisions about how to summarize them for us and they're getting some things wrong and that's because our data isn't stored in a way that in the way that it needs to be in order for us to use these tools to do our analysis so that's why it's super important um okay the other thing that i'm going to take so focus of the next 30 minutes then is going to be to look at how our data is stored and try to make sure that we make changes that we need to in order to store it in a way that will make our analysis more sensical so in order to do that um the first thing i want to do is i'm going to take a look at the info um about this data set and the other thing i'll say is in jupyter notebooks i like this i don't have to use a print statement um for the last line for it to actually print it out although um if you're working in like us uh a different ide like you'll in order to get this to actually print you'll have to do this yeah codecademy for example if you're working and on code stuff on platform you'll need to explicitly save the print principle exactly um okay so this gives us some information specifically i think the most important um column here that i'm going to look at is this d type column and the d type column tells us what um data type each variable is stored as um so this looks a little complicated but basically all you need to know is that float and int are um are ways that numerical data is going to get stored so if you see float or in it means that it's storing it as a number and that means that you can do number e things with it so you can like add numbers and subtract numbers and all the things that you would normally need to find you find the knee and finally that makes more sense yeah um so you can you can do a bunch of stuff with numbers and so if you want to be able to do those things then you need to store numbers as numbers um so that would be floater and if you see oh yeah we've got an in down here um if you see something that says object in python this means that it's getting stored as a string um i think it's probably it's not worth going into right now why this gets printed as object and not something like string um but this is something i don't know how it works in other programming languages besides r but in r you would see like the that the data type is is like str or string but because of how data gets stored in python um it's a little bit different it gets stored in the memory and then with a pointer towards that memory so um anyway yeah but this is this is a good example of like why the summary statistics are being different you can even see the the two things that are being stored as an object or a string are the ones where it's able to do those first uh three rows which was again the like the frequency count the like types of of answers right uh and it can't do all of the numbery things it can't do mean it can't do standard deviation whereas the other ones are reversed the things that are floats and ins can do all these number things but then can't do the things that are associated with categorical variables exactly yeah so so this is this is right here telling us like you said exactly why this whole business is happening um okay so now i think it's time to start trying to address some of these things and see if we can change um how these variables are stored so that we can make more sense of this data um everybody's saying that they're on like python 5 python 66 i think the highest is python python 3 still does like python 3.7 so uh yeah it was a big deal when when they went from python 2 to python 3 officially yeah yeah it's causing a lot of things to break um okay so the first thing i'm going to do is i'm actually going to go a little bit out of order the first thing i want to understand um or the kind of the weirdest thing to me in this output is that these two variables ca and thal which i can see when i print out the data seem to be numbers um those are getting stored as strings um and that that to me is like the most concerning thing that i see here or not concerning but the most like obviously yeah obviously weird thing um because you know python is pretty smart it looks at it looked at most of these and saw numbers and stored it as a number um so the the question is why is that happening um and so what i'm gonna do to kind of investigate that um oh and the other thing i'll just point out i know i'm scrolling up and down a lot is that um so for ca for example um it says that there's five unique values whereas in our data um dictionary it said zero to three so that would be zero one two three that's four different um and same thing for thal there were three different values three six or seven i don't know why they chose three six and seven but i i see what you mean about the like being uh being a detective where like we have our clue right we have like wait there's five things but over here it only says there's four things i would love in the chat post your predictions for like where what is this extra like the you know it's the it's the case in the clue like what is this extra value that's from this uh this variable that's screwing things up yeah and i feel like this is why i like statistics so much and data science so much is that i like being a detective like i i feel like if you can and if you can reframe your data cleaning as like an investigation then maybe it feels more fun yeah the less nearest data cleaning takes some like some narrative behind it in order to be fun and exciting i'm trying to keep everyone i want i awareness i hope i'm saying that right is saying that the unique function will will give us some some clues i agree with you so i'm going to go for that um oops so okay so let me talk through what i'm doing i've got the heart data set um i'm going to pull out the let's do ca first the ca column and then i'm going to apply this unique function to that to adjust that column because otherwise we'd like to look at every column and it would be confusing oh yeah and this makes some sense so we've got um there's our five unique values we've got a zero a three a two a one and a question mark um and the question mark is our is our fifth value and then i'm gonna do the same thing for the foul one yeah an interesting thing thing here is that you can even see that there's strings there you can see the quotation marks around each of those values um and again it's probably that like in the csv file i bet there was no quotation marks but because the question mark was also in there it just forced everything to be a string because it didn't know how to interpret the question mark as a number yes exactly um pierre says data cleaning is fun yes i agree right i don't mean to make fun of dating love to hear it um okay so okay so we've kind of answered our question um there was something that that python couldn't recognize as i'm assuming right this question mark means that that information wasn't available for that patient um and there's actually in python there's ways of indicating that something is missing um that like a cell of your data frame should be blank and we need to make sure that we tell python that so that it can categor so that we can change everything else um to be like a number if that's what it should be um okay so with that in mind what i'm gonna go ahead and do is um i'm gonna replace all of these question marks with something that python can recognize as missing um and i'm gonna do that by using the replace method so we've got heart dot replace um and then we're gonna replace i'm gonna just do this in the entire data set so that'll do both of these at once i'm going to replace this question mark with um this np dot nan so mp is just our like shorthand for the numpy library which is just a python library that's used for data science um and then nan stands for not a number um but it's just a one form of um missing data in python yeah i honestly brought something up which is there's a couple of different ways to do this another thing that we could do would be to just drop those rows entirely like removing them from the data set as if they already existed um i think let's walk through this way but then i don't know if you can talk about like the differences in the two of like because there's implications like if we if we remove a row then that's gonna affect the other columns like that's gonna affect the mean of other columns um yeah so actually i i would say um they're like a whole other field of data cleaning is like what to do with missing data um and so there's lots of things you can do you can delete the row you could try to impute missing data which means basically that you can try to like guess what that value should be in a way that doesn't affect the other data um so you can say like okay other if we look at this um if we look at this row of the data can we find other patients that look really similar to this person and what were their value here um so you could try to fill it in um with something that at least is not surprising um so basically there's like there there's a whole field devoted to that and i think that's a really good point i'm glad you brought it up um but yeah uh the other thing i'm just noticing so when i do this um it's just printing it out if i want to resave it i need to do this there's probably also like an inplace equals true parameter but i'm going to do this so so essentially this prints out the replace this data frame with the replace values but it doesn't change it in the actual thing that we're going to be using the actual data frame so i'm going to go ahead and do this um to actually save it and now um i'm just going to check really quickly this again because my memory is that actually python didn't change them so you were expecting now that we've removed the question marks that it would just auto change them all to numbers yeah um okay i need to then i don't remember actually the uh the syntax this is a good example um so it didn't change them automatically but we should be able to change them now um so so we want to change them to integers uh or to or to uh floats actually just uh i think i think ionis is right where you can use the as type yes um i think which one so ca we want to change to a number thal actually we want to change to eventually we probably want to change it to these category names so i'm just going to change ca for right now um thank you ionis uh as type and then i'm going to just say uh change it to int i think i don't think i need to say n64 i think that will just work but let's try it oops heart let's try in 64. sorry guys yeah and it has to be a strong invalid oh oh okay i know exactly what so um so because actually these got these got saved as values with decimal places um even though the decimal place is dot zero for all of them um we can't save them as integers because they have that precision or they have that decimal place so we need to actually save them as floats and we're going to resave that as the as that as that column and now this should work hard great so now we've changed that um it said object before now it says float um and so now we can interpret that column as a number yeah one thing to note here is in the chat i posted the documentation for the as type uh effect function i think uh sophie and i just like talked it out here and also looked at chat to say oh yeah the as type function will probably do the trick but uh i googled let's see what was my term data frame change column type and you know the very first school result was the ass type function and so that's like a good example of like hey we need to do this thing we don't know how or we don't remember how and uh you know that kind of stuff happening all the time yeah yeah my my first like programming language for statistical analysis was r so um so as i do more work in python um i feel like i often need to search for things um but i think the i may be the like side point i want to make here is that the the important thing is that you know that you need to change this to a different data type so in in any programming language if you understand that there's a data typing issue here then you'll be able to figure it out and google how to do like what's the exact syntax so this is a perfect example of why like this is great to know off the top of your head but this is like not the most important thing um for being able to go through this analysis like the more important thing is conceptually understanding that this is something you should check and this is something that you should um like fix if it's not right nice um okay so let's kind of go through i think there are some other ones that are that are interesting um i've seen time on these live streams just goes by so darn fast like i don't even know i i want to make sure that we get through at least a couple more um different examples and you can look through the final code that i posted um if you want to see kind of like a little bit more of what you can do um but let's pick a let's pick something fun um so i think one of the one of the things that is worth doing is for anything that's coded as a number but it's really a categorical variable um especially a categorical variable where there's no order um so these are just like different types of chest pain it's not like one type of chest pain is worse than the other um if if that was the case i would see more of a reasoning to maybe code something as one two three four where if it was like mild chest pain moderate chest pain severe chest pain very severe or something like that then maybe you could leave it coded as a number but since this seems to be unordered um i think you you definitely want to change this so that python can recognize what so that you and so that python can recognize that this is a categorical variable um and there's no like ordering or num numbering you shouldn't perform numerical operations on it um so let's go ahead and try to do that i'm gonna do that for the ca or sorry for the cp variable i'm gonna just copy this over down below so i can use it as we go um sophie i wonder can you increase the size of your uh ooh yes hopefully that works sorry guys that is something i definitely should have done no worries okay so i'm gonna just do this one really fast um okay so we've got uh heart dot cp dot replace um i'm going to i'm going to use a dictionary which again this is like python syntax that you don't have to know um right off the bat but instead of just replacing all the ones and then replacing all the twos and then the threes and then the four so i'm going to just pass all that information to python at once so i'm going to replace the value 1.0 with typical angina um while i'm typing this out are there any like questions maybe that yeah let me take a look we have a question of what is this uh yes i can i can give a brief summary as you're talking about this this is kind of a companion live stream to the new um master statistics with python uh uh skill path on codecademy uh this session in particular we're looking to how to um clean the data set the different types of variables that you can have so uh in particular the thing that we're doing here is that we have something that's encoded as a number but in reality the data is an unordered uh categorical data type and so we're changing that data type to to be that right now exactly um and i think this should work i just want to check one more thing so um cp was getting coded as one point z yeah so it had decimals everything had decimals okay run that um and now let's take a look again at um i'm actually now interested heart dot info did that change it yeah that automatically changed that's interesting so um so yeah so that's because you just changed numbers to strings right mmhmm yeah yeah so but in the other one when we changed strings to all the numbers well it was we removed the question marks but then we didn't say anything about all those other strings that were still sitting there okay fair um okay so yeah we've essentially replaced all these numbers with strings and now this is getting stored as an object and i'll just print out again if i do heart dot describe again um you'll see oops sorry uh included all you'll see that now we're getting different information about this variable so before we got like a mean and a standard deviation and a minimum and all this stuff now we're getting that the um the most there's four different categories the most common is asymptomatic and there's 144 people who are asymptomatic so that's great that already means that we can do we can do more with that variable we can make sense of it um cool let me think oh i see a question about in place equals true um so essentially i will demo this so if i remove this piece um and i run this code it's actually just gonna print out um that column so all that this does is it creates um it creates like a list of values that match up with that column um changing like all the ones to typical angina etc but it doesn't change it in the actual data that we have stored um and so there's two ways to kind of go about fixing that i could just like save it on top of that column so i could say like heart.cp equals heart.cp.replace so i'm saying like i want to take this column and i want to replace it with this column that we just created um or i can say in place equals true which just means that like i don't want you to print it out i actually want you to change the the data set that i have stored in this way um sometimes the reason not to do it in place is if you're like just experimenting with the data and you don't want to completely forget about the original data and like you know you still want to call this replace function but you want to store it in some different variable and leave the original data unchanged um in place i guess is like slightly riskier because when you do it the old data is replaced yeah you've now like wiped it wipe things clean i almost always actually that's a good point if i'm doing an analysis for real i almost always don't do it in place the first time um i usually just like print it out to kind of do a gut check to make sure that it looks like what i expect and then i'll go and i'll um actually change the data itself yeah and as always i mean i was just saying like oh it's more dangerous and as always there's really nothing dangerous right it's not like you couldn't get that data back the csv is still sitting on your file in your computer you could reload that data into another new variable and now all of that original data is back into python you can do whatever you want with it um so yeah i hesitate to say like oh this is dangerous because it's like you can't you can't screw up that badly right you can always reload the data from the very start and and start over yeah exactly um that's true um okay i'm trying to quickly think through what are the best ones to go over in this last little bit of time that we have um this i have two ideas so um one of the ones i think is is useful to look at is the uh is the slope column so this is a little bit of a stretch i'm going to say that i want i wanted in this live stream to at least have one example of an ordered category and i i'm not really sure if there is an ordered category in here um but i think slope is the closest to an ordered category um mostly because i did some research and i forget exactly which one was like good and which one was bad but basically i think good one i think one was good medium and bad in terms of like what you would expect for this test um and so based off of that i would say that there is some kind of ordering to this like it makes more sense to have like the upslope no slope down slope in that order versus like and especially if that means like good medium bad um versus for some of these other ones i don't see why it why it matters if something is in a particular order or not yeah i i think the most common ordered categorical variable or maybe you can correct me if i'm wrong about this but like any survey that's asking you to rate something from one to ten right that's ordered it's categorical because they're not letting you put in 5.56 right you only have 10 categories to pick from and one is worse than two which is worse than three and so on and so we're trying to yeah i agree it's a little bit of a stretch but that's what we're looking for where it's like these things go in some order and there's only categories yeah exactly um so for that purpose sometimes like i was saying before if you have an ordered category sometimes you want it represented in your data as both a number and um and a string like you want to know what the order of the categories is um but you also want to know what each of the categories means like in alex's example if it says like in a survey rate your agreement and it's like don't disagree or sorry disagree disagree strongly disagree disagree neutral agree strongly agree or whatever um if you're running an analysis you you might want to print out a plot where like you have those those levels of agreement in order because you want to understand like if someone agrees more with this then how are they different by some other factor or by based on some other attribute so you want to you want to have that information but you also want to know what it means um and in that case um there is a special data type that you can use in in python and there's a special data type you can use an r um i think a lot of these sort of statistics language focused libraries or languages have something like this where you can store data in both ways at once so i'm going to demo that really quickly we're running a little bit low on time so i'm going to actually just copy some code over and then we'll talk it through so the first thing i'm going to do is i'm just going to replace just like we did before i'm going to replace the numbers with um their definitions and i'm going to do it in place even though it's bold decisions right now um now is the time for bullying five minutes left in the last i know and then um and then i'm gonna also uh change this to a categorical data type so i'm gonna specifically tell python this is a categorical variable and then i'm gonna give it the three categories and i'm gonna say that this is ordered in this order so upsloping comes first flat comes next down sloping comes third um and i'm going to also i don't think i need to use in place equals true we'll automatically do that um oh actually because i'm just resaving it as that column that's why um i don't know why that like this bar appeared no i can't make it go away um okay so now i've saved this as this um this kind of dual variable type where i now have the the label so if i reprint um the first few rows of this data set um i'm gonna see that um that first slope now i've i've listed i see like down sloping flat flat down sloping up sloping so it's replaced it with these strings um but if i now say heart dot slope dot cat dot codes um it's going to print out the numerical equivalence so it's saying down sloping is um that was it's numbering these from zero upwards so upsloping is going to get switched to it or is going to get the value 0 flat is going to get the value 1 and down sloping gets the value two and so you'll see like downsloping got a two flat got a one that's why we have two one one then two and then zero was up sloping um and so this just enables us to now work with those numbers if we want um and it also signals to python for like plotting functions for example um if we wanted to make a bar plot i think it will now automatically like before it would order them alphabetically on the xaxis now it will order them um based off of these numbers if if we do the summary statistics now will it do both the category ones and the numeric ones i don't think so um also another thing to note is that for ordered categories like we still probably we still should not calculate the average of ordered categories so that's still like not something not something that you should report um and i think to that to that and it will not get reported but um we can try we're almost out of time um well let's see yeah so it's just printing the categorical variable ones cool no what do you think do you have do we have time for one more probably yeah i mean i can you know uh if you want to go if you want to go a little bit longer if you want to do another one uh i can't i was going to say i think uh this is also a good plug for the the course itself where you talk about like what can you do for with categorical variables what can you do with ordered stuff yes yeah i guess i'll skip the code but i'll just talk like conceptually really quickly um about one other concept that's useful um and so so this what i just showed with the cat.codes is um is a one form of categorical encoding um and this is something that happens a lot when you want to like put a predictive model on your data or something like that um where a lot of models that machine a machine learning specialist would try to fit on some data only can work with numerical data or they can only work with numbers they they don't know what to do or they they can't operate with um with strings and so a lot of times that means that you need to come up with some way to represent your categorical variables using numbers which you can do um and which also makes it i think easier to analyze your data if you're just doing like an exploratory data analysis um which is to say that sorry which is to say that uh there there's multiple ways of doing this and um depending on what your goal ultimate goal is you might do it in different ways um so here we we had a uh ordered category and we set this up so that we could easily translate that ordered category over to numbers another way that you could categorically encode a categorical variable is you could do something called one hot encoding which essentially means like breaking one categorical variable up into um separate columns where each column is just a one or a zero depending on if um if it was that category if it's in that category or not and so like just from a data analysis standpoint i think an example of when you might want to do this is well actually probably the best example when you might want to do this is the last column of the data set um which actually has it has values one two three four and zero where zero means that there is um no heart disease so no presence of heart disease and then um one through four means that there is heart disease um and so if you're trying to build a model to predict whether someone had heart disease or not and you don't care about the one two three and the four you might want to change that column so that you just represent um you instead you just have one column and it's just like heart disease or not um and then it's going to be equal to a one or true or whatever you want if there is heart disease and a zero otherwise right rather than like four different designations of heart disease which exactly which you might not necessarily care about yeah okay i'm gonna leave it there um there's like a whole exercise about this on the lesson on codecademy there's code in the code that uh i i posted so if you wanna play with it and you wanna see how that that looks you should go for it and explore on your own post questions um i like you can post in the comments on youtube even after the fact and i'll take a look at things um i love to hear your thoughts so um sophie do you want to show the course super briefly to just show like the lesson in particular that uh that aligns with this uh yes so i can also do it if you don't have a browser set let's see get to see my my setup on internet okay yeah so this is the master statistics with python uh path and this is within variable types this lesson on variable types is really the content that we just covered today um also the article as well has a little bit of it um here's the stuff on one hot encoding if you're interested in what you missed um another thing i'll say is i recognize some of the names on the chat uh as people who have submitted bug requests this or bug reports i feel like this is a weird plug to submit bug reports but i'm actually really grateful um like alex said this like this course is kind of my baby and um and i really want it to be good and if you're confused about something it probably means that somebody else is confused um and even if it's not just like even if it's you don't understand not that like something is really broken if something's really broken please tell me um but if you don't understand something you can also submit a report or ask in youtube chat or on our forums on codecademy like i really want to hear from you um and one of the weird things about this whole online education that like many of us are turning to especially in the time of this pandemic is that i don't know like i come from teaching in the classroom and you get this immediate feedback of how people are interacting with your content um and i really miss it that's why i love these live streams so much so um so if you want to provide that to me um cool anything you want to add alex no we'll be back again next week uh tuesdays at four if you want to catch us live um yeah other sophie do you want to do a 30 second plug of what we're doing next week sure yeah so next week i'm gonna pick a different data set because i feel like this data set is a lot um or it's like a little boring so um i'm gonna pick a different data set and we're gonna do some summary statistics and visualization so we're gonna we're gonna try to look at some of the variables and visualize them and um and summarize them with numbers cool
