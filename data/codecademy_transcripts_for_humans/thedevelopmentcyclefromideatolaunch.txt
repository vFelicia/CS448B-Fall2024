With timestamps:

00:00 - hi this is Pat with code Academy I'm a
00:02 - web developer based in Washington DC if
00:04 - you're new to tech or you don't know how
00:06 - software gets built this video is for
00:09 - you I'm gonna give you a high-level
00:10 - overview of the development cycle and
00:13 - hopefully clear some things up for you
00:15 - you're in the right place if you want to
00:16 - know how product managers and project
00:18 - managers work with designers and
00:20 - developers to turn ideas into great
00:22 - working software by the end you should
00:24 - have a better idea of how everyone works
00:27 - and what their tools techniques and
00:29 - processes are let's get cracking who's
00:31 - with me
00:32 - sometimes you just need a basic
00:35 - understanding of the development cycle
00:37 - and how ideas start to when they get
00:38 - deployed and if that sounds like you
00:40 - you've come to the right place
00:41 - it can be confusing to separate where
00:43 - one team members focus starts stops and
00:46 - where the overlap is where is the
00:49 - product manager in all this when do they
00:51 - hand off to the project manager
00:53 - how do designers and developers work
00:55 - with each other to bring their ideas to
00:57 - life if you'd like a more detailed video
00:59 - about what a product manager is and what
01:01 - a project manager does check out the
01:04 - video description below where we'll link
01:06 - to some of those videos but for our
01:07 - purposes here we're talking about a
01:09 - high-level overview of the entire
01:11 - development cycle so for this video
01:14 - we're gonna cover three main themes the
01:16 - first being from idea to deploy the
01:18 - development cycle we'll do an overview
01:20 - of the development cycle and how product
01:22 - managers and project managers get to
01:24 - work next we'll talk about developers
01:26 - and specifically how do developers work
01:28 - with designers how do they work with
01:30 - project managers and product managers
01:32 - we'll wrap up by talking about the tools
01:34 - and processes associated with agile
01:36 - development cycles specifically sprint
01:39 - planning backlog grooming and retros
01:40 - will cover Kanban boards epics stories
01:43 - and tickets and finish off with gits
01:45 - github pull requests and quality
01:47 - assurance there's a lot to cover so I
01:48 - hope you're hungry for our video imagine
01:51 - we have a fictitious company we'll call
01:53 - kitten Academy where new cat owners can
01:55 - find answers to how to raise healthy and
01:57 - happy kittens will use my cat Albus as
01:59 - our mascot next it's been decided that
02:02 - the priority is to create a feature on
02:04 - our website that allows users to
02:06 - schedule video conferencing between new
02:08 - cat owners and real veterinarians to
02:10 - answer all their questions they might
02:11 - have
02:12 - we need to go into the roles of how this
02:14 - feature is going to be broken down and
02:15 - let's start with product managers think
02:18 - of the product manager as the captain of
02:20 - the ship they're in charge of the
02:21 - direction the ship is headed therefore a
02:23 - product manager has three main
02:25 - priorities a high-level focus
02:27 - stakeholder management and overall
02:29 - product success
02:30 - you see depending on how complex a
02:32 - product is product managers will need to
02:35 - break up the construction maintenance
02:36 - and oversight to their subordinates
02:38 - usually project managers but a product
02:40 - manager can't be everywhere all the time
02:42 - so they're counting on project managers
02:44 - to facilitate a number of things that
02:46 - need to happen for ship to both stay
02:48 - afloat and complete the voyage for our
02:50 - kit and Academy project a product
02:52 - manager is in charge of overseeing the
02:54 - build-out of the video conferencing
02:55 - feature to do that they delegate to the
02:58 - project managers to break up the build
02:59 - out in two steps designers and
03:01 - developers can focus on now for project
03:03 - managers they have to work with the
03:04 - stakeholders above them to set their
03:06 - expectations maybe features thinking
03:08 - longer to build after her engineers
03:10 - discover problems in their build out
03:12 - phase or maybe feature has unexpected
03:14 - complexity that needs to be addressed
03:16 - before a subsequent work is done in the
03:18 - design phase if the product managers
03:20 - focus needs to stay high level they're
03:22 - counting on the project managers to tell
03:23 - them if they're on course or if
03:25 - something's come up that needs to be
03:26 - taken into account the goal here is to
03:28 - not be blindsided and project managers
03:30 - oversee the build-out so things stay on
03:32 - track and go as smoothly as possible so
03:35 - here the project managers job is to push
03:37 - up the chain of command both good and
03:39 - complicating things to keep in mind when
03:41 - courses are being set and promises are
03:43 - being made for our kid an academy video
03:46 - conferencing feature this could be
03:47 - broken down like this the design epic
03:50 - user flows and how should the feature
03:52 - work from screen to screen another
03:55 - design of it could be how should these
03:57 - screens look to a user a development
03:59 - epic
04:00 - how will users create accounts sign up
04:02 - for appointment slots and manage their
04:03 - appointment and another development epic
04:06 - how will users be reminded of their
04:08 - appointments how will they join the
04:10 - video conference call next we need to
04:12 - talk about how developers work with
04:13 - designers features often and should
04:16 - start with a design team there's a joke
04:19 - that goes weeks of programming can save
04:21 - you hours of planning get it
04:23 - designers typically start with a design
04:25 - thinking
04:26 - and build out user flows to chart out
04:28 - how we user will interact with the
04:30 - application while there's some visual
04:32 - design that happens in the initial phase
04:34 - it starts with wireframes before getting
04:36 - too polished and branded then a
04:38 - developer will get these designs and ask
04:39 - questions about how a design is supposed
04:41 - to come to life
04:42 - this might seem straightforward but
04:44 - there may be time-consuming work for
04:45 - simple features so designers and
04:47 - developers need to flesh out what needs
04:49 - to happen
04:50 - this could mean pushing back up on the
04:52 - project manager that a feature might
04:54 - need to be added at a later date or
04:56 - broken into smaller steps for example
04:58 - the designer chose to have a list of
05:00 - available veterinarians from a drop-down
05:02 - for each timeslot seems civil right
05:05 - spoiler alert it's not to a developer
05:08 - this means they have to maintain a
05:10 - database of who all the veterinarians
05:12 - are that signed up for this kitten
05:14 - Academy service and that means building
05:16 - a different application that allows
05:18 - veterinarians to sign up and set their
05:20 - availability again this admin
05:23 - application is entirely separate from
05:25 - our kitten Academy application so we
05:27 - just doubled our bill time for one nice
05:29 - to have feature so the developer here
05:32 - needs to flag to the project manager
05:33 - that this functionality is out of scope
05:36 - given at the amount of time they need to
05:38 - complete it this doesn't mean it's not a
05:39 - good idea or that it won't be added
05:41 - later just that if we want to launch
05:43 - kitten Academy the search feature might
05:45 - not be included or will find a creative
05:47 - way of tracking those appointments it
05:49 - might not be the ideal solution but we
05:51 - can build an iterate off it once a
05:53 - project manager understands the
05:55 - challenge they have to see if they can
05:56 - get the developers the resources they
05:58 - need to accomplish it if there aren't
05:59 - enough developers to work on this
06:01 - feature they might have to approach the
06:02 - product manager for pushback being able
06:04 - to select for a drop-down a specific vet
06:06 - is a great idea but it's gonna take a
06:08 - long time so the project manager relays
06:10 - this feedback to the product manager who
06:12 - deems the ability to select a specific
06:14 - veterinarian non-critical to lunch so
06:17 - that's a high-level overview of the
06:18 - development cycle but there's a lot of
06:20 - tools and processes that we haven't
06:21 - talked about let's start with this
06:23 - sprint cycle there's a couple of parts
06:26 - of the planning phase first there's
06:27 - gonna be Road mapping where we estimate
06:29 - how long things will take to build and
06:31 - what team members will be available to
06:33 - work on it and whether or not we should
06:34 - be working on it at all next there's
06:36 - sprint planning where we inform the team
06:38 - members what's going to happen
06:39 - in the next release cycle and what the
06:41 - priorities are gonna be the actual
06:43 - Sprint's themselves the development
06:44 - cycle in action this is where our team
06:46 - members roll up their sleeves and get to
06:47 - work
06:48 - but there's also backlog grooming and
06:50 - this is where we look at other issues
06:51 - that might have come up or are related
06:53 - to what the team is working on but might
06:55 - not have been a priority
06:56 - maybe bugs are flagged or problem areas
06:59 - came up that needs to be upgraded from
07:01 - sometime in the future to actually being
07:04 - worked on the next sprint lastly there
07:06 - are retrospectives or retros where the
07:08 - team will come together and talk about
07:10 - what they should keep doing what they
07:12 - should start doing and what they should
07:14 - stop doing in the next sprint one way
07:16 - teams keep track of who's doing what is
07:18 - with a Kanban board a Kanban board is
07:21 - the most popular way of keeping track of
07:22 - priorities and issues during a sprint in
07:25 - an agile development cycle Kanban boards
07:27 - visually depict work at various stages
07:30 - of the process using cards to represent
07:32 - work items and columns to represent each
07:35 - stage of the process two popular
07:37 - software companies you might have heard
07:39 - of that specialize in this are Trello
07:41 - and JIRA but plenty of teams just start
07:43 - out with good old post-it notes all you
07:45 - really need for Kanban board are columns
07:47 - and cards to keep track of what stage a
07:49 - ticket is at now once we are using a
07:51 - conman board we have some terms to run
07:53 - through that map out how the Kanban
07:54 - board works relative to the sprint an
07:57 - epoch this is a high-level task for our
07:59 - example we want to allow users to sign
08:01 - up for kitten Academy story a sub ticket
08:05 - of the epic examples would be build a
08:07 - user interface for users to sign up for
08:09 - kitten Academy build a dashboard for
08:12 - users once they've signed up to manage
08:13 - their appointments and allow users to
08:16 - store and update information about their
08:18 - kitten a bug an unforeseen issue that
08:21 - creates problems for our users an
08:24 - example would be stop international
08:26 - users users with international addresses
08:28 - should not be able to sign up for kitten
08:30 - Academy at this time because kitten
08:32 - Academy is only available in the United
08:34 - States these are general models and each
08:36 - team tends to have a different way of
08:37 - doing agile sprints and minting tickets
08:40 - to suit their particular models next we
08:42 - talk about the code workflow
08:43 - specifically get github pull requests
08:46 - and quality assurance what do you do
08:48 - when you have more than one person who
08:50 - all need to work on the same codebase at
08:52 - the same time the answer
08:54 - it version control management it is a
08:56 - tricky piece of command-line software
08:58 - but it also has a user interface
09:00 - software that developers use to track
09:02 - for changes to the application using
09:04 - this version control git is used locally
09:07 - to push up changes pull down changes and
09:10 - track changes to a remote repository
09:12 - although git is used to manage your code
09:15 - it's not actual code itself even though
09:17 - it can feel like it at times but where
09:19 - does the code go once it's left your
09:21 - machine the answer github github is a
09:24 - popular remote code hosting solution
09:26 - used by many developers both individual
09:28 - and teams it's worth noting though that
09:31 - although git and github share the word
09:33 - get they are two separate pieces of
09:35 - technology confused yet let's try this
09:38 - git is for tracking changes on a
09:40 - developer's computer github is where
09:43 - those changes lives so that others can
09:44 - download the same code and work off it
09:46 - popular alternatives to get up our
09:49 - bitbucket
09:50 - get lab and SourceForge once the
09:52 - developer is done working on their
09:54 - feature they can submit a pull request
09:55 - for others to review it and make sure
09:58 - won't conflict with any other code
09:59 - someone else is working on this is also
10:01 - a chance for other developers to make
10:03 - sure the code written is done in the
10:05 - correct manner consistency is key so
10:07 - most developers like to see the same
10:09 - naming and programming patterns as the
10:11 - rest of the code in the codebase think
10:13 - of a pull request as a request to add
10:16 - your code that show someone what changes
10:18 - you're proposing side by side with the
10:20 - current state of that code once the
10:22 - feature is complete and theoretically it
10:23 - could be absorbed into master it's best
10:26 - practice and a general good idea to have
10:28 - it tested by someone else to make sure
10:30 - it works in a different environment than
10:32 - the one the developer used to create it
10:33 - most teams have special quality
10:35 - assurance copies of the real server the
10:38 - code will eventually live on to stress
10:40 - test the codes they can find any the
10:42 - bugs and not the users for example we
10:45 - could have a server we call kitten
10:46 - staging which is identical to our live
10:49 - website server so that we can deploy -
10:51 - without fear of publishing a broken
10:53 - website then either another developer or
10:55 - a dedicated Quality Assurance engineer
10:58 - will test all the number of ways a user
11:00 - might use the software either correctly
11:02 - or incorrectly and if it passes this
11:05 - stage it goes live
11:06 - this is Pat with coke Adam II hopefully
11:09 - you have a much better idea of what the
11:10 - development cycle looks like for teams
11:12 - today but did I answer all of your
11:14 - questions do you have any more like or
11:16 - subscribe or leave a comment below
11:17 - because I love responding to learners
11:19 - comments and questions check out the
11:20 - video description for some helpful links
11:22 - that I had mentioned in this video but
11:23 - if you're ready to take your career to
11:25 - the next level come on over to code
11:26 - Academy and we'll help you get started

Cleaned transcript:

hi this is Pat with code Academy I'm a web developer based in Washington DC if you're new to tech or you don't know how software gets built this video is for you I'm gonna give you a highlevel overview of the development cycle and hopefully clear some things up for you you're in the right place if you want to know how product managers and project managers work with designers and developers to turn ideas into great working software by the end you should have a better idea of how everyone works and what their tools techniques and processes are let's get cracking who's with me sometimes you just need a basic understanding of the development cycle and how ideas start to when they get deployed and if that sounds like you you've come to the right place it can be confusing to separate where one team members focus starts stops and where the overlap is where is the product manager in all this when do they hand off to the project manager how do designers and developers work with each other to bring their ideas to life if you'd like a more detailed video about what a product manager is and what a project manager does check out the video description below where we'll link to some of those videos but for our purposes here we're talking about a highlevel overview of the entire development cycle so for this video we're gonna cover three main themes the first being from idea to deploy the development cycle we'll do an overview of the development cycle and how product managers and project managers get to work next we'll talk about developers and specifically how do developers work with designers how do they work with project managers and product managers we'll wrap up by talking about the tools and processes associated with agile development cycles specifically sprint planning backlog grooming and retros will cover Kanban boards epics stories and tickets and finish off with gits github pull requests and quality assurance there's a lot to cover so I hope you're hungry for our video imagine we have a fictitious company we'll call kitten Academy where new cat owners can find answers to how to raise healthy and happy kittens will use my cat Albus as our mascot next it's been decided that the priority is to create a feature on our website that allows users to schedule video conferencing between new cat owners and real veterinarians to answer all their questions they might have we need to go into the roles of how this feature is going to be broken down and let's start with product managers think of the product manager as the captain of the ship they're in charge of the direction the ship is headed therefore a product manager has three main priorities a highlevel focus stakeholder management and overall product success you see depending on how complex a product is product managers will need to break up the construction maintenance and oversight to their subordinates usually project managers but a product manager can't be everywhere all the time so they're counting on project managers to facilitate a number of things that need to happen for ship to both stay afloat and complete the voyage for our kit and Academy project a product manager is in charge of overseeing the buildout of the video conferencing feature to do that they delegate to the project managers to break up the build out in two steps designers and developers can focus on now for project managers they have to work with the stakeholders above them to set their expectations maybe features thinking longer to build after her engineers discover problems in their build out phase or maybe feature has unexpected complexity that needs to be addressed before a subsequent work is done in the design phase if the product managers focus needs to stay high level they're counting on the project managers to tell them if they're on course or if something's come up that needs to be taken into account the goal here is to not be blindsided and project managers oversee the buildout so things stay on track and go as smoothly as possible so here the project managers job is to push up the chain of command both good and complicating things to keep in mind when courses are being set and promises are being made for our kid an academy video conferencing feature this could be broken down like this the design epic user flows and how should the feature work from screen to screen another design of it could be how should these screens look to a user a development epic how will users create accounts sign up for appointment slots and manage their appointment and another development epic how will users be reminded of their appointments how will they join the video conference call next we need to talk about how developers work with designers features often and should start with a design team there's a joke that goes weeks of programming can save you hours of planning get it designers typically start with a design thinking and build out user flows to chart out how we user will interact with the application while there's some visual design that happens in the initial phase it starts with wireframes before getting too polished and branded then a developer will get these designs and ask questions about how a design is supposed to come to life this might seem straightforward but there may be timeconsuming work for simple features so designers and developers need to flesh out what needs to happen this could mean pushing back up on the project manager that a feature might need to be added at a later date or broken into smaller steps for example the designer chose to have a list of available veterinarians from a dropdown for each timeslot seems civil right spoiler alert it's not to a developer this means they have to maintain a database of who all the veterinarians are that signed up for this kitten Academy service and that means building a different application that allows veterinarians to sign up and set their availability again this admin application is entirely separate from our kitten Academy application so we just doubled our bill time for one nice to have feature so the developer here needs to flag to the project manager that this functionality is out of scope given at the amount of time they need to complete it this doesn't mean it's not a good idea or that it won't be added later just that if we want to launch kitten Academy the search feature might not be included or will find a creative way of tracking those appointments it might not be the ideal solution but we can build an iterate off it once a project manager understands the challenge they have to see if they can get the developers the resources they need to accomplish it if there aren't enough developers to work on this feature they might have to approach the product manager for pushback being able to select for a dropdown a specific vet is a great idea but it's gonna take a long time so the project manager relays this feedback to the product manager who deems the ability to select a specific veterinarian noncritical to lunch so that's a highlevel overview of the development cycle but there's a lot of tools and processes that we haven't talked about let's start with this sprint cycle there's a couple of parts of the planning phase first there's gonna be Road mapping where we estimate how long things will take to build and what team members will be available to work on it and whether or not we should be working on it at all next there's sprint planning where we inform the team members what's going to happen in the next release cycle and what the priorities are gonna be the actual Sprint's themselves the development cycle in action this is where our team members roll up their sleeves and get to work but there's also backlog grooming and this is where we look at other issues that might have come up or are related to what the team is working on but might not have been a priority maybe bugs are flagged or problem areas came up that needs to be upgraded from sometime in the future to actually being worked on the next sprint lastly there are retrospectives or retros where the team will come together and talk about what they should keep doing what they should start doing and what they should stop doing in the next sprint one way teams keep track of who's doing what is with a Kanban board a Kanban board is the most popular way of keeping track of priorities and issues during a sprint in an agile development cycle Kanban boards visually depict work at various stages of the process using cards to represent work items and columns to represent each stage of the process two popular software companies you might have heard of that specialize in this are Trello and JIRA but plenty of teams just start out with good old postit notes all you really need for Kanban board are columns and cards to keep track of what stage a ticket is at now once we are using a conman board we have some terms to run through that map out how the Kanban board works relative to the sprint an epoch this is a highlevel task for our example we want to allow users to sign up for kitten Academy story a sub ticket of the epic examples would be build a user interface for users to sign up for kitten Academy build a dashboard for users once they've signed up to manage their appointments and allow users to store and update information about their kitten a bug an unforeseen issue that creates problems for our users an example would be stop international users users with international addresses should not be able to sign up for kitten Academy at this time because kitten Academy is only available in the United States these are general models and each team tends to have a different way of doing agile sprints and minting tickets to suit their particular models next we talk about the code workflow specifically get github pull requests and quality assurance what do you do when you have more than one person who all need to work on the same codebase at the same time the answer it version control management it is a tricky piece of commandline software but it also has a user interface software that developers use to track for changes to the application using this version control git is used locally to push up changes pull down changes and track changes to a remote repository although git is used to manage your code it's not actual code itself even though it can feel like it at times but where does the code go once it's left your machine the answer github github is a popular remote code hosting solution used by many developers both individual and teams it's worth noting though that although git and github share the word get they are two separate pieces of technology confused yet let's try this git is for tracking changes on a developer's computer github is where those changes lives so that others can download the same code and work off it popular alternatives to get up our bitbucket get lab and SourceForge once the developer is done working on their feature they can submit a pull request for others to review it and make sure won't conflict with any other code someone else is working on this is also a chance for other developers to make sure the code written is done in the correct manner consistency is key so most developers like to see the same naming and programming patterns as the rest of the code in the codebase think of a pull request as a request to add your code that show someone what changes you're proposing side by side with the current state of that code once the feature is complete and theoretically it could be absorbed into master it's best practice and a general good idea to have it tested by someone else to make sure it works in a different environment than the one the developer used to create it most teams have special quality assurance copies of the real server the code will eventually live on to stress test the codes they can find any the bugs and not the users for example we could have a server we call kitten staging which is identical to our live website server so that we can deploy without fear of publishing a broken website then either another developer or a dedicated Quality Assurance engineer will test all the number of ways a user might use the software either correctly or incorrectly and if it passes this stage it goes live this is Pat with coke Adam II hopefully you have a much better idea of what the development cycle looks like for teams today but did I answer all of your questions do you have any more like or subscribe or leave a comment below because I love responding to learners comments and questions check out the video description for some helpful links that I had mentioned in this video but if you're ready to take your career to the next level come on over to code Academy and we'll help you get started
