With timestamps:

00:00 - we're doing it hello everyone everybody
00:04 - welcome to code kata Meena my name is
00:07 - Tim and I'm Kenny I know we're gonna be
00:10 - walking you through some phaser today
00:12 - yeah I just want to know how y'all are
00:15 - doing let us know in the chat chime in
00:18 - please please our course is based on a
00:21 - lot of like old arcade classics so if
00:24 - you guys have any favorite classical
00:25 - games that you enjoy playing put it in
00:28 - the chat maybe we can have a discussion
00:29 - on how to make it later we have enough
00:31 - time we'd love to hear from you
00:33 - and I think we're just gonna wait a
00:35 - couple of minutes for some stragglers
00:37 - chime in join us I'm mama wolf from
00:41 - Portland it's great to have you
00:44 - yeah if you're in the you tube if you're
00:48 - watching the YouTube you can go down to
00:51 - the description and click into the code
00:53 - Academy learning environment which is
00:55 - where you'll be able to follow along and
00:58 - code along with us to build this game
01:00 - that we're making that's what you're
01:02 - seeing on screen right now if you want
01:06 - to join in on the live stream or you're
01:07 - already on the code Kadim you site you
01:09 - can click on the YouTube embed it link
01:10 - on the left-hand panel as well and
01:13 - that'll bring you to here yeah just make
01:16 - sure that you're not playing the audio
01:18 - and or playing the video in both
01:20 - separate YouTube tab and the learning
01:23 - environment because then you'll hear a
01:25 - weird echo even what's more of a feature
01:28 - right like it's one of those things
01:29 - mm-hmm it's definitely a feature you'll
01:32 - hear twice as much phaser
01:33 - knowledge if you have it open in two
01:36 - places so we're where are you all well
01:39 - Portland's that's pretty cool it's like
01:41 - 40 degrees Fahrenheit here today so it's
01:45 - it was just about to start warming up
01:47 - over the weekends and now it's gonna be
01:49 - cold again that's March 4 yeah I guess
01:52 - here in New York City where we are
01:57 - Iowa Chicago Wow we got a lot of
02:00 - Americans here Dragon's Lair I'm not
02:02 - familiar with that game have you I'm not
02:05 - Alex Alex is moderating for us today
02:07 - it's off in the corner
02:08 - Alex Goods the unsung hero who we love
02:11 - to sing the praises house yeah South
02:17 - America Wow international people well
02:19 - this is awesome yeah Miami's not too
02:21 - cold I'll be there later this week so
02:22 - I'm excited gonna head down to Miami
02:25 - yeah good and get some of that warm
02:29 - weather before the birthplace of
02:31 - indigestion
02:32 - is that what Albuquerque is really known
02:35 - for
02:35 - maybe that's the birthplaces indigestion
02:40 - we'll go over tips on how to make first
02:42 - place of indigestion later oh I don't
02:46 - think you really need tips on that yeah
02:48 - another one from Toronto and Brazilian
02:51 - living in London hi hi everyone
02:53 - yeah what are your favorite arcade games
02:55 - let us know we'll be building Frogger
02:57 - which is a classic there's a couple of
03:00 - other real Uruguay Czech Republic Wow
03:03 - very cool I think
03:05 - yeah and Tim was mentioning in our other
03:07 - courses or two other courses we build
03:09 - out like other games that have been
03:11 - inspired from arcade classics as well
03:13 - one being like space invaders so we did
03:16 - our own take of bug invader on that hmm
03:18 - yeah and I did one based on color a
03:22 - dinosaur which is really obscure not
03:26 - totally well known game but the idea the
03:29 - basic idea of having a coloring book I
03:31 - guess kind of goes back to Mario Paint
03:33 - maybe it's really fun though yeah I
03:35 - think it's a really enjoyable experience
03:38 - there's also a code your own adventure a
03:40 - choose your own adventure game it's
03:42 - interactive and you get to see what
03:44 - options you go through as you click
03:45 - through the the text input from Blaire's
03:48 - NPCs yeah that's a fun one I see Matt
03:51 - Mullen in the in the channel that's my
03:54 - brother
03:54 - so taking of your advice yeah yeah
03:58 - definitely an interesting audio effect
04:01 - well I guess maybe
04:04 - start moving into some code here today
04:07 - Wow and please like your your in the
04:12 - chat now if there's any points you feel
04:15 - like you want to ask questions ask them
04:17 - oh how long will this take this is
04:19 - slated to be about an hour an hour
04:21 - yeah that's our plan if you can't make
04:25 - it through the entirety of this stream
04:26 - it's gonna be uploaded as soon as we
04:28 - finish so we would love to still thank
04:31 - you guys for joining in for those who
04:32 - are in the chat right now take advantage
04:34 - it take advantage of it like Tim was
04:36 - saying I'll be devotedly looking onward
04:39 - so what what's going on in the chat and
04:41 - Tim's gonna be demonstrating a lot of
04:42 - what's going on in the live stream okay
04:45 - cool I'm gonna talk a little bit about
04:47 - what's already here and so a couple of
04:50 - things are in this workspace that's let
04:55 - me gesture at the text that's right here
04:58 - so here's your you should be loaded into
05:01 - your game J's file and then there's an
05:05 - index.html and you don't need to know
05:09 - HTML to create phaser games we use very
05:13 - minimal amounts it's a very small HTML
05:16 - file here that's just kind of describing
05:19 - what the title is of the of the page
05:21 - itself and importing the phaser library
05:26 - and then importing the game das file
05:28 - that we have over here and so this is a
05:32 - basic skeleton for a phaser game you've
05:36 - got a config you've got a new game and
05:42 - you have a couple of scene functions and
05:43 - I'm gonna talk a little bit more about
05:45 - what that is but first we're gonna cover
05:46 - this config here where we just described
05:49 - the properties of the phaser game so how
05:53 - wide it is how tall it is what the
05:55 - background color is by defaults and the
05:57 - scene information that's in there that's
05:59 - awesome yeah and in our course we might
06:01 - refer to it as like meta information you
06:03 - might have if you're reading we're going
06:05 - through our course that's exactly the
06:07 - same thing that Tim was mentioning
06:08 - before so yeah and I highly recommend I
06:11 - mean after this before this
06:14 - that's probably now going over the
06:16 - course we certainly cover all of this
06:18 - probably in a little bit more detail but
06:21 - since we're gonna try to you know shoot
06:22 - through this and make a game we might
06:24 - sprays over some details that you might
06:27 - be more interested in so ask questions
06:29 - in the chat and run through the course
06:31 - itself it should be helpful so here in
06:35 - preload we've loaded in a couple of
06:37 - images some sprites that we're going to
06:40 - be using for the game there's three bugs
06:45 - that we're gonna be using as our cars in
06:48 - the Frogger worlds and then there's our
06:52 - kodi code kademan mascot character who's
06:55 - going to be the frog from the Frogger
06:59 - and so the first thing that we're gonna
07:01 - do is take this loaded in sprite and
07:05 - bring Cody to life on the screen so
07:09 - we're gonna Oh game state yeah we manage
07:14 - States and phaser games in this kind of
07:17 - global way in this game state objects it
07:21 - just helps us pass information in
07:23 - between the various functions that a
07:25 - scene has right you're gonna reiterate
07:27 - that a little bit I think I think the
07:30 - major point is like you notice that we
07:32 - have a lot of different functions here
07:33 - we have preload create an update if we
07:36 - want to use the same variables
07:37 - throughout you'll need that global scope
07:39 - to access it and create and an update
07:41 - and so game state is just like holding
07:44 - on to properties that we can then use in
07:46 - those different functions and I think
07:48 - that'll be more clear once we start
07:50 - implementing it especially even with our
07:52 - first step because we're gonna make Cody
07:53 - and then we're gonna make an create and
07:55 - then we're gonna make a move in update
07:57 - yeah so we're gonna start with creates
07:59 - and we're going to add our first line of
08:02 - code so are you ready for this we're
08:04 - going to create game States Cody that's
08:08 - going to be the place that we store this
08:10 - Cody game object right and the game
08:15 - object itself is going to be a spray so
08:17 - this dot dot sprites is the name of the
08:21 - function that adds a game object that
08:23 - corresponds to a sprite to
08:26 - your game so this sprite has three
08:30 - arguments mainly the first one is the
08:34 - x-coordinate that we're going to be
08:37 - displaying kody the second one is the
08:39 - y-coordinate that we're gonna be
08:40 - displaying kody and the third is the key
08:42 - which is the name that we gave the image
08:44 - when we loaded it in preload yeah you
08:47 - talked a little bit about the grid -
08:48 - like XY coordinates and for a second
08:50 - absolutely so for the the coordinate
08:54 - system in phaser itself we actually
08:56 - start in the top left-hand corner and
08:59 - that'll be zero zero or the origin and
09:01 - as we move down we're gonna Inc well
09:04 - let's move let's start with the X as we
09:06 - move to the right we're gonna increase
09:07 - the x-coordinate and as we go down we're
09:10 - gonna increase the y-coordinate so a lot
09:12 - of you may be remembering algebra math
09:16 - might be thinking that it's a little
09:17 - inverted because the y-coordinate will
09:19 - go up in that case usually but here in
09:23 - game worlds it just makes more sense for
09:25 - us to be going up as the Y goes down
09:29 - sort of it's you get used to it
09:33 - it's not super it's a little jarring at
09:35 - first because you have to flip some of
09:37 - your negative signs but eventually it's
09:40 - it's pretty standard also yeah it's
09:43 - coming in in JavaScript in the canvas is
09:48 - the name of this like the canvas element
09:51 - the canvas API if you're used to using
09:54 - javascript to draw stuff on canvas or
09:56 - WebGL might okay that time as well
09:59 - you'll probably be used to this
10:01 - coordinate system but even now it takes
10:03 - me a while to think about how to
10:04 - increase X or Y don't worry it's a
10:07 - learning curve so what we want for Cody
10:09 - the place where we want Cody to appear
10:11 - is right here in the center of the
10:12 - bottom and we're going to make Cody jump
10:15 - up or like move upwards towards the top
10:19 - of the screen where if Cody successfully
10:21 - gets to the top then we're going to have
10:23 - like won the game so we want what what I
10:28 - recommend doing is using these width and
10:31 - height properties that we've given to
10:32 - the game in order to say we
10:36 - in the center and at the bottom so in
10:39 - the center for the game would be config
10:43 - dot with / - so that means that it
10:48 - should be right in the middle that that
10:51 - corresponds to this x value here and
10:53 - then if we give it config height and
10:59 - then we subtract 25 the kodi sprite is a
11:05 - 50 by 50 sprite so subtracting 25 is
11:08 - half the height of Kodi and the sprite
11:13 - this these x and y-coordinates are the
11:16 - middle of the sprite are gonna indicate
11:18 - the middle of the spray well I'm just
11:20 - gonna go ahead and type in this last bit
11:22 - here so that we see Cody and kind of get
11:25 - to talk a little bit more about what
11:27 - this what these values are so you can
11:31 - see Cody is appearing halfway across
11:34 - that's confident fig dot with / - and
11:36 - Cody is appearing right at the bottom
11:38 - and that's the height - half the height
11:41 - of Cody - so that the centering works
11:44 - all together if you're coding along with
11:46 - us I would encourage you guys to just
11:48 - play around with these arguments just to
11:51 - see where it pops up it that really
11:53 - helped me solidify my understanding of
11:55 - these XY coordinates yeah absolutely
11:58 - stretching this out oh right yeah yeah
12:01 - so makes it a little bit bigger for you
12:04 - guys hopefully you may makes it easier
12:06 - to follow along as well
12:07 - yeah so yeah to kind of just like follow
12:15 - along with Kenny was saying if we change
12:17 - this to 20 for instance and then run it
12:19 - you'll see that Cody is moving a little
12:21 - bit further down if we just give it a
12:23 - bear config dot height Cody's barely
12:28 - over the bottom line there so I you know
12:32 - these numbers are absolutely numbers
12:34 - that you end up playing around with a
12:36 - little bit to make sure that everything
12:37 - kind of sits on the screen the way that
12:39 - you expect it to don't expect that this
12:41 - like config dot height minus 25 is
12:44 - something that I came up with
12:45 - immediately as I was writing this code
12:48 - some of this has been like I mean we've
12:50 - obviously tested through to make sure
12:52 - that we could make Frogger beforehand so
12:53 - if it's frustrating to like see this
12:56 - kind of magic number it's like kind of
13:02 - part of the experience of coding ticket
13:04 - decoding a game and like an interface
13:06 - yeah and Rick at Rick Marshall asked a
13:08 - great question oh sorry not Rick
13:11 - Opa me Thomas I hope um it's not a thank
13:13 - you about what a sprite is and it's in
13:16 - this case it's representing our player
13:18 - Cody but we can also use it we're and
13:21 - we're gonna use it later to represent
13:23 - enemies and things that are in our games
13:26 - yeah I'm going to start moving on to the
13:31 - cursors because what we really want to
13:33 - do is start moving Cody in the game that
13:35 - we've created here so what we're going
13:38 - to do is we're gonna create a game state
13:39 - cursors property for our game State and
13:43 - we're going to add it to our game state
13:45 - so that we can access it in the update
13:48 - function the update function do you want
13:50 - to talk a little bit about what the
13:51 - update function does it yeah yeah so for
13:55 - update and we'll get to this later but
13:58 - it's running what 60 frames per second
14:01 - is that something like that 23 I don't
14:04 - know it's trying to get every 16
14:06 - milliseconds yeah I don't remember the
14:09 - exact numbers you can just gonna
14:10 - definitely look it up later or if I have
14:12 - a chance I can look it up as well but
14:14 - are the flow of our game works like we
14:16 - make we load in our assets through
14:20 - preload and then and create we're
14:22 - running that function after preload and
14:24 - we're adding that to our games and then
14:26 - later on an update that's the function
14:28 - that keeps on running and checking and
14:30 - making sure that our game is actually
14:32 - flowing so an update where you would be
14:34 - like doing a check to see if any cursor
14:36 - or anything like keys are being pressed
14:38 - cursor also being like a mouse click or
14:40 - any sort of input and that way we can
14:42 - then interact with our game and change
14:44 - how our game is being played yeah
14:46 - perfect
14:48 - so here we are in create and we're gonna
14:50 - create our cursors and then in our
14:52 - update we're going to use the input that
14:54 - we've given to our cursors in order to
14:56 - you move Kody on the on the screen here
14:59 - so the first thing that we're gonna do
15:01 - is set game state cursors equal to not
15:04 - that this dot input dot keyboard dot
15:10 - create cursor keys this is a bit of a
15:12 - magic way of adding in the arrow cursors
15:17 - up-down left-right and also gives you
15:20 - controls for shift in space so just to
15:24 - kind of like go over a little bit more
15:25 - about what's going on here this is the
15:28 - scene the phase our scene in which
15:30 - everything is taking place and the scene
15:36 - has a number of convenience functions
15:39 - and factories factory methods that allow
15:43 - you to build in phaser primitives I
15:48 - guess quickly the idea is to get you
15:51 - going from zero to a full-blown game as
15:54 - like quickly and with this little
15:57 - boilerplate as possible while still
15:59 - being very extendable so this dot input
16:02 - keyboard that create cursor keys might
16:04 - seem like something you have to kind of
16:06 - like memorize at first but it's
16:07 - something that you're going to kind of
16:08 - start to into it a little bit more as
16:11 - you build more phaser games and that is
16:13 - 100% our plan for you is for you to
16:15 - build a bunch of phaser game so that
16:17 - it's really second nature that in this
16:20 - stuff is not meant to be memorized at
16:22 - all we've provided in the left hand
16:24 - corner if you expand that a bunch of
16:26 - links that you can go to documentation
16:28 - phaser also has a bunch of lab examples
16:30 - on how to bring this into your own game
16:33 - and there's also of Rex rainbows awesome
16:36 - documentation as well so don't feel
16:37 - obligated to memorize this this is often
16:40 - this itself is a very confusing
16:42 - javascript thing and so if you're not
16:45 - comfortable with that maybe it's also
16:46 - good to take a step back and brush up on
16:49 - some Java scripts absolutely I think our
16:53 - next step here is to start looking at
16:55 - these cursors and using them sounds good
16:58 - to me
16:59 - so we're gonna go into our update
17:01 - function here and we're going to check
17:04 - let's say if game state dot cursors dot
17:10 - left okay dot is down right and what
17:16 - that is going to see is whether or not
17:19 - we're pressing down the left arrow key
17:22 - on the keyboard and what we want that to
17:24 - do is to move oh I use player in that
17:29 - I'm gonna switch this over to player
17:31 - actually okay just to be consistent a
17:33 - little bit with the notes in case I
17:36 - don't mix myself up here I know I called
17:38 - it Cody there you know player works just
17:41 - as well so I'm going to fix that dot why
17:45 - and what I want to do since we're moving
17:47 - left that means the x value needs to go
17:50 - down so let's just let's change that to
17:52 - I guess first of all and then minus
17:54 - equals five let's say and that's another
17:57 - kind of magical number we'll see as the
18:00 - as we safe here and we move Cody a
18:02 - little bit to the left it I think it
18:05 - feels kind of nice I think if we if we
18:07 - set that to one instead Cody moves a
18:10 - little too slow it's not as fun and
18:14 - that's kind of like one of those real
18:17 - personal choice things that it comes
18:19 - down to is how fun does it feel to move
18:21 - Cody as a game developer that's kind of
18:23 - up to you so so I'm going to save this
18:27 - and we're gonna start building out the
18:29 - rest of these checks and so we want to
18:32 - do is create an else statement
18:36 - nice yeah I'm not gonna write eel if I
18:40 - usually write that so I'm gonna do that
18:49 - wrong though well we need yet
18:51 - parentheses
19:01 - 9x plus equals five and so now we've
19:06 - checked if we're moving left or if we're
19:08 - moving right so that's what this game
19:09 - state cursors that refers to the create
19:12 - cursor keys thing that we're objective
19:14 - we built up here and then left is one of
19:17 - the properties of that and then you can
19:20 - check is down on the left key or you can
19:23 - check is down on the right key and we're
19:24 - going to be using both of those so here
19:28 - we are moving left moving right
19:30 - excellent we're already well on our way
19:32 - to building up Frogger that's that's
19:34 - basically your core axis of motion
19:36 - actually we'll have to add the Y value
19:40 - changes to and we're gonna be a little
19:42 - bit different with how we move Cody in
19:47 - the y axis because in the Frogger game
19:52 - you jump a whole street kind of you move
19:56 - a little bit to the left into the right
19:57 - but you jump a whole Lane is the phrase
20:00 - that I've been using for this like you
20:02 - can think of the game as broken up into
20:05 - several rows and you jump a whole row up
20:07 - instead of just a little bit so what we
20:11 - want to do there is I'm gonna talk about
20:14 - just down a little bit I guess sure so
20:20 - for just down unlike what we've been
20:23 - using before for like gamestate cursors
20:25 - left is down we're just checking for a
20:28 - can we can continuously press left or
20:30 - right in the first conditional and Cody
20:33 - will continue to move left so we don't
20:34 - have to keep like lifting our finger up
20:36 - and tapping down again
20:37 - we can just hold it down and it will
20:39 - keep moving to the left or to the right
20:41 - right whereas in this method phaser
20:44 - input keyboard just down it's checking
20:47 - for the gamestate cursor up in this
20:50 - first case and every single tap is going
20:54 - to then trigger something you cannot
20:55 - just keep holding the up key down and
20:58 - expecting Cody to move you'll have to
21:00 - continuously tap yeah so you're not
21:03 - going to just kind of like sprint
21:04 - upwards you're going to go
21:06 - in very discreet motions so here's a
21:09 - question for you
21:10 - the viewer we are checking our up key
21:14 - events which direction do we want to
21:17 - move Kody in or what what should we do
21:20 - to the y-value we're going to add or
21:23 - subtract 50/50 is the height of Kody
21:26 - so that Kody moves up a full lane but
21:29 - are we going to add or are we going to
21:31 - subtract the 50 in order to move Kody up
21:33 - and while you ponder that and respond to
21:36 - the chat I'm going to add the second
21:39 - step which is bringing Kody back down
21:41 - okay I already see some people chiming
21:44 - in do you subtracts nothing right I I
21:48 - think they might be it's very possible
21:51 - trying since you're moving towards the
21:53 - zero
21:53 - oh yeah we're not gonna use modulo I
22:03 - think we have an outlier wasn't even one
22:06 - of our choices what yeah it looks like
22:10 - everyone's kind of got it so minus
22:11 - equals 50 exactly that's correct that is
22:14 - a 100% what we want to do because we're
22:16 - moving closer to 0 from config dot
22:19 - height right and that's like this value
22:23 - that we've assigned Kody to up here
22:24 - configured on high minus 25 we can work
22:27 - that out at 600 minus 25 which is 575 I
22:31 - have a math degree
22:35 - but yeah so we're gonna subtract 50 and
22:39 - we're going to bring that's going to
22:41 - bring Cody up and for the opposite
22:44 - direction I'm gonna add 50 to bring Cody
22:47 - back down so we're gonna save this so my
22:50 - no they should add that as a separate if
22:52 - statement we joined that as like an
22:56 - else--if like yeah either you don't want
22:57 - to move back both up and down
23:00 - so I didn't chain the elsif from this
23:03 - first block here because you want to be
23:07 - able to move left or right as you move
23:09 - up or down in order to better evade the
23:14 - cars
23:16 - I want to call them we're gonna be using
23:17 - bugs as the example here is we could
23:20 - generally use yes the things that make
23:22 - Cody goes flat so here I'm just gonna
23:27 - say if this and we're going to see that
23:31 - Cody can move up and down that's really
23:33 - good
23:35 - unfortunately yeah we can talk about
23:41 - bounds but also for anyone who is coding
23:43 - along and is a little lost we've also
23:45 - included it in the folder on the top
23:48 - left hand corner serious stuff steps
23:50 - yeah the first step in cursors and you
23:55 - can copy and paste that and we'll stop
23:57 - along each point as well and if you get
24:00 - lost along the way feel free to copy and
24:02 - paste that in and that way you can just
24:04 - get started again with what you need to
24:07 - for the next steps yeah it's an
24:09 - excellent way if you are coming back to
24:11 - this and you want to see what the full
24:13 - the final game looks like you can come
24:16 - down to this last step and you can copy
24:17 - and paste that and then you can kind of
24:19 - erase that and re-add it in the code as
24:23 - you build it yourself cool so back to
24:27 - game doc j/s and we are going to
24:30 - continue building on this so a bit of an
24:33 - issue here arises as we can just walk
24:35 - Cody completely off the screen and
24:37 - that's that's not going to be good we're
24:40 - we don't really want that you can move
24:42 - down you can move up on to the other
24:44 - side of the screen that's we want Cody
24:47 - to stay in the game that's where Cody
24:50 - belongs so we're going to add bounds to
24:54 - these if statements to make sure that
24:55 - Cody isn't going to step out of bounds
24:58 - after we move Cody further out and so if
25:03 - we when we check for the left is down we
25:06 - also want to check that game state dot
25:09 - player dot X is greater than 25 that
25:13 - means that Cody can't continue moving to
25:16 - the left after Cody as always as far to
25:19 - the left already as part of the
25:20 - left-hand let me just save that and show
25:22 - you what I mean by that
25:24 - when I move all the way to the left here
25:26 - that's it and that's that's where
25:30 - codecademy are now Cody
25:34 - Cody's x-coordinate here is 25 because
25:37 - that's the center of this sprite so so
25:42 - little I guess a little maybe confusing
25:45 - about how phaser assigns the Centers of
25:48 - your x and y coordinates there's ways to
25:52 - change it if that's something that you
25:54 - don't like using the origin method we go
25:57 - that into that way more in depth in the
25:59 - courses so we're just gonna kind of keep
26:03 - on moving here and add some more ways to
26:07 - keep Cody within this box and so the
26:09 - other the next way that we're going to
26:11 - do is game state dot player dot X is
26:16 - less than I don't know what I'm gonna do
26:19 - here is config dot width minus 25 so
26:25 - that's I mean that's a whole lot to say
26:28 - no a whole lot to say make sure that
26:32 - Cody doesn't move all the way to the
26:33 - right off the screen in that direction
26:37 - saving it and you can see that Cody does
26:40 - not go out of bounds that in that
26:41 - direction either and we're gonna add
26:43 - that also to our up-and-down checks as
26:48 - well so we're going to do game states
26:51 - dot player not Cody Y and we want to
26:58 - make sure that that's more than 25 so
27:01 - that Cody doesn't move further up after
27:03 - the top and we're gonna also just keep
27:07 - on going I'm gonna trust that you trust
27:09 - me now to know that that's going to work
27:15 - and we want to make sure that the Y
27:19 - value is not is is less than
27:24 - it's that's a great suggestion it's
27:28 - minus 25 so we're using a lot of this oh
27:33 - yeah yeah the fun extension that's a
27:35 - really that is a fun one we're not gonna
27:39 - get into that you should think about it
27:42 - so you can see now and if you follow it
27:45 - along with the code that Cody we can't
27:47 - get Cody out of the box and that is
27:50 - exactly what we want he's trapped in
27:52 - there he is
27:53 - traps there's one trapped code Academy
27:56 - mascot sweet excellence like snake yeah
27:59 - yes yeah like sync oh yeah yeah that
28:03 - that's the real really old real deal the
28:08 - old brick phone I'm miserable yeah a
28:12 - pocket-sized phone for a past generation
28:18 - at this point if you guys are coding
28:20 - along we're we've got enough to step to
28:22 - as well where it's to creating
28:25 - boundaries I think the name is called if
28:28 - you have any questions as always please
28:30 - ask in the chat but we're now gonna move
28:34 - on to the next step I guess so
28:36 - the next logical thing I think in this
28:38 - case is maybe making the roads
28:40 - yeah we need for Brodie to cross we need
28:42 - to kind of set the scene we need to give
28:45 - this a little bit more context Cody just
28:47 - moving around in a green square is fun
28:49 - enough I guess but a game doesn't just
28:53 - have to be playable there's got to be
28:54 - kind of win and lose conditions and it's
28:56 - got to put you in an environment really
28:58 - and give you circumstances to deal with
29:02 - and think about so the first way that
29:04 - we're going to start to indicate that is
29:06 - by adding in these roads so we're gonna
29:10 - start with we're gonna make two roads
29:11 - we're gonna name them road 1 and road -
29:14 - there's an extendable way if you want to
29:17 - make I guess an unlimited number of
29:19 - roads you can make a roads game state
29:22 - dot roads but since we're gonna kind of
29:25 - make this small and within this little
29:27 - box here let's start with one or with
29:30 - just two roads and we'll talk a little
29:32 - bit maybe at the end if you
29:33 - time about how to make an infinite
29:36 - Frogger game I guess yeah you can never
29:40 - win that's we're gonna use this dot EDF
29:49 - tango which just creates a rectangle a
29:51 - road is kind of like a rectangle life is
29:56 - a highway config dot with divided by two
30:01 - you might recognize that from the how we
30:04 - added the cody sprite that just means
30:06 - centric on the screen we want it to be
30:09 - in the center of the screen and we're
30:13 - going to give it a y-value of 150 and so
30:18 - we're breaking this up into like kind of
30:21 - 50 pixel grid Kody is 50 pixels by 50
30:26 - pixels and Kody is moving up and down by
30:28 - 50 pixels so 150 is like three lanes
30:32 - down from the top let's say and so we're
30:35 - going to give it the whole sorry
30:38 - rectangle has five arguments that we're
30:41 - going to provide it the x-coordinate of
30:42 - the room rectangle the y-coordinate of
30:44 - the center of the rectangle the width
30:47 - and the height and then the color so
30:51 - that's all five so the first thing that
30:53 - we have here is the x-coordinate of the
30:55 - center of the rectangle which is the
30:57 - center of the game the next is the
30:59 - y-coordinate of the center of the
31:00 - rectangle which we're going to give 150
31:02 - and that's another one of those values
31:04 - that you kind of play with and you think
31:06 - about and you have fun with as you
31:09 - design your own game the next thing that
31:15 - we're going to add is the width of the
31:16 - road and we want it to be as why does
31:18 - the game itself so config down with and
31:20 - the next is the height and we want each
31:23 - road to be four of these 50 pixel rows
31:27 - tall
31:29 - I guess so that's four times 50 which is
31:31 - 200 and I just give it this little gray
31:36 - by passing in this hex code 0x bbbbbb
31:41 - oh I love these it's a lot of bees it's
31:44 - six bees all together
31:45 - that's a hex code it's just a
31:48 - hexadecimal color code you can learn
31:50 - more about those online oh no oh no
31:58 - let's copy that and refresh I think it's
32:02 - I don't think it's our code I think it's
32:04 - just I see we've run into his command
32:06 - agent bit of an error I did not copy
32:17 - there's awesome there was also a great
32:19 - question from Diego asking what happens
32:22 - if we add in in like arguments that
32:24 - aren't integers and I in our chat I
32:27 - actually encourage you guys to play
32:29 - around with that and see what actually
32:30 - happens I only say that because I've
32:32 - done that numerous times as we've
32:34 - developed this course and found out for
32:36 - myself and that's how I learned but
32:39 - maybe we could also plug in a non
32:41 - integer value here and see what happens
32:43 - sure absolutely let's like if we do a
32:46 - string I don't know a string oh I
32:49 - thought you meant like a float oh oh
32:51 - yeah
32:52 - I haven't even thought about floats for
32:54 - this one to be honest I don't know the
32:56 - answer to the question of what happens
32:57 - if it's not an integer value so I'm
32:59 - gonna give it 225 here and we're gonna
33:01 - see I don't know if we would be actually
33:04 - be able to see if there's like a point
33:06 - 25 increase to the height that's not a
33:08 - very useful thing to do I guess
33:09 - Thanks I don't know that I would be able
33:12 - to tell it probably rounds but is it
33:19 - floor as a truncation I don't know not
33:24 - entirely sure on that one either
33:26 - I thought it was going off a string or
33:28 - like undefined before right if we give
33:31 - it like 200 I think that that is not
33:33 - gonna I don't think it's gonna like that
33:35 - ooh
33:36 - that's weird all the way I have no idea
33:42 - we're not gonna go into that probably no
33:44 - I think it's a really good question and
33:47 - I'll probably end up spending some time
33:49 - looking it up afterwards so I'll let you
33:51 - know yeah thanks
33:54 - cool what's next the next road let's add
33:57 - in two roads because we want Kody to
33:58 - have a storied adventure before code 1/3
34:02 - so I'm just gonna copy and paste this
34:06 - first line and create road two and we
34:08 - want Row two to have the same
34:09 - x-coordinate but a different
34:12 - y-coordinate we're going to give it 450
34:14 - and everything else the same so we're
34:17 - gonna have two roads here Kody start by
34:20 - crossing one road look at this I've also
34:24 - got a question about that from John
34:25 - John's coding along thank you yeah and
34:28 - it looks like Cody is going right
34:30 - underneath the road which is 100% not
34:34 - what we want right now so how do you
34:37 - think we might fix this it seems like it
34:41 - seems like it's just how like phasors
34:43 - reading our code or even JavaScript is
34:44 - being read because it's going from top
34:46 - down right so if we load the player
34:49 - before we load the roads the the roads
34:52 - will have this thing called like a
34:53 - z-index
34:54 - that makes it pop like closer to the
34:58 - front of the screen then Cody would be
35:00 - so I see that Tim's copied the code so
35:03 - you create Cody and we're pasting it
35:05 - underneath the road creation code yeah
35:08 - we're moving this this game state dot
35:11 - player creation I think that phaser
35:14 - automatically assigns the Z indexes to
35:17 - the objects as you create them and so
35:19 - since this one is the last one that gets
35:21 - created I think you can update it
35:23 - manually
35:23 - mm-hm but it's maybe clear to not have
35:27 - to do that if you just say oh I'm gonna
35:29 - put everything on the page first and
35:32 - then have Cody you like walk over the
35:34 - road so if I save this and start running
35:37 - it like this you'll see Cody on top of
35:38 - the street awesome as intended cool what
35:43 - is next we're gonna start talking about
35:46 - enemies right that's what makes a game a
35:49 - game isn't it we were just crossing
35:53 - roads yeah my favorite step in any game
35:57 - development is making enemies because
36:00 - making enemies is something that I'm
36:02 - really good
36:03 - so if you're out there and you want to
36:06 - be my enemy actually that doesn't sound
36:09 - that's right let's not encourage that
36:11 - yeah let's keep let's see friends
36:13 - instead I make enough enemies as is here
36:16 - in the phaser game so what we're going
36:20 - to do is we're going to add a group
36:22 - groups groups yeah group objects so I'm
36:29 - gonna write in the code for this but our
36:31 - groups are basically like game objects
36:34 - that keep track of other game objects
36:36 - you can think of them as a collection of
36:39 - other sprites and we can use this group
36:43 - object to continuously make these kind
36:45 - of sprites so Sims written game state
36:49 - that entries so that's gonna be a
36:50 - property in our global variable this dot
36:53 - add group which is gonna allow us then
36:55 - use enemies add sprite to make enemies
37:00 - later cool yeah let's start let's let's
37:04 - maybe get to cooking up our make bug
37:07 - function make bugs so the way that we're
37:12 - going to be making these enemies is with
37:15 - a timed event thanks Laura
37:18 - [Music]
37:20 - I think we're also gonna be in create we
37:22 - should okay let's let's add this and
37:24 - create them so function I'm gonna give
37:28 - it another space their function make bug
37:30 - and what we're going to do is so in the
37:40 - classic Frogger game it seems like bugs
37:42 - or cars appear on like Road lanes right
37:45 - mm-hmm and we've thought of the road or
37:50 - our lanes in in kind of 10 rows right
37:54 - yeah all together one two three four
37:57 - eight eight different radius yeah so
38:00 - we'll need to make enemies for every row
38:05 - and I think that's that's like a nice
38:09 - first step that we should do because
38:11 - then later on we can take these enemies
38:13 - and we can start
38:14 - moving it but it's it's a matter of like
38:15 - taking these problems breaking them down
38:17 - to smaller pieces and then iterating
38:19 - them so actually I think the first thing
38:21 - I'm going to do is just get a bug on the
38:23 - screen that sounds great yeah so we're
38:25 - gonna create and we're gonna give it a
38:27 - start X all right an x value of let me
38:32 - see let's start with the zero and then
38:39 - we're gonna give it a y value let's just
38:50 - kind of bring it down a little bit let's
38:53 - let's actually see if we can just get
38:55 - one on the screen first so and then
38:58 - we're gonna give it bug one which is the
39:00 - name of one of these bugs that we've got
39:02 - a point at the screen that we've loaded
39:04 - an image asset for and so let's start
39:08 - with that and let's just make a bug and
39:11 - call a meat bug and I'm ready to see if
39:15 - that works all right cool we have got a
39:17 - bug on the screen and we're gonna fill
39:19 - the screen with these bugs in due time
39:22 - but we're gonna talk first about how
39:25 - this bug is facing downwards which is
39:29 - not the direction we want the bug to be
39:30 - facing in we want to actually move it
39:32 - from left to right and from right to
39:33 - left
39:33 - so what a sprite has is a property
39:37 - called angle and what you can do is call
39:41 - a function on this break called set
39:44 - angle and if we set it to 90 that's
39:47 - going to turn the bug 90 degrees
39:53 - right I don't know how I district but
39:56 - the way that Kenny is saying it is the
39:58 - way that it gets turned in the direction
40:00 - of the clock so like that yes so that
40:04 - means that bugs set at a 90-degree angle
40:07 - are going to be the ones that are moving
40:08 - from right to left and then bug set at
40:11 - you can pass either 270 and it'll turn
40:19 - it the other way or I mean you might
40:21 - prefer to do minus 90 it's the same
40:25 - thing so we're gonna start with 90 and
40:29 - we're gonna talk a little bit more about
40:33 - where we want to put these bugs as we
40:36 - create them so we kind of touched a
40:40 - little bit about on how there are
40:41 - different lanes right and so we want to
40:45 - kind of enter space these lanes so have
40:48 - one lane of bugs moving this way one
40:50 - lane of bugs moving the other way and
40:52 - continue to flip between the two of them
40:57 - and a way to do that is no my too glad
41:06 - to see they they can all see me
41:07 - succeeding here so let me think how do
41:16 - we want to move forward with the
41:18 - creation of these bugs yeah I think
41:21 - that's one of the big struggles of like
41:23 - game development or coding in general
41:25 - that it just seems like there's so many
41:26 - different solutions that we could do but
41:29 - while we were doing this one thing that
41:31 - we've thought of is like since we do
41:32 - have defined a defined height and Kody
41:37 - can only moved in and define up fashion
41:40 - like 50 pixels each time I get
41:43 - suppressed that we can make an array
41:45 - containing the numbers of like Lane
41:50 - multipliers that we didn't want mm-hmm
41:53 - so we can make a set of different lanes
41:56 - so one two so like you'll notice that
42:00 - this is the at 25 by a 25 this is the
42:06 - last Lane so this
42:07 - would be 75 25 right here or 25 75 sorry
42:12 - but with a y with an x value of 25 will
42:16 - keep you on this side and a y value of
42:20 - 75 will put you here and if you keep
42:21 - adding 50 125 onto the next plane and so
42:25 - it's a multiplier of 50 that you add to
42:28 - 25 so the multiplier of 50 the starting
42:34 - what am I gonna say this first plane is
42:37 - number one yeah because we're gonna
42:39 - multiply one by 50 to get so that
42:41 - second-to-last lane or the second lane
42:43 - however you want to think of it from
42:44 - topic on the bottom and then Tim has
42:48 - actually filled in the rest of the lanes
42:49 - that we need to multiply by 50 to get
42:52 - the values in which we want the lanes
42:54 - the bugs to be on you'll notice that I
42:56 - skipped five and six here and that
42:58 - corresponds to this this safe patch here
43:01 - that doesn't correspond to a road and
43:02 - this next safe patch this is 5 and this
43:05 - is 6 and we're gonna be using these I
43:08 - think it's gonna be a little more
43:09 - understandable why we're making this
43:11 - array as we come around to like getting
43:15 - the bugs to be made generically what
43:21 - should I do
43:24 - see I think each lane it's gonna
43:27 - correspond to something and then we can
43:29 - go inside make bug and just create that
43:33 - function first before we make the event
43:35 - that continuously calls make bug ok yeah
43:39 - let's should we pass in lane as an
43:42 - argument first or should we how do our
43:45 - just hard code ok yeah yeah so we're
43:49 - gonna give it a lane of 1 right now and
43:52 - we're gonna start we're gonna see if we
43:54 - can build out this first lane so what do
43:58 - we want the Y value of every bug that
44:01 - turns onto this lane to be so I'm gonna
44:05 - make a every time this gets called with
44:10 - the lane we want to give it the Y value
44:13 - that corresponds to that lane and so we
44:14 - talked a little bit about how the lane
44:17 - is a multiplier config dot heights
44:24 - good to see you Diana happy birthday
44:26 - Diana it's always someone's birthday
44:31 - here at the click Adam II live stream
44:34 - config dot height what am i doing sorry
44:38 - I got lost we want to subtract from the
44:43 - bottom here it's just I guess it's a
44:48 - little bit easier for me I'm just gonna
44:52 - write this in and then I'm gonna talk a
44:53 - little bit about what the process was
44:55 - for for deciding on this so maybe if
44:58 - you've been listening to what we've been
45:00 - saying this makes a little bit of sense
45:01 - to you but here's here's how it like
45:04 - works out we take the height which is
45:06 - the bottom of the game and then we
45:09 - subtract enough to get the above to
45:11 - appear on the right lane that we expect
45:14 - it to and the amount that we subtract is
45:16 - 25 so that the bug is centered so config
45:19 - dot height minus 25 is gonna put it on
45:21 - the right on this bottom lane here and
45:23 - then we continue to subtract 50 times
45:25 - every Lane so if you're in the first
45:29 - Lane actually what you're going to do B
45:31 - is in this bottom most link here
45:35 - and if we continue to generate enemies
45:37 - at this start y-value we're gonna
45:40 - continue to generate enemies on this
45:42 - first road on this first part of the
45:45 - first road cool so what do we want to do
45:49 - we also want to figure out what the
45:51 - start x-value is so we're going to try
45:57 - to figure out or know let's start X
46:00 - because it's going to depend right
46:04 - because we depending on which direction
46:06 - it's going right we might want it to
46:08 - show up on the left side of the screen
46:09 - or the right side of the screen first so
46:13 - someone was talking about the modulo in
46:15 - chat earlier we are going to be using
46:18 - the modulus operator in order to
46:21 - determine whether our lane is even or
46:23 - not and that just means like if the lane
46:26 - is 1 or 3 or 5 we're gonna be moving it
46:30 - from right to left and if the lane is 2
46:32 - or 4 or 6 we're gonna be moving it from
46:34 - left to right that's good and it's just
46:35 - an easy way to flip between values like
46:39 - that so what we're gonna do here is
46:41 - we're going to check if Lane percent 2
46:45 - and that's the modular separate operator
46:46 - it says divide by 2 and give me the
46:48 - remainder and we're gonna check if
46:50 - that's triple equals to a zero say that
46:55 - yep cool and if it is we're gonna give
46:58 - it a start x value of the width we're
47:02 - gonna start it all the way on the right
47:04 - side and we're going to give it the
47:07 - angle we're gonna angle here so we're
47:15 - gonna set the angle and the x value in
47:18 - the same place because that's where
47:20 - that's where the two are going to be
47:22 - decided if it's if it's moving from
47:24 - right to left you want to set the x
47:27 - value to be as far right as possible and
47:29 - set the angle so that it's facing the
47:32 - left and if it's moving the other way
47:33 - then you want to set the start X to be
47:36 - zero and the angle so that it's facing
47:38 - to the right and so for the angle we
47:41 - want 90 here and then in our else
47:44 - bracket we want
47:45 - or else sweet we want the start x2 value
47:49 - to be zero and we want the angle to be
47:51 - minus 90 so what we can do here is
47:57 - change this angle that we have
47:59 - hard-coded to angle we can change this x
48:03 - value that we have hard-coded to start X
48:04 - and we had can change this to start Y so
48:09 - let's see what happens when we make a
48:10 - bug now we've got a bug right on the
48:13 - bottom here moving from left to right
48:15 - well that's great or it's not moving
48:18 - it's not moving just yet
48:19 - it's not moving that's correct but
48:21 - that's expected here at Cook County me
48:23 - we can say one thing for certain and
48:25 - it's that that this bug is not moving so
48:30 - do you think I should flush out the mick
48:32 - bug function or maybe we should talk
48:34 - about the event first or we should start
48:36 - moving the bug shouldn't we I think we
48:38 - could jump to moving the bug I think
48:39 - that'd be more interesting and we can
48:41 - yeah fill in the details later yeah so
48:48 - while we're doing that it's just like
48:49 - like we mentioned before there's a lot
48:51 - of different ways to maybe handle this
48:53 - and this is one way that we found it to
48:56 - be easier charlie
48:59 - great question instead of negative 90
49:01 - can it be 270 and we kind of touch upon
49:03 - that before it's definitely possible you
49:06 - can use that as well yeah we have the
49:09 - chat asking to move the bug so I think
49:11 - move the bug we have to abide yeah we
49:15 - must move the bug Thank You Mauricio
49:18 - I'll see you in Miami
49:21 - Wow okay so let's move the bug in our
49:25 - update function right that's where we
49:27 - are
49:27 - Wow where are we we're in our update
49:29 - function here and we're past all of
49:32 - these cursor movement operations that we
49:35 - have defines and we're gonna add in a
49:39 - for loop so gamestate dot enemies dot
49:43 - get children and this gets all of the
49:46 - enemies that have been added to the
49:48 - enemies group right and we're going to
49:50 - give it a for each that's a little
49:53 - JavaScript
49:55 - JavaScript fun for you little iterator
49:58 - yeah and here's a little some some
50:02 - function syntax it's kind of funny we
50:03 - don't really often use this arrow syntax
50:06 - in our phaser lessons we try to keep it
50:12 - as accessible as possible and some
50:14 - people might not be familiar with it but
50:16 - researching and knowing some of these
50:18 - latest methods might really be helpful
50:20 - for learning the program and phaser or
50:22 - JavaScript moving forward anyway it's
50:24 - 220 yeah we are just having entirely too
50:29 - much fun here we're gonna start building
50:31 - out some more game real quick yeah angle
50:37 - phasers Oh Patrick I don't speed through
50:49 - the game but I do wanna get the bugs
50:52 - moving in collision happening yeah yeah
50:54 - I think that's the baseline address
50:56 - sorry for taking a little bit more time
50:58 - than maybe but we do appreciate you guys
51:01 - sticking around and listening and asking
51:04 - questions in the chat this really makes
51:05 - it fun oh should we talk about getting
51:09 - the bug a speed or should we just give
51:11 - them all the same here here in our in
51:14 - our bug constructor we can also just
51:16 - give the bug a speed yeah and this is
51:22 - not a phaser built-in at all this is
51:24 - just a number that we can assign to the
51:26 - bug itself so that we can use it and
51:30 - let's give it a speed of remove Cody at
51:33 - 5 what so that's out front oh no no oh
51:37 - we want to put it out around the bugs I
51:39 - think in the earlier stages it should be
51:42 - like slightly easier all right we'll
51:44 - start with 4 if you want to amp up the
51:46 - difficulty on your own Frogger game
51:48 - you'll know that you can change this
51:50 - speed to be much higher right definitely
51:52 - something that you want to play around
51:54 - with again personal preference or how
51:57 - fun you want to make it seen in the
51:58 - steps we cover giving each of these
52:00 - lanes a different speed I'm not sure
52:03 - that we'll be able to cover that today
52:06 - so we're gonna go into so here you've
52:09 - checked here we check if the bug angle
52:11 - is ninety we're gonna check if the bug
52:13 - angle is negative 90 and we're gonna use
52:15 - that to determine which direction the
52:18 - bug is facing because that is literally
52:20 - which direction the bug is facing right
52:22 - if we want to increase or decrease that
52:24 - x value right so if the bug is facing to
52:26 - the left what do we want to do to the x
52:29 - value do we want to subtract or do we
52:31 - want to add to it so that was a question
52:38 - for you guys in chat I know that we
52:41 - already kind of asked this question and
52:42 - you were all very good at it so but we
52:45 - did that for them why is that
52:47 - yes and we're doing it for the X so and
52:49 - they're different we're covering both
52:50 - all bases subtract yeah way to go didn't
52:54 - Asia and bran you got it yeah one
52:57 - who's that add to the x value oh
53:01 - definitely something that ah it's done
53:04 - it's okay I probably would have said as
53:06 - well it's a 50/50 shot and for me
53:09 - honestly it's something that I play
53:11 - around with things like if this doesn't
53:12 - work let me try it again we want to add
53:14 - for this bug in particular but if the
53:16 - bug is facing to the left which it is
53:18 - when we've turned it 90 degrees yeah
53:22 - yeah we want to subtract so bug X minus
53:26 - 2 equals and we're giving it bugged at
53:28 - speed and then this one plus equals bug
53:32 - got speed
53:32 - and let's move the bug shall we just
53:35 - let's move the bug are we gonna move the
53:37 - bug I hope it does Wow all right that is
53:42 - the first bug moving across the screen
53:46 - fantastic
53:47 - we're almost done really or at least
53:51 - with the basics whoo we're almost done
53:53 - with the very basics of this game not
53:56 - nearly near as far into the game as we
53:59 - kind of expected before and we were kind
54:02 - of ambitious on this but I think that's
54:05 - a great first step right we have the bug
54:07 - we have the bug moving and do you want
54:11 - look in this next step
54:13 - do you wanna
54:15 - I'm gonna add the event events I would
54:17 - really desperately want to add the event
54:18 - let's do that yeah so in order to
54:21 - continue creating bugs in our code
54:24 - something else that I'm excellent at
54:26 - doing we want to add in a timed event
54:32 - here at code Academy we are nothing if
54:35 - not professionals at adding bugs to code
54:39 - hopefully you are too because that means
54:43 - that you're a programmer that's how you
54:46 - figure it out if you added a bug to your
54:48 - own code you are coding congratulations
54:52 - yeah
54:53 - so what we want to do is to this dot
54:58 - events write this not time that Advent
55:03 - it's gonna allow us to create a like in
55:06 - game loop that calls a function
55:10 - depending on what we depending on the
55:12 - properties that we include in it so in
55:15 - this case we're gonna use loop being
55:18 - true but if you want it the event to
55:20 - only happen let's say 50 times you could
55:23 - use another property called repeat and
55:25 - use 50 as the property instead but this
55:30 - case specifically let's see what Tim is
55:31 - yeah I'm gonna give it a little slightly
55:34 - random delay so every time that this
55:39 - event gets called it could be and I'm
55:43 - gonna give it a start time - I mean good
55:48 - doesn't don't have to be right like
55:50 - that's that's saying like at the minimum
55:52 - just in case there is no delay at all
55:54 - right add a little bit of delay yeah
55:56 - yeah we want to we want to make sure
55:58 - that it's that there is some amount of
56:01 - delay between each of the bugs that we
56:03 - add so that we'll be able to get Cody
56:04 - successfully right through so the reason
56:07 - Tim added the constant right there on
56:09 - 1800 is because the delay is determining
56:12 - how long it is between when the first
56:15 - function is called and the next function
56:16 - is being called so we want make bug we
56:19 - don't want it have to have let's say
56:21 - math dot random returns zero and it just
56:24 - constantly creates a bug and we can't
56:25 - even get that through
56:27 - stream of bugs so we want to have it
56:30 - wait at least a thousand eight hundred
56:31 - milliseconds or 1.8 seconds and we've
56:35 - played around with these values a little
56:36 - bit beforehand so that we're not just
56:38 - crazy guessing here cool excellent good
56:46 - to see you man depends if you like Cody
56:48 - Charlie come on team yeah I do want some
56:56 - coffee so I've added this callback scope
57:00 - to the event and that means that we can
57:03 - access and we'll see as we build this
57:05 - like loop a little bit more instead of
57:07 - hard-coding the lane here we can give a
57:10 - lane that's been provided to the code so
57:13 - what this is hopefully gonna do is
57:16 - continue to make bugs that move to the
57:18 - right well I made a bug no I think it's
57:22 - just the delay out of the delays in the
57:24 - delay is a little bit long yeah but
57:26 - that's good because we want to know well
57:28 - we'll figure out how to I think so I do
57:33 - this it's a matter of like allowing all
57:37 - right well what I'm gonna also do here
57:39 - and we're gonna move a little bit
57:40 - through is for I guess lane of lanes
57:47 - that's what I'm gonna do for let lane of
57:49 - lanes okay and I'm gonna use I'm gonna
57:53 - loop over this event so that we can
57:55 - create can I successfully do this yes I
58:01 - can do it okay
58:02 - if you hit well on a Mac its command and
58:06 - the right bracket you can indent the
58:08 - code and I always somehow miss that
58:11 - I also learned from a coach lit before
58:13 - that we can also tab it oh yeah yeah you
58:17 - can just tab comes down and highlight
58:19 - and tab so here we're looping over this
58:22 - and we're gonna create a timed event for
58:24 - each of these lanes that we've defined
58:26 - up here and what that's going to do is
58:29 - create bugs in each of the different
58:33 - like that
58:34 - Lane callback scope like the
58:37 - okay all right works
58:40 - we got a oh now we're talking that's
58:42 - correct we have a lot of bugs going on
58:46 - here in fact I'm gonna change the color
58:49 - of this bug in the steps you can go over
58:53 - we kind of automate making each lane a
58:57 - different kind of bug but the orange one
58:59 - has given me the willies the willies so
59:02 - let's go with the green one which is a
59:04 - little bit nicer looking I think Oh
59:06 - Jennifer teacher
59:08 - you're very welcome thank you for tuning
59:11 - in seriously we appreciate it
59:14 - so what are we doing next we're gonna
59:17 - add the collision aren't we yeah we got
59:19 - those bugs moving but Cody's just
59:21 - barreling right the room yeah you have
59:23 - to be able to lose a game you know
59:25 - in order to make winning really truly
59:27 - mean anything so let's talk about how
59:31 - we're going to get Cody to Louise yeah
59:36 - so I guess in taking a step back and
59:39 - talking about like collision detection
59:41 - as a whole and game development it's a
59:44 - matter of like when two objects like go
59:47 - collide for lack of a better word come
59:48 - into contact with each other right so to
59:51 - do that we we need to know where they
59:53 - are in a game like what's their bounds
59:55 - what's what's like that their outline I
60:00 - guess um where's the enemy sprite
60:02 - outline mm-hmm and when those two
60:04 - overlap a little bit or touch each other
60:06 - that's when it's like no you can't have
60:08 - that happen it's game over for you right
60:11 - and so we loop over each of the bugs
60:14 - here in our update we wrote this a
60:16 - little bit earlier to give to move the
60:18 - bugs around what we can also do here in
60:21 - this for each is check if the bug and
60:24 - Cody overlap and we're going to do that
60:28 - with a little geometry and so what we're
60:33 - gonna do is we're gonna check if phaser
60:35 - dot and geom intersects dot rectangles a
60:40 - rectangle so that's going to check
60:44 - whether or not the rectangle of Cody
60:47 - and that's that's the whole sprite
60:49 - that's we have to take one step back and
60:51 - we have to grab Cody as the rectangle
60:54 - first to like right we have to use the
60:57 - player rectangle yeah I see oh excuse me
61:00 - yes so we want to actually grab the
61:03 - player rectangle first very kind words I
61:06 - don't have to use math cool so we're
61:13 - going to you get the rectangle that
61:15 - corresponds to Cody here with player
61:19 - erect and we're gonna sign that to a
61:21 - part of our game state so that we can
61:23 - access it later
61:24 - oh we're gonna sorry we're gonna grab
61:27 - that from our game State got player that
61:30 - corresponds to Cody there get bounced
61:32 - that's the that's the method that we're
61:34 - going to use in order to get the bounds
61:36 - of the player yeah it's a little I like
61:40 - it when you can describe what something
61:42 - is doing by reading the the sequence
61:46 - here we want to look at our game state
61:48 - and get the player and get the bounce
61:49 - from that make sense and that's quite
61:51 - nice one of the things that like phaser
61:53 - gives you right out the box which if we
61:56 - had to do would maybe have to find the x
61:58 - coordinate the y coordinate where the
62:00 - top left top right bottom left bottom
62:03 - right coordinates and figure out all
62:04 - those math but phaser just gives us get
62:06 - bounds and we get a rectangle from that
62:08 - yeah it's called an AABB and absolutely
62:13 - around bounding box it's it is a fun
62:16 - little piece of code to have to write
62:18 - yourself it's so easy to get wrong and
62:21 - I'm speaking from experience but I'll
62:25 - take your word for it yeah I don't
62:27 - recommend it unless you want to
62:29 - in which case go for it it is it's
62:31 - always fun to figure out new things so
62:34 - we're gonna use this player rectangle
62:35 - and check if it intersects with what
62:37 - each of these different bugs here and
62:39 - we're gonna do that with bug get bounce
62:42 - the reason why we call player get bounce
62:45 - outside of the for loop is so that we
62:46 - don't keep on calling it for each one of
62:48 - our bugs we don't need that we know
62:50 - where the player is the player is in the
62:52 - same place but each of the bugs is in a
62:54 - different place so that's why we have to
62:56 - call that or we call that for but we
62:58 - call the
62:59 - get down here cool and if this whole
63:03 - thing is true this somewhat monstrous
63:07 - but hopefully self-explanatory series of
63:09 - statements is true we're going to add
63:13 - some text that says game over that's the
63:16 - first thing that we're gonna do and then
63:19 - we're going to probably I would say
63:20 - pause the physics is probably what we
63:23 - should do is I'm not keeping track of
63:24 - the events or anything so I can't
63:26 - destroy those right but if we pause the
63:29 - physics we'll get the bugs to stop
63:31 - moving but the thing is here we never
63:33 - included physics caffeine never included
63:35 - so Tim is actually mentioning another
63:39 - method that we can use had me included
63:41 - physics in our game right but we didn't
63:43 - and so the way that we can manage this
63:46 - though is like signing when like a game
63:48 - state is active like when it's being
63:50 - played and then in our update we can
63:53 - check your game state is active or or
63:55 - playable and if it's not playable then
63:59 - we don't do any of this stuff cool I'm
64:01 - going to first yeah I'm gonna add in the
64:03 - game over text and then I guess do you
64:09 - want to talk a little bit more about how
64:11 - the game state is active might interact
64:15 - with I want to talk a little bit about
64:18 - how the the step by step code will look
64:20 - like to someone who's following along
64:22 - with the project's not as we've done it
64:25 - here today but as how how we've kind of
64:27 - laid it out sure yeah um so game state
64:29 - not active so that's that's gonna be
64:31 - another property that we append to our
64:33 - game state global variable and that at
64:37 - the beginning we're gonna set to true
64:39 - active is true then we want the game to
64:42 - be playable and to do that we can add it
64:45 - in our in our create function just to
64:49 - assign it true first and to check if
64:51 - it's still true throughout in our update
64:54 - function that we can wrap like our
64:56 - controls around that fact of checking if
64:58 - game state active is true and if it is
65:02 - we should be able to control the player
65:03 - we should have collision detection we
65:05 - should have all that good jazz but if
65:07 - it's ever false then in our update we'll
65:10 - see that it's false
65:11 - and we won't be able to control Cody
65:13 - anymore and our bugs will stop moving
65:17 - and eventually we might even want to
65:20 - like stop the event that is creating our
65:25 - bucks all right cool
65:27 - I'm just gonna cover a little bit about
65:30 - all the stuff that I wrote which is
65:31 - pretty much exactly what you just
65:33 - described so I added this text that says
65:35 - game over when you intersect and then I
65:37 - added this if statement around all of
65:39 - our update function that just checks if
65:42 - game state active is true
65:44 - and the last thing that I'm going to do
65:45 - here is inside this intersection I'm
65:48 - going to set game state active game
65:55 - state that active to false so this means
65:58 - after we hit one of our bugs where the
66:00 - bugs are going to stop moving Cody's not
66:03 - gonna stop moving and we're gonna see
66:05 - the words game over so hopefully well
66:09 - I'm gonna just refresh real fast
66:12 - oh no yeah yes there we go
66:23 - Oh No well I think you just have to save
66:27 - again or paste over
66:33 - talk about adding bugs to code what oh
66:38 - yeah yeah yeah
66:40 - so here's something that you can totally
66:42 - do is inspect the element here and it's
66:47 - a little busy because there's a lot of
66:50 - stuff going on but rectangle to
66:52 - rectangle is what it doesn't understand
66:55 - so okay let's come down to this part
66:58 - here and I think it's because I spelled
67:01 - intersects wrong that's what it's
67:05 - finding undefined because so in stir it
67:08 - in inter insects was what was on the
67:11 - brand there but if we update that it
67:16 - just says game over this issue before
67:25 - red sea layer right
67:35 - yes very interesting so you know since
67:43 - we can use the console we can just start
67:46 - debugging by a console logging step
67:49 - again set the games games date for which
67:55 - no that's what it's false by default oh
67:59 - did I know I get a set it active in
68:04 - creates and so it drops into this if
68:09 - statement right and then it gets here
68:12 - and what does it do so I check the
68:17 - console and
68:26 - oh okay our bug does not have Lake
68:30 - bounds and for some reason that true
68:35 - this very interesting see if I
68:40 - understand what's going on here
68:44 - should I be
68:56 - but it should be a singing are the
69:00 - parameter in our callback function very
69:05 - curious
69:14 - is it intersects with
69:21 - is intersex I believe it is because this
69:25 - is returning truth somehow but bug get
69:30 - bounce is giving us this not a number
69:34 - laden object hmm and all of that
69:39 - together is weaken this so this is the
69:42 - fun part
69:43 - welcome it's got to be in this callback
70:08 - because it's for each of the different
70:09 - bugs yeah but
70:17 - curious if you catch what's going on
70:20 - please fill us in it's a fun way to be
70:25 - finishing off our our livestream here so
70:31 - let's see are we inside that scope as
70:34 - well
70:59 - yeah I think it's possible that we have
71:01 - like a bug that doesn't really it just
71:07 - hasn't been there yet I don't know
71:09 - because we when we create them we give
71:11 - them x and y values they don't get added
71:14 - before they are assigned those things
71:18 - you are certainly not the one who
71:20 - struggles to figure out your coding
71:22 - mistakes Vanessa definitely not your and
71:24 - I would love to call myself good company
71:37 - I'll add the semicolon though I want I
71:40 - want you to feel I'm very bad at adding
71:45 - semicolons
71:54 - or at least it's returning truthy yes it
71:58 - is returning something positive here I
72:00 - don't know I'm not sure it's dumped by
72:08 - this as well
72:16 - anyone play around yeah plenty of
72:19 - wrecked his player Rex looks good the
72:24 - bug rectangle is what's coming back all
72:28 - all messed out so maybe I'm saying get
72:30 - down wrong no get bounds looks to be the
72:34 - same in both situations yeah very very
72:40 - curious
72:50 - yeah yeah you just start console.log and
72:54 - stuff for and Nan so this bug does not
72:58 - have a y-value why doesn't this book
73:00 - have a y-value do I never define start
73:04 - deadline I do start why am i passing
73:07 - this correctly yes ma'am one codeine
73:14 - multiple bugs that that could be Darren
73:19 - but we we're making this Collider happen
73:24 - for every single bug so that it checks
73:29 - when that bug collides with code it's
73:33 - funny it's the first bug to you can tell
73:36 - because every time you refresh the page
73:37 - it only prints out one of these values
73:40 - so the first time that it tries to do
73:42 - one of these rectangles or rectangle
73:44 - comparisons it is blowing up which is a
73:49 - real shame because I wanted to play
73:51 - Frogger yeah copy all yeah yep
74:00 - let's just try to remove that for now
74:03 - like if we the lanes are working
74:14 - correctly there is a wide position for
74:15 - it so it's very strange it's very very
74:21 - curious if you're catching on something
74:25 - here please let us know we didn't said
74:31 - about direct I think we do right there
74:34 - where it's line 73 it's constant bug
74:36 - rekt I know but it's it would be fine
74:41 - with the constant we can try lat
74:43 - I can get rid of it and put it back
74:46 - before it's love kept balance because
74:51 - I'm actually this doesn't used any or
74:53 - this is used
74:54 - okay so we referring to the whole screen
74:57 - as the collision
75:05 - this is funny
75:46 - is road one a rectangle which s is which
75:50 - when we were at Road one of rectangles a
75:53 - rectangle yeah we can check a road one
76:00 - very good idea
76:06 - we don't add any text but we do add a
76:11 - bug that does not have yeah there's
76:14 - there's one with an an y value it's
76:17 - interesting but what we should do is
76:21 - probably I'm gonna switch this back I
76:25 - have an idea okay I think it's probably
76:29 - where we're creating our bugs
76:30 - it must be yeah what I'm what I'm going
76:35 - to do here just to get on with it sort
76:38 - of it start X and start Y I'm just going
76:42 - to make sure that these two values exist
76:44 - we create before we create the bug and
76:48 - that's that should hopefully fix our
76:52 - issue there we go okay so our start Y
76:58 - was getting messed up when in the odd
77:02 - case but if we do this now awesome cool
77:07 - it had to do with this offending piece
77:10 - of line of code I suppose which looks
77:17 - just fine to me
77:19 - yeah I think we should if anything lets
77:21 - console.log what start y is and yeah
77:24 - here I'm gonna
77:31 - use this correctly I'm gonna give I'm
77:34 - just gonna
77:48 - so I'm passing a couple of things to
77:50 - console.log and I'm going to stop
77:53 - console lugging the other thing this
78:02 - so that all we see is this one which
78:05 - will give us the start why and then the
78:07 - different components that we have inside
78:09 - this calculation here sweets could only
78:11 - run this oh because you have a common
78:17 - there yes
78:21 - do you love to use commas I guess it is
78:24 - really fitting that our game is all
78:26 - about bugs and making bugs
78:28 - it truly is so yeah here we are
78:31 - nan 600 I think I know what happened
78:36 - Oh enlighten us Tim config dot height is
78:41 - defined later on down on the file and so
78:48 - we use it kind of here just possibly
78:53 - before the phaser code realizes that
78:56 - it's been defined yeah
78:58 - and that's that's a bug I see in this
79:02 - case then let's just turn config that
79:04 - height into 700 yep no yeah let's do
79:08 - that
79:08 - right here we're going to change this to
79:11 - 700 that's the that's the value
79:19 - that doesn't work I think actually it
79:21 - was 600 the height that would mess
79:23 - things up but we're still getting a
79:26 - small issue here with the odd y-value is
79:30 - not working out right I'm very curious I
79:39 - don't know what to say
79:44 - and it's always the start y value that
79:46 - it's returning yeah I'm actually kind of
79:50 - confused because I don't think that it's
79:53 - it's not just the config dot height then
79:55 - if we're still getting this issue
79:57 - no did I define lanes correctly
80:00 - looks right to me oh yeah let's not lean
80:07 - and we iterate over lane
80:20 - change the 270 to a minus 90 that's
80:23 - actually probably a good idea
80:25 - oh no that is a minus 90 can we try it
80:29 - because I think in here our lane called
80:39 - can we see what lien what what was being
80:42 - console.log four-lane sure there yeah
80:45 - we'll just go just a lot lane first
80:59 - oh okay yeah we're getting stuff for
81:02 - both odd and even lanes so it's very
81:07 - interesting that only the bugs moving
81:09 - from the right to the left
81:11 - appearing maybe it had to do with this
81:19 - no that looks right thanks
81:24 - maybe that's what he meant by this
81:32 - nope it always starts off like that just
81:34 - undefined very weird that's strange but
81:41 - I think that we should probably be
81:43 - wrapping up the livestream yeah thank
81:46 - you all for spending all of this time
81:49 - with us really I really appreciate you
81:55 - taking the time out of your day to try
81:58 - and develop a little bit of Frogger
82:00 - turns out the wheel bugs was the friends
82:02 - we made along the way classic yeah and
82:07 - thanks for being so attentive and really
82:09 - asking questions and helping us debug
82:11 - this if you do want to see our final
82:14 - version of what Frogger would look like
82:16 - in our steps finishing touches we
82:19 - actually do have the code so to make a
82:22 - more functional Frogger game and I would
82:25 - love to see that more in action if you
82:27 - had been coding along and don't want to
82:28 - overwrite your code next steps would be
82:31 - like thinking about what the wind
82:32 - condition would be thinking about how to
82:37 - have a set or remove the event that's
82:42 - creating the bugs maybe thinking about
82:44 - how to add a live a life system like
82:47 - multiple lives many things that you can
82:50 - do with this game and that we haven't
82:52 - even touched upon right spend the last
82:56 - two min once right please visit the
83:10 - feedback forum and let us know if you
83:12 - enjoyed this or if you didn't enjoy this
83:14 - what we could be doing better what we
83:16 - could be doing much worse I hope that
83:22 - you enjoyed learning a little bit of
83:24 - phaser sorry about the technical issues
83:26 - programming especially in a live setting
83:29 - is fraught a little bit you know things
83:32 - happen stuff gets typo'd that you miss
83:35 - somehow isn't that a lot like life
83:39 - yeah we're gonna take a look back on
83:41 - this and see what we could have done to
83:43 - fix it but I think yeah the code is
83:46 - there if you want to play around with it
83:47 - and again just much appreciate it much
83:49 - appreciate you guys chiming in joining
83:52 - us for this lengthy lunch
83:54 - cool yeah I'm gonna shut the stream off
83:59 - [Music]

Cleaned transcript:

we're doing it hello everyone everybody welcome to code kata Meena my name is Tim and I'm Kenny I know we're gonna be walking you through some phaser today yeah I just want to know how y'all are doing let us know in the chat chime in please please our course is based on a lot of like old arcade classics so if you guys have any favorite classical games that you enjoy playing put it in the chat maybe we can have a discussion on how to make it later we have enough time we'd love to hear from you and I think we're just gonna wait a couple of minutes for some stragglers chime in join us I'm mama wolf from Portland it's great to have you yeah if you're in the you tube if you're watching the YouTube you can go down to the description and click into the code Academy learning environment which is where you'll be able to follow along and code along with us to build this game that we're making that's what you're seeing on screen right now if you want to join in on the live stream or you're already on the code Kadim you site you can click on the YouTube embed it link on the lefthand panel as well and that'll bring you to here yeah just make sure that you're not playing the audio and or playing the video in both separate YouTube tab and the learning environment because then you'll hear a weird echo even what's more of a feature right like it's one of those things mmhmm it's definitely a feature you'll hear twice as much phaser knowledge if you have it open in two places so we're where are you all well Portland's that's pretty cool it's like 40 degrees Fahrenheit here today so it's it was just about to start warming up over the weekends and now it's gonna be cold again that's March 4 yeah I guess here in New York City where we are Iowa Chicago Wow we got a lot of Americans here Dragon's Lair I'm not familiar with that game have you I'm not Alex Alex is moderating for us today it's off in the corner Alex Goods the unsung hero who we love to sing the praises house yeah South America Wow international people well this is awesome yeah Miami's not too cold I'll be there later this week so I'm excited gonna head down to Miami yeah good and get some of that warm weather before the birthplace of indigestion is that what Albuquerque is really known for maybe that's the birthplaces indigestion we'll go over tips on how to make first place of indigestion later oh I don't think you really need tips on that yeah another one from Toronto and Brazilian living in London hi hi everyone yeah what are your favorite arcade games let us know we'll be building Frogger which is a classic there's a couple of other real Uruguay Czech Republic Wow very cool I think yeah and Tim was mentioning in our other courses or two other courses we build out like other games that have been inspired from arcade classics as well one being like space invaders so we did our own take of bug invader on that hmm yeah and I did one based on color a dinosaur which is really obscure not totally well known game but the idea the basic idea of having a coloring book I guess kind of goes back to Mario Paint maybe it's really fun though yeah I think it's a really enjoyable experience there's also a code your own adventure a choose your own adventure game it's interactive and you get to see what options you go through as you click through the the text input from Blaire's NPCs yeah that's a fun one I see Matt Mullen in the in the channel that's my brother so taking of your advice yeah yeah definitely an interesting audio effect well I guess maybe start moving into some code here today Wow and please like your your in the chat now if there's any points you feel like you want to ask questions ask them oh how long will this take this is slated to be about an hour an hour yeah that's our plan if you can't make it through the entirety of this stream it's gonna be uploaded as soon as we finish so we would love to still thank you guys for joining in for those who are in the chat right now take advantage it take advantage of it like Tim was saying I'll be devotedly looking onward so what what's going on in the chat and Tim's gonna be demonstrating a lot of what's going on in the live stream okay cool I'm gonna talk a little bit about what's already here and so a couple of things are in this workspace that's let me gesture at the text that's right here so here's your you should be loaded into your game J's file and then there's an index.html and you don't need to know HTML to create phaser games we use very minimal amounts it's a very small HTML file here that's just kind of describing what the title is of the of the page itself and importing the phaser library and then importing the game das file that we have over here and so this is a basic skeleton for a phaser game you've got a config you've got a new game and you have a couple of scene functions and I'm gonna talk a little bit more about what that is but first we're gonna cover this config here where we just described the properties of the phaser game so how wide it is how tall it is what the background color is by defaults and the scene information that's in there that's awesome yeah and in our course we might refer to it as like meta information you might have if you're reading we're going through our course that's exactly the same thing that Tim was mentioning before so yeah and I highly recommend I mean after this before this that's probably now going over the course we certainly cover all of this probably in a little bit more detail but since we're gonna try to you know shoot through this and make a game we might sprays over some details that you might be more interested in so ask questions in the chat and run through the course itself it should be helpful so here in preload we've loaded in a couple of images some sprites that we're going to be using for the game there's three bugs that we're gonna be using as our cars in the Frogger worlds and then there's our kodi code kademan mascot character who's going to be the frog from the Frogger and so the first thing that we're gonna do is take this loaded in sprite and bring Cody to life on the screen so we're gonna Oh game state yeah we manage States and phaser games in this kind of global way in this game state objects it just helps us pass information in between the various functions that a scene has right you're gonna reiterate that a little bit I think I think the major point is like you notice that we have a lot of different functions here we have preload create an update if we want to use the same variables throughout you'll need that global scope to access it and create and an update and so game state is just like holding on to properties that we can then use in those different functions and I think that'll be more clear once we start implementing it especially even with our first step because we're gonna make Cody and then we're gonna make an create and then we're gonna make a move in update yeah so we're gonna start with creates and we're going to add our first line of code so are you ready for this we're going to create game States Cody that's going to be the place that we store this Cody game object right and the game object itself is going to be a spray so this dot dot sprites is the name of the function that adds a game object that corresponds to a sprite to your game so this sprite has three arguments mainly the first one is the xcoordinate that we're going to be displaying kody the second one is the ycoordinate that we're gonna be displaying kody and the third is the key which is the name that we gave the image when we loaded it in preload yeah you talked a little bit about the grid like XY coordinates and for a second absolutely so for the the coordinate system in phaser itself we actually start in the top lefthand corner and that'll be zero zero or the origin and as we move down we're gonna Inc well let's move let's start with the X as we move to the right we're gonna increase the xcoordinate and as we go down we're gonna increase the ycoordinate so a lot of you may be remembering algebra math might be thinking that it's a little inverted because the ycoordinate will go up in that case usually but here in game worlds it just makes more sense for us to be going up as the Y goes down sort of it's you get used to it it's not super it's a little jarring at first because you have to flip some of your negative signs but eventually it's it's pretty standard also yeah it's coming in in JavaScript in the canvas is the name of this like the canvas element the canvas API if you're used to using javascript to draw stuff on canvas or WebGL might okay that time as well you'll probably be used to this coordinate system but even now it takes me a while to think about how to increase X or Y don't worry it's a learning curve so what we want for Cody the place where we want Cody to appear is right here in the center of the bottom and we're going to make Cody jump up or like move upwards towards the top of the screen where if Cody successfully gets to the top then we're going to have like won the game so we want what what I recommend doing is using these width and height properties that we've given to the game in order to say we in the center and at the bottom so in the center for the game would be config dot with / so that means that it should be right in the middle that that corresponds to this x value here and then if we give it config height and then we subtract 25 the kodi sprite is a 50 by 50 sprite so subtracting 25 is half the height of Kodi and the sprite this these x and ycoordinates are the middle of the sprite are gonna indicate the middle of the spray well I'm just gonna go ahead and type in this last bit here so that we see Cody and kind of get to talk a little bit more about what this what these values are so you can see Cody is appearing halfway across that's confident fig dot with / and Cody is appearing right at the bottom and that's the height half the height of Cody so that the centering works all together if you're coding along with us I would encourage you guys to just play around with these arguments just to see where it pops up it that really helped me solidify my understanding of these XY coordinates yeah absolutely stretching this out oh right yeah yeah so makes it a little bit bigger for you guys hopefully you may makes it easier to follow along as well yeah so yeah to kind of just like follow along with Kenny was saying if we change this to 20 for instance and then run it you'll see that Cody is moving a little bit further down if we just give it a bear config dot height Cody's barely over the bottom line there so I you know these numbers are absolutely numbers that you end up playing around with a little bit to make sure that everything kind of sits on the screen the way that you expect it to don't expect that this like config dot height minus 25 is something that I came up with immediately as I was writing this code some of this has been like I mean we've obviously tested through to make sure that we could make Frogger beforehand so if it's frustrating to like see this kind of magic number it's like kind of part of the experience of coding ticket decoding a game and like an interface yeah and Rick at Rick Marshall asked a great question oh sorry not Rick Opa me Thomas I hope um it's not a thank you about what a sprite is and it's in this case it's representing our player Cody but we can also use it we're and we're gonna use it later to represent enemies and things that are in our games yeah I'm going to start moving on to the cursors because what we really want to do is start moving Cody in the game that we've created here so what we're going to do is we're gonna create a game state cursors property for our game State and we're going to add it to our game state so that we can access it in the update function the update function do you want to talk a little bit about what the update function does it yeah yeah so for update and we'll get to this later but it's running what 60 frames per second is that something like that 23 I don't know it's trying to get every 16 milliseconds yeah I don't remember the exact numbers you can just gonna definitely look it up later or if I have a chance I can look it up as well but are the flow of our game works like we make we load in our assets through preload and then and create we're running that function after preload and we're adding that to our games and then later on an update that's the function that keeps on running and checking and making sure that our game is actually flowing so an update where you would be like doing a check to see if any cursor or anything like keys are being pressed cursor also being like a mouse click or any sort of input and that way we can then interact with our game and change how our game is being played yeah perfect so here we are in create and we're gonna create our cursors and then in our update we're going to use the input that we've given to our cursors in order to you move Kody on the on the screen here so the first thing that we're gonna do is set game state cursors equal to not that this dot input dot keyboard dot create cursor keys this is a bit of a magic way of adding in the arrow cursors updown leftright and also gives you controls for shift in space so just to kind of like go over a little bit more about what's going on here this is the scene the phase our scene in which everything is taking place and the scene has a number of convenience functions and factories factory methods that allow you to build in phaser primitives I guess quickly the idea is to get you going from zero to a fullblown game as like quickly and with this little boilerplate as possible while still being very extendable so this dot input keyboard that create cursor keys might seem like something you have to kind of like memorize at first but it's something that you're going to kind of start to into it a little bit more as you build more phaser games and that is 100% our plan for you is for you to build a bunch of phaser game so that it's really second nature that in this stuff is not meant to be memorized at all we've provided in the left hand corner if you expand that a bunch of links that you can go to documentation phaser also has a bunch of lab examples on how to bring this into your own game and there's also of Rex rainbows awesome documentation as well so don't feel obligated to memorize this this is often this itself is a very confusing javascript thing and so if you're not comfortable with that maybe it's also good to take a step back and brush up on some Java scripts absolutely I think our next step here is to start looking at these cursors and using them sounds good to me so we're gonna go into our update function here and we're going to check let's say if game state dot cursors dot left okay dot is down right and what that is going to see is whether or not we're pressing down the left arrow key on the keyboard and what we want that to do is to move oh I use player in that I'm gonna switch this over to player actually okay just to be consistent a little bit with the notes in case I don't mix myself up here I know I called it Cody there you know player works just as well so I'm going to fix that dot why and what I want to do since we're moving left that means the x value needs to go down so let's just let's change that to I guess first of all and then minus equals five let's say and that's another kind of magical number we'll see as the as we safe here and we move Cody a little bit to the left it I think it feels kind of nice I think if we if we set that to one instead Cody moves a little too slow it's not as fun and that's kind of like one of those real personal choice things that it comes down to is how fun does it feel to move Cody as a game developer that's kind of up to you so so I'm going to save this and we're gonna start building out the rest of these checks and so we want to do is create an else statement nice yeah I'm not gonna write eel if I usually write that so I'm gonna do that wrong though well we need yet parentheses 9x plus equals five and so now we've checked if we're moving left or if we're moving right so that's what this game state cursors that refers to the create cursor keys thing that we're objective we built up here and then left is one of the properties of that and then you can check is down on the left key or you can check is down on the right key and we're going to be using both of those so here we are moving left moving right excellent we're already well on our way to building up Frogger that's that's basically your core axis of motion actually we'll have to add the Y value changes to and we're gonna be a little bit different with how we move Cody in the y axis because in the Frogger game you jump a whole street kind of you move a little bit to the left into the right but you jump a whole Lane is the phrase that I've been using for this like you can think of the game as broken up into several rows and you jump a whole row up instead of just a little bit so what we want to do there is I'm gonna talk about just down a little bit I guess sure so for just down unlike what we've been using before for like gamestate cursors left is down we're just checking for a can we can continuously press left or right in the first conditional and Cody will continue to move left so we don't have to keep like lifting our finger up and tapping down again we can just hold it down and it will keep moving to the left or to the right right whereas in this method phaser input keyboard just down it's checking for the gamestate cursor up in this first case and every single tap is going to then trigger something you cannot just keep holding the up key down and expecting Cody to move you'll have to continuously tap yeah so you're not going to just kind of like sprint upwards you're going to go in very discreet motions so here's a question for you the viewer we are checking our up key events which direction do we want to move Kody in or what what should we do to the yvalue we're going to add or subtract 50/50 is the height of Kody so that Kody moves up a full lane but are we going to add or are we going to subtract the 50 in order to move Kody up and while you ponder that and respond to the chat I'm going to add the second step which is bringing Kody back down okay I already see some people chiming in do you subtracts nothing right I I think they might be it's very possible trying since you're moving towards the zero oh yeah we're not gonna use modulo I think we have an outlier wasn't even one of our choices what yeah it looks like everyone's kind of got it so minus equals 50 exactly that's correct that is a 100% what we want to do because we're moving closer to 0 from config dot height right and that's like this value that we've assigned Kody to up here configured on high minus 25 we can work that out at 600 minus 25 which is 575 I have a math degree but yeah so we're gonna subtract 50 and we're going to bring that's going to bring Cody up and for the opposite direction I'm gonna add 50 to bring Cody back down so we're gonna save this so my no they should add that as a separate if statement we joined that as like an elseif like yeah either you don't want to move back both up and down so I didn't chain the elsif from this first block here because you want to be able to move left or right as you move up or down in order to better evade the cars I want to call them we're gonna be using bugs as the example here is we could generally use yes the things that make Cody goes flat so here I'm just gonna say if this and we're going to see that Cody can move up and down that's really good unfortunately yeah we can talk about bounds but also for anyone who is coding along and is a little lost we've also included it in the folder on the top left hand corner serious stuff steps yeah the first step in cursors and you can copy and paste that and we'll stop along each point as well and if you get lost along the way feel free to copy and paste that in and that way you can just get started again with what you need to for the next steps yeah it's an excellent way if you are coming back to this and you want to see what the full the final game looks like you can come down to this last step and you can copy and paste that and then you can kind of erase that and readd it in the code as you build it yourself cool so back to game doc j/s and we are going to continue building on this so a bit of an issue here arises as we can just walk Cody completely off the screen and that's that's not going to be good we're we don't really want that you can move down you can move up on to the other side of the screen that's we want Cody to stay in the game that's where Cody belongs so we're going to add bounds to these if statements to make sure that Cody isn't going to step out of bounds after we move Cody further out and so if we when we check for the left is down we also want to check that game state dot player dot X is greater than 25 that means that Cody can't continue moving to the left after Cody as always as far to the left already as part of the lefthand let me just save that and show you what I mean by that when I move all the way to the left here that's it and that's that's where codecademy are now Cody Cody's xcoordinate here is 25 because that's the center of this sprite so so little I guess a little maybe confusing about how phaser assigns the Centers of your x and y coordinates there's ways to change it if that's something that you don't like using the origin method we go that into that way more in depth in the courses so we're just gonna kind of keep on moving here and add some more ways to keep Cody within this box and so the other the next way that we're going to do is game state dot player dot X is less than I don't know what I'm gonna do here is config dot width minus 25 so that's I mean that's a whole lot to say no a whole lot to say make sure that Cody doesn't move all the way to the right off the screen in that direction saving it and you can see that Cody does not go out of bounds that in that direction either and we're gonna add that also to our upanddown checks as well so we're going to do game states dot player not Cody Y and we want to make sure that that's more than 25 so that Cody doesn't move further up after the top and we're gonna also just keep on going I'm gonna trust that you trust me now to know that that's going to work and we want to make sure that the Y value is not is is less than it's that's a great suggestion it's minus 25 so we're using a lot of this oh yeah yeah the fun extension that's a really that is a fun one we're not gonna get into that you should think about it so you can see now and if you follow it along with the code that Cody we can't get Cody out of the box and that is exactly what we want he's trapped in there he is traps there's one trapped code Academy mascot sweet excellence like snake yeah yes yeah like sync oh yeah yeah that that's the real really old real deal the old brick phone I'm miserable yeah a pocketsized phone for a past generation at this point if you guys are coding along we're we've got enough to step to as well where it's to creating boundaries I think the name is called if you have any questions as always please ask in the chat but we're now gonna move on to the next step I guess so the next logical thing I think in this case is maybe making the roads yeah we need for Brodie to cross we need to kind of set the scene we need to give this a little bit more context Cody just moving around in a green square is fun enough I guess but a game doesn't just have to be playable there's got to be kind of win and lose conditions and it's got to put you in an environment really and give you circumstances to deal with and think about so the first way that we're going to start to indicate that is by adding in these roads so we're gonna start with we're gonna make two roads we're gonna name them road 1 and road there's an extendable way if you want to make I guess an unlimited number of roads you can make a roads game state dot roads but since we're gonna kind of make this small and within this little box here let's start with one or with just two roads and we'll talk a little bit maybe at the end if you time about how to make an infinite Frogger game I guess yeah you can never win that's we're gonna use this dot EDF tango which just creates a rectangle a road is kind of like a rectangle life is a highway config dot with divided by two you might recognize that from the how we added the cody sprite that just means centric on the screen we want it to be in the center of the screen and we're going to give it a yvalue of 150 and so we're breaking this up into like kind of 50 pixel grid Kody is 50 pixels by 50 pixels and Kody is moving up and down by 50 pixels so 150 is like three lanes down from the top let's say and so we're going to give it the whole sorry rectangle has five arguments that we're going to provide it the xcoordinate of the room rectangle the ycoordinate of the center of the rectangle the width and the height and then the color so that's all five so the first thing that we have here is the xcoordinate of the center of the rectangle which is the center of the game the next is the ycoordinate of the center of the rectangle which we're going to give 150 and that's another one of those values that you kind of play with and you think about and you have fun with as you design your own game the next thing that we're going to add is the width of the road and we want it to be as why does the game itself so config down with and the next is the height and we want each road to be four of these 50 pixel rows tall I guess so that's four times 50 which is 200 and I just give it this little gray by passing in this hex code 0x bbbbbb oh I love these it's a lot of bees it's six bees all together that's a hex code it's just a hexadecimal color code you can learn more about those online oh no oh no let's copy that and refresh I think it's I don't think it's our code I think it's just I see we've run into his command agent bit of an error I did not copy there's awesome there was also a great question from Diego asking what happens if we add in in like arguments that aren't integers and I in our chat I actually encourage you guys to play around with that and see what actually happens I only say that because I've done that numerous times as we've developed this course and found out for myself and that's how I learned but maybe we could also plug in a non integer value here and see what happens sure absolutely let's like if we do a string I don't know a string oh I thought you meant like a float oh oh yeah I haven't even thought about floats for this one to be honest I don't know the answer to the question of what happens if it's not an integer value so I'm gonna give it 225 here and we're gonna see I don't know if we would be actually be able to see if there's like a point 25 increase to the height that's not a very useful thing to do I guess Thanks I don't know that I would be able to tell it probably rounds but is it floor as a truncation I don't know not entirely sure on that one either I thought it was going off a string or like undefined before right if we give it like 200 I think that that is not gonna I don't think it's gonna like that ooh that's weird all the way I have no idea we're not gonna go into that probably no I think it's a really good question and I'll probably end up spending some time looking it up afterwards so I'll let you know yeah thanks cool what's next the next road let's add in two roads because we want Kody to have a storied adventure before code 1/3 so I'm just gonna copy and paste this first line and create road two and we want Row two to have the same xcoordinate but a different ycoordinate we're going to give it 450 and everything else the same so we're gonna have two roads here Kody start by crossing one road look at this I've also got a question about that from John John's coding along thank you yeah and it looks like Cody is going right underneath the road which is 100% not what we want right now so how do you think we might fix this it seems like it seems like it's just how like phasors reading our code or even JavaScript is being read because it's going from top down right so if we load the player before we load the roads the the roads will have this thing called like a zindex that makes it pop like closer to the front of the screen then Cody would be so I see that Tim's copied the code so you create Cody and we're pasting it underneath the road creation code yeah we're moving this this game state dot player creation I think that phaser automatically assigns the Z indexes to the objects as you create them and so since this one is the last one that gets created I think you can update it manually mmhm but it's maybe clear to not have to do that if you just say oh I'm gonna put everything on the page first and then have Cody you like walk over the road so if I save this and start running it like this you'll see Cody on top of the street awesome as intended cool what is next we're gonna start talking about enemies right that's what makes a game a game isn't it we were just crossing roads yeah my favorite step in any game development is making enemies because making enemies is something that I'm really good so if you're out there and you want to be my enemy actually that doesn't sound that's right let's not encourage that yeah let's keep let's see friends instead I make enough enemies as is here in the phaser game so what we're going to do is we're going to add a group groups groups yeah group objects so I'm gonna write in the code for this but our groups are basically like game objects that keep track of other game objects you can think of them as a collection of other sprites and we can use this group object to continuously make these kind of sprites so Sims written game state that entries so that's gonna be a property in our global variable this dot add group which is gonna allow us then use enemies add sprite to make enemies later cool yeah let's start let's let's maybe get to cooking up our make bug function make bugs so the way that we're going to be making these enemies is with a timed event thanks Laura I think we're also gonna be in create we should okay let's let's add this and create them so function I'm gonna give it another space their function make bug and what we're going to do is so in the classic Frogger game it seems like bugs or cars appear on like Road lanes right mmhmm and we've thought of the road or our lanes in in kind of 10 rows right yeah all together one two three four eight eight different radius yeah so we'll need to make enemies for every row and I think that's that's like a nice first step that we should do because then later on we can take these enemies and we can start moving it but it's it's a matter of like taking these problems breaking them down to smaller pieces and then iterating them so actually I think the first thing I'm going to do is just get a bug on the screen that sounds great yeah so we're gonna create and we're gonna give it a start X all right an x value of let me see let's start with the zero and then we're gonna give it a y value let's just kind of bring it down a little bit let's let's actually see if we can just get one on the screen first so and then we're gonna give it bug one which is the name of one of these bugs that we've got a point at the screen that we've loaded an image asset for and so let's start with that and let's just make a bug and call a meat bug and I'm ready to see if that works all right cool we have got a bug on the screen and we're gonna fill the screen with these bugs in due time but we're gonna talk first about how this bug is facing downwards which is not the direction we want the bug to be facing in we want to actually move it from left to right and from right to left so what a sprite has is a property called angle and what you can do is call a function on this break called set angle and if we set it to 90 that's going to turn the bug 90 degrees right I don't know how I district but the way that Kenny is saying it is the way that it gets turned in the direction of the clock so like that yes so that means that bugs set at a 90degree angle are going to be the ones that are moving from right to left and then bug set at you can pass either 270 and it'll turn it the other way or I mean you might prefer to do minus 90 it's the same thing so we're gonna start with 90 and we're gonna talk a little bit more about where we want to put these bugs as we create them so we kind of touched a little bit about on how there are different lanes right and so we want to kind of enter space these lanes so have one lane of bugs moving this way one lane of bugs moving the other way and continue to flip between the two of them and a way to do that is no my too glad to see they they can all see me succeeding here so let me think how do we want to move forward with the creation of these bugs yeah I think that's one of the big struggles of like game development or coding in general that it just seems like there's so many different solutions that we could do but while we were doing this one thing that we've thought of is like since we do have defined a defined height and Kody can only moved in and define up fashion like 50 pixels each time I get suppressed that we can make an array containing the numbers of like Lane multipliers that we didn't want mmhmm so we can make a set of different lanes so one two so like you'll notice that this is the at 25 by a 25 this is the last Lane so this would be 75 25 right here or 25 75 sorry but with a y with an x value of 25 will keep you on this side and a y value of 75 will put you here and if you keep adding 50 125 onto the next plane and so it's a multiplier of 50 that you add to 25 so the multiplier of 50 the starting what am I gonna say this first plane is number one yeah because we're gonna multiply one by 50 to get so that secondtolast lane or the second lane however you want to think of it from topic on the bottom and then Tim has actually filled in the rest of the lanes that we need to multiply by 50 to get the values in which we want the lanes the bugs to be on you'll notice that I skipped five and six here and that corresponds to this this safe patch here that doesn't correspond to a road and this next safe patch this is 5 and this is 6 and we're gonna be using these I think it's gonna be a little more understandable why we're making this array as we come around to like getting the bugs to be made generically what should I do see I think each lane it's gonna correspond to something and then we can go inside make bug and just create that function first before we make the event that continuously calls make bug ok yeah let's should we pass in lane as an argument first or should we how do our just hard code ok yeah yeah so we're gonna give it a lane of 1 right now and we're gonna start we're gonna see if we can build out this first lane so what do we want the Y value of every bug that turns onto this lane to be so I'm gonna make a every time this gets called with the lane we want to give it the Y value that corresponds to that lane and so we talked a little bit about how the lane is a multiplier config dot heights good to see you Diana happy birthday Diana it's always someone's birthday here at the click Adam II live stream config dot height what am i doing sorry I got lost we want to subtract from the bottom here it's just I guess it's a little bit easier for me I'm just gonna write this in and then I'm gonna talk a little bit about what the process was for for deciding on this so maybe if you've been listening to what we've been saying this makes a little bit of sense to you but here's here's how it like works out we take the height which is the bottom of the game and then we subtract enough to get the above to appear on the right lane that we expect it to and the amount that we subtract is 25 so that the bug is centered so config dot height minus 25 is gonna put it on the right on this bottom lane here and then we continue to subtract 50 times every Lane so if you're in the first Lane actually what you're going to do B is in this bottom most link here and if we continue to generate enemies at this start yvalue we're gonna continue to generate enemies on this first road on this first part of the first road cool so what do we want to do we also want to figure out what the start xvalue is so we're going to try to figure out or know let's start X because it's going to depend right because we depending on which direction it's going right we might want it to show up on the left side of the screen or the right side of the screen first so someone was talking about the modulo in chat earlier we are going to be using the modulus operator in order to determine whether our lane is even or not and that just means like if the lane is 1 or 3 or 5 we're gonna be moving it from right to left and if the lane is 2 or 4 or 6 we're gonna be moving it from left to right that's good and it's just an easy way to flip between values like that so what we're gonna do here is we're going to check if Lane percent 2 and that's the modular separate operator it says divide by 2 and give me the remainder and we're gonna check if that's triple equals to a zero say that yep cool and if it is we're gonna give it a start x value of the width we're gonna start it all the way on the right side and we're going to give it the angle we're gonna angle here so we're gonna set the angle and the x value in the same place because that's where that's where the two are going to be decided if it's if it's moving from right to left you want to set the x value to be as far right as possible and set the angle so that it's facing the left and if it's moving the other way then you want to set the start X to be zero and the angle so that it's facing to the right and so for the angle we want 90 here and then in our else bracket we want or else sweet we want the start x2 value to be zero and we want the angle to be minus 90 so what we can do here is change this angle that we have hardcoded to angle we can change this x value that we have hardcoded to start X and we had can change this to start Y so let's see what happens when we make a bug now we've got a bug right on the bottom here moving from left to right well that's great or it's not moving it's not moving just yet it's not moving that's correct but that's expected here at Cook County me we can say one thing for certain and it's that that this bug is not moving so do you think I should flush out the mick bug function or maybe we should talk about the event first or we should start moving the bug shouldn't we I think we could jump to moving the bug I think that'd be more interesting and we can yeah fill in the details later yeah so while we're doing that it's just like like we mentioned before there's a lot of different ways to maybe handle this and this is one way that we found it to be easier charlie great question instead of negative 90 can it be 270 and we kind of touch upon that before it's definitely possible you can use that as well yeah we have the chat asking to move the bug so I think move the bug we have to abide yeah we must move the bug Thank You Mauricio I'll see you in Miami Wow okay so let's move the bug in our update function right that's where we are Wow where are we we're in our update function here and we're past all of these cursor movement operations that we have defines and we're gonna add in a for loop so gamestate dot enemies dot get children and this gets all of the enemies that have been added to the enemies group right and we're going to give it a for each that's a little JavaScript JavaScript fun for you little iterator yeah and here's a little some some function syntax it's kind of funny we don't really often use this arrow syntax in our phaser lessons we try to keep it as accessible as possible and some people might not be familiar with it but researching and knowing some of these latest methods might really be helpful for learning the program and phaser or JavaScript moving forward anyway it's 220 yeah we are just having entirely too much fun here we're gonna start building out some more game real quick yeah angle phasers Oh Patrick I don't speed through the game but I do wanna get the bugs moving in collision happening yeah yeah I think that's the baseline address sorry for taking a little bit more time than maybe but we do appreciate you guys sticking around and listening and asking questions in the chat this really makes it fun oh should we talk about getting the bug a speed or should we just give them all the same here here in our in our bug constructor we can also just give the bug a speed yeah and this is not a phaser builtin at all this is just a number that we can assign to the bug itself so that we can use it and let's give it a speed of remove Cody at 5 what so that's out front oh no no oh we want to put it out around the bugs I think in the earlier stages it should be like slightly easier all right we'll start with 4 if you want to amp up the difficulty on your own Frogger game you'll know that you can change this speed to be much higher right definitely something that you want to play around with again personal preference or how fun you want to make it seen in the steps we cover giving each of these lanes a different speed I'm not sure that we'll be able to cover that today so we're gonna go into so here you've checked here we check if the bug angle is ninety we're gonna check if the bug angle is negative 90 and we're gonna use that to determine which direction the bug is facing because that is literally which direction the bug is facing right if we want to increase or decrease that x value right so if the bug is facing to the left what do we want to do to the x value do we want to subtract or do we want to add to it so that was a question for you guys in chat I know that we already kind of asked this question and you were all very good at it so but we did that for them why is that yes and we're doing it for the X so and they're different we're covering both all bases subtract yeah way to go didn't Asia and bran you got it yeah one who's that add to the x value oh definitely something that ah it's done it's okay I probably would have said as well it's a 50/50 shot and for me honestly it's something that I play around with things like if this doesn't work let me try it again we want to add for this bug in particular but if the bug is facing to the left which it is when we've turned it 90 degrees yeah yeah we want to subtract so bug X minus 2 equals and we're giving it bugged at speed and then this one plus equals bug got speed and let's move the bug shall we just let's move the bug are we gonna move the bug I hope it does Wow all right that is the first bug moving across the screen fantastic we're almost done really or at least with the basics whoo we're almost done with the very basics of this game not nearly near as far into the game as we kind of expected before and we were kind of ambitious on this but I think that's a great first step right we have the bug we have the bug moving and do you want look in this next step do you wanna I'm gonna add the event events I would really desperately want to add the event let's do that yeah so in order to continue creating bugs in our code something else that I'm excellent at doing we want to add in a timed event here at code Academy we are nothing if not professionals at adding bugs to code hopefully you are too because that means that you're a programmer that's how you figure it out if you added a bug to your own code you are coding congratulations yeah so what we want to do is to this dot events write this not time that Advent it's gonna allow us to create a like in game loop that calls a function depending on what we depending on the properties that we include in it so in this case we're gonna use loop being true but if you want it the event to only happen let's say 50 times you could use another property called repeat and use 50 as the property instead but this case specifically let's see what Tim is yeah I'm gonna give it a little slightly random delay so every time that this event gets called it could be and I'm gonna give it a start time I mean good doesn't don't have to be right like that's that's saying like at the minimum just in case there is no delay at all right add a little bit of delay yeah yeah we want to we want to make sure that it's that there is some amount of delay between each of the bugs that we add so that we'll be able to get Cody successfully right through so the reason Tim added the constant right there on 1800 is because the delay is determining how long it is between when the first function is called and the next function is being called so we want make bug we don't want it have to have let's say math dot random returns zero and it just constantly creates a bug and we can't even get that through stream of bugs so we want to have it wait at least a thousand eight hundred milliseconds or 1.8 seconds and we've played around with these values a little bit beforehand so that we're not just crazy guessing here cool excellent good to see you man depends if you like Cody Charlie come on team yeah I do want some coffee so I've added this callback scope to the event and that means that we can access and we'll see as we build this like loop a little bit more instead of hardcoding the lane here we can give a lane that's been provided to the code so what this is hopefully gonna do is continue to make bugs that move to the right well I made a bug no I think it's just the delay out of the delays in the delay is a little bit long yeah but that's good because we want to know well we'll figure out how to I think so I do this it's a matter of like allowing all right well what I'm gonna also do here and we're gonna move a little bit through is for I guess lane of lanes that's what I'm gonna do for let lane of lanes okay and I'm gonna use I'm gonna loop over this event so that we can create can I successfully do this yes I can do it okay if you hit well on a Mac its command and the right bracket you can indent the code and I always somehow miss that I also learned from a coach lit before that we can also tab it oh yeah yeah you can just tab comes down and highlight and tab so here we're looping over this and we're gonna create a timed event for each of these lanes that we've defined up here and what that's going to do is create bugs in each of the different like that Lane callback scope like the okay all right works we got a oh now we're talking that's correct we have a lot of bugs going on here in fact I'm gonna change the color of this bug in the steps you can go over we kind of automate making each lane a different kind of bug but the orange one has given me the willies the willies so let's go with the green one which is a little bit nicer looking I think Oh Jennifer teacher you're very welcome thank you for tuning in seriously we appreciate it so what are we doing next we're gonna add the collision aren't we yeah we got those bugs moving but Cody's just barreling right the room yeah you have to be able to lose a game you know in order to make winning really truly mean anything so let's talk about how we're going to get Cody to Louise yeah so I guess in taking a step back and talking about like collision detection as a whole and game development it's a matter of like when two objects like go collide for lack of a better word come into contact with each other right so to do that we we need to know where they are in a game like what's their bounds what's what's like that their outline I guess um where's the enemy sprite outline mmhmm and when those two overlap a little bit or touch each other that's when it's like no you can't have that happen it's game over for you right and so we loop over each of the bugs here in our update we wrote this a little bit earlier to give to move the bugs around what we can also do here in this for each is check if the bug and Cody overlap and we're going to do that with a little geometry and so what we're gonna do is we're gonna check if phaser dot and geom intersects dot rectangles a rectangle so that's going to check whether or not the rectangle of Cody and that's that's the whole sprite that's we have to take one step back and we have to grab Cody as the rectangle first to like right we have to use the player rectangle yeah I see oh excuse me yes so we want to actually grab the player rectangle first very kind words I don't have to use math cool so we're going to you get the rectangle that corresponds to Cody here with player erect and we're gonna sign that to a part of our game state so that we can access it later oh we're gonna sorry we're gonna grab that from our game State got player that corresponds to Cody there get bounced that's the that's the method that we're going to use in order to get the bounds of the player yeah it's a little I like it when you can describe what something is doing by reading the the sequence here we want to look at our game state and get the player and get the bounce from that make sense and that's quite nice one of the things that like phaser gives you right out the box which if we had to do would maybe have to find the x coordinate the y coordinate where the top left top right bottom left bottom right coordinates and figure out all those math but phaser just gives us get bounds and we get a rectangle from that yeah it's called an AABB and absolutely around bounding box it's it is a fun little piece of code to have to write yourself it's so easy to get wrong and I'm speaking from experience but I'll take your word for it yeah I don't recommend it unless you want to in which case go for it it is it's always fun to figure out new things so we're gonna use this player rectangle and check if it intersects with what each of these different bugs here and we're gonna do that with bug get bounce the reason why we call player get bounce outside of the for loop is so that we don't keep on calling it for each one of our bugs we don't need that we know where the player is the player is in the same place but each of the bugs is in a different place so that's why we have to call that or we call that for but we call the get down here cool and if this whole thing is true this somewhat monstrous but hopefully selfexplanatory series of statements is true we're going to add some text that says game over that's the first thing that we're gonna do and then we're going to probably I would say pause the physics is probably what we should do is I'm not keeping track of the events or anything so I can't destroy those right but if we pause the physics we'll get the bugs to stop moving but the thing is here we never included physics caffeine never included so Tim is actually mentioning another method that we can use had me included physics in our game right but we didn't and so the way that we can manage this though is like signing when like a game state is active like when it's being played and then in our update we can check your game state is active or or playable and if it's not playable then we don't do any of this stuff cool I'm going to first yeah I'm gonna add in the game over text and then I guess do you want to talk a little bit more about how the game state is active might interact with I want to talk a little bit about how the the step by step code will look like to someone who's following along with the project's not as we've done it here today but as how how we've kind of laid it out sure yeah um so game state not active so that's that's gonna be another property that we append to our game state global variable and that at the beginning we're gonna set to true active is true then we want the game to be playable and to do that we can add it in our in our create function just to assign it true first and to check if it's still true throughout in our update function that we can wrap like our controls around that fact of checking if game state active is true and if it is we should be able to control the player we should have collision detection we should have all that good jazz but if it's ever false then in our update we'll see that it's false and we won't be able to control Cody anymore and our bugs will stop moving and eventually we might even want to like stop the event that is creating our bucks all right cool I'm just gonna cover a little bit about all the stuff that I wrote which is pretty much exactly what you just described so I added this text that says game over when you intersect and then I added this if statement around all of our update function that just checks if game state active is true and the last thing that I'm going to do here is inside this intersection I'm going to set game state active game state that active to false so this means after we hit one of our bugs where the bugs are going to stop moving Cody's not gonna stop moving and we're gonna see the words game over so hopefully well I'm gonna just refresh real fast oh no yeah yes there we go Oh No well I think you just have to save again or paste over talk about adding bugs to code what oh yeah yeah yeah so here's something that you can totally do is inspect the element here and it's a little busy because there's a lot of stuff going on but rectangle to rectangle is what it doesn't understand so okay let's come down to this part here and I think it's because I spelled intersects wrong that's what it's finding undefined because so in stir it in inter insects was what was on the brand there but if we update that it just says game over this issue before red sea layer right yes very interesting so you know since we can use the console we can just start debugging by a console logging step again set the games games date for which no that's what it's false by default oh did I know I get a set it active in creates and so it drops into this if statement right and then it gets here and what does it do so I check the console and oh okay our bug does not have Lake bounds and for some reason that true this very interesting see if I understand what's going on here should I be but it should be a singing are the parameter in our callback function very curious is it intersects with is intersex I believe it is because this is returning truth somehow but bug get bounce is giving us this not a number laden object hmm and all of that together is weaken this so this is the fun part welcome it's got to be in this callback because it's for each of the different bugs yeah but curious if you catch what's going on please fill us in it's a fun way to be finishing off our our livestream here so let's see are we inside that scope as well yeah I think it's possible that we have like a bug that doesn't really it just hasn't been there yet I don't know because we when we create them we give them x and y values they don't get added before they are assigned those things you are certainly not the one who struggles to figure out your coding mistakes Vanessa definitely not your and I would love to call myself good company I'll add the semicolon though I want I want you to feel I'm very bad at adding semicolons or at least it's returning truthy yes it is returning something positive here I don't know I'm not sure it's dumped by this as well anyone play around yeah plenty of wrecked his player Rex looks good the bug rectangle is what's coming back all all messed out so maybe I'm saying get down wrong no get bounds looks to be the same in both situations yeah very very curious yeah yeah you just start console.log and stuff for and Nan so this bug does not have a yvalue why doesn't this book have a yvalue do I never define start deadline I do start why am i passing this correctly yes ma'am one codeine multiple bugs that that could be Darren but we we're making this Collider happen for every single bug so that it checks when that bug collides with code it's funny it's the first bug to you can tell because every time you refresh the page it only prints out one of these values so the first time that it tries to do one of these rectangles or rectangle comparisons it is blowing up which is a real shame because I wanted to play Frogger yeah copy all yeah yep let's just try to remove that for now like if we the lanes are working correctly there is a wide position for it so it's very strange it's very very curious if you're catching on something here please let us know we didn't said about direct I think we do right there where it's line 73 it's constant bug rekt I know but it's it would be fine with the constant we can try lat I can get rid of it and put it back before it's love kept balance because I'm actually this doesn't used any or this is used okay so we referring to the whole screen as the collision this is funny is road one a rectangle which s is which when we were at Road one of rectangles a rectangle yeah we can check a road one very good idea we don't add any text but we do add a bug that does not have yeah there's there's one with an an y value it's interesting but what we should do is probably I'm gonna switch this back I have an idea okay I think it's probably where we're creating our bugs it must be yeah what I'm what I'm going to do here just to get on with it sort of it start X and start Y I'm just going to make sure that these two values exist we create before we create the bug and that's that should hopefully fix our issue there we go okay so our start Y was getting messed up when in the odd case but if we do this now awesome cool it had to do with this offending piece of line of code I suppose which looks just fine to me yeah I think we should if anything lets console.log what start y is and yeah here I'm gonna use this correctly I'm gonna give I'm just gonna so I'm passing a couple of things to console.log and I'm going to stop console lugging the other thing this so that all we see is this one which will give us the start why and then the different components that we have inside this calculation here sweets could only run this oh because you have a common there yes do you love to use commas I guess it is really fitting that our game is all about bugs and making bugs it truly is so yeah here we are nan 600 I think I know what happened Oh enlighten us Tim config dot height is defined later on down on the file and so we use it kind of here just possibly before the phaser code realizes that it's been defined yeah and that's that's a bug I see in this case then let's just turn config that height into 700 yep no yeah let's do that right here we're going to change this to 700 that's the that's the value that doesn't work I think actually it was 600 the height that would mess things up but we're still getting a small issue here with the odd yvalue is not working out right I'm very curious I don't know what to say and it's always the start y value that it's returning yeah I'm actually kind of confused because I don't think that it's it's not just the config dot height then if we're still getting this issue no did I define lanes correctly looks right to me oh yeah let's not lean and we iterate over lane change the 270 to a minus 90 that's actually probably a good idea oh no that is a minus 90 can we try it because I think in here our lane called can we see what lien what what was being console.log fourlane sure there yeah we'll just go just a lot lane first oh okay yeah we're getting stuff for both odd and even lanes so it's very interesting that only the bugs moving from the right to the left appearing maybe it had to do with this no that looks right thanks maybe that's what he meant by this nope it always starts off like that just undefined very weird that's strange but I think that we should probably be wrapping up the livestream yeah thank you all for spending all of this time with us really I really appreciate you taking the time out of your day to try and develop a little bit of Frogger turns out the wheel bugs was the friends we made along the way classic yeah and thanks for being so attentive and really asking questions and helping us debug this if you do want to see our final version of what Frogger would look like in our steps finishing touches we actually do have the code so to make a more functional Frogger game and I would love to see that more in action if you had been coding along and don't want to overwrite your code next steps would be like thinking about what the wind condition would be thinking about how to have a set or remove the event that's creating the bugs maybe thinking about how to add a live a life system like multiple lives many things that you can do with this game and that we haven't even touched upon right spend the last two min once right please visit the feedback forum and let us know if you enjoyed this or if you didn't enjoy this what we could be doing better what we could be doing much worse I hope that you enjoyed learning a little bit of phaser sorry about the technical issues programming especially in a live setting is fraught a little bit you know things happen stuff gets typo'd that you miss somehow isn't that a lot like life yeah we're gonna take a look back on this and see what we could have done to fix it but I think yeah the code is there if you want to play around with it and again just much appreciate it much appreciate you guys chiming in joining us for this lengthy lunch cool yeah I'm gonna shut the stream off
