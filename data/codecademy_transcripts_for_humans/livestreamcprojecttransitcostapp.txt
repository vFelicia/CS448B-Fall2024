With timestamps:

00:00 - great hey guys
00:03 - can everyone hear us you type something
00:11 - in the chat and let us know if you can
00:14 - hear us or not
00:27 - hello hello hello test test test
00:30 - Mic Check thanks Alexander alright so
00:38 - we're gonna give it just a second before
00:40 - we really get started in the meantime
00:43 - you're welcome to type in the chat where
00:46 - you are joining us from and just to get
00:54 - it started we're based in New York City
00:56 - so Atlanta Courtney hello hello Denver
01:01 - Denver
01:13 - Windsor Colorado Romania New Jersey
01:16 - Huntington Beach no worries you are
01:20 - welcome to just listen
01:22 - C++ nice we're hoping some of you guys
01:26 - have some C++ experience and of course
01:35 - we welcome new learners at any time
01:47 - hey Dom Luis that's a lease that's
01:55 - really good question you can watch on
01:57 - youtube if you want to chat and you're
02:00 - welcome to pull up the learning
02:05 - environment if you want to code along
02:06 - with us there's a link in YouTube in the
02:13 - description to code along with us if
02:16 - you'd like to all right so should we get
02:23 - started yeah hello everybody my name is
02:27 - sunny I'm a curriculum developer here at
02:29 - code Academy and I'm Marielle I'm also a
02:31 - curtain developer here at code Academy
02:33 - and we have built out the C++ course
02:38 - right so today we have two big
02:40 - announcements so we launched where I C++
02:43 - and December and over a hundred and
02:46 - fifty five thousand people have started
02:48 - in the courts which is mind-boggling to
02:50 - me
02:50 - yeah and today the second batch of the
02:54 - sequence most courses are out so we have
02:57 - a new module on vectors modules five and
03:00 - also module six on functions yeah so
03:03 - we're super super excited about this
03:05 - release and then we have another big
03:08 - announcement
03:09 - pretty crazy there's a first time we're
03:12 - ever gonna do first time we have ever
03:14 - done this we're doing this C++ community
03:17 - challenge and this is for pro users so
03:20 - if you are a pro user you're welcome to
03:22 - join if you're not a pro user you can
03:25 - learn a little bit about this and decide
03:27 - if you want to join pro and then join
03:29 - there's something super cool so you when
03:32 - you're on code Academy this is a time
03:33 - you actually don't get to collaborate
03:35 - with other learners so this is a great
03:36 - opportunity for you to find a code buddy
03:39 - to collaborate decide on a project build
03:42 - this project and show this case show off
03:44 - this project to the world and there's
03:46 - also prizes involved yep so you can win
03:48 - a code Academy hoodie and you can also
03:52 - win
03:52 - and Arduino Uno right which are pretty
03:55 - sweet prizes you can see the hoodie on
03:57 - sunny right now I have my own at my desk
04:00 - and you can actually build the project
04:04 - on anything that you want to so it's a
04:08 - little open-ended in that sense but
04:10 - there are specific criteria that we're
04:14 - gonna be judging on right so this will
04:15 - and this this will last till end of
04:17 - March and there are just three easy
04:19 - steps if you're purloiner so join this
04:21 - code Cammy lifelong learner slack
04:23 - channel it's a basically a workspace
04:25 - where you can interact with other
04:26 - learners so let's just show case so this
04:29 - is the slack Channel and you can see
04:32 - talk about anything Co related not Co
04:34 - related with your fellow learners only
04:36 - just gotten announced but we already
04:38 - have some partnering getting set up so
04:41 - pretty exciting okay so first first step
04:45 - is join that slack channel join the cpp
04:47 - channel inside of that and then SEP to
04:49 - find a CO buddy to sign on a project
04:51 - build this project together and then
04:53 - step three used to submit a link to your
04:56 - github repository by March 31st and if
05:01 - you're in this lock channel you'll end
05:03 - up getting a place to submit to so don't
05:06 - worry about that right now um and we
05:10 - have a bunch of rules in place we want
05:14 - to make sure that you're using vectors
05:16 - and functions those are pretty important
05:19 - steps to take especially considering we
05:21 - just released some new course material
05:25 - on vectors and functions and we really
05:28 - really want to see collaboration this is
05:30 - so important to us and this is the first
05:32 - time that we're actually getting a
05:34 - chance to bring collaboration to the
05:37 - code Academy experience oh yeah oh yeah
05:40 - and the originality readability that's
05:42 - something we really care about and the
05:44 - winners will be announced the first week
05:46 - of April there are a couple of
05:48 - additional resources on the bottom that
05:50 - you can check out yeah we're very
05:54 - excited about this C++ community
05:56 - challenge
05:59 - so again if you're just joining us if
06:01 - you're on YouTube and you want to code
06:03 - along with us you can in the code
06:06 - ketamine learning environment you can
06:07 - click on the link in the description and
06:09 - if you're in the learning environment
06:11 - and you want to open up YouTube to
06:13 - fullscreen you can just click through on
06:15 - the YouTube video in the learning
06:16 - environment so Sonny and I actually had
06:22 - this idea for a project that we want to
06:25 - build as a demonstration of C++
06:28 - Community Challenge project right so
06:30 - this is basically the kickoff project
06:31 - we're basically showing you
06:32 - demonstrating exactly what we would do
06:35 - if we were what we are aware right yeah
06:37 - absolutely and we are still winners
06:39 - we're always learning sucess all right
06:43 - so we're gonna hopefully create a New
06:51 - York City MetroCard calculator so there
06:54 - was of you not familiar when it's New
06:56 - York you may not know about our public
06:59 - transit system but for us it's an
07:01 - everyday thing right it's something that
07:03 - we're very much aware of we commute to
07:06 - work using it and our systems name is
07:09 - the MTA sunny you can tell yeah so even
07:14 - I'm actually out of from out of state so
07:15 - when I first came to New York there are
07:17 - a couple different price points for
07:20 - MetroCard Metro and there's the single
07:23 - card a single fare card paper right
07:25 - there's also the unlimited card okay and
07:28 - one problem that had is which one is the
07:30 - best with me which one had cheapest for
07:32 - me so we want to build a program for a
07:35 - user to decide which of these are the
07:39 - best yeah absolutely
07:42 - um so to do that we're gonna take a look
07:46 - at a few different MTA MetroCard fare
07:50 - options so I'm just gonna bring these up
07:52 - so MTA it's just my way
07:58 - ji-ae fares and go so we'll go into
08:09 - MetroCard and fares at a glance whoa
08:15 - so there's a lot of information it's a
08:18 - little overwhelming we're not gonna
08:19 - delve into all of this and this really
08:21 - speaks to our projects scope we don't
08:23 - want to we don't want to deal with
08:24 - reduced fare right now we don't want to
08:26 - deal with bus fare right now really only
08:29 - gonna focus on a few options right we
08:32 - don't want to over complicate things
08:33 - especially for the first version of our
08:35 - program exactly we can always add new
08:37 - features later cool
08:38 - so let's actually write these down just
08:40 - in case okay so which ones do you think
08:42 - we should cover in this program um so I
08:44 - think that we should cover the subway
08:46 - local bus and select bus fare um for a
08:50 - single ride is 275 G five cool all right
08:54 - um also known as paper ride paper right
08:57 - then yeah and then we also have two
09:02 - unlimited options so there's the
09:04 - unlimited 30 day and the unlimited 7 day
09:09 - cool - unlimited mm-hmm Tuesday so 32
09:14 - dollars for the 7 day and wanted 21
09:17 - dollars for the 30 day yep so these are
09:20 - really the basic options that you're
09:22 - gonna be using if you're using the MTA
09:23 - more than once over a period of 30 days
09:25 - yes
09:26 - cool awesome um so I think before we get
09:32 - into our program okay
09:35 - how about let's take a quick break and
09:37 - check out questions and the chat cool be
09:40 - sure that any questions about the C++
09:43 - can be a challenge about anything relate
09:45 - to this live stream Academy please let
09:46 - us know so by it says will it be a GUI
09:51 - application so in this particular
09:53 - iteration we're not getting into GUI I
09:56 - know that sunny really really wants us
10:00 - I'm covering that I think for this one
10:02 - terminal would work perfectly fine yeah
10:04 - we're just gonna use a terminal program
10:06 - um any other questions before we move
10:10 - into actually building this app dr.
10:14 - Nanjo I miss NYC transit Oh
10:16 - [Music]
10:20 - how far can this smell that's a great
10:22 - question so we just so we did it first
10:24 - for modulus of learn C++ in December and
10:27 - now we're leasing module 5 and module 6
10:29 - vectors and functions we actually have
10:30 - more in store for you in the next two to
10:33 - three months where we'll be covering
10:35 - loopy
10:36 - so object-oriented programming which
10:38 - includes building C++ classes and then
10:41 - also pointers which is a fundamental
10:44 - topic in C or C++ so after that Ashley
10:49 - think you have the power to build almost
10:51 - anything you want of course you know you
10:53 - need to learn more frameworks and things
10:55 - like that
10:55 - however we are thinking about what we
10:58 - can do pointers are confusing right yeah
11:01 - what we can do - there are a lot of
11:04 - little things that we're considering
11:05 - including hardware including creative
11:07 - coding including gaming maybe yeah
11:13 - so Tammy has a question I'm new to C++
11:16 - and I don't know anything yet about the
11:18 - programming language how can you help so
11:20 - we actually that's a really great
11:22 - question we have learn C++ content up
11:25 - for free on code Khadem e so I would
11:28 - definitely recommend that you check out
11:30 - the beginning of that course starting
11:32 - with hello world in order to get some
11:35 - sense of the way that C++ works um
11:38 - which doesn't isn't to say that you're
11:40 - not ready to watch this live stream I
11:42 - definitely encourage complete newbies to
11:45 - go through this process with us because
11:48 - I think that it helps gain a fundamental
11:50 - understanding of just programming in
11:53 - general and what the process is like
11:54 - especially when you're a pair
11:55 - programming right and I think the goal
11:57 - of this course when we're building this
11:59 - is to build the best entry point into
12:01 - programming using C++ so Alexander is
12:06 - asking would you need to know more about
12:08 - C++ than what is in your course to get
12:10 - started coding with
12:12 - professionally I would say it depends in
12:15 - what capacity I mean you know you can
12:18 - always get started in some professional
12:21 - capacity at almost any level but to be
12:24 - really great at it and to really bring
12:27 - something to the table the more
12:29 - knowledge you have the better right and
12:31 - suppose this is almost one of the
12:32 - biggest languages that we have today
12:34 - right it's just so vast but I still feel
12:38 - like the Liceo this place is a great
12:39 - starting point and after you finished
12:40 - the course you should be very confident
12:42 - and very have a very solid foundation
12:44 - into what's next yeah and definitely
12:46 - have the capacity to pick up things on
12:49 - the fly
12:49 - following that do you offer real
12:53 - classroom learning or just online
12:55 - I just online right now it's just all
12:58 - right great questions guys cool all
13:02 - right fantastic we're gonna jump into
13:05 - our setup all right should I take this
13:09 - one or should we do you want to start no
13:11 - that's alright so we're because we're
13:14 - pair programming we're gonna be
13:15 - switching off who's actually typing and
13:18 - who's speaking and we're gonna speak
13:22 - back and forth quite a bit yeah okay so
13:24 - let's get started before we start
13:27 - building this program of course we need
13:29 - to do some setting up so as you remember
13:32 - from the hollow or a lesson from like
13:33 - the previous strings we always have to
13:35 - include my break collar iostream input
13:38 - output stream okay
13:40 - that allows us to input an output to the
13:43 - terminal mm-hmm it also includes a few
13:45 - other C++ libraries which are pretty
13:48 - important and I'm going to start off
13:51 - with a main function mm-hmm
13:53 - which is in every single C++ program
13:57 - okay comfortable with it and we have a
14:00 - opening curly bracket and a closing
14:01 - quarterback and this is where our code
14:03 - will live right here okay so to start
14:06 - this off I feel like we're when we're
14:08 - writing programs were almost playing two
14:09 - roles here and we're playing the roles
14:11 - of the user and we're also playing the
14:15 - role of the programmer right so that's
14:19 - like how usually how I think when I
14:20 - start building my program so yeah what
14:22 - do we need to start this program off um
14:25 - I'd really like to see a greeting to
14:27 - start off I think it's really nice when
14:29 - you get some kind of greeting a little
14:32 - bit of information about what the
14:34 - program is about so that you're not just
14:36 - inputting something without
14:37 - understanding what you're inputting
14:39 - exactly so let's stand your C out
14:41 - console output on to the terminal and
14:44 - let's print out welcome to what may be
14:48 - the MTA best fare calculator best there
14:57 - okay let's do a new line all right
15:06 - awesome
15:07 - and then I mean let's take a step back
15:10 - and think what do we want this program
15:13 - to write you write what is this
15:15 - difference three price points but what
15:17 - should we ask the user yeah exactly so
15:19 - what kind of information so something I
15:23 - think about a lot as I'm trying to
15:25 - figure out which metric hard to get is
15:27 - how long I'm gonna need it for you know
15:30 - like I'm not gonna buy a 30 day if I'm
15:33 - only here for three days right so a
15:34 - number of days yeah so the number of
15:36 - days is kind of important and then what
15:39 - do you think also so we have a number of
15:42 - days which also get a number of rides
15:46 - yes so often you're using the card that
15:49 - makes a lot of sense
15:50 - okay so let's actually so we need two
15:51 - variables here for to store these two
15:52 - from so let's do int right because those
15:55 - two are probably gonna be integers so
15:57 - int do just call it days and days and
16:02 - right it's yes let's do that
16:04 - okay so we're declaring two variables
16:05 - two integer variables one called days
16:07 - and what call rights
16:07 - mmm-hmm okay so now we need to ask the
16:10 - user for these two values yeah first we
16:12 - gotta give them a problem right see out
16:15 - so I how many days would you be using
16:19 - your MetroCard how many days what's the
16:21 - question do you will you be
16:25 - using your MetroCard cool so another new
16:30 - line mm-hmm semicolon to close a
16:32 - statement and then we can see in right
16:35 - so redo the input from the users keep
16:37 - yeah exactly
16:38 - and we're gonna store it in two days and
16:42 - let's do this one more time to get the
16:46 - ride so standard this is a little shrine
16:50 - how many times how many times do you
16:54 - expect to use you expect to use the
16:58 - subway cool the same way let's do rides
17:11 - cool let's save it and let's compile and
17:13 - execute it just in case so do compile g
17:15 - + + as a command and then flower name
17:17 - the file name here is challenge dot cpp
17:20 - enter CP successfully so now let's
17:29 - execute it dot slash is executing come
17:32 - in and remember after you compile it
17:33 - creates a new executable file call it
17:36 - dot at so now dot slash dot out enter
17:40 - welcome to the MTA best fare calculate
17:43 - how many days will you be using your
17:44 - MetroCard
17:45 - let's do tag hit enter we're pretending
17:47 - to be the user right now huh how many
17:48 - times do you expect to use the subway
17:50 - let's do 20 yeah all right it worked as
17:55 - we expected so I think before we move on
17:58 - we should take a quick break and check
18:00 - out the chat because it looks like when
18:01 - you have some questions piling in here
18:04 - make this alright yes created to save
18:11 - you money on the subway
18:13 - what is the STD do B for C hours that's
18:16 - a request so it's a standard library
18:17 - stands for standard library and because
18:22 - we're not using something called
18:24 - the namespace STD we just have to
18:26 - include the library before the C out
18:29 - keyword okay so it's a CD : :
18:33 - so yeah it's biggest thing see how as a
18:35 - function of standard library why the in
18:39 - tat the beginning of the coding was so
18:41 - good question yeah are you Timmy I don't
18:44 - know if you're talking about the inch in
18:46 - front of main or the int in front of
18:48 - days the engine in front of main has to
18:50 - do with what the function is returning
18:51 - it's gonna return zero um
18:54 - the int in front of days arrives is
18:58 - indicating that days and rides are
19:00 - variables that will be storing integers
19:02 - it's a data type mm-hmm why not define
19:09 - new space under iostream right I mean
19:12 - that's a tough question for I mean it's
19:14 - a very controversial we just didn't want
19:17 - to over complicate things
19:20 - well also it's it's a convention right
19:22 - so you know if if you're going to be
19:25 - scaling your programs ever it's
19:26 - generally good to not be using namespace
19:30 - right so Tammy just asked the Hinton
19:33 - from Daiso just like Mary L said
19:35 - so we're declaring two variables here so
19:37 - you could also do this we did this in
19:38 - what a single line but you can also do
19:40 - it this way yeah in today's declare
19:42 - variable plug days and enterprise
19:44 - declare another variable called rides
19:46 - awesome and here on line 11 in line 14
19:50 - we're actually storing the user's input
19:53 - right here into these two variables so
19:58 - now at the end of the program days will
20:00 - actually have a value of 10 and rights
20:03 - will actually have a value of 20 so this
20:11 - is a great question so what's different
20:12 - between left angle bracket angle
20:15 - brackets into writing arrests this is
20:17 - just like the convention the stander was
20:18 - used so after C out is towards the left
20:21 - after C it is towards the right so as
20:24 - you notice right here my 8 to the left
20:28 - after C in good 911 goes
20:32 - right and one last question I see you
20:35 - know how how can you tell me how long I
20:38 - should study to be actually good at the
20:40 - computer um that's that's a matter of
20:44 - you know it's a great question actually
20:46 - yeah yeah so won't the reason why I
20:50 - actually got into Tech study computer
20:53 - science back is nice just kind of fell
20:55 - in love with it's almost because it's
20:58 - one of those fields that doesn't matter
21:00 - how far you go and how deep how much you
21:03 - study there's almost always another
21:06 - dimension world of things to learn
21:11 - that's like why I really enjoy this
21:12 - field even we did an interview with
21:15 - Microsoft a very well-known figure in
21:17 - the c+ community named assignment
21:19 - Brandon and just do that and we did this
21:22 - interview with him yeah a week ago and
21:25 - just talking to them just made me
21:28 - realize how much I still don't know
21:29 - about C++ very inspiring but yeah I
21:32 - think to be comfortable to be confident
21:34 - and oh sorry and to be confident in
21:41 - programming I will say a couple to two
21:43 - to three years will be I have a really
21:45 - strong foundation yeah generally
21:48 - speaking it's not about a speed - I feel
21:50 - like that's when some people a lot of
21:51 - people who started like focus a lot like
21:53 - how many like what's the month I can get
21:55 - this master see yeah XML CSS or
21:58 - JavaScript it's more you know take the
21:59 - time you know retake courses it's a
22:01 - comfortable way right it's about doing
22:03 - similar to playing guitar or learning a
22:05 - new language like French or Chinese the
22:08 - more you use it the more comfortable you
22:09 - get with it right all right so do you
22:13 - want to jump back into our take this
22:15 - program sure cool all right
22:17 - I'm gonna switch to pair programming all
22:27 - right so I would say at this point we
22:30 - want to build out some sort of
22:33 - calculator right it's some sort of
22:35 - almost like a little machine that takes
22:38 - in the number of days and the number of
22:40 - rides and then tells us some information
22:43 - right right I think a function would be
22:46 - a pretty great thing right here yeah I
22:49 - think so too it's a great showcase of
22:51 - our new yeah and functions are really
22:56 - great for this because they allow us to
22:59 - write dry code which is don't repeat
23:03 - yourself code modular code that you can
23:06 - use in different situations and flexible
23:10 - codes so it allows for very abuse cases
23:13 - right um so it's it's definitely a
23:17 - really helpful tool to have in your tool
23:19 - belt and again if you don't know what
23:21 - functions are after this you can take a
23:23 - look at our functions module which is up
23:26 - and live now so what kind of what web
23:30 - functions what would she call this
23:32 - function get best there get best
23:37 - there case yes all right and we're going
23:41 - to take in the number of days and the
23:43 - number of rides as arguments right okay
23:46 - all right so let's do these rides and
23:54 - sorry I just started defining it huh
23:59 - okay so this is a function call but we
24:04 - actually need to define this function
24:05 - right because we're still on a single
24:10 - file if we define it below main main
24:16 - doesn't have access to the declaration
24:21 - yet unless we declare it up above main
24:24 - and then define Apollonian but we could
24:27 - just define and declare above in rights
24:29 - to it all right what kind of function is
24:32 - this what is the what is that output oh
24:34 - I guess just sort of I think we should
24:35 - just do void the way is in case
24:37 - so why void void does not return
24:40 - anything and it's a good starting point
24:43 - because right now we actually don't know
24:44 - what
24:45 - returned all right so if we actually do
24:48 - want to turn something later we can
24:50 - always go back in and change the void
24:51 - keyword to the data type of the return
24:54 - value all right so we're creating a void
24:59 - function which you know you put the do
25:01 - return type first then you put the name
25:03 - of the function and this is part of the
25:05 - function declaration and inside these
25:07 - parentheses we're gonna put the
25:09 - parameters right yes
25:11 - and we need to declare also the types of
25:13 - these parameters so because we're
25:17 - passing in days and riots these are
25:19 - whole numbers right these are integers
25:22 - right so we can say int days and int
25:27 - right spray it alright excellent now we
25:30 - need to actually define it all right
25:36 - so inside what are we gonna do well so
25:41 - now we have two different values mm-hmm
25:43 - right the days and the rise I think this
25:45 - is where we should actually calculate
25:47 - out what is the cheapest yeah there
25:51 - right so before we get started shall we
25:53 - Ashley because we went to the MTA
25:55 - website and we got these three different
25:56 - price what should we start store that in
25:59 - here yeah that sounds like a really good
26:01 - way to get going um so I'm thinking if
26:05 - we have three different values and
26:07 - they're all related to each other right
26:09 - and they're all the same type of objects
26:12 - right right because they're all these
26:15 - decimal numbers right right so all three
26:20 - of them could be stored together in a
26:22 - single unit right that'll be the cool
26:25 - that would be the cool thing to do
26:26 - instead of storing these three different
26:28 - price points into individual double
26:30 - variables what we can do is store them
26:34 - into something call it a vector yep
26:36 - so if you program in other languages
26:38 - before you've probably seen arrays or
26:41 - lists or you maybe plug programming
26:43 - suppose before you might have c square
26:45 - bracket arrays but here vectors is
26:48 - basically a level up a little upgrade on
26:50 - this right and the cool thing about
26:52 - vectors is that
26:55 - you can store different elements of the
26:58 - same type into a vector but also it is
27:01 - dynamically size which means it can grow
27:04 - in size you're gonna add more elements
27:05 - to it or you can shrink a size taking
27:07 - elements out of it mm-hmm right so yeah
27:11 - creative vectors so this is an STD
27:14 - vector right right so this is part of
27:16 - the standard library - it's actually as
27:18 - STL but we do need to include something
27:22 - we do include the library itself so
27:25 - let's do hashtag include mm-hmm and the
27:28 - library which is called vector just
27:31 - factor just like that yes all right
27:32 - excellent
27:33 - all right oh right so here's a cool
27:36 - little little syntax thing we've never
27:37 - really used a vector before right and
27:39 - the vector you actually need is the
27:42 - syntax might be a little bit different
27:43 - yes you need a square bracket a square
27:46 - bracket up here angle bracket I'm sorry
27:48 - angle around right inside the angle
27:51 - bracket is the type of the vector all
27:54 - right so what is the type of vector it's
27:56 - not just typed about type vector no so
28:00 - the type of the vector is actually the
28:01 - type of the elements in the vector right
28:04 - so we actually want the different price
28:07 - points so those are Ashley money so like
28:10 - decimal numbers so we should actually
28:12 - use double we want to create a vector of
28:14 - double elements and after you give it a
28:18 - type list a space and then the name of
28:20 - the vector which we call it let's call
28:25 - it fares
28:27 - let's do it all right let's call it
28:29 - ferris right and we also want to plug in
28:33 - these numbers into it right we want to
28:35 - store these price point into us so let's
28:37 - start with a squiggly bracket okay and
28:40 - let's just store these three different
28:41 - price point into it and separated by
28:43 - commas so the first one we have actually
28:45 - roll this down I'm Mary always looking
28:47 - on Google so 275 for single fair pay per
28:50 - ride for the 30 days 120 1.00 121 should
28:56 - we do the seven-day one so thirty two
28:58 - point zero zero for the seven-day I'm
29:00 - limiting all right comma and the $121
29:04 - for the 30-day limit which is
29:06 - a lot of money all right it is a lot of
29:09 - money there's a lot of like I don't know
29:11 - is it worth it
29:11 - I don't know guess we're gonna find out
29:13 - right all right so what's up next
29:19 - um should we actually calculate it I
29:23 - love them
29:24 - what do you think yeah I think maybe
29:26 - maybe what makes sense is to find out
29:28 - how much each one of these options is
29:32 - per ride given the number of days in the
29:35 - number of rides for okay so just watch
29:38 - that I use their inputs which one do you
29:39 - think we should start with uh let's
29:41 - start with the easy one paper ride all
29:43 - right let's do it
29:44 - cuz paper ride so it's let's call it
29:47 - double PPR race and that is we already
29:57 - know it is DPR Oh paper ride paper the
30:00 - ride seventy five 275 and boom we
30:05 - already know how much it is perfect
30:07 - there we go that one's really easy
30:10 - what's up next so we do seven-day let's
30:12 - do seven day cool the week one the $32
30:15 - one this is the tricky one is it yeah
30:17 - okay yeah I think this is the tricky one
30:23 - alright so it's also a double okay and I
30:29 - know why it's tricky I'm thinking in my
30:30 - head now yeah all right yeah all right
30:38 - so that's a variable name
30:39 - yes so let's think about what this is
30:41 - and maybe we need a little bit of a
30:44 - comment here so what are we getting
30:46 - we're going to be getting the number of
30:50 - [Music]
30:52 - days divided by 7 which will get us in
30:56 - the number of weeks right oh I see
30:59 - you're winning so you're almost trying
31:01 - to find its number we still need a 7 day
31:04 - so let's say they do 10 days they need
31:06 - not just one week they actually need two
31:08 - weeks yeah right and yeah because we're
31:10 - not gonna we're not gonna deal with
31:11 - combos here this is just we're only
31:14 - gonna deal with
31:15 - okay single I like that
31:19 - all right cool so we need the days
31:22 - divided by 7 plus oh sorry x so that
31:33 - that's the number of weeks x 32 which is
31:38 - the cost rate so number weeks times
31:40 - number the cost per week cool so we're
31:45 - gonna take that value and then we need
31:49 - to also add the number of Oh
31:56 - so if ya because the thing is if there's
32:00 - a remainder so like let's say that we
32:02 - have a 10 we have 10 days right ok we're
32:05 - gonna have to add an entire extra week
32:09 - right yeah that makes sense right so
32:12 - this is this is the let's do that
32:14 - alright so well let's let's start here
32:17 - so let's just start with we're gonna
32:18 - iterate over this a little bit make it a
32:21 - little bit better so I got the DS
32:26 - divided by 7 times 32 right so that's
32:34 - gonna give us the number of full weeks
32:41 - times 32 okay which it gives us you know
32:47 - in the case of like 10 days will give us
32:50 - 1 right right so this is actually so
32:53 - Mario's actually using a little trick
32:54 - and C++ to to our advantage here almost
32:59 - so days it's actually an integer but
33:02 - when you do find an integer by an
33:03 - integer so let's say you divide 3 by 2
33:06 - and they're both integers and you're
33:07 - storing it into integer instead of being
33:09 - 1.5 we actually it's actually the result
33:13 - is actually one and the result is
33:15 - actually not rounded down like it's not
33:17 - 1.5 we're running it down to one it's
33:19 - actually just cutting off the things
33:21 - after the flow people after the decimal
33:23 - right yeah I just ignores the remainder
33:24 - so 3d5 back to you store into an inter
33:26 - it's actually one instead of 1.5 and
33:29 - we're using that to our advantage here
33:30 - to just get what's that call like the
33:33 - floor yeah right yeah the number of full
33:37 - weeks same times third eating okay so
33:41 - then what we need to do okay is we need
33:45 - to say if there's a remainder right okay
33:48 - so if there's a remainder and the way
33:51 - that we can get a remainder is this
33:54 - nifty trick called modulo which looks
34:00 - like a % mm-hmm
34:03 - so we're gonna say if there's a
34:05 - remainder when you divide days by seven
34:09 - so if that number is greater than zero
34:12 - okay then we're going to add an extra
34:20 - $32 right to the seven-day unlimited
34:23 - price right yes
34:25 - okay so we're gonna do um oh sorry yeah
34:32 - seven phrase plus equals 3200 right yeah
34:40 - so this is a little neat operator so
34:42 - what this does on line 14 it's actually
34:44 - saying unlimited seven underscore price
34:47 - equal to unlimited seven underscore
34:50 - price plus 32 we're adding a 32 on top
34:53 - of the verb about the value that's
34:55 - already story the variable the plus
34:57 - equal sign yeah cool yeah so then we're
35:02 - gonna have to take that full number and
35:04 - we're gonna divide by the number of
35:06 - rides right to get the right to get to
35:08 - get the price because the average is
35:10 - risk yes nice to read okay so what we
35:14 - can do then is we can actually just say
35:17 - seven price and just like we did before
35:20 - with plus equals we can actually go
35:22 - divided people rights and what that
35:26 - means is you get the answer or get the
35:31 - the quotient right we're unlimited price
35:35 - / rights
35:37 - can we show some what this looks like if
35:39 - we don't use operator yeah absolutely so
35:41 - this would look like
35:43 - / equals seven brace / right right so
35:53 - those two lines are actually exactly the
35:55 - same yeah but we like to do a little /
36:00 - equals here cool all right
36:02 - uh should we just run this code and then
36:05 - we'll check my first questions things
36:06 - good to come I asked you right now just
36:07 - so that we know or you know we're
36:10 - debugging along the way all right got to
36:12 - remember to the save that code g+ +
36:15 - challenge this just keeps going like
36:22 - that
36:23 - okay you go you're gonna go ten we're
36:32 - gonna use 20 times oh right oh we've got
36:36 - a standard see how we forgot - all right
36:40 - let's sddc out STD c out unlimited seven
37:00 - so 20 and 3.2 Wow so that's actually the
37:07 - way terrorism if you pay yeah 2.75
37:10 - interstate yeah so can we Ashley before
37:13 - we move on that's you mean before we
37:17 - move on to the questions yeah yeah let's
37:19 - uh I wish it yeah that's actually the
37:21 - answer some questions right now great so
37:25 - do we got here Alexander can you use the
37:29 - operator asterisk equal sign let's seek
37:32 - recite and subtract people assign yes
37:34 - you can
37:35 - those are little fancy really a good
37:36 - question yep you can use all of the
37:39 - operators that way cool um and there
37:42 - there are a few other languages that let
37:43 - you do that too right oh yeah in modulo
37:45 - right yeah so let's uh let's add an e
37:47 - line so this is a little bit confusing
37:49 - right here so let's add a new line after
37:51 - that yeah yes cool and then we actually
37:55 - don't use code right so we can actually
37:57 - comments out for now this part and we
38:06 - have a quick question from Tony I'm just
38:08 - starting on my journey with low code
38:10 - mendax what's your opinion on a language
38:12 - to start focusing on or does it vary
38:14 - depending on what are you doing I would
38:15 - say it definitely depends on what you're
38:17 - doing
38:17 - right also the more languages that you
38:21 - know the easier it is to pick up other
38:23 - languages just like human languages
38:25 - right I think it's a good starting point
38:28 - to ask yourself what do you want to
38:29 - build so we want to build a website you
38:31 - know HTML CSS JavaScript Li the best
38:33 - sequence of steps that you should take
38:35 - if you want to just you know start
38:37 - programming and build you know if you
38:40 - want to do like data science you're
38:42 - probably gonna go into Python or more or
38:44 - our yep if you were just wanna you know
38:47 - studies see us or get into solve
38:49 - engineering or actually no that's that's
38:52 - too broad so if you want to just like
38:53 - sit under ski I have a really solid
38:55 - foundation I would pick either C++
38:58 - Python or JavaScript sorry or Java yeah
39:01 - yeah
39:02 - and we're also about to release Java by
39:04 - the way
39:04 - that's upcoming in our catalog a new
39:07 - release for Java right um alright and
39:11 - you just do it oh yeah make sure keeps
39:14 - getting your um any other questions
39:19 - before we move on you guys excited to
39:23 - dig into this and figure out how to make
39:25 - this work
39:26 - cool all right should we continue yeah
39:30 - let's just do it
39:30 - I do you want to switch off again sure
39:33 - sure I have no idea what I'm doing but
39:34 - let's do it okay we can move this what
39:41 - are we going next
39:41 - that's a great question
39:50 - you
42:27 - we don't have to we don't have to do the
42:29 - webcam you have to go back okay so our
42:33 - audio is back oh can you guys hear us
42:37 - let's bring that down are you sure yeah
42:47 - I know we don't need the okay internal
42:49 - if you want to turn off the video
42:59 - alright guys sorry about that
43:04 - all right back into your program should
43:10 - we just take them this is like a little
43:12 - bit easier here we go okay here we go
43:14 - um sorry just getting that back up okay
43:18 - cool let's do it alright what's next
43:22 - what's next yeah alright so next up we
43:26 - want to get our 30-day unlimited let's
43:29 - do it
43:30 - price per ride so unlimited oh right
43:35 - this is gonna be a double also double
43:38 - unlimited 30 price equals and how are we
43:45 - gonna calculate this yeah it shouldn't
43:49 - be right so it's
43:51 - $121 right no $21 divided by the number
43:55 - of rides Internet okay divided by the
43:58 - number of rides awesome
44:00 - alright cool so guys we have our price
44:04 - per ride for all of these I kind of feel
44:07 - like since we still have a little ways
44:08 - to go in this program does it make sense
44:10 - to just make this into a function we
44:15 - could extend it flush is that wha okay
44:17 - yeah like this can be its own function
44:21 - okay just returns a little bit nice nice
44:24 - pride okay let's do it
44:26 - alright and what we're gonna do then is
44:28 - we're actually gonna create a vector to
44:30 - store all of those right right okay
44:33 - interesting so we have a vector for the
44:34 - price points now we want to put in the
44:36 - result right into a vector - exactly
44:39 - all right so that'll end up being the
44:42 - return value for that function that's
44:45 - going to get returned into the other
44:46 - function hope this isn't too confusing
44:50 - guys all right so we're gonna call this
44:53 - so back it's an STD you actor it's going
45:01 - to be type double because we're storing
45:04 - those three in it and what do you want
45:08 - to call it
45:08 - just call it prices sure you see ride
45:15 - prices just to be a little bit more
45:16 - specific right right price is equal to
45:20 - and it's equal to and it's gonna be all
45:23 - three of those values that we just
45:24 - created right and let's do the same
45:26 - order as how we that's a really good
45:28 - point
45:29 - so you're so GPR and it's low price
45:33 - price unlimited seven underscore price
45:42 - for the seven-day and then let's do
45:46 - unlimited seven unlimited 30 on this
45:49 - world price grace cool cool so now
45:57 - restore all the result in a single
45:59 - vector awesome cool and you can always
46:03 - do this later but let's do this above so
46:09 - that we can reference it so what should
46:11 - we call this possible right
46:15 - sure um let's do vector because that's
46:22 - already turning look great
46:26 - and we want to her ride wait do we need
46:36 - to say what type yes you did okay she
46:38 - did so so this is a double um
46:42 - no cost and what input are we taking
46:49 - again we are taking in
46:51 - the days and rides the days I'm reading
46:54 - today's into rides oh and before I
46:56 - forget I'm gonna taste all that work we
46:59 - just did in there so that we don't lose
47:01 - it and let's add those parameters in so
47:10 - let's just go through this code real
47:11 - quick cuz it seemed like we did a lot
47:12 - but we actually didn't okay and let's
47:15 - we're gonna have to return that right
47:17 - usually yeah okay ride prices and the
47:26 - reason that we're we're segmenting this
47:28 - out is first of all that helps make our
47:30 - code a little bit more modular so if we
47:32 - wanted to use this functionality in some
47:34 - other way and it also helps us kind of
47:36 - organize our code a little bit so that
47:38 - our code feels a little bit cleaner so
47:40 - let's just we just showcase that with
47:43 - exactly what we're what we did right so
47:46 - here we have a function called cost per
47:48 - ride taking days taking rides and a
47:51 - return a standard vector with doubles in
47:54 - it with doubles in it and it starts
47:56 - right here and ends on 128 so this is
47:59 - the whole function right here
48:01 - mm-hm actually I'm realizing we should
48:03 - probably put fares into the mean yeah
48:10 - almost
48:10 - you probably want fares and global a
48:22 - little bit cleaner all right so now we
48:25 - have all this here yes so we now we're
48:28 - ready a different function the original
48:29 - function that get best fare function
48:32 - okay mm-hmm I'm actually gonna copy that
48:35 - because we probably want to name it the
48:39 - same right and and we're going to set it
48:42 - equal to the return value of that
48:46 - function cost per ride getting called on
48:50 - the days and rides that are passed in to
48:53 - get bus fare so this is cost ride and
48:59 - we're passing in these
49:02 - that's right yes all right cool so now
49:06 - we have our cost per ride for all of
49:10 - these so now we really need some kind of
49:12 - way of ranking them right to see like
49:14 - which is actually the best right so
49:16 - basically at this point we have three
49:18 - different results the average price for
49:19 - each price points we want to find the
49:22 - lowest one for the user so what do you
49:25 - do with what's a good way to kind of
49:28 - look through each value inside of a
49:32 - vector and compare it to all of the
49:36 - other values right so the cool thing
49:38 - about vector is that you can actually
49:39 - iterate through in a vector nice using a
49:41 - for loop
49:42 - okay so let's set up a starting point
49:45 - for so we're gonna start with four and
49:49 - we're going to start probably with int I
49:52 - which we normally do right or deploy or
49:53 - counter so that's a counter variable
49:56 - that's only gonna exist within this for
49:58 - loop and then we use a semicolon and
50:01 - then we're gonna say I is listen less
50:07 - than just a function that's part of
50:09 - vector that's dot size you know it
50:11 - returns a size and wonder so let's write
50:13 - let's make the upper faster right prices
50:16 - dot size yes and we need that those
50:22 - parentheses there so that we're calling
50:23 - the function and I plus plus I plus
50:30 - class cool and let's actually make it
50:33 - equal to zero right 31 so if you haven't
50:40 - learned for us before let's do a quick
50:42 - run-through real quick
50:43 - so here's initialization of the counter
50:46 - right here there are three different
50:51 - separate parts inside this basically
50:53 - condition we have the initialization of
50:56 - the counter the what's this call it
51:00 - again the the upper bound right is the
51:03 - point at which you stop is writing
51:07 - condition right it's the stopping
51:08 - condition then we have the increment
51:09 - with a decrement so here is increment so
51:11 - basically doing this over over again and
51:13 - each time this plus plus mean
51:15 - it's the same thing as plus equals
51:17 - remember how we were doing plus equals
51:19 - so it's plus equals one so I plus plus
51:21 - because you have to constantly count up
51:24 - by one that's a really really common
51:26 - operation you use plus plus yes cool so
51:32 - we want to iterate through this vector
51:34 - and find the cheapest one mhm so I guess
51:36 - the way we can do this is store the
51:40 - first value as like the initial lowest
51:45 - value and we compare each one afterwards
51:47 - do I do I set it in here okay so we need
51:53 - to do this ahead of time yeah
51:55 - all right so what are we going to call
51:56 - it double initialize it to the first
52:06 - value of the vector um and how do we get
52:10 - the first back raspberry this is
52:12 - actually very good you can actually
52:13 - access each of the element using the
52:15 - index some vectors actually zero base
52:17 - index service starts the first element
52:19 - in the vector is zero index zero this
52:23 - second value in the vector is index 1
52:25 - and X 2 and X 3 and so on so we can
52:28 - access by using a square bracket and
52:30 - index inside alright so the first value
52:35 - would be at index 0 so ride prices
52:37 - square brackets brackets with zero
52:38 - inside so what we're doing at line 31 is
52:40 - basically saying we're create a variable
52:43 - called minimum and we're saving the
52:45 - value of P PR price in sight all right
52:50 - cool
53:20 - type is like this is this is going to
53:23 - get us the minimum right price right
53:26 - right but we don't know coming out of
53:30 - this for loop right now like if we do
53:33 - let's let's try setting up the s
53:34 - statement first so that we can do I
53:36 - guess one thing at a time okay okay so
53:39 - if compare alright so we're gonna
53:44 - compare whatever that particular eye is
53:50 - or am i comparing the vector element
53:55 - what what am i comparing I think you
53:57 - should compare so we're iterating
53:58 - through Specter right we're comparing
54:00 - each element in the vector with the
54:02 - value of the minimum okay so how do we
54:05 - do that so if the vector is called Fred
54:09 - price right prices right on this world
54:11 - prices and we're going to use the
54:13 - counter of the for loop as the index as
54:15 - iterates
54:17 - let's do i mm-hmm okay and listen
54:21 - mm-hmm minimum then we're actually gonna
54:26 - replace inside this Thursday will
54:28 - replace the value of minimum with that
54:30 - lower price
54:31 - hmm so we're gonna say minimum equals
54:37 - right
54:38 - okay so we're resetting the value of
54:40 - minimum to a new minimum ride prices
54:45 - high right just okay cool done awesome
54:50 - so here's me my question coming out of
54:53 - this we have a new minimum right or
54:56 - maybe it's the original minimum right
54:58 - how do we know which minimum it is like
55:02 - which how do I know if it was the paper
55:04 - ride BM limited 7 or the unlimited 30
55:07 - yeah right I think we need something
55:11 - else okay so you also want to sort that
55:13 - index where it's at
55:15 - this place is saying if we got it from
55:16 - index 0 the single rides the cheapest if
55:19 - we got a index one the weekly on limit
55:22 - is the cheapest if we got it from index
55:24 - 2
55:24 - some month unlimited is achievers right
55:27 - yeah I'm wondering okay so there's a
55:34 - couple ways you can do this we could
55:37 - either go back and completely tweak our
55:40 - code and do a nested factor of some kind
55:45 - mm-hmm although I don't know that that's
55:47 - gonna work with vectors so vectors have
55:50 - a set type so that's not gonna work okay
55:52 - um but what we could do is create
55:55 - another vector that has the same first
56:00 - second and third tracking to our current
56:05 - ride prices first second and third do
56:09 - you know what I'm saying so if if we say
56:13 - something like a paper ride as the first
56:18 - element seven-day I'm limited right as a
56:21 - second element and 30-day I'm right and
56:25 - those could be strings so that we can
56:28 - keep track of that information see I was
56:30 - actually thinking it a more easier way
56:31 - well I actually don't even store that
56:33 - job after we're literally store that
56:36 - index itself mm-hmm we see what you're
56:40 - saying interesting okay yeah yeah yeah
56:43 - let's actually do this list I should do
56:44 - this that should make a lot more sense
56:45 - just in case eventually we do you want
56:47 - to add more price points to this cool me
56:50 - yeah I see where you say so basically
56:52 - we're storing all right so many rings
56:55 - all the names yeah yeah let's do that
56:57 - so maybe just in case we needed
56:59 - elsewhere let's add an integral scope so
57:02 - SPD vector and this one's gonna be yes
57:08 - and we can call it fair options and we
57:19 - can set it equal to hey pride seven-day
57:31 - unlimited and
57:41 - cool alright awesome and also we want to
57:45 - stand or see out these two things right
57:47 - the lowest point lowest price and also
57:50 - that's right
57:52 - okay so should we so as we're iterating
57:54 - through do we want to keep track of this
57:59 - or do we want to keep track of
58:02 - let's just keep track of the index the
58:04 - index okay so we're gonna we're gonna
58:05 - have to pay attention to the index so
58:07 - we're gonna start index this is in test
58:16 - index works best index or min index I
58:19 - don't know it's something like that
58:20 - right okay equal to equal to zero right
58:26 - starting out and if we found them
58:30 - minimum yeah let's store that so index
58:33 - equal to 5x equals I cool great I think
58:39 - this should work so let's actually just
58:42 - output to the turbo okay but we're not
58:46 - outputting anything yet so we need to
58:48 - output something to check if this is
58:49 - working yeah no we should yes so let's
58:52 - so what are we gonna output the output
58:53 - the cheapest one is the cheapest option
58:57 - the best option is let's use chaining
59:05 - mm-hmm let's chain it with first is what
59:09 - we call the vector what did we talk
59:12 - about
59:12 - I think we're using minimum right or is
59:14 - oh great
59:16 - recalled for repair options cool nope no
59:28 - I
59:29 - it's called mins risk or min and that's
59:32 - right okay and then we probably want to
59:36 - say what the actual price is right
59:39 - yes let's let's actually do a new line
59:42 - okay so we need to chain in you a new
59:46 - line in right
59:49 - and then let's do another line where we
59:51 - say and cheapest or what happens action
59:54 - is the cost per ride is the cost of rent
60:00 - is dollar side
60:02 - I like the dollar sign to stir it a
60:07 - string oh yeah absolutely and it's
60:19 - minimum right you know there we go all
60:21 - right whoo let's see if it works you
60:25 - gotta save our code and then we're gonna
60:28 - see if this works
60:29 - all right gee plus plus challenge always
60:40 - gets to me okay
60:42 - so here's an error yeah line 17 oh
60:46 - there's a typo
60:48 - it says proces instead of 339 whoops
60:51 - line 39 that's our problem see all right
61:00 - hey let's try it again
61:04 - [Music]
61:07 - whoo all right how many days let's say
61:15 - 20 sure paper ride the cost per ride is
61:26 - 275
61:28 - all right
61:42 - and trying to see
61:44 - let's give us a different out different
61:46 - input yeah does anyone want to try this
61:50 - on some other number of days or times
61:53 - yeah let's try this oh thank you Phil by
62:02 - the way I'm glad you caught that typo Oh
62:07 - [Music]
62:08 - [Laughter]
62:15 - is the background even weirder no it's
62:18 - just a little bit weird the the mic is
62:19 - also uh because the mic is built-in
62:21 - we're getting some some static stuff so
62:24 - keep talking in chat guys I'm gonna die
62:25 - everybody yeah
62:26 - what any other questions any questions
62:29 - you're welcome to try this out on some
62:34 - different values and see whether this
62:35 - works for you if you happen to come by
62:39 - in New York City you might even have
62:41 - this exact conundrum hey that's a little
62:52 - bit better kind of a call okay alright
62:57 - somebody just Tony I'm glad I'm right
63:01 - into the stream thank you thank you for
63:03 - doing this and helping out I subscribed
63:05 - and sign up for a free trial before I
63:06 - even found this I'm gonna try it and
63:08 - we'll be back for more amazing Wow okay
63:11 - and also Tony don't forget there is a
63:14 - C++ can be challenged that's happening
63:16 - from now to end of March 31st so if you
63:19 - complete it learn C++ please please go
63:22 - jump into the if you're become a pro
63:24 - learner Pro subscriber go jump into the
63:26 - code Academy lifelong learner slack and
63:29 - join the CPP - challenge and do the
63:33 - challenge and for a chance to wait till
63:34 - got me hoodie and a LD no email which is
63:38 - really cool Audrey knows actually kind
63:40 - of C C++ so this specially yeah so this
63:43 - eventually help out with that and we had
63:47 - a question on how do we integrate the
63:48 - Center an application that's a great
63:51 - question John are you a pro subscriber
63:53 - if you are let's chat in lifelong
63:55 - learner if not should I give at least do
64:01 - you know it's a sunny at code Academy
64:02 - calm so email me and I'll give you an
64:05 - exact four or five resources where you
64:08 - can jump in from here take this into a
64:10 - gooey Apple kitchen awesome any other
64:13 - questions for us before I think you you
64:16 - wanted to go through github right as
64:18 - kind of oh yeah I think we're running
64:19 - out of time but we have a link in the
64:22 - description part part of the C++
64:24 - Community Challenge article mm-hmm I
64:26 - think that's a probably the easiest
64:31 - let's suppose a link to the hold on I
64:36 - need the other one one second sorry
64:41 - about that
64:59 - so there will be a link to the C photos
65:00 - from each other in the link I'm not sure
65:06 - I subscribe you can subscribe okay
65:19 - Angela rivers do you think you'll be
65:22 - more beneficial to learn see boxes or
65:24 - Python or both if you're interested in a
65:26 - big program oh so so Bitcoin is actually
65:29 - written in C++ but we actually do have
65:34 - so we actually do have a blocking course
65:36 - that you could take it's free course on
65:37 - coding at me so obviously I should start
65:39 - off there first and super puzzles
65:43 - teamfights are very differently there
65:45 - some that very syntax differences and
65:47 - sometimes philosophy almost how I should
65:51 - say learn both why not I feel like
65:54 - learning I want to understand the
65:55 - strengths and weaknesses of the other
65:56 - language definitely also well if you
65:59 - know both and you can pick out which one
66:01 - that you
66:02 - joy a little bit more to program it
66:04 - there sure I mean to be fair Andrew uh
66:07 - it's gonna be a little bit faster
66:10 - getting up and running if you don't know
66:13 - C++ or Python it's gonna be a little
66:15 - quicker getting used to Python if you're
66:17 - trying to get something done like that
66:19 - but no but I always recommend knowing
66:22 - more than one language I think it really
66:24 - really helps yes any other questions
66:29 - before we any other questions especially
66:36 - questions about the challenge we're
66:37 - really really excited to do this
66:40 - challenge with everyone
66:42 - [Laughter]
66:44 - Java episode in the future to mentor
66:53 - Eric I must bet it's happening next oh
66:57 - yeah we're gonna make that happen
66:59 - yeah Tony Tony you can look forward to
67:02 - it though yay cool and please release
67:06 - everybody take the lair suppose this
67:07 - course and yeah please be bored buds
67:10 - please let us know if it can be improved
67:12 - in any way design pedagogy whether it's
67:16 - the build out the flow I mean there's
67:20 - actually a give repo now throw the least
67:22 - learn C+ scores that's open source so if
67:24 - you know github please make a pull
67:26 - request and have your project showcase
67:28 - to the world yeah Oh Alexander that's an
67:30 - amazing question any tips for naming
67:32 - variables um so I think I think it's
67:41 - important to be descriptive with your
67:42 - variable naming so if you are unsure
67:46 - what to name something I would go with
67:48 - the shortest possible option yes that is
67:52 - descriptive enough that when you're
67:54 - reading your code later you're not like
67:55 - wait what was that what what is that
67:57 - referring to you want to make sure that
67:59 - it's clear enough to yourself in the
68:02 - future or other programmers who look at
68:04 - your code right and C++ variable names
68:07 - are you can only consist of characters
68:11 - letters basically underscore and numbers
68:14 - but you cannot
68:15 - start off with underscores or numbers
68:17 - therefore the different Commission I
68:19 - feel like to Google Microsoft yarny all
68:21 - have to bury different senders mode the
68:23 - ones we use our snake case and then it's
68:26 - gonna be a little bit different we're
68:27 - gonna be I think be using Pascal case
68:29 - for right for classes but that's a
68:32 - that's a whole other thing
68:33 - don't worry about the banner of it
68:36 - alright well thank you so much everyone
68:38 - thank you everybody
68:40 - hope to see your projects yeah really
68:43 - looking super sweet challenge some
68:45 - amazing projects great thank you

Cleaned transcript:

great hey guys can everyone hear us you type something in the chat and let us know if you can hear us or not hello hello hello test test test Mic Check thanks Alexander alright so we're gonna give it just a second before we really get started in the meantime you're welcome to type in the chat where you are joining us from and just to get it started we're based in New York City so Atlanta Courtney hello hello Denver Denver Windsor Colorado Romania New Jersey Huntington Beach no worries you are welcome to just listen C++ nice we're hoping some of you guys have some C++ experience and of course we welcome new learners at any time hey Dom Luis that's a lease that's really good question you can watch on youtube if you want to chat and you're welcome to pull up the learning environment if you want to code along with us there's a link in YouTube in the description to code along with us if you'd like to all right so should we get started yeah hello everybody my name is sunny I'm a curriculum developer here at code Academy and I'm Marielle I'm also a curtain developer here at code Academy and we have built out the C++ course right so today we have two big announcements so we launched where I C++ and December and over a hundred and fifty five thousand people have started in the courts which is mindboggling to me yeah and today the second batch of the sequence most courses are out so we have a new module on vectors modules five and also module six on functions yeah so we're super super excited about this release and then we have another big announcement pretty crazy there's a first time we're ever gonna do first time we have ever done this we're doing this C++ community challenge and this is for pro users so if you are a pro user you're welcome to join if you're not a pro user you can learn a little bit about this and decide if you want to join pro and then join there's something super cool so you when you're on code Academy this is a time you actually don't get to collaborate with other learners so this is a great opportunity for you to find a code buddy to collaborate decide on a project build this project and show this case show off this project to the world and there's also prizes involved yep so you can win a code Academy hoodie and you can also win and Arduino Uno right which are pretty sweet prizes you can see the hoodie on sunny right now I have my own at my desk and you can actually build the project on anything that you want to so it's a little openended in that sense but there are specific criteria that we're gonna be judging on right so this will and this this will last till end of March and there are just three easy steps if you're purloiner so join this code Cammy lifelong learner slack channel it's a basically a workspace where you can interact with other learners so let's just show case so this is the slack Channel and you can see talk about anything Co related not Co related with your fellow learners only just gotten announced but we already have some partnering getting set up so pretty exciting okay so first first step is join that slack channel join the cpp channel inside of that and then SEP to find a CO buddy to sign on a project build this project together and then step three used to submit a link to your github repository by March 31st and if you're in this lock channel you'll end up getting a place to submit to so don't worry about that right now um and we have a bunch of rules in place we want to make sure that you're using vectors and functions those are pretty important steps to take especially considering we just released some new course material on vectors and functions and we really really want to see collaboration this is so important to us and this is the first time that we're actually getting a chance to bring collaboration to the code Academy experience oh yeah oh yeah and the originality readability that's something we really care about and the winners will be announced the first week of April there are a couple of additional resources on the bottom that you can check out yeah we're very excited about this C++ community challenge so again if you're just joining us if you're on YouTube and you want to code along with us you can in the code ketamine learning environment you can click on the link in the description and if you're in the learning environment and you want to open up YouTube to fullscreen you can just click through on the YouTube video in the learning environment so Sonny and I actually had this idea for a project that we want to build as a demonstration of C++ Community Challenge project right so this is basically the kickoff project we're basically showing you demonstrating exactly what we would do if we were what we are aware right yeah absolutely and we are still winners we're always learning sucess all right so we're gonna hopefully create a New York City MetroCard calculator so there was of you not familiar when it's New York you may not know about our public transit system but for us it's an everyday thing right it's something that we're very much aware of we commute to work using it and our systems name is the MTA sunny you can tell yeah so even I'm actually out of from out of state so when I first came to New York there are a couple different price points for MetroCard Metro and there's the single card a single fare card paper right there's also the unlimited card okay and one problem that had is which one is the best with me which one had cheapest for me so we want to build a program for a user to decide which of these are the best yeah absolutely um so to do that we're gonna take a look at a few different MTA MetroCard fare options so I'm just gonna bring these up so MTA it's just my way jiae fares and go so we'll go into MetroCard and fares at a glance whoa so there's a lot of information it's a little overwhelming we're not gonna delve into all of this and this really speaks to our projects scope we don't want to we don't want to deal with reduced fare right now we don't want to deal with bus fare right now really only gonna focus on a few options right we don't want to over complicate things especially for the first version of our program exactly we can always add new features later cool so let's actually write these down just in case okay so which ones do you think we should cover in this program um so I think that we should cover the subway local bus and select bus fare um for a single ride is 275 G five cool all right um also known as paper ride paper right then yeah and then we also have two unlimited options so there's the unlimited 30 day and the unlimited 7 day cool unlimited mmhmm Tuesday so 32 dollars for the 7 day and wanted 21 dollars for the 30 day yep so these are really the basic options that you're gonna be using if you're using the MTA more than once over a period of 30 days yes cool awesome um so I think before we get into our program okay how about let's take a quick break and check out questions and the chat cool be sure that any questions about the C++ can be a challenge about anything relate to this live stream Academy please let us know so by it says will it be a GUI application so in this particular iteration we're not getting into GUI I know that sunny really really wants us I'm covering that I think for this one terminal would work perfectly fine yeah we're just gonna use a terminal program um any other questions before we move into actually building this app dr. Nanjo I miss NYC transit Oh how far can this smell that's a great question so we just so we did it first for modulus of learn C++ in December and now we're leasing module 5 and module 6 vectors and functions we actually have more in store for you in the next two to three months where we'll be covering loopy so objectoriented programming which includes building C++ classes and then also pointers which is a fundamental topic in C or C++ so after that Ashley think you have the power to build almost anything you want of course you know you need to learn more frameworks and things like that however we are thinking about what we can do pointers are confusing right yeah what we can do there are a lot of little things that we're considering including hardware including creative coding including gaming maybe yeah so Tammy has a question I'm new to C++ and I don't know anything yet about the programming language how can you help so we actually that's a really great question we have learn C++ content up for free on code Khadem e so I would definitely recommend that you check out the beginning of that course starting with hello world in order to get some sense of the way that C++ works um which doesn't isn't to say that you're not ready to watch this live stream I definitely encourage complete newbies to go through this process with us because I think that it helps gain a fundamental understanding of just programming in general and what the process is like especially when you're a pair programming right and I think the goal of this course when we're building this is to build the best entry point into programming using C++ so Alexander is asking would you need to know more about C++ than what is in your course to get started coding with professionally I would say it depends in what capacity I mean you know you can always get started in some professional capacity at almost any level but to be really great at it and to really bring something to the table the more knowledge you have the better right and suppose this is almost one of the biggest languages that we have today right it's just so vast but I still feel like the Liceo this place is a great starting point and after you finished the course you should be very confident and very have a very solid foundation into what's next yeah and definitely have the capacity to pick up things on the fly following that do you offer real classroom learning or just online I just online right now it's just all right great questions guys cool all right fantastic we're gonna jump into our setup all right should I take this one or should we do you want to start no that's alright so we're because we're pair programming we're gonna be switching off who's actually typing and who's speaking and we're gonna speak back and forth quite a bit yeah okay so let's get started before we start building this program of course we need to do some setting up so as you remember from the hollow or a lesson from like the previous strings we always have to include my break collar iostream input output stream okay that allows us to input an output to the terminal mmhmm it also includes a few other C++ libraries which are pretty important and I'm going to start off with a main function mmhmm which is in every single C++ program okay comfortable with it and we have a opening curly bracket and a closing quarterback and this is where our code will live right here okay so to start this off I feel like we're when we're writing programs were almost playing two roles here and we're playing the roles of the user and we're also playing the role of the programmer right so that's like how usually how I think when I start building my program so yeah what do we need to start this program off um I'd really like to see a greeting to start off I think it's really nice when you get some kind of greeting a little bit of information about what the program is about so that you're not just inputting something without understanding what you're inputting exactly so let's stand your C out console output on to the terminal and let's print out welcome to what may be the MTA best fare calculator best there okay let's do a new line all right awesome and then I mean let's take a step back and think what do we want this program to write you write what is this difference three price points but what should we ask the user yeah exactly so what kind of information so something I think about a lot as I'm trying to figure out which metric hard to get is how long I'm gonna need it for you know like I'm not gonna buy a 30 day if I'm only here for three days right so a number of days yeah so the number of days is kind of important and then what do you think also so we have a number of days which also get a number of rides yes so often you're using the card that makes a lot of sense okay so let's actually so we need two variables here for to store these two from so let's do int right because those two are probably gonna be integers so int do just call it days and days and right it's yes let's do that okay so we're declaring two variables two integer variables one called days and what call rights mmmhmm okay so now we need to ask the user for these two values yeah first we gotta give them a problem right see out so I how many days would you be using your MetroCard how many days what's the question do you will you be using your MetroCard cool so another new line mmhmm semicolon to close a statement and then we can see in right so redo the input from the users keep yeah exactly and we're gonna store it in two days and let's do this one more time to get the ride so standard this is a little shrine how many times how many times do you expect to use you expect to use the subway cool the same way let's do rides cool let's save it and let's compile and execute it just in case so do compile g + + as a command and then flower name the file name here is challenge dot cpp enter CP successfully so now let's execute it dot slash is executing come in and remember after you compile it creates a new executable file call it dot at so now dot slash dot out enter welcome to the MTA best fare calculate how many days will you be using your MetroCard let's do tag hit enter we're pretending to be the user right now huh how many times do you expect to use the subway let's do 20 yeah all right it worked as we expected so I think before we move on we should take a quick break and check out the chat because it looks like when you have some questions piling in here make this alright yes created to save you money on the subway what is the STD do B for C hours that's a request so it's a standard library stands for standard library and because we're not using something called the namespace STD we just have to include the library before the C out keyword okay so it's a CD so yeah it's biggest thing see how as a function of standard library why the in tat the beginning of the coding was so good question yeah are you Timmy I don't know if you're talking about the inch in front of main or the int in front of days the engine in front of main has to do with what the function is returning it's gonna return zero um the int in front of days arrives is indicating that days and rides are variables that will be storing integers it's a data type mmhmm why not define new space under iostream right I mean that's a tough question for I mean it's a very controversial we just didn't want to over complicate things well also it's it's a convention right so you know if if you're going to be scaling your programs ever it's generally good to not be using namespace right so Tammy just asked the Hinton from Daiso just like Mary L said so we're declaring two variables here so you could also do this we did this in what a single line but you can also do it this way yeah in today's declare variable plug days and enterprise declare another variable called rides awesome and here on line 11 in line 14 we're actually storing the user's input right here into these two variables so now at the end of the program days will actually have a value of 10 and rights will actually have a value of 20 so this is a great question so what's different between left angle bracket angle brackets into writing arrests this is just like the convention the stander was used so after C out is towards the left after C it is towards the right so as you notice right here my 8 to the left after C in good 911 goes right and one last question I see you know how how can you tell me how long I should study to be actually good at the computer um that's that's a matter of you know it's a great question actually yeah yeah so won't the reason why I actually got into Tech study computer science back is nice just kind of fell in love with it's almost because it's one of those fields that doesn't matter how far you go and how deep how much you study there's almost always another dimension world of things to learn that's like why I really enjoy this field even we did an interview with Microsoft a very wellknown figure in the c+ community named assignment Brandon and just do that and we did this interview with him yeah a week ago and just talking to them just made me realize how much I still don't know about C++ very inspiring but yeah I think to be comfortable to be confident and oh sorry and to be confident in programming I will say a couple to two to three years will be I have a really strong foundation yeah generally speaking it's not about a speed I feel like that's when some people a lot of people who started like focus a lot like how many like what's the month I can get this master see yeah XML CSS or JavaScript it's more you know take the time you know retake courses it's a comfortable way right it's about doing similar to playing guitar or learning a new language like French or Chinese the more you use it the more comfortable you get with it right all right so do you want to jump back into our take this program sure cool all right I'm gonna switch to pair programming all right so I would say at this point we want to build out some sort of calculator right it's some sort of almost like a little machine that takes in the number of days and the number of rides and then tells us some information right right I think a function would be a pretty great thing right here yeah I think so too it's a great showcase of our new yeah and functions are really great for this because they allow us to write dry code which is don't repeat yourself code modular code that you can use in different situations and flexible codes so it allows for very abuse cases right um so it's it's definitely a really helpful tool to have in your tool belt and again if you don't know what functions are after this you can take a look at our functions module which is up and live now so what kind of what web functions what would she call this function get best there get best there case yes all right and we're going to take in the number of days and the number of rides as arguments right okay all right so let's do these rides and sorry I just started defining it huh okay so this is a function call but we actually need to define this function right because we're still on a single file if we define it below main main doesn't have access to the declaration yet unless we declare it up above main and then define Apollonian but we could just define and declare above in rights to it all right what kind of function is this what is the what is that output oh I guess just sort of I think we should just do void the way is in case so why void void does not return anything and it's a good starting point because right now we actually don't know what returned all right so if we actually do want to turn something later we can always go back in and change the void keyword to the data type of the return value all right so we're creating a void function which you know you put the do return type first then you put the name of the function and this is part of the function declaration and inside these parentheses we're gonna put the parameters right yes and we need to declare also the types of these parameters so because we're passing in days and riots these are whole numbers right these are integers right so we can say int days and int right spray it alright excellent now we need to actually define it all right so inside what are we gonna do well so now we have two different values mmhmm right the days and the rise I think this is where we should actually calculate out what is the cheapest yeah there right so before we get started shall we Ashley because we went to the MTA website and we got these three different price what should we start store that in here yeah that sounds like a really good way to get going um so I'm thinking if we have three different values and they're all related to each other right and they're all the same type of objects right right because they're all these decimal numbers right right so all three of them could be stored together in a single unit right that'll be the cool that would be the cool thing to do instead of storing these three different price points into individual double variables what we can do is store them into something call it a vector yep so if you program in other languages before you've probably seen arrays or lists or you maybe plug programming suppose before you might have c square bracket arrays but here vectors is basically a level up a little upgrade on this right and the cool thing about vectors is that you can store different elements of the same type into a vector but also it is dynamically size which means it can grow in size you're gonna add more elements to it or you can shrink a size taking elements out of it mmhmm right so yeah creative vectors so this is an STD vector right right so this is part of the standard library it's actually as STL but we do need to include something we do include the library itself so let's do hashtag include mmhmm and the library which is called vector just factor just like that yes all right excellent all right oh right so here's a cool little little syntax thing we've never really used a vector before right and the vector you actually need is the syntax might be a little bit different yes you need a square bracket a square bracket up here angle bracket I'm sorry angle around right inside the angle bracket is the type of the vector all right so what is the type of vector it's not just typed about type vector no so the type of the vector is actually the type of the elements in the vector right so we actually want the different price points so those are Ashley money so like decimal numbers so we should actually use double we want to create a vector of double elements and after you give it a type list a space and then the name of the vector which we call it let's call it fares let's do it all right let's call it ferris right and we also want to plug in these numbers into it right we want to store these price point into us so let's start with a squiggly bracket okay and let's just store these three different price point into it and separated by commas so the first one we have actually roll this down I'm Mary always looking on Google so 275 for single fair pay per ride for the 30 days 120 1.00 121 should we do the sevenday one so thirty two point zero zero for the sevenday I'm limiting all right comma and the $121 for the 30day limit which is a lot of money all right it is a lot of money there's a lot of like I don't know is it worth it I don't know guess we're gonna find out right all right so what's up next um should we actually calculate it I love them what do you think yeah I think maybe maybe what makes sense is to find out how much each one of these options is per ride given the number of days in the number of rides for okay so just watch that I use their inputs which one do you think we should start with uh let's start with the easy one paper ride all right let's do it cuz paper ride so it's let's call it double PPR race and that is we already know it is DPR Oh paper ride paper the ride seventy five 275 and boom we already know how much it is perfect there we go that one's really easy what's up next so we do sevenday let's do seven day cool the week one the $32 one this is the tricky one is it yeah okay yeah I think this is the tricky one alright so it's also a double okay and I know why it's tricky I'm thinking in my head now yeah all right yeah all right so that's a variable name yes so let's think about what this is and maybe we need a little bit of a comment here so what are we getting we're going to be getting the number of days divided by 7 which will get us in the number of weeks right oh I see you're winning so you're almost trying to find its number we still need a 7 day so let's say they do 10 days they need not just one week they actually need two weeks yeah right and yeah because we're not gonna we're not gonna deal with combos here this is just we're only gonna deal with okay single I like that all right cool so we need the days divided by 7 plus oh sorry x so that that's the number of weeks x 32 which is the cost rate so number weeks times number the cost per week cool so we're gonna take that value and then we need to also add the number of Oh so if ya because the thing is if there's a remainder so like let's say that we have a 10 we have 10 days right ok we're gonna have to add an entire extra week right yeah that makes sense right so this is this is the let's do that alright so well let's let's start here so let's just start with we're gonna iterate over this a little bit make it a little bit better so I got the DS divided by 7 times 32 right so that's gonna give us the number of full weeks times 32 okay which it gives us you know in the case of like 10 days will give us 1 right right so this is actually so Mario's actually using a little trick and C++ to to our advantage here almost so days it's actually an integer but when you do find an integer by an integer so let's say you divide 3 by 2 and they're both integers and you're storing it into integer instead of being 1.5 we actually it's actually the result is actually one and the result is actually not rounded down like it's not 1.5 we're running it down to one it's actually just cutting off the things after the flow people after the decimal right yeah I just ignores the remainder so 3d5 back to you store into an inter it's actually one instead of 1.5 and we're using that to our advantage here to just get what's that call like the floor yeah right yeah the number of full weeks same times third eating okay so then what we need to do okay is we need to say if there's a remainder right okay so if there's a remainder and the way that we can get a remainder is this nifty trick called modulo which looks like a % mmhmm so we're gonna say if there's a remainder when you divide days by seven so if that number is greater than zero okay then we're going to add an extra $32 right to the sevenday unlimited price right yes okay so we're gonna do um oh sorry yeah seven phrase plus equals 3200 right yeah so this is a little neat operator so what this does on line 14 it's actually saying unlimited seven underscore price equal to unlimited seven underscore price plus 32 we're adding a 32 on top of the verb about the value that's already story the variable the plus equal sign yeah cool yeah so then we're gonna have to take that full number and we're gonna divide by the number of rides right to get the right to get to get the price because the average is risk yes nice to read okay so what we can do then is we can actually just say seven price and just like we did before with plus equals we can actually go divided people rights and what that means is you get the answer or get the the quotient right we're unlimited price / rights can we show some what this looks like if we don't use operator yeah absolutely so this would look like / equals seven brace / right right so those two lines are actually exactly the same yeah but we like to do a little / equals here cool all right uh should we just run this code and then we'll check my first questions things good to come I asked you right now just so that we know or you know we're debugging along the way all right got to remember to the save that code g+ + challenge this just keeps going like that okay you go you're gonna go ten we're gonna use 20 times oh right oh we've got a standard see how we forgot all right let's sddc out STD c out unlimited seven so 20 and 3.2 Wow so that's actually the way terrorism if you pay yeah 2.75 interstate yeah so can we Ashley before we move on that's you mean before we move on to the questions yeah yeah let's uh I wish it yeah that's actually the answer some questions right now great so do we got here Alexander can you use the operator asterisk equal sign let's seek recite and subtract people assign yes you can those are little fancy really a good question yep you can use all of the operators that way cool um and there there are a few other languages that let you do that too right oh yeah in modulo right yeah so let's uh let's add an e line so this is a little bit confusing right here so let's add a new line after that yeah yes cool and then we actually don't use code right so we can actually comments out for now this part and we have a quick question from Tony I'm just starting on my journey with low code mendax what's your opinion on a language to start focusing on or does it vary depending on what are you doing I would say it definitely depends on what you're doing right also the more languages that you know the easier it is to pick up other languages just like human languages right I think it's a good starting point to ask yourself what do you want to build so we want to build a website you know HTML CSS JavaScript Li the best sequence of steps that you should take if you want to just you know start programming and build you know if you want to do like data science you're probably gonna go into Python or more or our yep if you were just wanna you know studies see us or get into solve engineering or actually no that's that's too broad so if you want to just like sit under ski I have a really solid foundation I would pick either C++ Python or JavaScript sorry or Java yeah yeah and we're also about to release Java by the way that's upcoming in our catalog a new release for Java right um alright and you just do it oh yeah make sure keeps getting your um any other questions before we move on you guys excited to dig into this and figure out how to make this work cool all right should we continue yeah let's just do it I do you want to switch off again sure sure I have no idea what I'm doing but let's do it okay we can move this what are we going next that's a great question you we don't have to we don't have to do the webcam you have to go back okay so our audio is back oh can you guys hear us let's bring that down are you sure yeah I know we don't need the okay internal if you want to turn off the video alright guys sorry about that all right back into your program should we just take them this is like a little bit easier here we go okay here we go um sorry just getting that back up okay cool let's do it alright what's next what's next yeah alright so next up we want to get our 30day unlimited let's do it price per ride so unlimited oh right this is gonna be a double also double unlimited 30 price equals and how are we gonna calculate this yeah it shouldn't be right so it's $121 right no $21 divided by the number of rides Internet okay divided by the number of rides awesome alright cool so guys we have our price per ride for all of these I kind of feel like since we still have a little ways to go in this program does it make sense to just make this into a function we could extend it flush is that wha okay yeah like this can be its own function okay just returns a little bit nice nice pride okay let's do it alright and what we're gonna do then is we're actually gonna create a vector to store all of those right right okay interesting so we have a vector for the price points now we want to put in the result right into a vector exactly all right so that'll end up being the return value for that function that's going to get returned into the other function hope this isn't too confusing guys all right so we're gonna call this so back it's an STD you actor it's going to be type double because we're storing those three in it and what do you want to call it just call it prices sure you see ride prices just to be a little bit more specific right right price is equal to and it's equal to and it's gonna be all three of those values that we just created right and let's do the same order as how we that's a really good point so you're so GPR and it's low price price unlimited seven underscore price for the sevenday and then let's do unlimited seven unlimited 30 on this world price grace cool cool so now restore all the result in a single vector awesome cool and you can always do this later but let's do this above so that we can reference it so what should we call this possible right sure um let's do vector because that's already turning look great and we want to her ride wait do we need to say what type yes you did okay she did so so this is a double um no cost and what input are we taking again we are taking in the days and rides the days I'm reading today's into rides oh and before I forget I'm gonna taste all that work we just did in there so that we don't lose it and let's add those parameters in so let's just go through this code real quick cuz it seemed like we did a lot but we actually didn't okay and let's we're gonna have to return that right usually yeah okay ride prices and the reason that we're we're segmenting this out is first of all that helps make our code a little bit more modular so if we wanted to use this functionality in some other way and it also helps us kind of organize our code a little bit so that our code feels a little bit cleaner so let's just we just showcase that with exactly what we're what we did right so here we have a function called cost per ride taking days taking rides and a return a standard vector with doubles in it with doubles in it and it starts right here and ends on 128 so this is the whole function right here mmhm actually I'm realizing we should probably put fares into the mean yeah almost you probably want fares and global a little bit cleaner all right so now we have all this here yes so we now we're ready a different function the original function that get best fare function okay mmhmm I'm actually gonna copy that because we probably want to name it the same right and and we're going to set it equal to the return value of that function cost per ride getting called on the days and rides that are passed in to get bus fare so this is cost ride and we're passing in these that's right yes all right cool so now we have our cost per ride for all of these so now we really need some kind of way of ranking them right to see like which is actually the best right so basically at this point we have three different results the average price for each price points we want to find the lowest one for the user so what do you do with what's a good way to kind of look through each value inside of a vector and compare it to all of the other values right so the cool thing about vector is that you can actually iterate through in a vector nice using a for loop okay so let's set up a starting point for so we're gonna start with four and we're going to start probably with int I which we normally do right or deploy or counter so that's a counter variable that's only gonna exist within this for loop and then we use a semicolon and then we're gonna say I is listen less than just a function that's part of vector that's dot size you know it returns a size and wonder so let's write let's make the upper faster right prices dot size yes and we need that those parentheses there so that we're calling the function and I plus plus I plus class cool and let's actually make it equal to zero right 31 so if you haven't learned for us before let's do a quick runthrough real quick so here's initialization of the counter right here there are three different separate parts inside this basically condition we have the initialization of the counter the what's this call it again the the upper bound right is the point at which you stop is writing condition right it's the stopping condition then we have the increment with a decrement so here is increment so basically doing this over over again and each time this plus plus mean it's the same thing as plus equals remember how we were doing plus equals so it's plus equals one so I plus plus because you have to constantly count up by one that's a really really common operation you use plus plus yes cool so we want to iterate through this vector and find the cheapest one mhm so I guess the way we can do this is store the first value as like the initial lowest value and we compare each one afterwards do I do I set it in here okay so we need to do this ahead of time yeah all right so what are we going to call it double initialize it to the first value of the vector um and how do we get the first back raspberry this is actually very good you can actually access each of the element using the index some vectors actually zero base index service starts the first element in the vector is zero index zero this second value in the vector is index 1 and X 2 and X 3 and so on so we can access by using a square bracket and index inside alright so the first value would be at index 0 so ride prices square brackets brackets with zero inside so what we're doing at line 31 is basically saying we're create a variable called minimum and we're saving the value of P PR price in sight all right cool type is like this is this is going to get us the minimum right price right right but we don't know coming out of this for loop right now like if we do let's let's try setting up the s statement first so that we can do I guess one thing at a time okay okay so if compare alright so we're gonna compare whatever that particular eye is or am i comparing the vector element what what am i comparing I think you should compare so we're iterating through Specter right we're comparing each element in the vector with the value of the minimum okay so how do we do that so if the vector is called Fred price right prices right on this world prices and we're going to use the counter of the for loop as the index as iterates let's do i mmhmm okay and listen mmhmm minimum then we're actually gonna replace inside this Thursday will replace the value of minimum with that lower price hmm so we're gonna say minimum equals right okay so we're resetting the value of minimum to a new minimum ride prices high right just okay cool done awesome so here's me my question coming out of this we have a new minimum right or maybe it's the original minimum right how do we know which minimum it is like which how do I know if it was the paper ride BM limited 7 or the unlimited 30 yeah right I think we need something else okay so you also want to sort that index where it's at this place is saying if we got it from index 0 the single rides the cheapest if we got a index one the weekly on limit is the cheapest if we got it from index 2 some month unlimited is achievers right yeah I'm wondering okay so there's a couple ways you can do this we could either go back and completely tweak our code and do a nested factor of some kind mmhmm although I don't know that that's gonna work with vectors so vectors have a set type so that's not gonna work okay um but what we could do is create another vector that has the same first second and third tracking to our current ride prices first second and third do you know what I'm saying so if if we say something like a paper ride as the first element sevenday I'm limited right as a second element and 30day I'm right and those could be strings so that we can keep track of that information see I was actually thinking it a more easier way well I actually don't even store that job after we're literally store that index itself mmhmm we see what you're saying interesting okay yeah yeah yeah let's actually do this list I should do this that should make a lot more sense just in case eventually we do you want to add more price points to this cool me yeah I see where you say so basically we're storing all right so many rings all the names yeah yeah let's do that so maybe just in case we needed elsewhere let's add an integral scope so SPD vector and this one's gonna be yes and we can call it fair options and we can set it equal to hey pride sevenday unlimited and cool alright awesome and also we want to stand or see out these two things right the lowest point lowest price and also that's right okay so should we so as we're iterating through do we want to keep track of this or do we want to keep track of let's just keep track of the index the index okay so we're gonna we're gonna have to pay attention to the index so we're gonna start index this is in test index works best index or min index I don't know it's something like that right okay equal to equal to zero right starting out and if we found them minimum yeah let's store that so index equal to 5x equals I cool great I think this should work so let's actually just output to the turbo okay but we're not outputting anything yet so we need to output something to check if this is working yeah no we should yes so let's so what are we gonna output the output the cheapest one is the cheapest option the best option is let's use chaining mmhmm let's chain it with first is what we call the vector what did we talk about I think we're using minimum right or is oh great recalled for repair options cool nope no I it's called mins risk or min and that's right okay and then we probably want to say what the actual price is right yes let's let's actually do a new line okay so we need to chain in you a new line in right and then let's do another line where we say and cheapest or what happens action is the cost per ride is the cost of rent is dollar side I like the dollar sign to stir it a string oh yeah absolutely and it's minimum right you know there we go all right whoo let's see if it works you gotta save our code and then we're gonna see if this works all right gee plus plus challenge always gets to me okay so here's an error yeah line 17 oh there's a typo it says proces instead of 339 whoops line 39 that's our problem see all right hey let's try it again whoo all right how many days let's say 20 sure paper ride the cost per ride is 275 all right and trying to see let's give us a different out different input yeah does anyone want to try this on some other number of days or times yeah let's try this oh thank you Phil by the way I'm glad you caught that typo Oh [Laughter] is the background even weirder no it's just a little bit weird the the mic is also uh because the mic is builtin we're getting some some static stuff so keep talking in chat guys I'm gonna die everybody yeah what any other questions any questions you're welcome to try this out on some different values and see whether this works for you if you happen to come by in New York City you might even have this exact conundrum hey that's a little bit better kind of a call okay alright somebody just Tony I'm glad I'm right into the stream thank you thank you for doing this and helping out I subscribed and sign up for a free trial before I even found this I'm gonna try it and we'll be back for more amazing Wow okay and also Tony don't forget there is a C++ can be challenged that's happening from now to end of March 31st so if you complete it learn C++ please please go jump into the if you're become a pro learner Pro subscriber go jump into the code Academy lifelong learner slack and join the CPP challenge and do the challenge and for a chance to wait till got me hoodie and a LD no email which is really cool Audrey knows actually kind of C C++ so this specially yeah so this eventually help out with that and we had a question on how do we integrate the Center an application that's a great question John are you a pro subscriber if you are let's chat in lifelong learner if not should I give at least do you know it's a sunny at code Academy calm so email me and I'll give you an exact four or five resources where you can jump in from here take this into a gooey Apple kitchen awesome any other questions for us before I think you you wanted to go through github right as kind of oh yeah I think we're running out of time but we have a link in the description part part of the C++ Community Challenge article mmhmm I think that's a probably the easiest let's suppose a link to the hold on I need the other one one second sorry about that so there will be a link to the C photos from each other in the link I'm not sure I subscribe you can subscribe okay Angela rivers do you think you'll be more beneficial to learn see boxes or Python or both if you're interested in a big program oh so so Bitcoin is actually written in C++ but we actually do have so we actually do have a blocking course that you could take it's free course on coding at me so obviously I should start off there first and super puzzles teamfights are very differently there some that very syntax differences and sometimes philosophy almost how I should say learn both why not I feel like learning I want to understand the strengths and weaknesses of the other language definitely also well if you know both and you can pick out which one that you joy a little bit more to program it there sure I mean to be fair Andrew uh it's gonna be a little bit faster getting up and running if you don't know C++ or Python it's gonna be a little quicker getting used to Python if you're trying to get something done like that but no but I always recommend knowing more than one language I think it really really helps yes any other questions before we any other questions especially questions about the challenge we're really really excited to do this challenge with everyone [Laughter] Java episode in the future to mentor Eric I must bet it's happening next oh yeah we're gonna make that happen yeah Tony Tony you can look forward to it though yay cool and please release everybody take the lair suppose this course and yeah please be bored buds please let us know if it can be improved in any way design pedagogy whether it's the build out the flow I mean there's actually a give repo now throw the least learn C+ scores that's open source so if you know github please make a pull request and have your project showcase to the world yeah Oh Alexander that's an amazing question any tips for naming variables um so I think I think it's important to be descriptive with your variable naming so if you are unsure what to name something I would go with the shortest possible option yes that is descriptive enough that when you're reading your code later you're not like wait what was that what what is that referring to you want to make sure that it's clear enough to yourself in the future or other programmers who look at your code right and C++ variable names are you can only consist of characters letters basically underscore and numbers but you cannot start off with underscores or numbers therefore the different Commission I feel like to Google Microsoft yarny all have to bury different senders mode the ones we use our snake case and then it's gonna be a little bit different we're gonna be I think be using Pascal case for right for classes but that's a that's a whole other thing don't worry about the banner of it alright well thank you so much everyone thank you everybody hope to see your projects yeah really looking super sweet challenge some amazing projects great thank you
