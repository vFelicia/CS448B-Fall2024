With timestamps:

00:00 - chat right now you can go ahead and say
00:01 - hate all of us
00:04 - max and chad is saying python tuesdays
00:06 - hello world
00:09 - so give us a couple of seconds here
00:11 - until we
00:12 - make sure that we're live all right cool
00:15 - looks like we're good
00:16 - so hi everyone uh welcome to another
00:20 - edition
00:20 - of cs101 my name is alex i'm here with
00:23 - carolyn
00:24 - hi everybody this is carolyn um we're
00:27 - both
00:28 - curriculum developers here at codecademy
00:30 - alex is probably a more familiar face
00:32 - since he's
00:33 - taking point on this live stream series
00:35 - but um
00:36 - uh you've been around carolyn yeah a
00:39 - couple of times but i'm not
00:40 - seasoned at all um but yeah every week
00:45 - uh it's it's a mixed bag of of um
00:48 - people i think yeah
00:52 - right now we're streaming on a couple of
00:53 - different platforms uh
00:55 - carolyn and i are primarily going to be
00:57 - looking at the youtube chat so if you're
00:59 - watching us on twitter or
01:00 - facebook feel free to come over and join
01:02 - us over on youtube
01:04 - i'll try to pull up the the facebook
01:06 - chat as well so i can interact a little
01:07 - bit in there
01:08 - um but really uh we're kind of looking
01:11 - mostly at youtube so i see people in the
01:13 - youtube chat are
01:14 - are saying hi to us which is cool to see
01:16 - um
01:17 - carolyn do you want to give a little bit
01:19 - of a high level preview of what we're
01:21 - going to be talking about today
01:23 - yeah um okay first for um just
01:26 - housekeeping i can't see the youtube
01:28 - chat right now
01:29 - um if alex you could just link that to
01:31 - me
01:32 - yeah sure i can link that to you thank
01:34 - you all for your patience
01:35 - um okay but um today
01:38 - uh we're following this cs101
01:41 - live stream series where um you know so
01:44 - far we've covered um
01:46 - a couple of basic topics that you need
01:49 - to
01:49 - know for computer science we've been
01:51 - using python as
01:53 - the language to kind of practice our cs
01:56 - knowledge
01:57 - and today we're going to be talking
01:58 - about dictionaries which
02:00 - is a a new
02:03 - slightly more not complicated but it
02:07 - allows more functionality than
02:10 - um then lists and
02:13 - um some you know more tiny data
02:17 - structures um this is going to be a more
02:19 - built out
02:19 - type of data structure where
02:23 - you're going to be learning about how to
02:25 - create a dictionary and how to access a
02:27 - dictionary
02:28 - and modify entries in a dictionary and
02:31 - we can
02:31 - go into the syntax once we hit our
02:33 - lessons but
02:35 - there's two lessons for this
02:36 - dictionaries kind of like module
02:39 - um the first one is going to be creating
02:42 - a dictionary how to add
02:44 - how to add keys and values we'll explain
02:46 - what keys and values are in the lesson
02:47 - um and then the the second lesson will
02:50 - be i think
02:51 - updating the dictionary um and i think
02:54 - accessing
02:55 - um like either all the values or a
02:58 - single value
02:59 - and the code challenge um is a crowd
03:02 - favorite
03:03 - it's where um it's essentially three
03:07 - code challenges
03:08 - um and you're applying the knowledge
03:10 - from those lessons and
03:11 - um if you're watching the live stream
03:13 - you'll be watching us kind of
03:15 - tackle the code challenges towards the
03:17 - end um
03:19 - so yeah that's the way i got for today
03:21 - yeah i uh i linked the
03:23 - uh link in the youtube chat right now
03:25 - it's also in the youtube description
03:27 - but yeah we're gonna be going through
03:28 - the seventh module in this
03:30 - cs 101 course and uh
03:34 - one of the things i think is interesting
03:35 - is that this whole um
03:37 - this whole course we're kind of trying
03:40 - to emulate
03:41 - a what your intro computer science class
03:43 - might be if you're in high school or
03:44 - maybe your first year of college
03:46 - and i think traditionally the second
03:50 - course in college is all about data
03:52 - structures and algorithms and so i think
03:53 - that we're kind of to the point where
03:55 - we're
03:55 - um starting to see what that content
03:58 - might look like where we've seen lists
03:59 - we've seen loops we've seen kind of the
04:01 - the foundational things and now we're
04:02 - getting into slightly more
04:04 - niche of like okay why would i want to
04:06 - organize my data
04:07 - in this way rather than with a list
04:10 - um so as we're reaching the end of the
04:12 - series we're kind of getting previews as
04:14 - to what you might see in
04:15 - you know a second semester uh computer
04:18 - science course
04:20 - cool all right you wanna share your
04:21 - screen carolyn and we can get started
04:23 - yeah um
04:26 - and yeah i'm gonna be um keeping an eye
04:29 - on the chat as we go here so
04:31 - if you uh carolyn is mostly going to be
04:34 - uh having her uh you know coding along
04:37 - so if you have questions
04:38 - feel free to post them in the chat and
04:39 - then i can uh ferry them along to
04:41 - carolyn
04:42 - yeah cool so i've shared my screen now
04:46 - i'm in our little live stream series
04:49 - syllabus
04:50 - so this is the link if um
04:54 - you all are wanting to follow along
04:57 - um and i'm gonna scroll down to
05:00 - this dictionaries module um we've got
05:02 - two lessons in an article so
05:05 - i'm gonna just jump right into the
05:06 - lesson let's do it
05:09 - cool well um
05:12 - so firstly um this intro to the lesson
05:15 - is you know what is a dictionary
05:17 - and essentially we can think of it as
05:21 - a um if you think of like a regular
05:24 - dictionary
05:25 - right you're looking for a word um and
05:28 - uh what you find when you like find the
05:31 - word is its meaning
05:32 - right so it's essentially a pairing of
05:35 - um i'll call a key that's what you're
05:38 - searching for
05:39 - um and then the value is what is
05:41 - returned
05:42 - right um so a dictionary is just that
05:46 - an unordered set of key value pairs
05:50 - um so let's say we have this example
05:53 - here where
05:54 - um we've got these menu items at a cafe
05:58 - and we have uh each
06:01 - like item at the cafe um being worth
06:04 - like x
06:05 - number of dollars so what we can do is
06:07 - actually store this menu
06:09 - as a set of key value pairs
06:13 - right so oatmeal maps to three avocado
06:16 - toast
06:16 - six carrot juice five etc
06:20 - and in this little block of code you
06:23 - already see the syntax
06:25 - we call the dictionary menu
06:29 - and the whole dictionary is surrounded
06:32 - by curly braces
06:34 - and then each of the key value pairs is
06:37 - just
06:38 - in this case we want to use a string for
06:41 - the food names
06:42 - and then an integer for the prices
06:46 - so the key and value are separated by
06:49 - colons
06:49 - and each pair is separated by commas and
06:52 - it doesn't matter what order they're in
06:56 - yeah i think i think that's a really big
06:57 - point and something that's different
06:58 - from our previous data structure which
07:00 - was a list
07:01 - where really the only thing that we like
07:03 - the most important thing about the list
07:05 - was the ordering where we could say okay
07:07 - get me something at index two or get me
07:08 - something at index 10 or get me
07:10 - something at index zero
07:11 - and that's really how we interacted with
07:12 - lists was like
07:14 - knowing in what what order things are
07:16 - are coming in
07:17 - that's totally different in dictionaries
07:20 - here
07:20 - where the thing that we're really going
07:22 - to be interacting with a lot are these
07:24 - keys which we can define for ourself as
07:26 - a string or
07:27 - um you know we'll see what else we can
07:28 - define keys as later on
07:30 - cool um yeah so
07:34 - there's um
07:37 - there's this example in the little story
07:39 - here um and then
07:41 - there's another set of um there's
07:43 - another example
07:44 - where we want to set in these
07:48 - instructions where we want to set
07:49 - um temperature sensors
07:53 - in the house so we want to map the room
07:55 - to the temperature in celsius
07:58 - right so this instruction
08:01 - just added a new sensor called pantry
08:05 - and it should be 22 degrees so
08:08 - we want to add this pair to the existing
08:11 - sensors dictionary that's already set up
08:14 - in that
08:15 - little code editor so what i'm going to
08:18 - do is
08:19 - i know that each pair is separated by
08:21 - comma so i'm going to create a new pair
08:23 - i need a new comma and um
08:27 - i'm gonna just type the new pair which
08:30 - is pantry
08:31 - and uh colon
08:34 - um it's good practice it's a little bit
08:36 - easier to read if you add a space
08:38 - between the colon and the the value
08:40 - so um the value here should be 22.
08:44 - cool so that looks right
08:47 - um and now we want to
08:52 - uh kind of see this other dictionary
08:55 - here that's called num camera so we want
08:57 - to
08:58 - uncomment that line um
09:02 - we'll run this it says that where you
09:04 - know we're expecting a syntax error
09:07 - um that means that there's some sort of
09:10 - typo or doesn't really follow the
09:14 - the format that python likes to read in
09:18 - so let's try to fix this to to make it
09:21 - run um it looks like so we've got the
09:25 - colons between each
09:26 - key and value but the pairs are not yet
09:29 - separated by comma so i'm going to add
09:31 - in those commas
09:34 - cool thanks um nice and we can even
09:38 - add another line to print uh that num
09:40 - camera's
09:41 - dictionary here yeah and one one thing
09:44 - to think about as you're starting to
09:45 - work with dictionaries is already you
09:47 - can kind of see the type of data that
09:49 - we're working with
09:50 - has that like key value pair right where
09:54 - we have something that's linked to
09:55 - something else so uh
09:57 - i think the example here was the living
09:59 - room was being set to 21 degrees
10:01 - i don't know what the backyard example
10:03 - is um what is it the number of cameras
10:05 - in each area around your house so our
10:06 - backyard has
10:07 - six cameras and a garage has two cameras
10:09 - in it and so you can think about
10:11 - you probably could store this
10:12 - information in a normal list
10:14 - but you might have to either store a
10:17 - list of lists
10:18 - of like backyard six or maybe you would
10:20 - just have to remember the first thing in
10:22 - your list
10:22 - is you know you store six and you just
10:24 - have to remember it's a backyard
10:26 - so it's like you can always make this
10:28 - work you can always hack together a
10:30 - solution probably using whatever
10:32 - um data structure you're comfortable
10:34 - with but
10:35 - being able to recognize like oh this
10:37 - type of data of something mapping to
10:39 - something else
10:40 - means that it's a really good use for
10:43 - dictionaries like that kind of intuition
10:45 - i think is something that's important
10:47 - yeah so i mean one of the most like um
10:50 - important applications
10:52 - of like a dictionary with a key value
10:54 - pair is
10:55 - um if your web browser is sending data
10:58 - right so um it if it just received like
11:02 - a series of like numbers and codes
11:05 - it wouldn't know what to do with them it
11:06 - would have to be you know associated
11:08 - with
11:09 - um the um the user entered
11:13 - like this password and this name um and
11:16 - your um device is this this name
11:20 - right so um it makes things a lot easier
11:24 - to
11:24 - um it's essentially like a great
11:27 - organizing tool
11:29 - um for your data yeah java javascript
11:33 - uses this all the time i i mean one
11:34 - another one of the things that we want
11:36 - to stress during the in this series is
11:37 - that
11:38 - these concepts are pretty fundamental to
11:40 - any programming language where
11:42 - if you learn it in python you'll
11:43 - definitely be able to then go to
11:45 - javascript and see very similar things
11:47 - uh start to happen i would even say
11:48 - javascript uses this more than python
11:50 - where
11:50 - like everything is an object in in
11:52 - javascript but
11:54 - yeah very applicable to different
11:55 - programming languages yes
11:57 - um and you'll find that a lot of
12:01 - problems that you want to solve um
12:03 - dictionaries really come in handy
12:06 - um okay so let's uh make a dictionary
12:10 - from scratch
12:11 - um the last exercise we kind of had it
12:13 - handed to us
12:15 - um so i'm gonna kind of like
12:19 - skip past the narrative here um and just
12:22 - create this
12:23 - dictionary in the instructions that we
12:25 - want to
12:26 - call translations so
12:30 - python you can directly declare a name
12:33 - declare a variable and
12:37 - we want to map the english words to
12:41 - their definitions in cinderen which is a
12:45 - another language um
12:48 - fantasy language i guess
12:53 - it seems like both of um the key
12:56 - and value should be string in this case
13:00 - so i'm gonna
13:05 - okay i want to make that i'm going to
13:08 - follow the best practices for spacing
13:16 - [Music]
13:18 - from
13:21 - [Music]
13:29 - so i created that dictionary there um
13:32 - comma separated pairs
13:34 - key values with the colon between
13:36 - surrounded by curly braces
13:38 - um you want to just print out that
13:42 - you want to just point out the
13:43 - dictionary just to prove that it exists
13:45 - i think that's always nice to
13:46 - yeah to see that our variable exists and
13:48 - then another thing
13:50 - before we uh um before we move on from
13:54 - this exercise something worth pointing
13:55 - out is in this narrative
13:58 - um so we our values can be very
14:01 - different things right so you can see in
14:03 - that last code block where we have shuri
14:05 - age 18 siblings t'challa and
14:08 - raimonda uh you can see that okay our
14:12 - values can be anything from a string
14:14 - to an integer to a list of strings um
14:17 - but
14:17 - but so far we've only seen the key the
14:20 - thing
14:21 - that comes beforehand be strings and i
14:23 - guess integers um
14:24 - in that in that subtotal to total one
14:26 - yeah
14:27 - and your value can even be a list so
14:31 - in this example right here um it's
14:33 - saying you know
14:34 - people that belong on different teams um
14:37 - you can have you can be like i'm looking
14:39 - for people on the cartography team
14:42 - and then you'll return a list
14:44 - christopher juan and marco
14:46 - um so it's really customizable you can
14:49 - really add as many
14:50 - dimensions to this as you want yeah they
14:53 - can even be
14:54 - more the values can be another
14:56 - dictionary itself so you can have this
14:58 - like nested structure
15:00 - so yeah cool i think i think in a second
15:03 - we will see
15:04 - yeah invalid keys so everything we just
15:06 - talked about
15:07 - was in reference to the value but the
15:09 - keys
15:10 - is a little bit more constrained so
15:12 - let's let's see what the deal with uh
15:14 - keys are
15:15 - cool um so basically there are certain
15:19 - things that we can't have as
15:21 - keys um so in this
15:24 - example right here this um
15:27 - dictionary that's um that you're
15:30 - attempting to make
15:32 - has a list as a key and so
15:35 - that will return you a type error
15:38 - because a list
15:39 - cannot be a key um
15:42 - it's because that list is an object
15:45 - that can be changed um so the way that
15:49 - dictionaries work
15:50 - um i mean we're really lucky that these
15:52 - programming languages make it kind of
15:54 - easy for us but on the like sort of back
15:57 - end of things
15:58 - there are like hashing algorithms to
16:01 - essentially
16:02 - store the key in memory
16:05 - at some sort of location
16:08 - and it's using these hash
16:12 - algorithms in order to also find your
16:16 - your key right in the sea of keys that
16:18 - is dictionary
16:20 - so um that means that if the key itself
16:24 - can
16:25 - can be modified then um
16:28 - that's going to basically mess with the
16:30 - the hashing algorithm
16:32 - that makes this all possible yeah that
16:34 - all of this is again a good example of
16:36 - stuff that you might get into in like
16:38 - your second
16:38 - semester cs class of like okay we might
16:41 - know what a list is and what a
16:43 - dictionary is and like good
16:44 - good use cases to use them that's kind
16:45 - of like the point of this type of
16:47 - exercise but
16:48 - really then what you'll start to learn
16:50 - as you get more into computer science is
16:52 - how does this hash function that carolyn
16:54 - is talking about how does that actually
16:55 - work
16:55 - what are the advantages and
16:56 - disadvantages of it so if you're if
16:59 - you're not familiar with
17:00 - you know hash values and
17:03 - stuff like that for now i would say
17:05 - don't worry about it really the
17:06 - the focus is what are dictionaries used
17:09 - for
17:10 - what's kind of like the format of data
17:12 - that we should be keeping an eye out
17:13 - out for and then as you get further into
17:15 - your computer science studies
17:16 - you'll kind of learn to understand more
17:18 - of the like nitty-gritty detail of how
17:19 - they work
17:21 - yeah um so let's try to fix this
17:24 - dictionary in the instructions here
17:28 - so um firstly like this dictionary
17:31 - scheme doesn't
17:32 - is not very practical because you would
17:34 - never be searching
17:35 - for a list right um
17:39 - like hey i'm looking for johann rosemary
17:42 - and eleanor's
17:44 - last name that's really um
17:47 - that's really impractical too because
17:48 - you have to write your list probably in
17:50 - the exact same order
17:51 - um and um plus it's it's a type error
17:56 - so it actually makes sense to flip these
17:59 - and if we flip these we'll actually
18:02 - have a valid key so what i'm going to do
18:06 - is make the last name the key and the
18:09 - value
18:10 - will be the names of those siblings um
18:14 - so i'm gonna do that for both pairs
18:18 - yeah again a good way to think about
18:19 - this is an actual dictionary where
18:22 - you have a word that you look up its
18:24 - definition
18:25 - this is kind of how we have a word which
18:27 - in this case is the last name of the
18:28 - family and the definition is the list of
18:30 - members that belong to it
18:33 - cool um nice when we went to the next
18:36 - one
18:37 - um where we can create an empty
18:42 - dictionary um so that's pretty
18:43 - straightforward you can
18:45 - add values to your dictionary later you
18:47 - don't have to declare them all at once
18:49 - so here i'm just shooting
18:54 - i would say this is probably the most
18:55 - common uh
18:57 - you usually start with this where you
18:59 - start with an empty dictionary and then
19:01 - add values over time to it right
19:04 - um because usually you know you want to
19:06 - be evolving you want some sort of code
19:08 - to run
19:09 - to slowly add things to the dictionary
19:13 - very rarely do we do you want to hard
19:16 - code a dictionary actually
19:19 - yeah what do you mean by hard code so
19:21 - hard code means that
19:22 - um so like in the previous
19:26 - um exercises like something like this
19:30 - where
19:31 - we are basically adding
19:34 - um pre-existing values and they're
19:37 - staying kind of
19:38 - locked right so they're being declared
19:41 - all the way at the beginning of the
19:42 - program those are values that
19:45 - are like in that box already and
19:48 - um it's we i mean we can always add to
19:52 - a dictionary but the hard coding um
19:56 - it um it basically like
20:00 - is you adding the data kind of
20:03 - painstakingly
20:04 - yeah exactly very like manual labor
20:06 - right kind of like manual data
20:08 - that entry whenever you see that that's
20:09 - kind of what hard coding is is about
20:13 - yeah so if i had like um
20:16 - i don't even
20:19 - never mind i'm not coming up with a good
20:21 - example in my head right now
20:23 - sure um but um this will come up again
20:27 - and you can also you know search for
20:30 - hard coding and
20:31 - um a million people on the internet will
20:33 - be like here are my stories
20:34 - [Laughter]
20:36 - um cool so like we said you know
20:40 - most times you're populating an empty
20:42 - dictionary
20:43 - that means that we are always able to
20:46 - add a key
20:48 - so this is a syntax to add a key
20:51 - to the dictionary so essentially use
20:54 - these brackets
20:56 - it's very similar to how you're indexing
20:58 - in list
20:59 - except now you're kind of indexing by
21:01 - the key
21:03 - which is really nice actually um
21:06 - so for example if we wanted to add this
21:09 - like cheesecake thing to the menu
21:11 - um we would simply say
21:15 - hey uh in the menu dictionary
21:18 - add this entry called cheesecake and
21:21 - make it uh make the value equal to eight
21:25 - so then now you can access that new
21:28 - entry in the dictionary
21:30 - um so let's create um
21:34 - a new empty dictionary here called
21:36 - animals
21:38 - in zoo so
21:41 - that's the empty curly brace
21:44 - and you want to add
21:47 - so it seems like what we want this
21:49 - dictionary to do is keep track of the
21:50 - number of animals
21:56 - so
21:58 - so i think i'm just going to complete
22:00 - this one checkpoint
22:02 - and then we'll move on to the next one
22:04 - because um
22:06 - it's pretty similar for the next few
22:10 - zebras uh plural zebras we wanted
22:13 - plural yes okay cool and then you can do
22:17 - the same thing with monkeys
22:19 - um and dinosaurs you can set it to zero
22:22 - um i'm just gonna print this here
22:26 - yeah and actually do you want to print
22:27 - out um your variable before
22:29 - adding zebras just to see it started
22:31 - empty and then we added zebras
22:33 - cool yeah all right nice and
22:37 - i would even encourage again uh for
22:39 - folks that are kind of new to codecademy
22:41 - or coding in general
22:42 - doing stuff like that i think is really
22:44 - helpful where even if
22:45 - you know you get our green check mark on
22:47 - codecademy i think it's still a good
22:49 - idea
22:49 - to kind of like play around with your
22:50 - code like that to see okay
22:52 - before i did this line three of my code
22:55 - let me see what that variable actually
22:56 - looks like and you can see it was empty
22:58 - and then afterwards let's see what it
23:00 - looks like so i think sometimes you'll
23:01 - find that like
23:03 - even after after you get the green check
23:05 - mark you might wanna like
23:06 - do things like add more print statements
23:08 - or you know try to change value see if
23:10 - you can change deepers to ten
23:12 - um like you know i i really encourage
23:14 - playing around with code
23:15 - even if you've you know passed all of
23:17 - our tests
23:22 - definitely and print statements are
23:24 - always really clutch
23:25 - yeah cool um so we can also
23:29 - add like multiple keys by using this
23:32 - little
23:32 - update um uh
23:35 - function um so update is a built-in
23:39 - function
23:40 - in the sort of dictionary um
23:44 - like objects um so it's um it's a
23:47 - function that comes with
23:48 - all instances of dictionaries
23:52 - so let's try it out directly here
23:56 - where we're adding two new user ids
24:00 - to this existing dictionary
24:04 - so um we'll
24:08 - use the dictionary name um we'll do
24:10 - update
24:12 - and looks like we wanna
24:15 - add in our um
24:19 - argument to that function um
24:22 - of like a complete dictionary in itself
24:25 - so
24:25 - like the the like like the dictionary
24:29 - that we want to
24:30 - we can think of it as like an append i
24:32 - think it's similar to a pendant list
24:35 - um so
24:38 - then inside of this yeah really what
24:41 - we're doing here is that we're adding
24:43 - um this whole new dictionary onto our
24:46 - existing one where
24:47 - okay we have terracote or we have pro
24:49 - programmer we're gonna be adding
24:51 - um and i think uh carolyn you're you're
24:53 - adding um oh
24:55 - not adding instructions but it's it's
24:57 - fine we can probably
24:58 - probably run it
25:01 - entire other dictionary with multiple
25:03 - keys that each have their own value and
25:05 - just kind of sticking it onto our
25:07 - existing dictionary
25:08 - right so this isn't correct but
25:12 - yeah um why don't we print out
25:15 - a user id to yeah
25:21 - next so now it's one um
25:25 - single dictionary they've kind of melded
25:27 - together
25:28 - cool let's uh move on to the next one um
25:31 - definitely recommend
25:32 - looking at this lesson afterward um
25:36 - and going through it in more in detail
25:38 - um if you want to you know get the
25:40 - complete practice
25:41 - yeah what one thing before we move on
25:43 - sorry carolyn i know i it's there's like
25:45 - a million candidates i want to go into
25:47 - um one thing that i wanted to point out
25:49 - here
25:49 - was that this method changes the
25:52 - dictionary
25:53 - in place which means that you um which
25:55 - like sounds very fancy
25:57 - and you'll see us talking about like oh
25:58 - this method changes it in place and this
26:00 - one doesn't
26:01 - what this means is that notice on line
26:03 - two we don't have to
26:05 - reset user ids equals userid.update
26:09 - the method just does it automatically
26:11 - and the variable is changed we don't
26:13 - have to reassign the variable in fact if
26:15 - i think if you do user ids
26:17 - equals to userid.update why don't we try
26:19 - that and uh
26:21 - so just yeah set user ids equal to that
26:23 - thing
26:25 - yeah i wonder what we get yeah so you
26:27 - now get none
26:28 - which is really confusing and basically
26:30 - what that's saying is that this method
26:33 - does the thing and then returns nothing
26:36 - yeah let's just print the like result
26:40 - of this line yeah so that'll
26:43 - maybe give us more yeah it just prints
26:46 - none it returns none
26:47 - yeah so that's a really common mistake
26:51 - of having this in place method
26:53 - that does something and then returns
26:55 - none if you
26:56 - set your variable equal to the the thing
26:58 - that that thing returns
26:59 - you could accidentally like wipe out
27:01 - your entire dictionary right you could
27:02 - accidentally
27:03 - set the entire thing to the return value
27:05 - which is none so that's something to
27:07 - keep an eye out for is that some some
27:08 - methods are in place which means you do
27:11 - it automatically and some methods are
27:12 - not in place which means that you need
27:13 - to
27:14 - reassign the result to a new variable
27:16 - basically
27:17 - yeah definitely um
27:21 - cool let's uh move on to the next one um
27:25 - so in addition to adding keys
27:28 - um we can also update the values in our
27:32 - dictionary right so let's say that in
27:34 - this you know menu
27:36 - that we had since beginning um we want
27:39 - to
27:40 - change the price of one of the items so
27:42 - in this case avocado toast
27:44 - um but we know that there's already an
27:47 - entry with avocado toast as the key
27:50 - we just want to update the the value um
27:53 - it's grown in price i guess like
27:55 - everything um
27:57 - and um
28:02 - basically um so right here um
28:05 - we can overwrite the value of
28:09 - the um overwrite the value at a certain
28:12 - key we can always update
28:14 - an entry to the dictionary right um so
28:18 - let's try that in this
28:22 - example dictionary we have in our code
28:24 - editor so
28:25 - it's for oscar winners um
28:29 - it um
28:32 - we want to add a key so this is
28:36 - knowledge that we already know how to do
28:38 - so
28:40 - um it's the dictionary name plus the
28:43 - bracket
28:44 - so you want to add a key that's
28:46 - supporting actress
28:48 - i want to set that equal to viola davis
28:58 - oh you might have to yeah i have to
29:02 - yeah this is a little hacky but
29:05 - yeah cool um it's the like our internal
29:08 - view
29:08 - sorry about that um and then now instead
29:12 - of
29:13 - um changing
29:16 - i don't know if you you all remember
29:18 - this but um
29:20 - there was a whole mix up at the oscars a
29:22 - few years ago where
29:24 - they falsely announced lala land as the
29:26 - the winner of best picture that year but
29:28 - it was actually moonlight
29:29 - yeah yeah let's let's correct that
29:33 - mistake by
29:34 - now updating best picture to
29:37 - uh moonlight so
29:40 - i'm just gonna refer to the key here
29:44 - and um it's very simple
29:48 - um now it's uh should be moonlight and
29:51 - let's print
29:53 - the oscar winners at the end to
29:56 - see our changes cool so the best picture
30:00 - in moonlight and everything else is
30:02 - in place as well cool
30:05 - nice yeah yeah the thing to note there
30:07 - is that the syntax is almost
30:08 - is is identical for creating the key in
30:11 - the first place and then also
30:12 - editing it yeah exactly
30:16 - um okay list comprehensions those are
30:19 - some big words okay
30:20 - let's say we have two lists and we want
30:23 - to combine them into a dictionary
30:25 - cool um take some wizardry
30:29 - but um python actually
30:33 - um allows us to kind of like zip these
30:35 - things together pretty
30:37 - seamlessly so that's exactly what it's
30:39 - called it's called zip
30:41 - right um
30:44 - so this syntax which is
30:47 - um i don't know if you all have covered
30:50 - list of comprehensions so far
30:51 - alex but this comprehension there's
30:54 - always kind of
30:55 - like a shortcut somewhere and that makes
30:58 - the code
30:59 - um feel like accomplish a lot in a
31:02 - single line
31:03 - right yeah i think i i think that this
31:07 - is a good example of like
31:08 - if you're if you're working with a
31:10 - program that has your data organized in
31:12 - one way that doesn't make a
31:13 - ton of sense right you could see this
31:15 - this line of code online too is caffeine
31:18 - 6440 120. like
31:21 - in a vacuum that makes no sense right
31:23 - right like what
31:24 - is 64 what is 40 what is 120. so
31:27 - sometimes your programs might be using
31:30 - data structures that aren't the best
31:32 - and so this is just a good way to show
31:34 - hey how do we like combine these in a
31:35 - way that
31:36 - uh uh makes slightly more sense or makes
31:38 - it slightly more useful so we don't have
31:40 - to remember oh right espresso was the
31:41 - first one
31:42 - in that list yeah exactly
31:46 - um so i mean we can take this um
31:50 - line and kind of apply it to
31:53 - um this like coffee example here
31:57 - um so let's kind of break down that line
31:59 - a little bit
32:00 - um so let's look at the end first where
32:04 - it's like
32:05 - zip names and heights for this example
32:08 - um zip name heights um
32:12 - returns um a series of tuples
32:15 - i believe right so tuples are
32:18 - pairs it's like x y essentially
32:22 - and um it's saying like
32:25 - let's name each tuple um
32:29 - a key and a value right it doesn't
32:31 - really matter what
32:32 - the those variables are just as matter
32:35 - just as long as
32:36 - we use the same like key value variable
32:39 - names here
32:40 - um so
32:43 - um for every
32:48 - key value um in the zipped
32:51 - in the like tuples that's returned by
32:53 - zip um we create a a
32:56 - pair that's connected by a colon
32:59 - and um and then this whole thing is
33:03 - surrounded by curly braces
33:05 - right okay yeah it's a little bit of
33:07 - fancy syntax i can talk a little bit
33:09 - more about it as you're
33:10 - uh as you're doing the instruction here
33:13 - so let's uh call this zip
33:17 - drinks and i'm gonna
33:21 - copy this line over and just change some
33:23 - of the
33:24 - um the variables so instead of names and
33:27 - heights we have drinks
33:28 - and traffic zips and caffeine together
33:31 - so the drink
33:32 - um sorry the drinks
33:35 - contains all the keys that we want the
33:37 - caffeine contains all the values that we
33:39 - want
33:40 - um so
33:44 - at the very start you're setting it
33:45 - equal zip drinks equal students equals
33:48 - get rid of that student
33:49 - oh whoops there you go
33:55 - uh that is
33:59 - loose zipped can we can we try to print
34:02 - out zipped drinks to see what it looks
34:03 - like
34:05 - yeah i think this is expecting like an
34:08 - intermediary step where we
34:10 - zip the drinks although that looks like
34:13 - a dictionary
34:15 - um yeah yeah so we did it all in one
34:18 - step so first uh
34:20 - first they were expecting us to do
34:22 - zipped drinks is uh
34:24 - just the zip function which zips
34:26 - together the
34:27 - the two lists into a list um
34:30 - and if we print this out it's actually
34:31 - gonna be an ugly print statement
34:33 - do you want to print it's going to be a
34:36 - zip object
34:37 - yeah can you throw a list around that
34:38 - can you cast it as a list
34:41 - like this uh so list and then
34:44 - normal parenthesis around it
34:47 - got it
34:50 - cool so it's a list of tuples um
34:54 - right now once it's zipped um
34:57 - so then that makes sense for this line
35:00 - right here where
35:01 - we're searching for where we're
35:03 - basically going through each
35:06 - tuple in the list we know that they're
35:08 - comma separated we'll name one of these
35:10 - key one of these values and
35:14 - we'll now rewrite them in that syntax
35:19 - um cool i'm going to complete this
35:23 - exercise by
35:27 - um now adding the list comprehension to
35:31 - this zip
35:35 - um this zip result
35:38 - um i'm actually gonna just
35:44 - um call that drink caffeine um
35:48 - so that you all can see that you can use
35:51 - yeah whatever um variables
35:55 - yeah there's nothing magical about that
35:56 - key value variable name
35:59 - so you can print
36:02 - drinks to
36:05 - caffeine cool
36:09 - thanks that's awesome yeah um
36:12 - definitely like review this part a
36:14 - little bit um
36:16 - we should move on to the the next lesson
36:19 - um which will give us
36:22 - um a lot more information too
36:26 - um about um accessing all of the values
36:30 - all at once or all of the keys all at
36:32 - once
36:33 - um cool so um this is basically like the
36:37 - review part of our lesson
36:38 - if you've taken any codecademy lesson
36:41 - there's always a little like wrap up at
36:43 - the end
36:43 - [Music]
36:45 - so in this lesson we've created a
36:47 - dictionary we've added elements
36:50 - elements meaning keys and values updated
36:52 - them
36:53 - and at the end
36:56 - we've learned somehow how to do the list
36:58 - comprehension
37:00 - to create a dictionary from existing
37:02 - lists
37:03 - cool and i'll leave you guys to to
37:08 - complete this review
37:09 - um exercise on your own um so let's move
37:13 - on to
37:14 - the next lesson which is more
37:17 - applications for dictionaries
37:23 - cool um
37:27 - cool so i'm just gonna
37:30 - i think we skipped the intro in here
37:32 - somehow okay
37:34 - so um now that we've got kind of the
37:38 - syntax down
37:39 - um we want to start thinking about like
37:42 - how to solve problems
37:43 - some of the um functionalities of
37:46 - dictionaries
37:47 - right um so we'll be able to
37:52 - um use a get a key
37:56 - get a value from a key and we'll be able
37:59 - to check if a key exists
38:01 - we'll be able to see how big the
38:03 - dictionary is or how long the length of
38:04 - the dictionary
38:06 - and um will be able to go through each
38:09 - pair of keys and the values yeah
38:13 - i think the first lesson really focused
38:14 - on let's create dictionaries and now
38:16 - it's like okay now that we know how to
38:17 - create dictionaries what can we actually
38:18 - do with them so we can
38:19 - start to play around with these yeah
38:21 - cool i like the
38:22 - the exercise here the the um zodiac
38:26 - yeah these are all five i love them this
38:28 - is a
38:29 - couple lessons yeah um
38:33 - cool so um in this
38:37 - uh exercise we'll be learning how to
38:40 - essentially get like values from a key
38:43 - um so let's just directly go to the
38:45 - instructions here
38:47 - um let's print out the list of zodiac
38:49 - signs associated with the
38:51 - earth element um so
38:54 - if we see here the different elements
38:57 - are the keys and the signs associated
39:00 - with each
39:02 - element is the value of that key
39:05 - so we have a key earth here
39:09 - and it tells us to print so i'm going to
39:13 - do a print statement
39:15 - around um zodiac elements and again
39:19 - just like lists your you can index by
39:22 - the name of the key so that's really
39:24 - convenient because
39:26 - then this is all we have to do right we
39:29 - can just refer to the key
39:30 - name um and we get
39:34 - taurus virgo and capricorn
39:37 - cool and then uh let's just print out
39:39 - this the fire signs too while we're at
39:41 - it
39:42 - yeah while we're doing fire how about we
39:43 - try to get exactly leo
39:45 - so how would you say okay now that i've
39:47 - gotten the key how do i access
39:49 - the first element from that list
39:52 - um yeah so if we notice
39:56 - the um the value is actually a list
39:59 - right so that means whatever's um
40:02 - i mean this is us with the knowledge
40:06 - that leo's a fire sign
40:07 - um so we know what fire returns
40:11 - um a list and we know that in this list
40:15 - leo is um the second one in the list so
40:18 - we're indexing from zero
40:20 - so um that would be
40:24 - index one nice so let's
40:27 - try that cool yeah so obviously that
40:29 - took knowledge of us like
40:31 - seeing the dictionary there seeing okay
40:33 - um
40:34 - fire go uh the the key fire goes to the
40:37 - value of this
40:38 - list of three items and then we can see
40:39 - okay leo is the second item in the list
40:42 - so we can index it from
40:43 - using index one so obviously we like
40:45 - kind of have the information here but i
40:47 - think that that's a good example of like
40:48 - you can start to chain these things
40:49 - together first you say okay i have my
40:51 - dictionary
40:52 - i want the value associated with fire
40:54 - and once i get that value
40:56 - i want the first element yeah yeah
40:59 - cool and you can even um loop through
41:01 - this
41:02 - list once you get it too yeah good call
41:05 - cool
41:06 - all right um let's say that
41:09 - um we are searching for something that
41:12 - doesn't exist
41:13 - right um so i'm gonna like
41:17 - skip past the example in the story there
41:20 - um
41:20 - and let's work with the example we have
41:23 - in our code editor
41:24 - um so here this
41:28 - is already there is trying to print
41:32 - trying to print the zodiac elements
41:35 - associated with
41:36 - an energy key um but
41:39 - energy is not a key in the dictionary
41:43 - um i mean what we can do though is
41:47 - add a key associate
41:51 - called energy um
41:55 - and the value
41:58 - should be it's not a zodiac element yeah
42:02 - this is actually similar to how
42:03 - in lists you can only ask for elements
42:07 - up to the length of the list right if i
42:09 - have a list of five things in it if i
42:11 - ask for the item at
42:12 - index 10 you're going to get an error
42:14 - it's pretty similar here where we
42:16 - only have available the stuff that uh
42:20 - um the the keys that are actually in the
42:23 - dictionary
42:26 - exactly cool so this fixed our key error
42:30 - here because now we've actually created
42:31 - a key for
42:33 - um for like this line to access
42:36 - okay let's move on um
42:40 - so i mean typically you really don't
42:42 - want to be
42:43 - kind of caught with a key error because
42:46 - most of the time you may not know what's
42:49 - exactly in the dictionary
42:50 - right so there's a bit of
42:54 - you want there to be some sort of like
42:57 - backup if you can't get the key you
42:59 - don't want your code to error out
43:01 - and stop executing completely so this is
43:04 - where
43:05 - a try accept
43:08 - kind of block allows you to um
43:12 - attempt to get a key right and then if
43:15 - there's a key error there that's called
43:17 - um
43:19 - and you can make an exception for the
43:20 - error right that's what the accept is
43:22 - for so
43:23 - try this line and then
43:27 - if there's a key error make an exception
43:32 - with the code not like stopping on you
43:35 - and
43:36 - when that error is caught print um
43:40 - or execute this line instead
43:43 - um so let's try to
43:47 - um let's try to create
43:50 - um that structure for this
43:54 - caffeine level dictionary um so we can
43:57 - set it up
43:57 - as
44:01 - sort of a backup plan for if somebody
44:03 - tries to
44:04 - access something later on and it's not
44:06 - there so
44:08 - um what somebody's going to try to do is
44:13 - if someone tries to get matcha
44:19 - i'm going to try to print the caffeine
44:21 - level
44:24 - of matcha so we'll try to get that
44:28 - and if it's not there
44:31 - it's going to cause a key error that we
44:34 - can make an exception on
44:36 - and can print unknown
44:40 - caffeine level i just know this thing is
44:43 - going to kill me for the case
44:45 - of capitals yeah so trying to type
44:48 - carefully
44:48 - cool um so that means that
44:54 - um this has successfully caught the key
44:57 - error
44:57 - right because let's say um which
45:01 - we did this line um
45:05 - at the beginning without wrapping it in
45:09 - this
45:09 - try except um there's a key error for
45:12 - matcha immediately
45:13 - and that prevents the rest of the code
45:15 - from executing
45:17 - right so yeah this this kind of stuff is
45:20 - just kind of good practice
45:22 - for you don't really want your program
45:24 - to ever crash
45:25 - you want to handle these errors
45:26 - elegantly like rather than
45:28 - program crashing and giving you this
45:30 - ugly error message instead you can
45:32 - anticipate
45:33 - like okay if not if the key matcher
45:34 - doesn't exist
45:36 - let's print this thing in particular to
45:38 - give people a clue as to
45:39 - what happened yeah cool um
45:44 - i wonder if we want to um
45:49 - yeah well we'll have to get through some
45:51 - of these i think to do the code
45:52 - challenges later on
45:54 - yeah i think i want to get to get all
45:57 - the keys
45:58 - and then get all values yeah we
45:59 - definitely need to get all values to do
46:01 - the code challenge so let's try to get
46:02 - to that
46:03 - okay cool um so above this block you can
46:07 - add um
46:08 - you can actually add an entry so that it
46:09 - doesn't fail let's move on to
46:12 - um
46:16 - so essentially there is a better
46:19 - uh or safer way to get a key um
46:22 - that is not just simply indexing
46:25 - right so um
46:28 - what's really nice is that python
46:30 - dictionaries also has another built-in
46:32 - function called get
46:34 - and what that does is actually handles
46:37 - the
46:37 - key error for you
46:40 - and uh
46:44 - you can use get to specify
46:47 - the um so
46:50 - what the get will do is it'll default
46:53 - return none
46:54 - if there is no key but you can also set
46:57 - like a
46:58 - a default return value for forget if
47:01 - that key is not found
47:02 - right um it just makes it so you don't
47:05 - have to write that
47:06 - um every single time you're trying to
47:09 - like access keys
47:12 - so i'm just gonna do like a short one
47:15 - here
47:16 - um so let's
47:19 - just print um the result of
47:22 - trying to get this entry
47:26 - terror coder um
47:29 - that's so terracotta's coder is a real
47:32 - one but let's say that like i made a
47:34 - typo in here
47:35 - right so then the get would return a
47:37 - none instead of a key error
47:40 - right and then you can follow the rest
47:43 - of this exercise to learn how to
47:46 - to practice adding a default value
47:49 - if there's no um if there's no
47:52 - value associated with the key that
47:54 - you're looking for
47:56 - um do we want to move on yeah let's move
47:58 - on okay
47:59 - cool um you can also delete a key
48:03 - um which comes into handy
48:06 - and um you can delete it using this
48:08 - thing called pop
48:10 - um so just like like i want this popped
48:14 - off
48:15 - so that's a that's a way to remember um
48:18 - that pop function
48:22 - let's just try it in this example
48:26 - where we have some sort of
48:29 - menu thing again um the items and their
48:32 - um
48:34 - their prices um so this isn't a game
48:37 - okay um
48:40 - carolyn earlier we were called called
48:42 - out for not knowing the uh that language
48:44 - in the other example was uh
48:46 - elvish from from tonkin it was one of
48:48 - tolkien's
48:50 - languages i don't see why
48:54 - like we were being called out because no
48:57 - i'm kidding
48:59 - they definitely yeah yeah yeah
49:02 - um i had a feeling that that was that
49:05 - yeah
49:06 - um in one line okay this is kind of a
49:09 - long exam
49:10 - um instruction um
49:17 - yeah i think let's let's just see what
49:18 - happens if we pop
49:20 - like right pop something specific this
49:23 - is not super relevant to for the code
49:25 - challenge so i feel like we should uh
49:27 - right okay so let's say we want to get
49:29 - rid of this power stew thing
49:32 - um and to check that
49:36 - we can print it right after the pop
49:37 - statement
49:39 - cool so um
49:42 - we can ignore that error right there
49:43 - because we're kind of going
49:45 - rogue from the lesson um as you can see
49:48 - here
49:49 - um after this pop the
49:52 - that entry is no longer there um we can
49:56 - also get
49:56 - all of the keys all at once this is
49:59 - going to be really relevant for
50:00 - our code challenge um and it's
50:04 - uh and what you have to do is simply use
50:07 - this
50:08 - stock keys function that's also built
50:10 - into the dictionary
50:12 - so let's say i want to uh get all the
50:15 - keys
50:16 - of the user ids i'm going to print
50:20 - the keys um
50:24 - yeah so it's kind of in this weird
50:26 - format it's kind of looks like a list
50:28 - um and i imagine we could access the
50:30 - first one by doing can we do user ids
50:33 - dot keys and then index of zero to see
50:36 - if we get terracotta
50:37 - yeah yeah um so
50:40 - it's a keys object so we could
50:44 - eventually do some funky stuff like
50:45 - casting it to a list
50:47 - right um and then we can actually
50:50 - iterate through it
50:51 - so this is where we can um loop through
50:53 - things
50:54 - so let's say i want to do let's say user
50:58 - in user ids.keys and that way i can
51:02 - print i need a column at the end of line
51:06 - 6.
51:08 - hold on right cool so now
51:11 - um iterating through it i can isolate
51:14 - out um
51:15 - all of the the keys and print them out
51:17 - one by one
51:18 - cool so that's relevant knowledge we'll
51:20 - move on to the next one which is
51:22 - get all values which is also very
51:25 - similar
51:26 - um dot values so let's just
51:29 - do the same thing where um
51:32 - we are looping through
51:36 - the values for num in num
51:39 - exercises dot values
51:43 - print num and
51:47 - that returns us all the values
51:51 - oh we can also use a list
51:56 - to grab to cast the values
52:01 - so let's say we want to do
52:04 - that for this exercises thing
52:07 - um i'm just going to like wrap the print
52:09 - statement around so we can see it
52:10 - directly
52:11 - cool so um you can cast
52:14 - the values to a list and just print that
52:16 - list directly as well
52:18 - yeah one thing to note here is that
52:19 - again dictionaries are unordered
52:21 - so carolyn before line three could you
52:24 - add a new key
52:25 - just like we can just make up what we
52:27 - want it to do
52:28 - um so add in a new key yeah so new
52:32 - exercises of
52:33 - um carolyn is or whatever um
52:36 - is um a hundred
52:39 - and it's uh it's not quite the syntax
52:42 - it's gonna be
52:43 - caroline i'm sorry you're kidding you're
52:46 - totally good
52:47 - it's hard to it's hard to do this uh on
52:49 - the fly
52:52 - oh it's a typo there you go okay cool so
52:56 - now
52:56 - you can see um i've been added to the
52:59 - values
53:00 - yeah it just kind of gets tacked on to
53:02 - the end one thing to keep to be aware of
53:04 - is that
53:04 - this is i actually didn't know if that
53:06 - would be tacked onto the end or not or
53:08 - if it would have been inserted someplace
53:09 - weird
53:10 - um you can't really rely on dictionaries
53:13 - in being in this order of like
53:17 - okay the the thing that i added is
53:18 - always going to be at the end right
53:20 - definitely more of a list thing and
53:22 - because we're working with dictionaries
53:23 - which is
53:23 - unordered you can't really rely on right
53:26 - right i think
53:28 - it's um for like this like pretty small
53:30 - dictionary
53:32 - um yeah it's relatively
53:36 - um i mean i think especially if it's
53:39 - hard-coded as well
53:41 - i think it might look different well
53:44 - you can you guys can play around um but
53:47 - just know that you know
53:48 - it could be unordered and don't be
53:50 - surprised
53:52 - yeah in fact you'll see i think we
53:54 - should jump to one of the code
53:55 - challenges now and you'll see that
53:56 - cool the kind of questions that we ask
53:59 - about dictionaries
54:00 - don't don't rely on an order of anything
54:03 - we're either like
54:04 - summing up all of the values together in
54:06 - which case the order obviously doesn't
54:08 - matter we can just sum them up however
54:09 - in whatever order we want right or
54:12 - um yeah so just the order typically
54:15 - doesn't matter when you're dealing with
54:16 - dictionaries yeah um and just real quick
54:19 - here
54:20 - you can also grab the items it's also
54:22 - gonna return it in that like
54:24 - kind of tuple um form
54:27 - so you can use that same thing we're
54:31 - we're doing similar to when we're doing
54:33 - list comprehension
54:35 - we can just um create like
54:39 - temporary variables to um stand in for
54:42 - those tuples and you can iterate through
54:46 - all the key value pairs as well that way
54:49 - cool
54:50 - um nice let's move on to the code
54:53 - challenge
54:54 - um i'm gonna keep this lesson open just
54:56 - in case we need to like flip back
54:58 - cool um so now i'm in the code
55:01 - challenges which is like
55:03 - if you actually go to up next that's
55:05 - what it is
55:06 - um i'm just gonna go back to the
55:08 - syllabus here since i already have
55:11 - this open the syllabus will be nice for
55:13 - me to
55:14 - go back to a lesson if i need to well so
55:17 - um there's three challenges here um
55:20 - you want to tackle
55:25 - whichever one you want i think the uh
55:27 - let's do one or three because that that
55:28 - involves keeping through the uh
55:30 - the values maybe one i think one is
55:32 - awesome
55:33 - so let's do one um and it's pretty
55:36 - straightforward
55:37 - um this code challenge wants us to
55:40 - write a function um so that's knowledge
55:44 - from our
55:44 - a previous module and
55:48 - we want to call that function some
55:49 - values
55:51 - that accepts a dictionary um
55:55 - and the function should return the sum
55:58 - of the values of the dictionary so
56:02 - um thinking through that let's
56:05 - let's write like the syntax of the sum
56:08 - values first
56:09 - so i think it's def i'm not a python
56:12 - coder yep got it um def
56:16 - uh call it uh this function name
56:20 - sum values and it wants to take
56:23 - a my dictionary as a parameter
56:28 - yeah okay and
56:32 - um inside of these
56:36 - inside of this function um we want to
56:39 - get all the values
56:41 - so um
56:44 - i think if we think back to like just a
56:47 - few minutes ago when we were
56:48 - um learning like the dot values
56:51 - um function in the dictionary um
56:57 - we know that my dictionary dot values
57:00 - is going to return us that like
57:04 - dict values type of
57:07 - um data form and we know that
57:10 - we know at the very least that we can um
57:13 - iterate through it that we can loop
57:14 - through it
57:15 - so that's so if we loop through it
57:18 - that's going to allow us to kind of like
57:20 - take each value as they come and add it
57:23 - to like a sum
57:25 - like a running total of some kind so i'm
57:27 - gonna
57:29 - start a total of zero at the very
57:32 - beginning
57:34 - and um
57:37 - and i'm gonna write a little for loop to
57:40 - go through that values
57:42 - um so for say
57:46 - let's call it val is this
57:50 - is this syntax looking right alex yep
57:52 - that looks good to me
57:53 - so we're gonna my dictionary.values
57:55 - again is taking is
57:56 - is that list type object it's not
57:58 - exactly a list but it's something that
58:00 - we can loop through
58:01 - we're gonna loop through that and or
58:03 - every value in this variable called
58:05 - val and then we're gonna want to do
58:06 - something with the vowel right
58:08 - um and we're going to want to add the
58:11 - val to
58:11 - the total so we want to update that
58:14 - total every time
58:16 - um so we can either do this which is
58:19 - set total equals to total plus the vowel
58:23 - or um we can use like a shorthand there
58:26 - here which is the plus equals
58:32 - yeah and um that's
58:35 - uh it for our for loop value
58:39 - or our for loop code because um
58:42 - it just has to add the values right and
58:45 - then
58:46 - at the end we want to return
58:49 - that sum that we've been keeping track
58:50 - of which is total
58:53 - so i'm just going to run this just for
58:54 - just to check the syntax
58:57 - okay so nothing is it's great that
59:00 - there's
59:00 - no uh error messages so um
59:04 - this is convenient um we can uncomment
59:07 - the function calls below to test
59:09 - our sum values function i'm going to
59:12 - uncomment that first line first
59:15 - and you know that this should be five
59:17 - plus
59:18 - two plus three which is ten
59:21 - so awesome cool um so
59:24 - that's the output of some values
59:27 - on this dictionary well and let's print
59:32 - the next line
59:34 - um in this case the values are one two
59:37 - and three so the time the sum should be
59:40 - six
59:43 - awesome cool um
59:47 - we are at two o'clock right now should
59:49 - we keep going alexa
59:50 - um i think we should probably call it
59:52 - here but before we go yeah
59:53 - again a thing that i like to stress as
59:55 - we get to these code challenges
59:56 - is to you know don't always immediately
60:00 - um go to our like check answer button
60:02 - down in the bottom bottom right corner
60:04 - like caroline
60:05 - you scroll down hit check answer now you
60:06 - should get your little like you were
60:08 - right
60:08 - right right i would say one thing that i
60:11 - notice a lot with people using
60:12 - codecademy is that
60:13 - they are really into like making sure
60:16 - our approved thumbs up for clap emoji or
60:19 - whatever
60:20 - they get that i think the more valuable
60:21 - thing is to
60:24 - build out the function on your own um
60:27 - without really having to rely on us like
60:30 - checking for
60:31 - um whether whether or not you got it
60:32 - right so somebody so if i were
60:34 - struggling with this
60:35 - something that i might do is inside that
60:38 - for loop i might
60:39 - print val um and so um
60:43 - right yeah yeah exactly so
60:46 - so now i can see okay when i pass this
60:49 - uh when line 10 is get getting called
60:51 - so yeah i'm gonna uncomment the other
60:54 - prints
61:02 - yeah so now i can see okay i have five i
61:04 - have two i have three and then at the
61:05 - end of the day
61:06 - those all at some up to ten so doing
61:09 - stuff
61:10 - like that i think is is
61:13 - probably the most important thing that
61:15 - you can be doing these code challenges
61:16 - of if you're getting lost and confused
61:18 - and
61:18 - you're um you're not exactly sure what's
61:21 - going on
61:22 - just uh and you're gonna have to cast
61:24 - the uh vowel to a
61:26 - to a string um if you do str
61:29 - uh
61:32 - doing stuff like that really can kind of
61:35 - help you
61:36 - understand where you are in your process
61:38 - it can help you develop like a plan of
61:39 - action of okay i'm not
61:41 - i you know i have this value but i
61:44 - haven't added it to total yet
61:45 - things like that is really helpful so
61:47 - doing that rather than just like writing
61:48 - your code and
61:49 - checking the answer and hoping that it
61:51 - was right i think is um
61:53 - yeah really important
61:57 - and um what i was just doing while i was
62:00 - talking was just adding print statements
62:03 - that are a little bit more specific
62:04 - because you can end up getting like
62:06 - really jumbled if you're
62:08 - printing multiple values in the same
62:11 - code block yeah so i've just made it
62:13 - clear
62:14 - whether the number that's being printed
62:16 - is the current value that is being
62:18 - looked at
62:19 - or it's the the running total um
62:24 - cool yeah um
62:28 - sorry what yeah i i was just gonna wrap
62:31 - up but uh yeah go ahead
62:32 - okay yeah definitely recommend um you
62:35 - know
62:35 - completing these code challenges but you
62:38 - know most importantly trying to
62:40 - struggle through them on your own um and
62:43 - use
62:44 - these uh little you know boxes as your
62:47 - playground
62:48 - um you know you can you can also um
62:51 - start
62:52 - taking some of these into your own code
62:54 - editor on your computer
62:56 - um as well that's something we encourage
62:59 - yeah yeah so cool um yeah i think we
63:02 - should probably
63:03 - log off for today but thank you for
63:05 - watching
63:06 - um next week is actually gonna be our
63:08 - last live stream in this session and
63:10 - we're gonna dive into
63:12 - classes and objects and object-oriented
63:14 - programming i see
63:15 - sami in the chat is asking a little bit
63:17 - about object-oriented programming so
63:18 - next week we'll be super relevant for
63:20 - that
63:21 - um yeah and then uh and then that's
63:23 - gonna be our last
63:24 - session in this little yes 101 series
63:27 - so um yeah thanks for uh yeah thanks for
63:30 - doing this with me today carolyn
63:32 - yeah of course um last very very last
63:34 - thing i'm sorry
63:35 - i just i meant to say this during the
63:37 - whole live stream but
63:38 - um dictionaries are what uh python calls
63:41 - these data structures but other um
63:44 - uh languages like java calls these like
63:49 - you can declare like a hash map um so
63:51 - you'll hear that word a lot it means the
63:52 - same exact thing as dictionaries
63:55 - and i'm not sure what they're called in
63:57 - javascript maybe they're just
63:59 - objects in they're just called objects
64:02 - yeah which is which is confusing because
64:03 - we're about to get into classes and
64:05 - objects and that object is different
64:07 - than a javascript object
64:08 - kind of right right yeah yeah um
64:12 - but at the end of the day it's just
64:13 - these key value pairs um that exists in
64:15 - all
64:16 - programming languages yeah cool
64:19 - cool all right thank you everybody
64:22 - thanks everyone we'll see you next week

Cleaned transcript:

chat right now you can go ahead and say hate all of us max and chad is saying python tuesdays hello world so give us a couple of seconds here until we make sure that we're live all right cool looks like we're good so hi everyone uh welcome to another edition of cs101 my name is alex i'm here with carolyn hi everybody this is carolyn um we're both curriculum developers here at codecademy alex is probably a more familiar face since he's taking point on this live stream series but um uh you've been around carolyn yeah a couple of times but i'm not seasoned at all um but yeah every week uh it's it's a mixed bag of of um people i think yeah right now we're streaming on a couple of different platforms uh carolyn and i are primarily going to be looking at the youtube chat so if you're watching us on twitter or facebook feel free to come over and join us over on youtube i'll try to pull up the the facebook chat as well so i can interact a little bit in there um but really uh we're kind of looking mostly at youtube so i see people in the youtube chat are are saying hi to us which is cool to see um carolyn do you want to give a little bit of a high level preview of what we're going to be talking about today yeah um okay first for um just housekeeping i can't see the youtube chat right now um if alex you could just link that to me yeah sure i can link that to you thank you all for your patience um okay but um today uh we're following this cs101 live stream series where um you know so far we've covered um a couple of basic topics that you need to know for computer science we've been using python as the language to kind of practice our cs knowledge and today we're going to be talking about dictionaries which is a a new slightly more not complicated but it allows more functionality than um then lists and um some you know more tiny data structures um this is going to be a more built out type of data structure where you're going to be learning about how to create a dictionary and how to access a dictionary and modify entries in a dictionary and we can go into the syntax once we hit our lessons but there's two lessons for this dictionaries kind of like module um the first one is going to be creating a dictionary how to add how to add keys and values we'll explain what keys and values are in the lesson um and then the the second lesson will be i think updating the dictionary um and i think accessing um like either all the values or a single value and the code challenge um is a crowd favorite it's where um it's essentially three code challenges um and you're applying the knowledge from those lessons and um if you're watching the live stream you'll be watching us kind of tackle the code challenges towards the end um so yeah that's the way i got for today yeah i uh i linked the uh link in the youtube chat right now it's also in the youtube description but yeah we're gonna be going through the seventh module in this cs 101 course and uh one of the things i think is interesting is that this whole um this whole course we're kind of trying to emulate a what your intro computer science class might be if you're in high school or maybe your first year of college and i think traditionally the second course in college is all about data structures and algorithms and so i think that we're kind of to the point where we're um starting to see what that content might look like where we've seen lists we've seen loops we've seen kind of the the foundational things and now we're getting into slightly more niche of like okay why would i want to organize my data in this way rather than with a list um so as we're reaching the end of the series we're kind of getting previews as to what you might see in you know a second semester uh computer science course cool all right you wanna share your screen carolyn and we can get started yeah um and yeah i'm gonna be um keeping an eye on the chat as we go here so if you uh carolyn is mostly going to be uh having her uh you know coding along so if you have questions feel free to post them in the chat and then i can uh ferry them along to carolyn yeah cool so i've shared my screen now i'm in our little live stream series syllabus so this is the link if um you all are wanting to follow along um and i'm gonna scroll down to this dictionaries module um we've got two lessons in an article so i'm gonna just jump right into the lesson let's do it cool well um so firstly um this intro to the lesson is you know what is a dictionary and essentially we can think of it as a um if you think of like a regular dictionary right you're looking for a word um and uh what you find when you like find the word is its meaning right so it's essentially a pairing of um i'll call a key that's what you're searching for um and then the value is what is returned right um so a dictionary is just that an unordered set of key value pairs um so let's say we have this example here where um we've got these menu items at a cafe and we have uh each like item at the cafe um being worth like x number of dollars so what we can do is actually store this menu as a set of key value pairs right so oatmeal maps to three avocado toast six carrot juice five etc and in this little block of code you already see the syntax we call the dictionary menu and the whole dictionary is surrounded by curly braces and then each of the key value pairs is just in this case we want to use a string for the food names and then an integer for the prices so the key and value are separated by colons and each pair is separated by commas and it doesn't matter what order they're in yeah i think i think that's a really big point and something that's different from our previous data structure which was a list where really the only thing that we like the most important thing about the list was the ordering where we could say okay get me something at index two or get me something at index 10 or get me something at index zero and that's really how we interacted with lists was like knowing in what what order things are are coming in that's totally different in dictionaries here where the thing that we're really going to be interacting with a lot are these keys which we can define for ourself as a string or um you know we'll see what else we can define keys as later on cool um yeah so there's um there's this example in the little story here um and then there's another set of um there's another example where we want to set in these instructions where we want to set um temperature sensors in the house so we want to map the room to the temperature in celsius right so this instruction just added a new sensor called pantry and it should be 22 degrees so we want to add this pair to the existing sensors dictionary that's already set up in that little code editor so what i'm going to do is i know that each pair is separated by comma so i'm going to create a new pair i need a new comma and um i'm gonna just type the new pair which is pantry and uh colon um it's good practice it's a little bit easier to read if you add a space between the colon and the the value so um the value here should be 22. cool so that looks right um and now we want to uh kind of see this other dictionary here that's called num camera so we want to uncomment that line um we'll run this it says that where you know we're expecting a syntax error um that means that there's some sort of typo or doesn't really follow the the format that python likes to read in so let's try to fix this to to make it run um it looks like so we've got the colons between each key and value but the pairs are not yet separated by comma so i'm going to add in those commas cool thanks um nice and we can even add another line to print uh that num camera's dictionary here yeah and one one thing to think about as you're starting to work with dictionaries is already you can kind of see the type of data that we're working with has that like key value pair right where we have something that's linked to something else so uh i think the example here was the living room was being set to 21 degrees i don't know what the backyard example is um what is it the number of cameras in each area around your house so our backyard has six cameras and a garage has two cameras in it and so you can think about you probably could store this information in a normal list but you might have to either store a list of lists of like backyard six or maybe you would just have to remember the first thing in your list is you know you store six and you just have to remember it's a backyard so it's like you can always make this work you can always hack together a solution probably using whatever um data structure you're comfortable with but being able to recognize like oh this type of data of something mapping to something else means that it's a really good use for dictionaries like that kind of intuition i think is something that's important yeah so i mean one of the most like um important applications of like a dictionary with a key value pair is um if your web browser is sending data right so um it if it just received like a series of like numbers and codes it wouldn't know what to do with them it would have to be you know associated with um the um the user entered like this password and this name um and your um device is this this name right so um it makes things a lot easier to um it's essentially like a great organizing tool um for your data yeah java javascript uses this all the time i i mean one another one of the things that we want to stress during the in this series is that these concepts are pretty fundamental to any programming language where if you learn it in python you'll definitely be able to then go to javascript and see very similar things uh start to happen i would even say javascript uses this more than python where like everything is an object in in javascript but yeah very applicable to different programming languages yes um and you'll find that a lot of problems that you want to solve um dictionaries really come in handy um okay so let's uh make a dictionary from scratch um the last exercise we kind of had it handed to us um so i'm gonna kind of like skip past the narrative here um and just create this dictionary in the instructions that we want to call translations so python you can directly declare a name declare a variable and we want to map the english words to their definitions in cinderen which is a another language um fantasy language i guess it seems like both of um the key and value should be string in this case so i'm gonna okay i want to make that i'm going to follow the best practices for spacing from so i created that dictionary there um comma separated pairs key values with the colon between surrounded by curly braces um you want to just print out that you want to just point out the dictionary just to prove that it exists i think that's always nice to yeah to see that our variable exists and then another thing before we uh um before we move on from this exercise something worth pointing out is in this narrative um so we our values can be very different things right so you can see in that last code block where we have shuri age 18 siblings t'challa and raimonda uh you can see that okay our values can be anything from a string to an integer to a list of strings um but but so far we've only seen the key the thing that comes beforehand be strings and i guess integers um in that in that subtotal to total one yeah and your value can even be a list so in this example right here um it's saying you know people that belong on different teams um you can have you can be like i'm looking for people on the cartography team and then you'll return a list christopher juan and marco um so it's really customizable you can really add as many dimensions to this as you want yeah they can even be more the values can be another dictionary itself so you can have this like nested structure so yeah cool i think i think in a second we will see yeah invalid keys so everything we just talked about was in reference to the value but the keys is a little bit more constrained so let's let's see what the deal with uh keys are cool um so basically there are certain things that we can't have as keys um so in this example right here this um dictionary that's um that you're attempting to make has a list as a key and so that will return you a type error because a list cannot be a key um it's because that list is an object that can be changed um so the way that dictionaries work um i mean we're really lucky that these programming languages make it kind of easy for us but on the like sort of back end of things there are like hashing algorithms to essentially store the key in memory at some sort of location and it's using these hash algorithms in order to also find your your key right in the sea of keys that is dictionary so um that means that if the key itself can can be modified then um that's going to basically mess with the the hashing algorithm that makes this all possible yeah that all of this is again a good example of stuff that you might get into in like your second semester cs class of like okay we might know what a list is and what a dictionary is and like good good use cases to use them that's kind of like the point of this type of exercise but really then what you'll start to learn as you get more into computer science is how does this hash function that carolyn is talking about how does that actually work what are the advantages and disadvantages of it so if you're if you're not familiar with you know hash values and stuff like that for now i would say don't worry about it really the the focus is what are dictionaries used for what's kind of like the format of data that we should be keeping an eye out out for and then as you get further into your computer science studies you'll kind of learn to understand more of the like nittygritty detail of how they work yeah um so let's try to fix this dictionary in the instructions here so um firstly like this dictionary scheme doesn't is not very practical because you would never be searching for a list right um like hey i'm looking for johann rosemary and eleanor's last name that's really um that's really impractical too because you have to write your list probably in the exact same order um and um plus it's it's a type error so it actually makes sense to flip these and if we flip these we'll actually have a valid key so what i'm going to do is make the last name the key and the value will be the names of those siblings um so i'm gonna do that for both pairs yeah again a good way to think about this is an actual dictionary where you have a word that you look up its definition this is kind of how we have a word which in this case is the last name of the family and the definition is the list of members that belong to it cool um nice when we went to the next one um where we can create an empty dictionary um so that's pretty straightforward you can add values to your dictionary later you don't have to declare them all at once so here i'm just shooting i would say this is probably the most common uh you usually start with this where you start with an empty dictionary and then add values over time to it right um because usually you know you want to be evolving you want some sort of code to run to slowly add things to the dictionary very rarely do we do you want to hard code a dictionary actually yeah what do you mean by hard code so hard code means that um so like in the previous um exercises like something like this where we are basically adding um preexisting values and they're staying kind of locked right so they're being declared all the way at the beginning of the program those are values that are like in that box already and um it's we i mean we can always add to a dictionary but the hard coding um it um it basically like is you adding the data kind of painstakingly yeah exactly very like manual labor right kind of like manual data that entry whenever you see that that's kind of what hard coding is is about yeah so if i had like um i don't even never mind i'm not coming up with a good example in my head right now sure um but um this will come up again and you can also you know search for hard coding and um a million people on the internet will be like here are my stories [Laughter] um cool so like we said you know most times you're populating an empty dictionary that means that we are always able to add a key so this is a syntax to add a key to the dictionary so essentially use these brackets it's very similar to how you're indexing in list except now you're kind of indexing by the key which is really nice actually um so for example if we wanted to add this like cheesecake thing to the menu um we would simply say hey uh in the menu dictionary add this entry called cheesecake and make it uh make the value equal to eight so then now you can access that new entry in the dictionary um so let's create um a new empty dictionary here called animals in zoo so that's the empty curly brace and you want to add so it seems like what we want this dictionary to do is keep track of the number of animals so so i think i'm just going to complete this one checkpoint and then we'll move on to the next one because um it's pretty similar for the next few zebras uh plural zebras we wanted plural yes okay cool and then you can do the same thing with monkeys um and dinosaurs you can set it to zero um i'm just gonna print this here yeah and actually do you want to print out um your variable before adding zebras just to see it started empty and then we added zebras cool yeah all right nice and i would even encourage again uh for folks that are kind of new to codecademy or coding in general doing stuff like that i think is really helpful where even if you know you get our green check mark on codecademy i think it's still a good idea to kind of like play around with your code like that to see okay before i did this line three of my code let me see what that variable actually looks like and you can see it was empty and then afterwards let's see what it looks like so i think sometimes you'll find that like even after after you get the green check mark you might wanna like do things like add more print statements or you know try to change value see if you can change deepers to ten um like you know i i really encourage playing around with code even if you've you know passed all of our tests definitely and print statements are always really clutch yeah cool um so we can also add like multiple keys by using this little update um uh function um so update is a builtin function in the sort of dictionary um like objects um so it's um it's a function that comes with all instances of dictionaries so let's try it out directly here where we're adding two new user ids to this existing dictionary so um we'll use the dictionary name um we'll do update and looks like we wanna add in our um argument to that function um of like a complete dictionary in itself so like the the like like the dictionary that we want to we can think of it as like an append i think it's similar to a pendant list um so then inside of this yeah really what we're doing here is that we're adding um this whole new dictionary onto our existing one where okay we have terracote or we have pro programmer we're gonna be adding um and i think uh carolyn you're you're adding um oh not adding instructions but it's it's fine we can probably probably run it entire other dictionary with multiple keys that each have their own value and just kind of sticking it onto our existing dictionary right so this isn't correct but yeah um why don't we print out a user id to yeah next so now it's one um single dictionary they've kind of melded together cool let's uh move on to the next one um definitely recommend looking at this lesson afterward um and going through it in more in detail um if you want to you know get the complete practice yeah what one thing before we move on sorry carolyn i know i it's there's like a million candidates i want to go into um one thing that i wanted to point out here was that this method changes the dictionary in place which means that you um which like sounds very fancy and you'll see us talking about like oh this method changes it in place and this one doesn't what this means is that notice on line two we don't have to reset user ids equals userid.update the method just does it automatically and the variable is changed we don't have to reassign the variable in fact if i think if you do user ids equals to userid.update why don't we try that and uh so just yeah set user ids equal to that thing yeah i wonder what we get yeah so you now get none which is really confusing and basically what that's saying is that this method does the thing and then returns nothing yeah let's just print the like result of this line yeah so that'll maybe give us more yeah it just prints none it returns none yeah so that's a really common mistake of having this in place method that does something and then returns none if you set your variable equal to the the thing that that thing returns you could accidentally like wipe out your entire dictionary right you could accidentally set the entire thing to the return value which is none so that's something to keep an eye out for is that some some methods are in place which means you do it automatically and some methods are not in place which means that you need to reassign the result to a new variable basically yeah definitely um cool let's uh move on to the next one um so in addition to adding keys um we can also update the values in our dictionary right so let's say that in this you know menu that we had since beginning um we want to change the price of one of the items so in this case avocado toast um but we know that there's already an entry with avocado toast as the key we just want to update the the value um it's grown in price i guess like everything um and um basically um so right here um we can overwrite the value of the um overwrite the value at a certain key we can always update an entry to the dictionary right um so let's try that in this example dictionary we have in our code editor so it's for oscar winners um it um we want to add a key so this is knowledge that we already know how to do so um it's the dictionary name plus the bracket so you want to add a key that's supporting actress i want to set that equal to viola davis oh you might have to yeah i have to yeah this is a little hacky but yeah cool um it's the like our internal view sorry about that um and then now instead of um changing i don't know if you you all remember this but um there was a whole mix up at the oscars a few years ago where they falsely announced lala land as the the winner of best picture that year but it was actually moonlight yeah yeah let's let's correct that mistake by now updating best picture to uh moonlight so i'm just gonna refer to the key here and um it's very simple um now it's uh should be moonlight and let's print the oscar winners at the end to see our changes cool so the best picture in moonlight and everything else is in place as well cool nice yeah yeah the thing to note there is that the syntax is almost is is identical for creating the key in the first place and then also editing it yeah exactly um okay list comprehensions those are some big words okay let's say we have two lists and we want to combine them into a dictionary cool um take some wizardry but um python actually um allows us to kind of like zip these things together pretty seamlessly so that's exactly what it's called it's called zip right um so this syntax which is um i don't know if you all have covered list of comprehensions so far alex but this comprehension there's always kind of like a shortcut somewhere and that makes the code um feel like accomplish a lot in a single line right yeah i think i i think that this is a good example of like if you're if you're working with a program that has your data organized in one way that doesn't make a ton of sense right you could see this this line of code online too is caffeine 6440 120. like in a vacuum that makes no sense right right like what is 64 what is 40 what is 120. so sometimes your programs might be using data structures that aren't the best and so this is just a good way to show hey how do we like combine these in a way that uh uh makes slightly more sense or makes it slightly more useful so we don't have to remember oh right espresso was the first one in that list yeah exactly um so i mean we can take this um line and kind of apply it to um this like coffee example here um so let's kind of break down that line a little bit um so let's look at the end first where it's like zip names and heights for this example um zip name heights um returns um a series of tuples i believe right so tuples are pairs it's like x y essentially and um it's saying like let's name each tuple um a key and a value right it doesn't really matter what the those variables are just as matter just as long as we use the same like key value variable names here um so um for every key value um in the zipped in the like tuples that's returned by zip um we create a a pair that's connected by a colon and um and then this whole thing is surrounded by curly braces right okay yeah it's a little bit of fancy syntax i can talk a little bit more about it as you're uh as you're doing the instruction here so let's uh call this zip drinks and i'm gonna copy this line over and just change some of the um the variables so instead of names and heights we have drinks and traffic zips and caffeine together so the drink um sorry the drinks contains all the keys that we want the caffeine contains all the values that we want um so at the very start you're setting it equal zip drinks equal students equals get rid of that student oh whoops there you go uh that is loose zipped can we can we try to print out zipped drinks to see what it looks like yeah i think this is expecting like an intermediary step where we zip the drinks although that looks like a dictionary um yeah yeah so we did it all in one step so first uh first they were expecting us to do zipped drinks is uh just the zip function which zips together the the two lists into a list um and if we print this out it's actually gonna be an ugly print statement do you want to print it's going to be a zip object yeah can you throw a list around that can you cast it as a list like this uh so list and then normal parenthesis around it got it cool so it's a list of tuples um right now once it's zipped um so then that makes sense for this line right here where we're searching for where we're basically going through each tuple in the list we know that they're comma separated we'll name one of these key one of these values and we'll now rewrite them in that syntax um cool i'm going to complete this exercise by um now adding the list comprehension to this zip um this zip result um i'm actually gonna just um call that drink caffeine um so that you all can see that you can use yeah whatever um variables yeah there's nothing magical about that key value variable name so you can print drinks to caffeine cool thanks that's awesome yeah um definitely like review this part a little bit um we should move on to the the next lesson um which will give us um a lot more information too um about um accessing all of the values all at once or all of the keys all at once um cool so um this is basically like the review part of our lesson if you've taken any codecademy lesson there's always a little like wrap up at the end so in this lesson we've created a dictionary we've added elements elements meaning keys and values updated them and at the end we've learned somehow how to do the list comprehension to create a dictionary from existing lists cool and i'll leave you guys to to complete this review um exercise on your own um so let's move on to the next lesson which is more applications for dictionaries cool um cool so i'm just gonna i think we skipped the intro in here somehow okay so um now that we've got kind of the syntax down um we want to start thinking about like how to solve problems some of the um functionalities of dictionaries right um so we'll be able to um use a get a key get a value from a key and we'll be able to check if a key exists we'll be able to see how big the dictionary is or how long the length of the dictionary and um will be able to go through each pair of keys and the values yeah i think the first lesson really focused on let's create dictionaries and now it's like okay now that we know how to create dictionaries what can we actually do with them so we can start to play around with these yeah cool i like the the exercise here the the um zodiac yeah these are all five i love them this is a couple lessons yeah um cool so um in this uh exercise we'll be learning how to essentially get like values from a key um so let's just directly go to the instructions here um let's print out the list of zodiac signs associated with the earth element um so if we see here the different elements are the keys and the signs associated with each element is the value of that key so we have a key earth here and it tells us to print so i'm going to do a print statement around um zodiac elements and again just like lists your you can index by the name of the key so that's really convenient because then this is all we have to do right we can just refer to the key name um and we get taurus virgo and capricorn cool and then uh let's just print out this the fire signs too while we're at it yeah while we're doing fire how about we try to get exactly leo so how would you say okay now that i've gotten the key how do i access the first element from that list um yeah so if we notice the um the value is actually a list right so that means whatever's um i mean this is us with the knowledge that leo's a fire sign um so we know what fire returns um a list and we know that in this list leo is um the second one in the list so we're indexing from zero so um that would be index one nice so let's try that cool yeah so obviously that took knowledge of us like seeing the dictionary there seeing okay um fire go uh the the key fire goes to the value of this list of three items and then we can see okay leo is the second item in the list so we can index it from using index one so obviously we like kind of have the information here but i think that that's a good example of like you can start to chain these things together first you say okay i have my dictionary i want the value associated with fire and once i get that value i want the first element yeah yeah cool and you can even um loop through this list once you get it too yeah good call cool all right um let's say that um we are searching for something that doesn't exist right um so i'm gonna like skip past the example in the story there um and let's work with the example we have in our code editor um so here this is already there is trying to print trying to print the zodiac elements associated with an energy key um but energy is not a key in the dictionary um i mean what we can do though is add a key associate called energy um and the value should be it's not a zodiac element yeah this is actually similar to how in lists you can only ask for elements up to the length of the list right if i have a list of five things in it if i ask for the item at index 10 you're going to get an error it's pretty similar here where we only have available the stuff that uh um the the keys that are actually in the dictionary exactly cool so this fixed our key error here because now we've actually created a key for um for like this line to access okay let's move on um so i mean typically you really don't want to be kind of caught with a key error because most of the time you may not know what's exactly in the dictionary right so there's a bit of you want there to be some sort of like backup if you can't get the key you don't want your code to error out and stop executing completely so this is where a try accept kind of block allows you to um attempt to get a key right and then if there's a key error there that's called um and you can make an exception for the error right that's what the accept is for so try this line and then if there's a key error make an exception with the code not like stopping on you and when that error is caught print um or execute this line instead um so let's try to um let's try to create um that structure for this caffeine level dictionary um so we can set it up as sort of a backup plan for if somebody tries to access something later on and it's not there so um what somebody's going to try to do is if someone tries to get matcha i'm going to try to print the caffeine level of matcha so we'll try to get that and if it's not there it's going to cause a key error that we can make an exception on and can print unknown caffeine level i just know this thing is going to kill me for the case of capitals yeah so trying to type carefully cool um so that means that um this has successfully caught the key error right because let's say um which we did this line um at the beginning without wrapping it in this try except um there's a key error for matcha immediately and that prevents the rest of the code from executing right so yeah this this kind of stuff is just kind of good practice for you don't really want your program to ever crash you want to handle these errors elegantly like rather than program crashing and giving you this ugly error message instead you can anticipate like okay if not if the key matcher doesn't exist let's print this thing in particular to give people a clue as to what happened yeah cool um i wonder if we want to um yeah well we'll have to get through some of these i think to do the code challenges later on yeah i think i want to get to get all the keys and then get all values yeah we definitely need to get all values to do the code challenge so let's try to get to that okay cool um so above this block you can add um you can actually add an entry so that it doesn't fail let's move on to um so essentially there is a better uh or safer way to get a key um that is not just simply indexing right so um what's really nice is that python dictionaries also has another builtin function called get and what that does is actually handles the key error for you and uh you can use get to specify the um so what the get will do is it'll default return none if there is no key but you can also set like a a default return value for forget if that key is not found right um it just makes it so you don't have to write that um every single time you're trying to like access keys so i'm just gonna do like a short one here um so let's just print um the result of trying to get this entry terror coder um that's so terracotta's coder is a real one but let's say that like i made a typo in here right so then the get would return a none instead of a key error right and then you can follow the rest of this exercise to learn how to to practice adding a default value if there's no um if there's no value associated with the key that you're looking for um do we want to move on yeah let's move on okay cool um you can also delete a key um which comes into handy and um you can delete it using this thing called pop um so just like like i want this popped off so that's a that's a way to remember um that pop function let's just try it in this example where we have some sort of menu thing again um the items and their um their prices um so this isn't a game okay um carolyn earlier we were called called out for not knowing the uh that language in the other example was uh elvish from from tonkin it was one of tolkien's languages i don't see why like we were being called out because no i'm kidding they definitely yeah yeah yeah um i had a feeling that that was that yeah um in one line okay this is kind of a long exam um instruction um yeah i think let's let's just see what happens if we pop like right pop something specific this is not super relevant to for the code challenge so i feel like we should uh right okay so let's say we want to get rid of this power stew thing um and to check that we can print it right after the pop statement cool so um we can ignore that error right there because we're kind of going rogue from the lesson um as you can see here um after this pop the that entry is no longer there um we can also get all of the keys all at once this is going to be really relevant for our code challenge um and it's uh and what you have to do is simply use this stock keys function that's also built into the dictionary so let's say i want to uh get all the keys of the user ids i'm going to print the keys um yeah so it's kind of in this weird format it's kind of looks like a list um and i imagine we could access the first one by doing can we do user ids dot keys and then index of zero to see if we get terracotta yeah yeah um so it's a keys object so we could eventually do some funky stuff like casting it to a list right um and then we can actually iterate through it so this is where we can um loop through things so let's say i want to do let's say user in user ids.keys and that way i can print i need a column at the end of line 6. hold on right cool so now um iterating through it i can isolate out um all of the the keys and print them out one by one cool so that's relevant knowledge we'll move on to the next one which is get all values which is also very similar um dot values so let's just do the same thing where um we are looping through the values for num in num exercises dot values print num and that returns us all the values oh we can also use a list to grab to cast the values so let's say we want to do that for this exercises thing um i'm just going to like wrap the print statement around so we can see it directly cool so um you can cast the values to a list and just print that list directly as well yeah one thing to note here is that again dictionaries are unordered so carolyn before line three could you add a new key just like we can just make up what we want it to do um so add in a new key yeah so new exercises of um carolyn is or whatever um is um a hundred and it's uh it's not quite the syntax it's gonna be caroline i'm sorry you're kidding you're totally good it's hard to it's hard to do this uh on the fly oh it's a typo there you go okay cool so now you can see um i've been added to the values yeah it just kind of gets tacked on to the end one thing to keep to be aware of is that this is i actually didn't know if that would be tacked onto the end or not or if it would have been inserted someplace weird um you can't really rely on dictionaries in being in this order of like okay the the thing that i added is always going to be at the end right definitely more of a list thing and because we're working with dictionaries which is unordered you can't really rely on right right i think it's um for like this like pretty small dictionary um yeah it's relatively um i mean i think especially if it's hardcoded as well i think it might look different well you can you guys can play around um but just know that you know it could be unordered and don't be surprised yeah in fact you'll see i think we should jump to one of the code challenges now and you'll see that cool the kind of questions that we ask about dictionaries don't don't rely on an order of anything we're either like summing up all of the values together in which case the order obviously doesn't matter we can just sum them up however in whatever order we want right or um yeah so just the order typically doesn't matter when you're dealing with dictionaries yeah um and just real quick here you can also grab the items it's also gonna return it in that like kind of tuple um form so you can use that same thing we're we're doing similar to when we're doing list comprehension we can just um create like temporary variables to um stand in for those tuples and you can iterate through all the key value pairs as well that way cool um nice let's move on to the code challenge um i'm gonna keep this lesson open just in case we need to like flip back cool um so now i'm in the code challenges which is like if you actually go to up next that's what it is um i'm just gonna go back to the syllabus here since i already have this open the syllabus will be nice for me to go back to a lesson if i need to well so um there's three challenges here um you want to tackle whichever one you want i think the uh let's do one or three because that that involves keeping through the uh the values maybe one i think one is awesome so let's do one um and it's pretty straightforward um this code challenge wants us to write a function um so that's knowledge from our a previous module and we want to call that function some values that accepts a dictionary um and the function should return the sum of the values of the dictionary so um thinking through that let's let's write like the syntax of the sum values first so i think it's def i'm not a python coder yep got it um def uh call it uh this function name sum values and it wants to take a my dictionary as a parameter yeah okay and um inside of these inside of this function um we want to get all the values so um i think if we think back to like just a few minutes ago when we were um learning like the dot values um function in the dictionary um we know that my dictionary dot values is going to return us that like dict values type of um data form and we know that we know at the very least that we can um iterate through it that we can loop through it so that's so if we loop through it that's going to allow us to kind of like take each value as they come and add it to like a sum like a running total of some kind so i'm gonna start a total of zero at the very beginning and um and i'm gonna write a little for loop to go through that values um so for say let's call it val is this is this syntax looking right alex yep that looks good to me so we're gonna my dictionary.values again is taking is is that list type object it's not exactly a list but it's something that we can loop through we're gonna loop through that and or every value in this variable called val and then we're gonna want to do something with the vowel right um and we're going to want to add the val to the total so we want to update that total every time um so we can either do this which is set total equals to total plus the vowel or um we can use like a shorthand there here which is the plus equals yeah and um that's uh it for our for loop value or our for loop code because um it just has to add the values right and then at the end we want to return that sum that we've been keeping track of which is total so i'm just going to run this just for just to check the syntax okay so nothing is it's great that there's no uh error messages so um this is convenient um we can uncomment the function calls below to test our sum values function i'm going to uncomment that first line first and you know that this should be five plus two plus three which is ten so awesome cool um so that's the output of some values on this dictionary well and let's print the next line um in this case the values are one two and three so the time the sum should be six awesome cool um we are at two o'clock right now should we keep going alexa um i think we should probably call it here but before we go yeah again a thing that i like to stress as we get to these code challenges is to you know don't always immediately um go to our like check answer button down in the bottom bottom right corner like caroline you scroll down hit check answer now you should get your little like you were right right right i would say one thing that i notice a lot with people using codecademy is that they are really into like making sure our approved thumbs up for clap emoji or whatever they get that i think the more valuable thing is to build out the function on your own um without really having to rely on us like checking for um whether whether or not you got it right so somebody so if i were struggling with this something that i might do is inside that for loop i might print val um and so um right yeah yeah exactly so so now i can see okay when i pass this uh when line 10 is get getting called so yeah i'm gonna uncomment the other prints yeah so now i can see okay i have five i have two i have three and then at the end of the day those all at some up to ten so doing stuff like that i think is is probably the most important thing that you can be doing these code challenges of if you're getting lost and confused and you're um you're not exactly sure what's going on just uh and you're gonna have to cast the uh vowel to a to a string um if you do str uh doing stuff like that really can kind of help you understand where you are in your process it can help you develop like a plan of action of okay i'm not i you know i have this value but i haven't added it to total yet things like that is really helpful so doing that rather than just like writing your code and checking the answer and hoping that it was right i think is um yeah really important and um what i was just doing while i was talking was just adding print statements that are a little bit more specific because you can end up getting like really jumbled if you're printing multiple values in the same code block yeah so i've just made it clear whether the number that's being printed is the current value that is being looked at or it's the the running total um cool yeah um sorry what yeah i i was just gonna wrap up but uh yeah go ahead okay yeah definitely recommend um you know completing these code challenges but you know most importantly trying to struggle through them on your own um and use these uh little you know boxes as your playground um you know you can you can also um start taking some of these into your own code editor on your computer um as well that's something we encourage yeah yeah so cool um yeah i think we should probably log off for today but thank you for watching um next week is actually gonna be our last live stream in this session and we're gonna dive into classes and objects and objectoriented programming i see sami in the chat is asking a little bit about objectoriented programming so next week we'll be super relevant for that um yeah and then uh and then that's gonna be our last session in this little yes 101 series so um yeah thanks for uh yeah thanks for doing this with me today carolyn yeah of course um last very very last thing i'm sorry i just i meant to say this during the whole live stream but um dictionaries are what uh python calls these data structures but other um uh languages like java calls these like you can declare like a hash map um so you'll hear that word a lot it means the same exact thing as dictionaries and i'm not sure what they're called in javascript maybe they're just objects in they're just called objects yeah which is which is confusing because we're about to get into classes and objects and that object is different than a javascript object kind of right right yeah yeah um but at the end of the day it's just these key value pairs um that exists in all programming languages yeah cool cool all right thank you everybody thanks everyone we'll see you next week
