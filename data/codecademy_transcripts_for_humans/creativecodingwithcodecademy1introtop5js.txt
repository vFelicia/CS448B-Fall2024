With timestamps:

00:30 - hello
00:31 - all right hello everyone
00:36 - cool i think we're uh i think we're good
00:38 - to to get started
00:39 - awesome so let me actually stop sharing
00:45 - um do we know how many people are in
00:48 - um yeah we've got a few we've got a few
00:51 - people watching we've got the chat open
00:53 - um hello uh
00:56 - manga in the chat
01:00 - well awesome um so welcome to our first
01:04 - series of live stream for creative
01:06 - coding um
01:07 - just maybe we'll do a little bit of a
01:09 - brief instructions um my name is jiwan
01:11 - i'm a curriculum developer at co academy
01:14 - and um we're going to be so i
01:17 - was part of the team that developed the
01:18 - learn p5 course that we're going to be
01:20 - going through
01:21 - today and also for the rest of the seven
01:24 - weeks that will follow for the live
01:26 - series for creative coding
01:28 - and um alex if you wanna cool yeah so
01:30 - i'm alex uh
01:31 - you might have seen me on some of these
01:32 - other live streams that we're doing uh i
01:34 - had
01:35 - no part in building the the p5 course
01:38 - although i love p5
01:39 - we'll talk about it a little bit more
01:41 - but i think it's a really really awesome
01:43 - tool to
01:44 - both make really interesting creative um
01:47 - coding projects and also a really great
01:49 - tool if you're brand new to coding to
01:50 - kind of like learn the fundamentals
01:52 - so uh yeah i'm super excited to have
01:55 - juwon here g1
01:56 - is awesome uh it's made some like really
01:59 - incredibly creative projects
02:01 - so uh yeah and we're gonna we're gonna
02:03 - have jihuan for
02:04 - um eight weeks uh going through
02:06 - different projects
02:08 - cool let me share my screen again and
02:11 - um we're going to start talking a little
02:14 - bit about
02:14 - what we're going to be talking about for
02:17 - during today's session and also for the
02:19 - sessions to come
02:20 - on our creative coding live series
02:24 - before we go any further i'm gonna maybe
02:27 - talk about what creative coding is
02:29 - um it might be a new concept to some of
02:31 - you who are more
02:32 - familiar with more standard programming
02:35 - and standard
02:36 - coding um basically what creative coding
02:39 - is
02:39 - is for me i mean everyone's going to
02:41 - give you a different definition of what
02:43 - it is but for me what it is is it's a
02:45 - different approach to programming
02:46 - you're going to be using your
02:47 - programming skills to create
02:50 - different kinds of things but
02:51 - essentially the goal here is
02:53 - for you to express yourselves with code
02:56 - and for you to not necessarily think
02:57 - about what it is that you're going to be
02:59 - building what
03:00 - what kind of like use do you have to
03:01 - have with your program we're going to
03:03 - leave that aside
03:04 - and leave our you know the practical
03:06 - things that we want to get done with our
03:08 - programs aside and really think about
03:10 - what can i use um how can i use
03:12 - programming to create a little piece of
03:14 - art or to create something that will
03:17 - really be you know advocating what i
03:19 - have to share with the world
03:21 - what kind of messages that i have that i
03:22 - want to embody in my
03:24 - works of art and to go over to
03:28 - maybe share with you guys some examples
03:30 - of what you can do with creative coding
03:32 - or kind of like
03:33 - example it works that would be
03:35 - classified as
03:36 - creative coding works here where i'm at
03:39 - the
03:40 - learn p5.js course website on codecademy
03:44 - and within the first module called uh
03:46 - welcome to e5js which
03:48 - by the way i should say that the course
03:50 - itself is free uh so it's not a pro
03:52 - course so anyone who comes to the
03:54 - platform
03:55 - and look for the learn p5 course should
03:57 - be able to access all the contents in
03:59 - here uh most of the content is in here
04:01 - and so i'm going to go ahead and open
04:03 - this uh welcome article
04:05 - and then we walk you through the journey
04:07 - of figuring out what creative coding is
04:09 - from the beginning
04:10 - some of the definitions of the
04:12 - distinctions between programming itself
04:14 - and what i mean by creative coding
04:17 - um is in here and there are also some
04:19 - examples
04:20 - of different kind of creating coding
04:21 - projects to help you get excited about
04:23 - the potentials of different works
04:25 - you can make so we can you can think
04:27 - about making generate generated
04:29 - visualizations all this muslin to
04:31 - degenerative art
04:32 - wikipedia page but um you can also you
04:35 - create them using
04:36 - different shapes wow
04:39 - all right and then you can is that made
04:41 - just with p5
04:43 - um i believe this is um with
04:46 - processing.js
04:47 - so it's in javascript and we can talk a
04:50 - little bit about processing but
04:52 - um they are similar and this is ben
04:56 - fry's work
04:57 - on generated visualizations with text
05:01 - and some other things you can make you
05:03 - can also think about making data
05:05 - visualizations
05:06 - this particular one is a visualization
05:08 - this does not
05:09 - um created using p5 but this is a map of
05:12 - all the trees in new york city and is
05:14 - color coded and you can also filter them
05:16 - by different species
05:17 - like if you want to treat it that tree
05:19 - data set is such a classic one i know we
05:21 - use that in a couple of different places
05:22 - on codecademy
05:23 - yeah this one's great and this also uses
05:26 - i think it's um created using mapbox
05:29 - which is also like a free
05:32 - map api if people are interested in
05:34 - doing map visualizations
05:36 - i can also think about creating um
05:38 - immersive experiences for example this
05:40 - particular one
05:41 - is created by colin levin who is a
05:44 - pretty big name
05:45 - in computer vision and creating this
05:47 - sort of like
05:48 - augmented vision works so just to play
05:51 - it a little
05:52 - bit
05:59 - so they're like pretty subtle
06:02 - um alterations i would say to the
06:06 - feed at the live feed that you're
06:07 - getting and people can interact with
06:08 - them
06:09 - and this is all part of this is all done
06:11 - program um
06:12 - with programs not necessarily p5 but it
06:15 - is a good example of what you can do in
06:17 - the realm of creative programming
06:19 - and also you can create interactive
06:21 - films like this particular one
06:24 - enter the monument um all of these
06:27 - examples are linked there in the welcome
06:29 - article so
06:30 - for you to go ahead and experience them
06:34 - on
06:34 - in your own um computers and devices and
06:37 - so on
06:38 - um maybe to share a couple of my own
06:40 - personal work that might be a little bit
06:42 - more closer to the things that you could
06:44 - make through
06:45 - um with all the material that you
06:47 - learned from the
06:48 - learn p5.js course this particular one
06:51 - was called around
06:52 - us and this was a data visualization of
06:54 - satellite data
06:56 - this is a live website link in here i
06:58 - hope it works well
07:02 - cool this one is built in combination
07:05 - with
07:06 - another visualization library called 3js
07:08 - and also with p5.js
07:10 - so it uses both libraries in here and
07:13 - you can get through the world map which
07:14 - shows the
07:15 - number of satellites per country
07:18 - and also this particular one shows a
07:21 - timeline
07:22 - of how many satellites that have been
07:23 - launched starting from 1974
07:29 - and then these ones if you go to this
07:31 - side
07:33 - you'll be able to click on the or hover
07:35 - over these little
07:36 - bowls that come up here as like the
07:38 - satellites
07:39 - and then these also cards were also
07:41 - generated um and created
07:44 - um using a data set of images and so on
07:48 - so yeah that's an example of the thing
07:50 - that you could do
07:52 - um maybe another one that i will show is
07:54 - this one
07:56 - this one is uh my work the kind of work
07:58 - that i did with um
08:00 - computer vision technology it actually
08:02 - uses a thing called processing not p5
08:04 - but basically what i did was i um
08:06 - analyzed the patterns of pigeon movement
08:09 - across from
08:10 - i don't live here anymore but my um the
08:12 - apartment i used to live um had a lot of
08:15 - um
08:16 - pigeon interest i'd say and i'm
08:18 - personally um
08:19 - very afraid of birds in general
08:22 - especially pigeons and this kind of like
08:24 - intrigued my um
08:26 - i don't know interest in like maybe i
08:28 - will learn to appreciate them a little
08:29 - bit more if i will yeah that's the way
08:31 - to get over it just
08:32 - totally immerse yourself in in pigeons
08:34 - yeah and it makes them it makes their
08:36 - movement look pretty you know
08:38 - the way the different ways that i've um
08:41 - try to visualize their movements i think
08:43 - yeah one of the things that i love about
08:46 - um creative coding and i can talk a
08:47 - little bit about my background
08:49 - is i used to teach high school computer
08:52 - science to
08:53 - you know high school students that had
08:54 - never done any coding before
08:57 - and i really kind of exclusively used
09:00 - p5.js the the library that we're going
09:02 - to be looking at during this series
09:04 - to teach them coding fundamentals and i
09:06 - found that um
09:08 - you know my students were so much more
09:12 - motivated to make something that they
09:15 - were
09:16 - like creating themselves and interested
09:18 - in themselves rather than like make a
09:20 - you know uh tax calculator or something
09:23 - like that where
09:23 - there's kind of a set of like problems
09:26 - that you might see a lot in a computer
09:27 - science class and
09:29 - giving folks access to something and
09:31 - saying just like
09:32 - make something that you want to make
09:33 - where i had kids making pac-man and i
09:35 - had students making
09:36 - um you know generative art like you were
09:39 - showing
09:40 - and so even if you think that
09:43 - creative coding might not be your thing
09:45 - i really encourage
09:46 - um you to give it a shot in that i do
09:49 - think that it will really help your
09:51 - programming skills at large where
09:53 - you're going to be diving into like
09:56 - you're going to be problem solving the
09:57 - entire time you're trying you're trying
09:58 - to do these problems which is really the
09:59 - best thing that you can do to learn
10:00 - programming
10:01 - um so yeah i hope that the reason that i
10:05 - love p5 so much is because it encourages
10:07 - people to
10:08 - problem solve and so i hope that you'll
10:11 - if you're watching this you give this a
10:12 - genuine effort of like
10:13 - try to make something interesting and
10:14 - cool with um with p5 because i think it
10:16 - will
10:17 - help your not only will you make
10:19 - something cool but you will make uh it
10:20 - will help your
10:22 - um kind of more traditional programming
10:23 - skills become uh
10:25 - stronger yeah so um
10:28 - p5.js will definitely it's so okay to
10:31 - backtrack a little bit
10:32 - p5.js is an open source javascript
10:34 - library so it is
10:35 - it is the whole thing is in javascript
10:37 - and it is intended for it to be used
10:39 - within the web space
10:40 - web space it isn't like a if people are
10:43 - familiar with what's called processing
10:45 - basically p5.js was developed sort of
10:48 - within the same space um the person who
10:50 - first
10:51 - started the efforts of creating beef
10:53 - buyers the library laura mccarthy
10:55 - she really took inspiration from what's
10:57 - called processing which is a
10:59 - java based
11:02 - coding environment and also a java
11:05 - library
11:06 - so processing let's go here
11:10 - so this is a thing of its own but really
11:13 - if you know processing you will also be
11:15 - really familiar with all the concepts
11:16 - that we'll be using in p5.js it's really
11:18 - a matter of which language that you're
11:20 - using to create um visualizations
11:23 - um or to do anything visual and to also
11:26 - echo what alex said really p5.js is
11:29 - useful for anyone who is new to
11:31 - programming because you get that
11:33 - immediate feedback we'll
11:34 - hopefully be able to see um more of this
11:38 - as we go along through these live series
11:40 - and also today
11:41 - but basically all the programs that you
11:43 - create you're going to immediate visual
11:44 - feedback for what it does
11:46 - so it really helps you to hone in in
11:48 - your you know
11:49 - programming skills your you know um your
11:52 - ability to create
11:53 - logical algorithms and that kind of
11:55 - things and later
11:56 - on towards the end of the series i think
11:58 - alex will also introduce object oriented
12:00 - programming
12:01 - which in my opinion is a really
12:02 - difficult concept to grasp if you don't
12:04 - see what each of the objects look like
12:07 - and really p5 puts those like concepts
12:10 - in its shape and form and color so that
12:12 - you can see the visual
12:13 - of in visually the objects that you're
12:15 - creating with your code
12:16 - yeah i'm going to run a session on
12:18 - object oriented programming and then
12:20 - also one on
12:22 - machine learning um algorithm which
12:25 - again it's like
12:26 - that's kind of intense uh like this this
12:29 - is an algorithm that i learned
12:30 - you know in my college courses i didn't
12:32 - see it at all in
12:33 - high school or when i was becoming when
12:35 - i was a beginner but i think that p5
12:37 - makes it really accessible just because
12:38 - you can kind of
12:39 - visualize what's happening you can step
12:41 - through and walk through what's
12:42 - happening
12:42 - um so yeah a really cool tool um
12:46 - juwan we have a couple of questions in
12:47 - the chat but i think we should get
12:48 - started with the project and
12:50 - i'll uh i'll hold these hold on to these
12:53 - um
12:53 - and maybe ask you as we get towards the
12:54 - end of this session yeah okay
12:56 - cool so going back to our
13:00 - learn p5.js course on our website
13:03 - so um if you i have some progress in
13:06 - here because i've been checking
13:08 - things on and off um but basically we've
13:10 - got about we've got six modules in here
13:12 - for you
13:12 - and there are six lessons and we're
13:15 - going to be going through
13:16 - um each of these lessons so introduction
13:19 - to creative program
13:20 - coding and also the animation module
13:22 - interaction module and media module
13:24 - during the course of the series um the
13:25 - live series and then we'll also be
13:27 - covering some other additional topics
13:29 - that go beyond the things that we talk
13:31 - about
13:32 - in this course for the second half of
13:34 - the series
13:35 - um i also before we go dive in here i do
13:38 - want to
13:39 - um put in a little bit of a plug for our
13:42 - week three
13:43 - live session yeah we're going to have
13:46 - a guest coming into our live series
13:48 - cassie tarquesian
13:50 - who will be talking to us about the
13:52 - p5.js um
13:53 - she's more involved in the actual
13:55 - development of the library as well as
13:56 - the open source community
13:58 - so we're going to talk about open source
13:59 - community what it means
14:01 - for code to be open source and for
14:02 - people to use
14:04 - in general about the community itself as
14:06 - well as what's called
14:07 - there's also a tool that p5.js has
14:09 - created and
14:10 - for you to get started working with
14:12 - p5.js called p5 web editor
14:15 - it looks like this and it gives you an
14:17 - environment where you can code
14:19 - p5.js projects and you can see it right
14:21 - on the right side
14:22 - how it renders uh on the webpage and it
14:25 - will be
14:26 - she she's also the main person that's
14:28 - driving this development um of b5.js
14:31 - p5.js web editor so we're going to have
14:33 - her coming in
14:34 - um it's like a special treat to talk
14:37 - about all of those things
14:38 - so i do want to i didn't want to promote
14:41 - it a little bit
14:42 - that's the session on the uh on march
14:44 - 23rd
14:45 - yeah cool so let's do move on and
14:48 - for today's live stream i do want to go
14:51 - through this particular
14:52 - project called wall drawing which is
14:54 - part of our first module
14:56 - well this is the first module really
14:57 - this is the second module is the one
14:59 - with the
15:00 - our act the actual content on b5.js so
15:03 - this
15:03 - project will go through the fundamental
15:06 - concepts of what pro
15:07 - p5.js is what is programming what is
15:10 - canvas and we're going to be basically
15:12 - be looking at how to to create patterns
15:16 - with um javascript um on what's called
15:19 - the canvas
15:19 - so i'm actually going to show you what
15:22 - our final output is
15:24 - which is going to be this we're going to
15:25 - draw from a clean slate
15:28 - of like a blank canvas so to speak um
15:31 - literally and
15:32 - actually uh we're going to start from a
15:34 - blank canvas and we're going to be
15:36 - creating these
15:36 - drawing these patterns into each of the
15:38 - quadrants of the canvas
15:40 - cool let me actually um revert
15:44 - everything go from scratch and i'm going
15:47 - to go through the prompt with you guys
15:49 - also what we're going to be doing is
15:50 - we're going to be creating
15:51 - a drawing based on the artist's solute
15:55 - if you're not familiar with who solute
15:57 - is he there's a wikipedia article linked
15:59 - there for you to check out
16:01 - but basically he is one of the main
16:04 - drivers who are
16:05 - um known for it what's called
16:08 - algorithmic drawing
16:09 - so he provides a set of instructions
16:12 - that uh it
16:13 - he leaves um open for anyone who is
16:15 - following the instructions to draw
16:17 - a copy of his drawings so basically
16:20 - we're
16:20 - kind of creating an um a digital
16:23 - painting that embodies his sort of um
16:27 - thoughts where we give a set of
16:29 - instructions through code
16:31 - to our p5.js sketch and we have that
16:34 - generate this um drawing for us
16:36 - so if we click start and then we get um
16:38 - we scroll down we start seeing these um
16:40 - set of
16:40 - instructions that we can uh we can read
16:43 - and try to
16:45 - follow along to create that um
16:48 - what's it called the uh four sets of
16:51 - patterns that i've shown you
16:52 - um before so we're gonna do here is okay
16:56 - let's um as we go through this i'm going
16:58 - to explain some of the key concepts of
17:00 - p5.js
17:01 - um so basically on the right you will
17:03 - see the default
17:04 - uh structure of a p5j sketch so p5
17:07 - sketch is like
17:08 - any other web-based projects it has a
17:11 - index.html
17:12 - that contains the actual contents it's
17:14 - got style.css
17:16 - that you can use to style any components
17:18 - on the under
17:19 - html and there for you using css um code
17:23 - and it's also got what's called
17:24 - sketch.as which is a conventional name
17:26 - that we just have for a javascript file
17:29 - and all the sketch.js file and the css
17:31 - file gets linked inside of index.html
17:34 - file
17:34 - um same as how you will link any other
17:37 - thing any other html oh sorry any other
17:39 - css or javascript file
17:41 - within the um index.html so we've got
17:44 - the script tag in here
17:46 - that links the sketch.js file as the
17:48 - source um
17:49 - attribute inside of our body tag we've
17:51 - also got the
17:52 - style the style sheet linked as a link
17:55 - tag inside of the head
17:57 - section of html so sketch.js is really
18:01 - where all of the magic is going to
18:02 - happen this is what where we're going to
18:04 - be programming
18:05 - and the first thing that we're going to
18:07 - do is actually let's
18:08 - do this take a moment and completely
18:11 - empty
18:12 - okay so it's just asking us to check
18:14 - that
18:15 - all of those files are in there so let's
18:17 - go ahead and click that
18:18 - and so so to be uh
18:22 - so i guess thinking about that final
18:23 - product that we saw with the boxes and
18:25 - the
18:26 - the different patterns in each box
18:27 - really what we're looking at there is a
18:28 - normal web page
18:30 - and most web pages have a lot of html a
18:33 - lot of css
18:34 - and really what we're doing here is that
18:37 - the
18:38 - html and the css are pretty basic and
18:40 - basically we're just saying
18:42 - the only thing on our web page is going
18:43 - to be this p5 canvas where we can do
18:46 - different drawings and all of that
18:47 - drawing is going to happen inside the
18:49 - javascript file
18:50 - exactly so in p5.js there are two
18:54 - functions there
18:55 - that are fundamental to how the program
18:57 - runs and how it generates visualizations
18:59 - we've got a function that's called setup
19:03 - and i'm going to close my brackets after
19:06 - all the tutors in here
19:08 - and we've got another function called
19:09 - draw function
19:11 - draw so these functions even though
19:13 - we're defining them
19:15 - inside of rp5 instead of our
19:19 - sketch.js file really these functions
19:22 - automatically run so you don't actually
19:24 - have to call these functions explicitly
19:26 - like for example if you're familiar with
19:28 - javascript you know if you do
19:30 - setup like this associate that um how
19:32 - you call this actual function
19:34 - like that all the code that is scripted
19:36 - inside of that function
19:37 - you don't it's actually you should not
19:39 - be doing this
19:40 - it's not that you don't have to but
19:42 - really you should not be doing it
19:44 - because the p5.js library will
19:46 - automatically call these functions
19:48 - the setup function runs at the beginning
19:50 - at the very beginning when you when the
19:52 - website is first loaded
19:53 - the setup function runs once and so this
19:57 - is where we set all of these
19:59 - initial stylings for example creating
20:01 - canvas which we'll talk about in a bit
20:03 - but creating canvas is one of the things
20:04 - that you would want to do but all the
20:06 - initial styles that you want to do
20:07 - for your drawing they all go inside of
20:10 - the setup function
20:11 - the draw function runs repeatedly in an
20:14 - infinite group
20:15 - and it runs after the setup function is
20:18 - finished running
20:19 - so what that means is that first the
20:20 - setup function will run when the
20:22 - website when this web page runs the
20:24 - setup function runs and it sets up these
20:26 - initial things that you need to
20:27 - you want your sketch to do and
20:31 - and after that point the draw function
20:34 - everything all the code that you contain
20:36 - inside the draw function will run in an
20:37 - infinite loop
20:38 - over and over again so we're going to
20:41 - talk about endocrine animations in our
20:42 - next stream series
20:44 - but basically the draw function is where
20:46 - we're going to be
20:47 - the the basic structure of the draw
20:49 - function the fact that it runs an
20:51 - infinite loop is really convenient if
20:53 - you want to create animations
20:55 - right because animation is really um
20:57 - some like series of
20:59 - images static images that change over
21:01 - time and since the draw function runs in
21:03 - an infinite loop anyway
21:05 - we can do little things in there to
21:07 - change values
21:09 - gradually with time to create animations
21:11 - but for now we're going to do all of our
21:14 - drawings inside of the draw function but
21:16 - they're not going to be changing they're
21:18 - going to be static
21:20 - for the this particular session of the
21:23 - live series
21:25 - so how does so we have this setup
21:27 - function we have this draw function
21:29 - and like you were saying they're a bit
21:31 - unusual because they're automatically
21:33 - being called by
21:34 - p5 how does all we're doing is writing a
21:37 - website here
21:38 - so like how does how does our website
21:41 - know to use these special p5 rules of
21:43 - like hey automatically
21:44 - set up automatically call draw in this
21:46 - loop that's happening uh
21:47 - over and over again um like why what is
21:50 - special about our website that like
21:52 - activates these
21:53 - p5 abilities this script line is
21:56 - actually the
21:58 - um the thing that we'll know that will
22:00 - tell our website to know to do those
22:02 - things
22:03 - so that's actually a really good
22:04 - question so p5.js is a javascript
22:06 - library
22:07 - that means it's a collection of code
22:09 - javascript code
22:11 - that is um created for us by
22:14 - you know a number of different kinds of
22:16 - developers
22:17 - but um they they have used um vanilla
22:20 - what's called manila javascript or pure
22:22 - javascript
22:22 - to basically make our lives easier for
22:25 - us to be able to say
22:27 - function setup and function draw for us
22:29 - to be able to create these things in the
22:31 - web page
22:32 - so what it does is so let's go from the
22:34 - index.html
22:35 - file it goes from the top and it loads
22:38 - this javascript
22:40 - file which is linked inside of this
22:42 - script tag as the source
22:44 - so it's got this what's called a cdn
22:46 - link which you can find if you go to the
22:47 - p5.js website
22:49 - and if you go if you go to get started
22:51 - we'll not get started
22:53 - sorry um download
22:56 - and you can either get an actual file of
22:59 - the javascript library the p5.js library
23:01 - itself
23:02 - or you can click on this link called cdn
23:05 - and this is basically
23:06 - where the library is hosted in the cloud
23:09 - for you
23:10 - so you can put copy this link and put it
23:12 - inside as a source file in the script
23:14 - tag
23:15 - and first this library is loaded then
23:18 - our sketch.js file runs so by the time
23:21 - our code inside.sketch.js is running
23:24 - um the all of the relevant
23:27 - instructions or all you know the people
23:29 - our website will know oh
23:31 - when when we have a javascript file that
23:34 - has a definition
23:35 - of function called setup and has a
23:36 - definition for a function called draw
23:39 - then p5.js library will automatically
23:42 - run
23:42 - that instance of setup function that
23:44 - we're defining
23:46 - locally within our web page and then run
23:48 - the draw function
23:49 - i think it's always a little bit
23:50 - interesting can we can you go to the
23:52 - the url from the that's yeah the
23:56 - that or the um yeah i think it's always
23:58 - a little bit interesting to see what
24:00 - this actually looks like where you'll
24:02 - see okay cool
24:04 - here's all of the p5 related code that
24:07 - we're kind of
24:07 - bringing into our our own code um
24:10 - actually i think it would help if we see
24:12 - not minified yeah
24:16 - there we go yeah so it's it's doing a
24:19 - bunch of stuff it's giving us all of
24:21 - these abilities that we're now going to
24:22 - be able to use in our own code
24:24 - um we have a question from chat uh how
24:27 - heavy is p5 i'm guessing
24:29 - that question is like how big is it is
24:30 - this going to really like slow down my
24:32 - web page by
24:33 - importing this this library it really is
24:35 - not that heavy
24:36 - i'm pretty sure it'll be a couple of
24:37 - kilobytes especially if you use the
24:40 - minified version
24:41 - because it is still text file so it
24:43 - won't take too much space
24:45 - um on the web server or locally on your
24:47 - computer for it to run
24:49 - cool because really you know all the
24:51 - heavy work is being done by your browser
24:52 - itself
24:53 - not the actual code cool so let's go
24:56 - ahead and
24:57 - continue on with our project and so the
25:00 - first step towards creating our wall
25:01 - um drawing inspired project is to create
25:04 - um
25:04 - the canvas so declare the setup function
25:07 - which i've already done
25:08 - and inside the setup function i'm going
25:10 - to use what's called a
25:12 - function called createcanvas and this is
25:14 - camelcase
25:15 - so that it's create and then capital c
25:18 - with the canvas
25:19 - and inside of here i'm going to give it
25:20 - two two numbers
25:22 - 500 comma 500. so what this will do
25:26 - is it's going to create what's called a
25:28 - canvas
25:29 - inside of our web page and i'm going to
25:31 - actually just run it and
25:32 - and save and then show it to you nothing
25:34 - happens but we
25:36 - um i don't know how i can actually show
25:38 - you this maybe i can open inspector but
25:40 - i think i'll hold off on that for now
25:42 - but what it is doing is that it's
25:44 - creating
25:44 - a canvas um html element
25:48 - so ultimately it really is everything
25:50 - that we have inside of
25:51 - the index.html file ultimately gets
25:54 - rendered as html
25:56 - and what we're doing with this creative
25:57 - canvas file sorry canvas function is
26:00 - creating
26:00 - an html element called canvas
26:04 - let me actually add some extra code in
26:05 - here
26:07 - to show you what we've created so if i
26:11 - um set the background of this canvas
26:13 - onto black
26:14 - i am seeing um i need to make
26:17 - my window a little bit bigger so i am
26:20 - seeing i'm seeing this black
26:22 - box that is supposed to be 500 pixels
26:25 - wide
26:26 - and 500 pixels tall so this creative
26:29 - canvas
26:30 - is a function is a p5.js built-in
26:33 - function this um this function is built
26:36 - in for you from the library
26:38 - and when you use it with two numbers the
26:39 - first number is for the width of the
26:41 - canvas the second number is for the
26:42 - height of the canvas
26:44 - so for example if i were to change this
26:47 - number from 500 to 700 and run it
26:50 - we're going to get a canvas that is 500
26:52 - pixels wide and 700 pixels tall
26:55 - and the background function colors the
26:57 - background meaning the full
26:59 - fill color of the whole canvas element
27:01 - itself to black
27:02 - because currently we're using rgb
27:04 - notation and this
27:06 - is actually the same thing as writing
27:08 - zero comma zero comma zero for our
27:10 - red green and blue values um but if
27:14 - rgbs are black sorry rgbs are zero
27:16 - they're
27:17 - they're black and if it's 255 to 55 to
27:20 - 55
27:22 - then it is white but the reason why we
27:25 - didn't see anything when we didn't have
27:26 - the background function
27:28 - is because it's transparent so
27:30 - transparent canvas on top of
27:33 - white white background default white
27:35 - animation of page is
27:37 - this nothingness but it is there because
27:40 - when we colored it with the background
27:42 - function we saw what was there
27:43 - cool cool so let's check this off and
27:46 - then we'll go down
27:48 - and so it says below the setup function
27:49 - declare draw function which we did
27:51 - we're going to also check that off and
27:53 - then moving on
27:55 - um inside the setup function divide the
27:57 - canvas into four equal rectangular areas
27:59 - by drawing two lines
28:00 - one along oops one along the vertical
28:03 - center and one along the horizontal
28:04 - center of the canvas
28:06 - so here we're going to use our first 2d
28:09 - primitive shape function
28:10 - so p5js has a lot of primitive
28:14 - functions 2d primitive functions
28:17 - provided for us you can go to their web
28:19 - website and go to the reference page and
28:21 - you'll see all of these
28:23 - functions built-in p5.js functions for
28:25 - all of these shapes
28:26 - so we're going to be focusing on some of
28:28 - these things that you see under the 2d
28:30 - primitives
28:31 - section and the first shape that i'm
28:33 - going to be creating is a line
28:35 - so when we go to the reference in the
28:37 - line for the line function
28:39 - it tells us that we need by minimum four
28:41 - numbers
28:42 - x and y coordinates for one end point
28:44 - and x and y coordinates for the second
28:46 - endpoint
28:47 - so using that what we're going to do is
28:49 - we're going to state
28:50 - line and for me to draw a horizontal
28:53 - line from
28:54 - the middle of the canvas then um we will
28:58 - also need to talk a little bit about the
29:00 - coordinate system of
29:01 - how we can figure out where to put
29:04 - our shapes so um like i said before let
29:07 - me actually bring back our background
29:10 - color in again so that it's easier for
29:12 - me to explain
29:13 - um yeah mg1 i wonder if we can make the
29:16 - canvas a little bit smaller just so we
29:17 - can
29:18 - keep the the zoomed in a little bit
29:21 - because it's a little bit hard to see
29:22 - your text if we zoom out once more um
29:24 - so yeah that works or even can we do
29:27 - like 200 by 200 and then zoom in one ah
29:30 - okay i see what you're saying
29:35 - and then make this bigger yes there we
29:38 - go
29:38 - cool maybe it could be a little bit
29:42 - bigger let's see what that looks like
29:44 - okay cool so i am like i said before the
29:48 - create canvas function
29:49 - it takes in the width and the height of
29:51 - the canvas that we've created here so
29:53 - this is 300 pixels wide and 300 pixels
29:56 - tall right now
29:57 - and the way that coordinate systems
29:59 - within our canvas works is that at the
30:01 - top left corner
30:02 - our x and y coordinates are at zero
30:05 - comma zero
30:06 - and as it goes towards the right our x
30:08 - coordinate increases
30:10 - so that because our canvas is currently
30:11 - at 300 pixels wide
30:14 - it's going to be at 300 pixels at all
30:16 - the way
30:17 - to the right of the canvas and our y
30:20 - increases as it goes down which is a
30:22 - concept a little bit hard to grasp
30:24 - because
30:25 - normally people think you know if height
30:27 - is increasing you want it to go
30:28 - up but in the case of p5.js and actually
30:32 - for most um
30:33 - web-based um based i think graphic
30:37 - libraries um to coordinate the zero
30:40 - commas here or the origin coordinate
30:41 - will be top left corner of the canvas or
30:43 - the thing that you're drawing it within
30:45 - and then the bottom right corner will be
30:48 - at
30:49 - however um bake my width of the canvases
30:51 - and
30:52 - however um tall my canvas is
30:55 - so this will be at 300 comma 300. so
30:58 - what that means is that for our line
31:00 - let's actually
31:00 - go ahead and try it so um i'm also going
31:03 - to explain this in a bit
31:05 - but i want to make sure that we can see
31:06 - the line so what i'm doing here is that
31:08 - i'm actually changing the stroke color
31:10 - of my line so it's going to be drawing
31:12 - white lines not
31:13 - because by default lines and d5 dress
31:15 - are drawn with black color
31:17 - so here then if i say something like
31:20 - zero comma zero which i've told you that
31:21 - is at the top left corner of the canvas
31:24 - and if i go 300 comma 300 it should draw
31:27 - a diagonal line from the top left corner
31:29 - to the
31:29 - bottom right corner which it does
31:33 - so knowing this we know that if i want
31:35 - to draw a line through here horizontally
31:38 - what we're going to have to do is we're
31:39 - going to try to figure out where
31:41 - where it is at the half in terms of
31:44 - height
31:45 - of the canvas the y coordinate of the
31:47 - canvas and it's going to go
31:48 - from the left um side of my canvas to
31:51 - the right side of canvas so that my
31:53 - x coordinate is going to go from zero
31:56 - all the way to the width of the canvas
31:58 - so if i put that in so i'm going to
32:00 - start from here which is that
32:01 - x is at zero and y is going to be 150
32:05 - because the total height is 300 so 300
32:07 - divided by two
32:09 - and it's going to go all the way to the
32:10 - right of the canvas and it's going to
32:12 - stay at 150.
32:16 - so now we've created a horizontal line
32:19 - vertically in the middle of the canvas
32:21 - similarly if we want to draw a vertical
32:23 - line
32:24 - uh in the middle of the canvas
32:26 - horizontally then we're going to go from
32:28 - here which is where uh when y
32:31 - is at 0 and we're going to go all the
32:33 - way down where y is at 300
32:35 - and the x is going to remain constant
32:38 - in the middle of the canvas so it will
32:40 - be half of the width and our width
32:42 - is also 300 so what's going to um do
32:45 - our y sorry our x value is going to be
32:48 - half of 300
32:49 - which is going to be at 150 and it will
32:52 - go from zero where
32:53 - y is zero and then it will stay where x
32:57 - is going to be 150
32:59 - and then go all the way down to the
33:00 - bottom of our canvas which is at 300
33:02 - pixels
33:05 - cool so now we go ahead and save that
33:07 - and we've got a canvas
33:09 - with a black background and white lines
33:11 - that is dividing the canvas into four
33:13 - parts
33:15 - one this is an interesting uh case where
33:18 - i would describe this as like
33:19 - hard coding in these values so our
33:22 - width and uh height are 300 right now
33:26 - and so we know that we want it to be 300
33:29 - divided by 2 and we've just kind of hard
33:30 - coded in that value
33:32 - of 150. is there anything that we can do
33:35 - to not hard code in those values to take
33:38 - the
33:38 - existing to like does p5 know that
33:42 - hey my canvas is 300 by 300. so
33:46 - we there is a variable conveniently the
33:49 - p5.js who revises built-in variable
33:52 - and it's called there the variables are
33:54 - called width and height
33:55 - so you can use these variables to say um
33:58 - i know for now for here
34:00 - we've hard-coded it in because we can
34:02 - see that i've given my canvas to be
34:04 - width of 300 and height of 300
34:06 - but no matter what this is if you want
34:09 - your canvas
34:10 - if you want your p5.js sketch to know
34:13 - basically whatever my
34:14 - width and height of my canvas is take
34:16 - that value
34:18 - then you can use the built-in variables
34:20 - called width and height
34:21 - so if i were to replace those using
34:23 - those built-in variables
34:25 - my code here would be something like
34:27 - width divided by 2
34:29 - and then this could be width and this
34:31 - could be also
34:32 - wait a minute so this is for height
34:34 - value so actually even though my
34:36 - this would work because my width and
34:37 - height is the same i want to use the
34:40 - height variable in here
34:41 - so then it's going to go from zero and
34:44 - where height
34:44 - is half of the height for my y value
34:47 - value for the first endpoint of the line
34:49 - and then i want to go all the way to how
34:51 - much ever my width of the canvas is
34:53 - and remain at where height is half of my
34:56 - height of the canvas
34:58 - and then i'll do the same thing for the
34:59 - other line which i'm going to replace
35:01 - this um part of the 150 the hard-coded
35:04 - number
35:05 - to the half of my width so width divided
35:07 - by 2
35:08 - and then i'll go from 0 and i will
35:10 - remain and width divided by 2 for
35:12 - my x position of the second endpoint of
35:15 - the line and i'll go to
35:16 - how how much ever my height of my canvas
35:19 - is nice
35:20 - yes so now if we even change those
35:23 - values so it's not even a square this
35:24 - should work where
35:25 - um yeah exactly exactly
35:30 - awesome cool yeah so again uh this is
35:33 - the kind of stuff that i like to point
35:34 - out where
35:34 - even if you're brand new to programming
35:36 - this is kind of an interesting
35:37 - application of
35:38 - variables right off the bat where you
35:40 - can now kind of see okay these variables
35:42 - are
35:43 - storing some value and we're going to be
35:45 - using that value
35:47 - somewhere so exactly um
35:50 - it is kind of interesting also at the
35:52 - same time though because these are not
35:54 - like you know user defined variables
35:56 - we're using
35:57 - where we're using led for example and
35:59 - then you know defining
36:00 - and initializing our own variables but
36:02 - basically you know um these
36:04 - immediately when you create a canvas
36:07 - these variables that are built in are
36:09 - going to be
36:10 - set to these values that we give to the
36:12 - creative canvas function
36:15 - yeah and i think i think one thing is
36:16 - that uh both g1 and i have experience
36:18 - with like thinking about the canvas and
36:20 - knowing like
36:21 - okay x y x is going over y is going down
36:24 - it definitely takes some time to get
36:25 - used to this so i think
36:26 - you know the line the line function
36:29 - takes four values but there's nothing
36:31 - wrong with having to sit there and think
36:32 - like okay i want my first point to start
36:35 - on the very
36:35 - to always start on the very left which
36:37 - is going to be zero
36:38 - and always be in the middle vertically
36:41 - which is height divided by two
36:43 - um like feel free to one think it out
36:46 - take take the time to think about where
36:47 - these points are gonna be and then also
36:50 - don't be afraid to um to run your code
36:53 - and see what happens
36:54 - and it might be wrong and you might have
36:56 - to um figure out where it's
36:58 - um where you went wrong yeah your code
37:00 - is not going to well it might break but
37:02 - there's not it's not going to have like
37:03 - a
37:04 - devastating effect if you type something
37:06 - wrong in your code or anything like that
37:08 - and my advice actually when you're doing
37:10 - programming with p5.js or when you're
37:12 - new to programming
37:13 - in general is to change one value at a
37:16 - time
37:17 - so for example in this line function and
37:19 - you're seeing this as like an example
37:21 - code or somewhere
37:22 - and you're thinking okay i'm not
37:23 - entirely sure what my you know the
37:25 - arguments inside of my line function
37:27 - does
37:27 - then i'd say okay change the first
37:30 - number in here to 100.
37:32 - that changed you know where my line
37:34 - started from zero to where
37:36 - like it and it what moves up to
37:38 - somewhere a little bit more towards the
37:39 - right
37:40 - and so i'm assuming that okay the first
37:42 - number changes the
37:43 - x-coordinate of my first point of my
37:46 - line
37:46 - so that's kind of like you can do a
37:48 - little bit of like a logical deduction
37:50 - work um to basically figure out um
37:53 - what each of these arguments inside of
37:55 - the function does
37:56 - um and that's also like a really good
37:59 - way of studying
38:00 - you know a finished code that you see
38:01 - somewhere on the internet
38:03 - i think it's i i know that we're going
38:04 - to like a million tangents and
38:07 - we want to get into the project but i
38:09 - also think that it's a cool opportunity
38:10 - to show
38:11 - like exploring edge cases um g1 online
38:14 - nine could you change that height
38:15 - divided by two to width divided by two
38:19 - um yeah that one's fine so if we do this
38:23 - and we run the code right now everything
38:25 - looks like it's working
38:26 - but if we make the canvas rectangular
38:29 - all of a sudden it's not working
38:32 - right because we've confused width for
38:35 - width for
38:36 - um height at some point or the other way
38:38 - around right and so this is
38:39 - i think that this is another good
38:41 - example of like um
38:43 - really kind of thinking through all of
38:44 - the cases where you know
38:46 - that code was working because width and
38:48 - height were the same thing but if it's
38:50 - different
38:51 - then you have to make sure that you're
38:52 - um that you're doing this correctly or
38:54 - you
38:54 - you might be uh doing something
38:57 - incorrectly
38:58 - under certain conditions yeah
39:01 - um i think for the sake of time i'm
39:04 - going to move up a little bit and i
39:05 - don't think we're going to be able to
39:06 - create
39:08 - all four patterns for each of the
39:10 - quadrant and i think i'm going to also
39:12 - simplify
39:12 - the steps a little bit so that i can
39:14 - show you more things as an introduction
39:16 - so what i'm going to do is it's it's
39:18 - telling us let's fill the first quadrant
39:20 - with the pattern
39:21 - the upper left corner will be filled
39:23 - with parallel lines that run vertically
39:25 - um i'm going to actually skip this
39:26 - because i've also i've already shown you
39:28 - guys how to create a line
39:30 - and i really want to show you how to
39:32 - create um different kinds of 2d
39:33 - primitive shapes
39:35 - um one of which is for example in this
39:38 - quadrant
39:39 - it is telling me that i'm going to be
39:40 - drawing a polka dot pattern
39:42 - on the um top right quadrant which is
39:45 - this one
39:46 - so i'm going to go ahead and do that in
39:48 - here so
39:49 - there's also in the um when you open up
39:52 - our project
39:53 - for this wall drawing um project in dp5
39:56 - sjs learn p5.js course
39:58 - um there's also comments in the areas
40:01 - where we expect
40:02 - or it's sort of like a guideline for you
40:04 - because projects are not we're not
40:06 - particularly checking whether you're
40:08 - doing things correctly or incorrectly
40:10 - it's more of a guideline and it says to
40:12 - do um for the draw
40:13 - bulk without polka dot section so i'm
40:15 - going to go move down inside
40:17 - now we're inside the draw from draw
40:19 - function in here
40:20 - and what we're going to do is try to use
40:24 - a circle um first before we even do a
40:27 - grid of circles we're going to draw
40:28 - a circle inside of that quadrant
40:31 - so here in line 32 i'm going to just use
40:34 - another function called
40:35 - circle which is a um if you can you can
40:39 - go to the reference and check out under
40:40 - the shapes under 2d primitive
40:43 - primitives section we've got a reference
40:46 - for
40:46 - a function circle so as namesake
40:49 - this function will draw you a circle
40:52 - inside of the canvas
40:53 - it takes three arguments in here the x
40:55 - coordinate y coordinate and also d
40:58 - for diameter of the circle or really the
41:00 - width and height of the shape right
41:02 - and we're gonna go back in here and say
41:05 - okay
41:05 - if i were to draw let's try to draw a
41:08 - circle actually
41:08 - in the middle of the canvas first so
41:11 - using the width and the height variables
41:13 - to in order for me to get the width at
41:15 - the middle of the canvas
41:16 - my x coordinate will have to be width
41:18 - divided by 2. my y coordinate will have
41:20 - to be
41:21 - height divided by 2 and then for the
41:24 - size i'm just going to give it an
41:25 - arbitrary number of 100
41:27 - which will be which will be translated
41:29 - into pixel values so it'll be
41:31 - it will have a diameter of 100 pixels
41:34 - if we run this we see a circle in the
41:36 - middle of our canvas
41:38 - exactly in the middle of the canvas um
41:40 - and at the
41:41 - with an if you see this the x and the y
41:43 - coordinates are used for the center
41:46 - of the circle right and then 100 is for
41:49 - the diameter of the circle
41:51 - um and let's actually
41:54 - go ahead and i think this was to do
41:57 - before this
41:58 - it says set no stroke and fill color so
42:00 - we're gonna do here and we're going to
42:02 - use a fill
42:03 - function which um change the fill color
42:06 - so the color
42:07 - the solid color that the shape is filled
42:09 - with to another color that you can
42:11 - define in here
42:12 - and a couple of notes on the fill
42:14 - function is um
42:16 - if you're familiar with web programming
42:18 - you know that there's multiple ways that
42:19 - you can define colors for example in
42:21 - within css
42:22 - right you have hexadecimal colors you've
42:24 - got name color
42:26 - colors so for example like pink beige
42:28 - black and all that kind of things
42:30 - that you can use within css you can also
42:32 - define colors in rgb and
42:34 - hsl and so on all of those things you
42:37 - can do within p5.js
42:38 - things will be a little bit different in
42:40 - terms of syntax but you should be able
42:42 - to do something like let's
42:44 - say in string if i say pink it will
42:47 - fill our circle in pink
42:50 - um also if you were to do some sort of
42:53 - like a hex number
42:54 - in here and say
42:57 - uh um is this number sign and then to
43:02 - i think this just should give us blue
43:04 - zero zero zero ff
43:06 - which it does and you can also use rgb
43:08 - numbers which you don't have to do
43:10 - like rgb and another function inside
43:13 - like you would do for css you can just
43:16 - directly give it three
43:17 - arguments for the fill function so if i
43:19 - were to give 255
43:21 - 0 and 0 this should color our
43:24 - circle in red yeah the way i think about
43:26 - it is lots of red
43:28 - no green no blue if we did like 255 255
43:32 - 0 it would be what that's mixing r and g
43:35 - so it's going to be mixing red and green
43:36 - which gives yellow
43:38 - yeah cool why didn't i try it out
43:42 - that's what i say and then i'm gonna
43:44 - write and what happens if i do something
43:45 - like this
43:46 - what kind of color do we get get like an
43:48 - orangey color
43:50 - which looks nice too um i'm also gonna
43:53 - maybe just
43:54 - kind of ignore the prompts in the um
43:57 - project a little bit because i also do
43:59 - wanna wait actually i do wanna show you
44:01 - different shapes but before i do that
44:03 - i'm going to move my circle
44:05 - so that it sits on the top left top
44:07 - right quadrant of our canvas
44:10 - which i'm also going to try doing with
44:12 - the width and the height variables
44:14 - so if you want to do some if you want to
44:15 - position our center of our circle to be
44:18 - at the center of our top right quadrant
44:21 - we have to divide up our canvas a little
44:23 - bit more right
44:24 - so in order for us to say okay we want
44:26 - to have our y
44:28 - to be here and we know that our y is at
44:31 - zero
44:32 - at the top of our canvas and it will
44:34 - gradually increase as it reaches towards
44:36 - the bottom
44:37 - this is at height divided by two so if
44:39 - it's a quarter
44:40 - height divided by four that it should
44:43 - sit in the middle
44:44 - of our top right quadrant um vertically
44:48 - so let's go ahead and change that so the
44:50 - height is not divided by two but divided
44:52 - by
44:52 - four and click run and you will see that
44:55 - it now sits
44:57 - um quarter way from the top to the
45:00 - bottom
45:01 - of our account again a good point to
45:03 - just remind yourself that
45:04 - zero is top left so you know if you're
45:07 - familiar with like
45:08 - more traditional coordinates that you
45:09 - might see in math you're starting from
45:11 - the bottom we're starting from the top
45:14 - and going down so that's a fourth of the
45:15 - way down
45:16 - the the canvas cool so
45:19 - now we're going to do the similar thing
45:21 - where um we're going to
45:23 - calculate how to position our
45:25 - x-coordinate here
45:27 - with our width um variable built-in
45:29 - v5.js variable
45:30 - so if i were to go from the left
45:34 - um boundary of our canvas being at zero
45:38 - zero coordinate for our x coordinate
45:41 - zero for our x coordinate
45:42 - then this would be at where the width is
45:44 - divided by 4
45:46 - because it's quarter way in but in order
45:48 - for us to get all the way here
45:49 - that would actually be three quarters of
45:51 - the way in so what we're going to do is
45:53 - we're
45:53 - going to actually divide the width
45:55 - divided by 4 and times it by 3
45:57 - so that way we have three of our
45:59 - quarters
46:01 - which would make our circle be sitting
46:04 - on the center of the top right quadrant
46:06 - of our canvas
46:07 - nice cool and then i'm going to move on
46:11 - and i also want to show you a different
46:13 - 2d primitive shape which is we're going
46:15 - to try
46:16 - um using a square
46:19 - so you can create a square using a
46:21 - function called square
46:23 - i think this is another really nice
46:24 - thing about v5js
46:26 - is that a lot of the functions that they
46:27 - have inside of their reference or inside
46:29 - the whole library itself
46:30 - really is self-explanatory if the
46:33 - function is called square
46:34 - it will draw you a square if it's called
46:36 - rect it will draw your rectangle
46:38 - if it's called the lips it will draw
46:39 - your lips um
46:42 - so with that okay let's try clicking on
46:44 - the reference page for the square
46:46 - function
46:47 - which basically it will give um it is um
46:51 - telling you that we need three variables
46:54 - at the least so
46:56 - i guess one little note about how you
46:58 - can read the references on the p5.js
47:01 - website if you're looking at the syntax
47:04 - and things are in square brackets
47:06 - this means that those are optional
47:07 - values and you don't need to have them
47:09 - in order for you to draw a square
47:11 - and also if you think about it logically
47:14 - in order for you to
47:15 - draw a square you need absolutely an x
47:17 - and y coordinate
47:18 - and you also need some sort of a size
47:21 - and because it's a perfect square where
47:22 - the width and the height of the shape is
47:24 - the same you really need just one number
47:26 - right to afford it to be the size of the
47:28 - square
47:29 - so similarly let's just start off by
47:31 - creating our square in the middle of the
47:33 - canvas by doing width divided by two
47:35 - height divided by two and also similarly
47:37 - i'm just going to put in a static number
47:39 - in here for now
47:40 - for 100 pixels and notice
47:43 - that immediately you kind of see
47:45 - something different here right
47:47 - when we drew our circle previously we
47:49 - had
47:50 - our the middle of our circles as the
47:52 - center position of our circle
47:54 - match the center position of earth of
47:56 - our canvas
47:58 - in the case of square we see that the
48:00 - top left corner of our canvas
48:01 - matches the middle of our canvas this is
48:04 - because the x and y
48:06 - coordinates that we pass through the
48:07 - square function is used to position the
48:10 - left um top left corner of the
48:12 - square and the 100 um the as given as
48:15 - the third argument of this
48:17 - function is used as the width and the
48:19 - height of the sheet
48:20 - so in order for us to basically say
48:22 - there are multiple ways of doing this
48:24 - actually
48:24 - to have us position
48:27 - our shape in the middle of the canvas
48:30 - for example
48:31 - which would be to change our x and y
48:35 - coordinates that we're giving into the
48:36 - function itself so
48:38 - for example we know that the the width
48:41 - and height
48:41 - of our shape is supposed to be 100 so if
48:44 - we minus 50
48:45 - it will move 50 pixels to the left and
48:48 - then if we also
48:50 - minus 50 for the height for the y
48:52 - coordinate sorry not the height for the
48:54 - y coordinate
48:55 - it's going to move 50 pixels towards the
48:57 - top of the canvas
48:59 - so if we do this and save we'll see that
49:01 - now our um square is positioned in the
49:03 - middle of the canvas
49:05 - but also what we can do here is let's
49:07 - say that we do want to keep
49:09 - our x and y coordinates to be with
49:11 - divided by two and height divided by two
49:14 - inside of our reference we're going to
49:16 - take a look at
49:17 - and a function that exists from the fifa
49:19 - just library called
49:20 - rect mode which stands for rectangular
49:23 - mode
49:24 - so using this function you can set you
49:27 - can tell
49:28 - p5.js um program to basically say
49:31 - um please interpret my the numbers that
49:34 - i'm giving to direct function and the
49:35 - square function differently
49:37 - and if we tell direct function to be at
49:40 - center so here i'll do it right above my
49:42 - square function and say
49:43 - rect mode and right center in all caps
49:47 - what this will do is that after we set
49:50 - rectmode to be at center or rectangular
49:52 - mode to be a
49:53 - center our x and our y coordinates for
49:56 - our square
49:57 - and rectangle functions are going to be
49:59 - used to be at the center
50:01 - position of our shape for our
50:03 - rectangular shapes which we
50:04 - include rectangle and square
50:08 - cool um
50:11 - i guess maybe this might be a good time
50:13 - to take any questions
50:15 - um from the chat if we have some
50:19 - but basically what i wanted to show you
50:21 - during this first series of our live
50:23 - stream
50:24 - for creative coding is that you know
50:26 - there is a
50:28 - javascript library called p5.js it's
50:30 - available for everyone to use because
50:32 - it's an open source library
50:34 - this is the web page that you can go to
50:37 - for references for all the documentation
50:39 - on all the functions that they have
50:41 - the library has available for you and
50:43 - that i also wanted to give you a little
50:45 - bit of a taste of what you can do
50:47 - with javascript to create um 2d drawings
50:51 - on the web page i uh yeah we can we can
50:55 - wait for some questions to come in from
50:56 - the chat
50:57 - um we had a question earlier that was um
51:02 - uh can you talk a little bit about the
51:03 - difference between p5.js and processing
51:06 - and which one is better
51:08 - for use on the web so processing was
51:11 - never really
51:12 - um developed for it to be used on the
51:14 - web itself
51:16 - it really was a library that was built
51:18 - for um
51:19 - for java the program language java which
51:22 - is very different from javascript
51:24 - so javascript is a scripting language
51:26 - that you can we use for the web page um
51:28 - to do any sort of like an actionable
51:30 - things within the web page itself
51:32 - and java is more of like um how would i
51:36 - explain this um alex i feel like you
51:39 - might be more apt at explaining what
51:41 - java is but basically
51:43 - um it is a programming language yeah
51:45 - java is used for
51:47 - non-web applications right so if you
51:48 - wanted to make a little application
51:50 - that's sitting on your desktop right you
51:51 - could do that using java
51:53 - and so processing is a very similar
51:55 - library where you can do all sorts
51:57 - there's a canvas you can draw shapes you
51:59 - can animate the stuff on the canvas
52:01 - really very similar functionality right
52:05 - so um if you've ever used processing or
52:08 - if you intend to use processing
52:09 - you will have to download what's called
52:11 - an ide which is um
52:13 - integra what is it what does it stand
52:14 - for ide
52:16 - idea integrated development environment
52:18 - integrated development environment
52:20 - which means that you're going to be
52:22 - opening downloading and opening the
52:24 - software
52:25 - where you create where you program all
52:27 - of your things that
52:28 - for your visualizations and you can run
52:30 - them and see them
52:31 - and etc but basically you need a special
52:35 - sort of um interpreter of your program
52:38 - to create the equity and see those
52:39 - visualizations
52:41 - and if you do download that you will see
52:42 - that there will be an option to
52:45 - interpret that code in javascript and
52:47 - you can use you can copy that
52:49 - and then paste it into like a web page
52:52 - similar to
52:53 - with a similar setup to what we have
52:54 - here for our index.html
52:56 - and it should be you should be able to
52:57 - run that on the web page
52:59 - but really p5 the processing the ide
53:02 - itself it does um provide you with an
53:05 - option
53:06 - for you to display your code online but
53:08 - it was never really intended to
53:10 - um the initial motivation that's um so
53:13 - to speak was not
53:14 - for it to run on the web page and this
53:17 - is where p5.js came in
53:18 - and p5.js was specifically um created so
53:21 - that it takes
53:22 - all advantage of web programming of
53:24 - sorry of
53:26 - web graphics programming for um
53:29 - and and really i'd say if you're going
53:32 - to create visualizations on the web page
53:34 - usb 5.js because that's what it was
53:36 - built for g1 could we get a little bit
53:38 - of a preview of how to animate
53:40 - stuff uh isaac is asking how do you
53:42 - animate and spin the shapes
53:43 - i i always uh spinning i always found to
53:45 - be a little bit different spinning
53:47 - involves
53:48 - at least the way that i always thought
53:49 - it involves like rotating the canvas
53:51 - itself which starts to get a little bit
53:53 - mind-bending but i was wondering if you
53:54 - want if we could just see one of these
53:56 - balls kind of
53:57 - start to drop okay so if you want to
54:01 - rotate anything there is a function
54:02 - called rotate which you can put in a
54:05 - static
54:07 - angle in here and v5.js angles are given
54:09 - in radians i'm going to go through this
54:11 - really fast
54:12 - but uh we there's also another um p5.js
54:16 - built-in variable called frame count
54:18 - which basically increments one per frame
54:21 - rendered
54:21 - so it renders around 60 frames per
54:23 - second so um
54:25 - it will have go from zero to 60 for each
54:28 - second
54:28 - basically in a b5.js in the world of
54:31 - b5.js if you're trying to animate
54:33 - something
54:34 - really really quickly you use this
54:36 - number and i'm going to slow it down by
54:39 - timesing it by 0.01 and what this will
54:41 - do is
54:43 - something like that that's not spinning
54:45 - with its center on its own
54:47 - because when you rotate something in
54:50 - p5.js you're rotating the whole canvas
54:52 - right you're not just rotating the shape
54:54 - itself right so you can almost imagine
54:56 - it's like the the canvas is kind of like
54:59 - spinning around that top left corner
55:01 - uh it's how i i try to visualize it yeah
55:04 - so when we do change our square to have
55:06 - a x and y coordinate zero comma zero
55:09 - you can see that it's rotating at the
55:10 - top left corner like this
55:12 - um so in order for us to basically
55:16 - move our rectangle back to the center of
55:18 - our canvas what we'll need to do is
55:20 - actually
55:20 - use another function called translate
55:24 - which translates the position of our
55:26 - canvas the entire canvas
55:28 - from zero comma zero to zero to
55:31 - width divided by two and height divided
55:33 - by two so what i'm doing is i'm actually
55:35 - moving the whole
55:36 - origin point of my canvas from the top
55:38 - left corner to the middle of the canvas
55:41 - if we do this and we run it we have the
55:44 - whole canvas which
55:46 - which moved from top left corner to the
55:48 - middle of the canvas and spinning on its
55:49 - own
55:50 - and notice how like it's created this
55:52 - trace
55:53 - of um a white circle around it because
55:57 - our stroke color
56:00 - um is white but if we were to not want
56:04 - our strokes
56:05 - in here i would say no stroke before we
56:08 - draw the shape
56:10 - and we won't have any stroke so now
56:12 - we're actually it's also creating a
56:14 - circle
56:14 - right because it's the uh if we if we
56:17 - have no
56:17 - fill i guess we will just see the um
56:21 - um actually if we use a background
56:23 - function at the beginning of our draw
56:25 - it's refreshing with that background
56:27 - color and then it's drawing the shape on
56:30 - top of it
56:30 - so it will look like you know it's
56:32 - wiping it out in black and then it's
56:33 - drawing that
56:35 - the shape in that particular rotation
56:37 - and so on um
56:38 - continuously and this is actually the
56:40 - thing that i was talking about
56:42 - about how the draw function runs and
56:44 - that
56:45 - after the setup function runs once so
56:48 - you will also see that all of our lines
56:49 - disappeared
56:50 - that's because at the beginning when the
56:52 - program runs we had all of those lines
56:55 - but immediately after we're wiping our
56:57 - background to
56:58 - a black a solid black color again and
57:01 - then drawing these shapes on top of it
57:02 - that's why we no longer see those white
57:04 - guidelines
57:05 - yeah you can think of that background as
57:07 - painting over everything that existed
57:08 - before
57:09 - and then the draw loop happens again
57:10 - that repaints the shapes um
57:13 - challenge challenge for the um audience
57:16 - if
57:16 - do you want if you what's the what's the
57:18 - built-in variable it's called free
57:19 - uh like frame count so if you put in
57:22 - frame count as the
57:24 - x value for your circle there and maybe
57:26 - you divide it by
57:27 - uh or you multiply it by a small amount
57:30 - or something
57:31 - um let's not hit run yet let's see if
57:33 - our audience can guess what happens and
57:35 - then
57:35 - sorry what were you going to say do you
57:36 - want i was going to say we could just
57:38 - leave it the way it is i don't think we
57:39 - need
57:40 - to do anything to it just use frame
57:42 - count the way it is for the x
57:45 - yep yeah i think that that makes sense
57:47 - um but i was gonna say though
57:50 - um let me actually revert this back
57:53 - because i do want to show
57:54 - something sure that is really really
57:56 - quick
57:58 - while we wait for the audience to think
58:00 - about that but
58:02 - um you can also give alpha or opacity
58:04 - value to your colors
58:06 - and if you put in a little bit of
58:08 - opacity in the background function
58:10 - by giving it the second value when you
58:12 - only have
58:13 - you know two values
58:16 - it's going to create this like tracing
58:18 - effect do people see this i think it's
58:20 - more noticeable when it's a little bit
58:21 - faster
58:23 - yeah it's hard it's hard to see but
58:27 - there we go that's cool that's because
58:30 - um the background color is being
58:32 - uh cleared out with some opacity so it
58:34 - still leaves traces of things
58:36 - um right the previous square that we're
58:39 - painting over we can still see a little
58:40 - bit of it and then we
58:42 - um uh continue to paint paint over the
58:45 - background
58:46 - yeah um okay cool let's
58:49 - look at if we so if we replace this
58:53 - before this was a constant value right
58:55 - it was always
58:56 - width divided by two or whatever it was
58:58 - now it's going to be frame count and
59:00 - frame count is this value that's
59:02 - keeping track of how many frames have
59:03 - existed since the start so presumably it
59:05 - starts at zero and every frame it
59:06 - increases by one
59:08 - and so our position is going to be
59:11 - changing every time we draw it so if we
59:13 - go ahead and run this
59:15 - we'll see there we go our circle is
59:17 - moving
59:18 - it's x yeah it's x position is dependent
59:21 - on the frame count it's no longer static
59:23 - so it looks like the circle is moving
59:25 - cool um i guess maybe one last question
59:28 - i think just came in through the chat
59:30 - if you're new to programming i'd say
59:33 - that
59:34 - our learn p5.js course is really
59:36 - intended for beginners and it does take
59:39 - you from the beginning of like knowing
59:41 - nothingness to really really slowly
59:43 - progressing through but it does assume a
59:46 - little bit that you will have
59:48 - some knowledge of fundamental
59:49 - programming concepts so i would
59:52 - um personally recommend that you take
59:55 - our learn javascript course before
59:57 - taking our learn b5.js course
59:59 - but if you just kind of want to like go
60:01 - through and get a taste of like
60:03 - programming like what it's like to
60:04 - program without worrying too much about
60:07 - learning how to program
60:08 - in general then i think you wouldn't
60:10 - have problems just following along the
60:12 - learn p5.js course from the beginning
60:14 - yeah again i think it's a it's a great
60:16 - way to learn those fundamentals too of
60:18 - if you
60:18 - if you don't know what a for loop is or
60:21 - how to write a for loop
60:22 - well you can write a for loop using p5
60:24 - and instead of creating one circle you
60:25 - can try to create 100 circles using a
60:27 - for loop so it's a nice really visual
60:29 - way to
60:30 - kind of hone those fundamentals which is
60:33 - the thing that this um project
60:36 - originally intends to do
60:37 - which is trying having learners
60:40 - basically use multiple um sets of four
60:43 - loops to create these patterns that
60:45 - repeat
60:46 - in in different numbers so for example
60:48 - this line
60:49 - um pattern uses one set of for loop that
60:52 - draws these lines for how many uses like
60:54 - nine i think
60:56 - and then like same for the polka dots
60:58 - and checkers and like these on diagonal
61:00 - lines and so on
61:02 - cool all right juwan do you want to give
61:04 - a brief preview of what we're doing next
61:06 - week
61:06 - yeah so for next week we're going to
61:09 - talk a little bit about the concepts
61:11 - that are covered in this animation
61:12 - module of their learning people just
61:14 - course
61:15 - um and we're going to talk about uh or
61:17 - do a walkthrough of this bouncing balls
61:19 - project
61:20 - which does this cool
61:24 - awesome so we're really going to go into
61:27 - um creating animations with b5.js and
61:30 - create multiples of the same multiple
61:33 - variations of the same shape
61:35 - cool that works good to me so thank you
61:38 - for uh
61:39 - checking this out and um yeah uh we will
61:43 - uh we will see you next week

Cleaned transcript:

hello all right hello everyone cool i think we're uh i think we're good to to get started awesome so let me actually stop sharing um do we know how many people are in um yeah we've got a few we've got a few people watching we've got the chat open um hello uh manga in the chat well awesome um so welcome to our first series of live stream for creative coding um just maybe we'll do a little bit of a brief instructions um my name is jiwan i'm a curriculum developer at co academy and um we're going to be so i was part of the team that developed the learn p5 course that we're going to be going through today and also for the rest of the seven weeks that will follow for the live series for creative coding and um alex if you wanna cool yeah so i'm alex uh you might have seen me on some of these other live streams that we're doing uh i had no part in building the the p5 course although i love p5 we'll talk about it a little bit more but i think it's a really really awesome tool to both make really interesting creative um coding projects and also a really great tool if you're brand new to coding to kind of like learn the fundamentals so uh yeah i'm super excited to have juwon here g1 is awesome uh it's made some like really incredibly creative projects so uh yeah and we're gonna we're gonna have jihuan for um eight weeks uh going through different projects cool let me share my screen again and um we're going to start talking a little bit about what we're going to be talking about for during today's session and also for the sessions to come on our creative coding live series before we go any further i'm gonna maybe talk about what creative coding is um it might be a new concept to some of you who are more familiar with more standard programming and standard coding um basically what creative coding is is for me i mean everyone's going to give you a different definition of what it is but for me what it is is it's a different approach to programming you're going to be using your programming skills to create different kinds of things but essentially the goal here is for you to express yourselves with code and for you to not necessarily think about what it is that you're going to be building what what kind of like use do you have to have with your program we're going to leave that aside and leave our you know the practical things that we want to get done with our programs aside and really think about what can i use um how can i use programming to create a little piece of art or to create something that will really be you know advocating what i have to share with the world what kind of messages that i have that i want to embody in my works of art and to go over to maybe share with you guys some examples of what you can do with creative coding or kind of like example it works that would be classified as creative coding works here where i'm at the learn p5.js course website on codecademy and within the first module called uh welcome to e5js which by the way i should say that the course itself is free uh so it's not a pro course so anyone who comes to the platform and look for the learn p5 course should be able to access all the contents in here uh most of the content is in here and so i'm going to go ahead and open this uh welcome article and then we walk you through the journey of figuring out what creative coding is from the beginning some of the definitions of the distinctions between programming itself and what i mean by creative coding um is in here and there are also some examples of different kind of creating coding projects to help you get excited about the potentials of different works you can make so we can you can think about making generate generated visualizations all this muslin to degenerative art wikipedia page but um you can also you create them using different shapes wow all right and then you can is that made just with p5 um i believe this is um with processing.js so it's in javascript and we can talk a little bit about processing but um they are similar and this is ben fry's work on generated visualizations with text and some other things you can make you can also think about making data visualizations this particular one is a visualization this does not um created using p5 but this is a map of all the trees in new york city and is color coded and you can also filter them by different species like if you want to treat it that tree data set is such a classic one i know we use that in a couple of different places on codecademy yeah this one's great and this also uses i think it's um created using mapbox which is also like a free map api if people are interested in doing map visualizations i can also think about creating um immersive experiences for example this particular one is created by colin levin who is a pretty big name in computer vision and creating this sort of like augmented vision works so just to play it a little bit so they're like pretty subtle um alterations i would say to the feed at the live feed that you're getting and people can interact with them and this is all part of this is all done program um with programs not necessarily p5 but it is a good example of what you can do in the realm of creative programming and also you can create interactive films like this particular one enter the monument um all of these examples are linked there in the welcome article so for you to go ahead and experience them on in your own um computers and devices and so on um maybe to share a couple of my own personal work that might be a little bit more closer to the things that you could make through um with all the material that you learned from the learn p5.js course this particular one was called around us and this was a data visualization of satellite data this is a live website link in here i hope it works well cool this one is built in combination with another visualization library called 3js and also with p5.js so it uses both libraries in here and you can get through the world map which shows the number of satellites per country and also this particular one shows a timeline of how many satellites that have been launched starting from 1974 and then these ones if you go to this side you'll be able to click on the or hover over these little bowls that come up here as like the satellites and then these also cards were also generated um and created um using a data set of images and so on so yeah that's an example of the thing that you could do um maybe another one that i will show is this one this one is uh my work the kind of work that i did with um computer vision technology it actually uses a thing called processing not p5 but basically what i did was i um analyzed the patterns of pigeon movement across from i don't live here anymore but my um the apartment i used to live um had a lot of um pigeon interest i'd say and i'm personally um very afraid of birds in general especially pigeons and this kind of like intrigued my um i don't know interest in like maybe i will learn to appreciate them a little bit more if i will yeah that's the way to get over it just totally immerse yourself in in pigeons yeah and it makes them it makes their movement look pretty you know the way the different ways that i've um try to visualize their movements i think yeah one of the things that i love about um creative coding and i can talk a little bit about my background is i used to teach high school computer science to you know high school students that had never done any coding before and i really kind of exclusively used p5.js the the library that we're going to be looking at during this series to teach them coding fundamentals and i found that um you know my students were so much more motivated to make something that they were like creating themselves and interested in themselves rather than like make a you know uh tax calculator or something like that where there's kind of a set of like problems that you might see a lot in a computer science class and giving folks access to something and saying just like make something that you want to make where i had kids making pacman and i had students making um you know generative art like you were showing and so even if you think that creative coding might not be your thing i really encourage um you to give it a shot in that i do think that it will really help your programming skills at large where you're going to be diving into like you're going to be problem solving the entire time you're trying you're trying to do these problems which is really the best thing that you can do to learn programming um so yeah i hope that the reason that i love p5 so much is because it encourages people to problem solve and so i hope that you'll if you're watching this you give this a genuine effort of like try to make something interesting and cool with um with p5 because i think it will help your not only will you make something cool but you will make uh it will help your um kind of more traditional programming skills become uh stronger yeah so um p5.js will definitely it's so okay to backtrack a little bit p5.js is an open source javascript library so it is it is the whole thing is in javascript and it is intended for it to be used within the web space web space it isn't like a if people are familiar with what's called processing basically p5.js was developed sort of within the same space um the person who first started the efforts of creating beef buyers the library laura mccarthy she really took inspiration from what's called processing which is a java based coding environment and also a java library so processing let's go here so this is a thing of its own but really if you know processing you will also be really familiar with all the concepts that we'll be using in p5.js it's really a matter of which language that you're using to create um visualizations um or to do anything visual and to also echo what alex said really p5.js is useful for anyone who is new to programming because you get that immediate feedback we'll hopefully be able to see um more of this as we go along through these live series and also today but basically all the programs that you create you're going to immediate visual feedback for what it does so it really helps you to hone in in your you know programming skills your you know um your ability to create logical algorithms and that kind of things and later on towards the end of the series i think alex will also introduce object oriented programming which in my opinion is a really difficult concept to grasp if you don't see what each of the objects look like and really p5 puts those like concepts in its shape and form and color so that you can see the visual of in visually the objects that you're creating with your code yeah i'm going to run a session on object oriented programming and then also one on machine learning um algorithm which again it's like that's kind of intense uh like this this is an algorithm that i learned you know in my college courses i didn't see it at all in high school or when i was becoming when i was a beginner but i think that p5 makes it really accessible just because you can kind of visualize what's happening you can step through and walk through what's happening um so yeah a really cool tool um juwan we have a couple of questions in the chat but i think we should get started with the project and i'll uh i'll hold these hold on to these um and maybe ask you as we get towards the end of this session yeah okay cool so going back to our learn p5.js course on our website so um if you i have some progress in here because i've been checking things on and off um but basically we've got about we've got six modules in here for you and there are six lessons and we're going to be going through um each of these lessons so introduction to creative program coding and also the animation module interaction module and media module during the course of the series um the live series and then we'll also be covering some other additional topics that go beyond the things that we talk about in this course for the second half of the series um i also before we go dive in here i do want to um put in a little bit of a plug for our week three live session yeah we're going to have a guest coming into our live series cassie tarquesian who will be talking to us about the p5.js um she's more involved in the actual development of the library as well as the open source community so we're going to talk about open source community what it means for code to be open source and for people to use in general about the community itself as well as what's called there's also a tool that p5.js has created and for you to get started working with p5.js called p5 web editor it looks like this and it gives you an environment where you can code p5.js projects and you can see it right on the right side how it renders uh on the webpage and it will be she she's also the main person that's driving this development um of b5.js p5.js web editor so we're going to have her coming in um it's like a special treat to talk about all of those things so i do want to i didn't want to promote it a little bit that's the session on the uh on march 23rd yeah cool so let's do move on and for today's live stream i do want to go through this particular project called wall drawing which is part of our first module well this is the first module really this is the second module is the one with the our act the actual content on b5.js so this project will go through the fundamental concepts of what pro p5.js is what is programming what is canvas and we're going to be basically be looking at how to to create patterns with um javascript um on what's called the canvas so i'm actually going to show you what our final output is which is going to be this we're going to draw from a clean slate of like a blank canvas so to speak um literally and actually uh we're going to start from a blank canvas and we're going to be creating these drawing these patterns into each of the quadrants of the canvas cool let me actually um revert everything go from scratch and i'm going to go through the prompt with you guys also what we're going to be doing is we're going to be creating a drawing based on the artist's solute if you're not familiar with who solute is he there's a wikipedia article linked there for you to check out but basically he is one of the main drivers who are um known for it what's called algorithmic drawing so he provides a set of instructions that uh it he leaves um open for anyone who is following the instructions to draw a copy of his drawings so basically we're kind of creating an um a digital painting that embodies his sort of um thoughts where we give a set of instructions through code to our p5.js sketch and we have that generate this um drawing for us so if we click start and then we get um we scroll down we start seeing these um set of instructions that we can uh we can read and try to follow along to create that um what's it called the uh four sets of patterns that i've shown you um before so we're gonna do here is okay let's um as we go through this i'm going to explain some of the key concepts of p5.js um so basically on the right you will see the default uh structure of a p5j sketch so p5 sketch is like any other webbased projects it has a index.html that contains the actual contents it's got style.css that you can use to style any components on the under html and there for you using css um code and it's also got what's called sketch.as which is a conventional name that we just have for a javascript file and all the sketch.js file and the css file gets linked inside of index.html file um same as how you will link any other thing any other html oh sorry any other css or javascript file within the um index.html so we've got the script tag in here that links the sketch.js file as the source um attribute inside of our body tag we've also got the style the style sheet linked as a link tag inside of the head section of html so sketch.js is really where all of the magic is going to happen this is what where we're going to be programming and the first thing that we're going to do is actually let's do this take a moment and completely empty okay so it's just asking us to check that all of those files are in there so let's go ahead and click that and so so to be uh so i guess thinking about that final product that we saw with the boxes and the the different patterns in each box really what we're looking at there is a normal web page and most web pages have a lot of html a lot of css and really what we're doing here is that the html and the css are pretty basic and basically we're just saying the only thing on our web page is going to be this p5 canvas where we can do different drawings and all of that drawing is going to happen inside the javascript file exactly so in p5.js there are two functions there that are fundamental to how the program runs and how it generates visualizations we've got a function that's called setup and i'm going to close my brackets after all the tutors in here and we've got another function called draw function draw so these functions even though we're defining them inside of rp5 instead of our sketch.js file really these functions automatically run so you don't actually have to call these functions explicitly like for example if you're familiar with javascript you know if you do setup like this associate that um how you call this actual function like that all the code that is scripted inside of that function you don't it's actually you should not be doing this it's not that you don't have to but really you should not be doing it because the p5.js library will automatically call these functions the setup function runs at the beginning at the very beginning when you when the website is first loaded the setup function runs once and so this is where we set all of these initial stylings for example creating canvas which we'll talk about in a bit but creating canvas is one of the things that you would want to do but all the initial styles that you want to do for your drawing they all go inside of the setup function the draw function runs repeatedly in an infinite group and it runs after the setup function is finished running so what that means is that first the setup function will run when the website when this web page runs the setup function runs and it sets up these initial things that you need to you want your sketch to do and and after that point the draw function everything all the code that you contain inside the draw function will run in an infinite loop over and over again so we're going to talk about endocrine animations in our next stream series but basically the draw function is where we're going to be the the basic structure of the draw function the fact that it runs an infinite loop is really convenient if you want to create animations right because animation is really um some like series of images static images that change over time and since the draw function runs in an infinite loop anyway we can do little things in there to change values gradually with time to create animations but for now we're going to do all of our drawings inside of the draw function but they're not going to be changing they're going to be static for the this particular session of the live series so how does so we have this setup function we have this draw function and like you were saying they're a bit unusual because they're automatically being called by p5 how does all we're doing is writing a website here so like how does how does our website know to use these special p5 rules of like hey automatically set up automatically call draw in this loop that's happening uh over and over again um like why what is special about our website that like activates these p5 abilities this script line is actually the um the thing that we'll know that will tell our website to know to do those things so that's actually a really good question so p5.js is a javascript library that means it's a collection of code javascript code that is um created for us by you know a number of different kinds of developers but um they they have used um vanilla what's called manila javascript or pure javascript to basically make our lives easier for us to be able to say function setup and function draw for us to be able to create these things in the web page so what it does is so let's go from the index.html file it goes from the top and it loads this javascript file which is linked inside of this script tag as the source so it's got this what's called a cdn link which you can find if you go to the p5.js website and if you go if you go to get started we'll not get started sorry um download and you can either get an actual file of the javascript library the p5.js library itself or you can click on this link called cdn and this is basically where the library is hosted in the cloud for you so you can put copy this link and put it inside as a source file in the script tag and first this library is loaded then our sketch.js file runs so by the time our code inside.sketch.js is running um the all of the relevant instructions or all you know the people our website will know oh when when we have a javascript file that has a definition of function called setup and has a definition for a function called draw then p5.js library will automatically run that instance of setup function that we're defining locally within our web page and then run the draw function i think it's always a little bit interesting can we can you go to the the url from the that's yeah the that or the um yeah i think it's always a little bit interesting to see what this actually looks like where you'll see okay cool here's all of the p5 related code that we're kind of bringing into our our own code um actually i think it would help if we see not minified yeah there we go yeah so it's it's doing a bunch of stuff it's giving us all of these abilities that we're now going to be able to use in our own code um we have a question from chat uh how heavy is p5 i'm guessing that question is like how big is it is this going to really like slow down my web page by importing this this library it really is not that heavy i'm pretty sure it'll be a couple of kilobytes especially if you use the minified version because it is still text file so it won't take too much space um on the web server or locally on your computer for it to run cool because really you know all the heavy work is being done by your browser itself not the actual code cool so let's go ahead and continue on with our project and so the first step towards creating our wall um drawing inspired project is to create um the canvas so declare the setup function which i've already done and inside the setup function i'm going to use what's called a function called createcanvas and this is camelcase so that it's create and then capital c with the canvas and inside of here i'm going to give it two two numbers 500 comma 500. so what this will do is it's going to create what's called a canvas inside of our web page and i'm going to actually just run it and and save and then show it to you nothing happens but we um i don't know how i can actually show you this maybe i can open inspector but i think i'll hold off on that for now but what it is doing is that it's creating a canvas um html element so ultimately it really is everything that we have inside of the index.html file ultimately gets rendered as html and what we're doing with this creative canvas file sorry canvas function is creating an html element called canvas let me actually add some extra code in here to show you what we've created so if i um set the background of this canvas onto black i am seeing um i need to make my window a little bit bigger so i am seeing i'm seeing this black box that is supposed to be 500 pixels wide and 500 pixels tall so this creative canvas is a function is a p5.js builtin function this um this function is built in for you from the library and when you use it with two numbers the first number is for the width of the canvas the second number is for the height of the canvas so for example if i were to change this number from 500 to 700 and run it we're going to get a canvas that is 500 pixels wide and 700 pixels tall and the background function colors the background meaning the full fill color of the whole canvas element itself to black because currently we're using rgb notation and this is actually the same thing as writing zero comma zero comma zero for our red green and blue values um but if rgbs are black sorry rgbs are zero they're they're black and if it's 255 to 55 to 55 then it is white but the reason why we didn't see anything when we didn't have the background function is because it's transparent so transparent canvas on top of white white background default white animation of page is this nothingness but it is there because when we colored it with the background function we saw what was there cool cool so let's check this off and then we'll go down and so it says below the setup function declare draw function which we did we're going to also check that off and then moving on um inside the setup function divide the canvas into four equal rectangular areas by drawing two lines one along oops one along the vertical center and one along the horizontal center of the canvas so here we're going to use our first 2d primitive shape function so p5js has a lot of primitive functions 2d primitive functions provided for us you can go to their web website and go to the reference page and you'll see all of these functions builtin p5.js functions for all of these shapes so we're going to be focusing on some of these things that you see under the 2d primitives section and the first shape that i'm going to be creating is a line so when we go to the reference in the line for the line function it tells us that we need by minimum four numbers x and y coordinates for one end point and x and y coordinates for the second endpoint so using that what we're going to do is we're going to state line and for me to draw a horizontal line from the middle of the canvas then um we will also need to talk a little bit about the coordinate system of how we can figure out where to put our shapes so um like i said before let me actually bring back our background color in again so that it's easier for me to explain um yeah mg1 i wonder if we can make the canvas a little bit smaller just so we can keep the the zoomed in a little bit because it's a little bit hard to see your text if we zoom out once more um so yeah that works or even can we do like 200 by 200 and then zoom in one ah okay i see what you're saying and then make this bigger yes there we go cool maybe it could be a little bit bigger let's see what that looks like okay cool so i am like i said before the create canvas function it takes in the width and the height of the canvas that we've created here so this is 300 pixels wide and 300 pixels tall right now and the way that coordinate systems within our canvas works is that at the top left corner our x and y coordinates are at zero comma zero and as it goes towards the right our x coordinate increases so that because our canvas is currently at 300 pixels wide it's going to be at 300 pixels at all the way to the right of the canvas and our y increases as it goes down which is a concept a little bit hard to grasp because normally people think you know if height is increasing you want it to go up but in the case of p5.js and actually for most um webbased um based i think graphic libraries um to coordinate the zero commas here or the origin coordinate will be top left corner of the canvas or the thing that you're drawing it within and then the bottom right corner will be at however um bake my width of the canvases and however um tall my canvas is so this will be at 300 comma 300. so what that means is that for our line let's actually go ahead and try it so um i'm also going to explain this in a bit but i want to make sure that we can see the line so what i'm doing here is that i'm actually changing the stroke color of my line so it's going to be drawing white lines not because by default lines and d5 dress are drawn with black color so here then if i say something like zero comma zero which i've told you that is at the top left corner of the canvas and if i go 300 comma 300 it should draw a diagonal line from the top left corner to the bottom right corner which it does so knowing this we know that if i want to draw a line through here horizontally what we're going to have to do is we're going to try to figure out where where it is at the half in terms of height of the canvas the y coordinate of the canvas and it's going to go from the left um side of my canvas to the right side of canvas so that my x coordinate is going to go from zero all the way to the width of the canvas so if i put that in so i'm going to start from here which is that x is at zero and y is going to be 150 because the total height is 300 so 300 divided by two and it's going to go all the way to the right of the canvas and it's going to stay at 150. so now we've created a horizontal line vertically in the middle of the canvas similarly if we want to draw a vertical line uh in the middle of the canvas horizontally then we're going to go from here which is where uh when y is at 0 and we're going to go all the way down where y is at 300 and the x is going to remain constant in the middle of the canvas so it will be half of the width and our width is also 300 so what's going to um do our y sorry our x value is going to be half of 300 which is going to be at 150 and it will go from zero where y is zero and then it will stay where x is going to be 150 and then go all the way down to the bottom of our canvas which is at 300 pixels cool so now we go ahead and save that and we've got a canvas with a black background and white lines that is dividing the canvas into four parts one this is an interesting uh case where i would describe this as like hard coding in these values so our width and uh height are 300 right now and so we know that we want it to be 300 divided by 2 and we've just kind of hard coded in that value of 150. is there anything that we can do to not hard code in those values to take the existing to like does p5 know that hey my canvas is 300 by 300. so we there is a variable conveniently the p5.js who revises builtin variable and it's called there the variables are called width and height so you can use these variables to say um i know for now for here we've hardcoded it in because we can see that i've given my canvas to be width of 300 and height of 300 but no matter what this is if you want your canvas if you want your p5.js sketch to know basically whatever my width and height of my canvas is take that value then you can use the builtin variables called width and height so if i were to replace those using those builtin variables my code here would be something like width divided by 2 and then this could be width and this could be also wait a minute so this is for height value so actually even though my this would work because my width and height is the same i want to use the height variable in here so then it's going to go from zero and where height is half of the height for my y value value for the first endpoint of the line and then i want to go all the way to how much ever my width of the canvas is and remain at where height is half of my height of the canvas and then i'll do the same thing for the other line which i'm going to replace this um part of the 150 the hardcoded number to the half of my width so width divided by 2 and then i'll go from 0 and i will remain and width divided by 2 for my x position of the second endpoint of the line and i'll go to how how much ever my height of my canvas is nice yes so now if we even change those values so it's not even a square this should work where um yeah exactly exactly awesome cool yeah so again uh this is the kind of stuff that i like to point out where even if you're brand new to programming this is kind of an interesting application of variables right off the bat where you can now kind of see okay these variables are storing some value and we're going to be using that value somewhere so exactly um it is kind of interesting also at the same time though because these are not like you know user defined variables we're using where we're using led for example and then you know defining and initializing our own variables but basically you know um these immediately when you create a canvas these variables that are built in are going to be set to these values that we give to the creative canvas function yeah and i think i think one thing is that uh both g1 and i have experience with like thinking about the canvas and knowing like okay x y x is going over y is going down it definitely takes some time to get used to this so i think you know the line the line function takes four values but there's nothing wrong with having to sit there and think like okay i want my first point to start on the very to always start on the very left which is going to be zero and always be in the middle vertically which is height divided by two um like feel free to one think it out take take the time to think about where these points are gonna be and then also don't be afraid to um to run your code and see what happens and it might be wrong and you might have to um figure out where it's um where you went wrong yeah your code is not going to well it might break but there's not it's not going to have like a devastating effect if you type something wrong in your code or anything like that and my advice actually when you're doing programming with p5.js or when you're new to programming in general is to change one value at a time so for example in this line function and you're seeing this as like an example code or somewhere and you're thinking okay i'm not entirely sure what my you know the arguments inside of my line function does then i'd say okay change the first number in here to 100. that changed you know where my line started from zero to where like it and it what moves up to somewhere a little bit more towards the right and so i'm assuming that okay the first number changes the xcoordinate of my first point of my line so that's kind of like you can do a little bit of like a logical deduction work um to basically figure out um what each of these arguments inside of the function does um and that's also like a really good way of studying you know a finished code that you see somewhere on the internet i think it's i i know that we're going to like a million tangents and we want to get into the project but i also think that it's a cool opportunity to show like exploring edge cases um g1 online nine could you change that height divided by two to width divided by two um yeah that one's fine so if we do this and we run the code right now everything looks like it's working but if we make the canvas rectangular all of a sudden it's not working right because we've confused width for width for um height at some point or the other way around right and so this is i think that this is another good example of like um really kind of thinking through all of the cases where you know that code was working because width and height were the same thing but if it's different then you have to make sure that you're um that you're doing this correctly or you you might be uh doing something incorrectly under certain conditions yeah um i think for the sake of time i'm going to move up a little bit and i don't think we're going to be able to create all four patterns for each of the quadrant and i think i'm going to also simplify the steps a little bit so that i can show you more things as an introduction so what i'm going to do is it's it's telling us let's fill the first quadrant with the pattern the upper left corner will be filled with parallel lines that run vertically um i'm going to actually skip this because i've also i've already shown you guys how to create a line and i really want to show you how to create um different kinds of 2d primitive shapes um one of which is for example in this quadrant it is telling me that i'm going to be drawing a polka dot pattern on the um top right quadrant which is this one so i'm going to go ahead and do that in here so there's also in the um when you open up our project for this wall drawing um project in dp5 sjs learn p5.js course um there's also comments in the areas where we expect or it's sort of like a guideline for you because projects are not we're not particularly checking whether you're doing things correctly or incorrectly it's more of a guideline and it says to do um for the draw bulk without polka dot section so i'm going to go move down inside now we're inside the draw from draw function in here and what we're going to do is try to use a circle um first before we even do a grid of circles we're going to draw a circle inside of that quadrant so here in line 32 i'm going to just use another function called circle which is a um if you can you can go to the reference and check out under the shapes under 2d primitive primitives section we've got a reference for a function circle so as namesake this function will draw you a circle inside of the canvas it takes three arguments in here the x coordinate y coordinate and also d for diameter of the circle or really the width and height of the shape right and we're gonna go back in here and say okay if i were to draw let's try to draw a circle actually in the middle of the canvas first so using the width and the height variables to in order for me to get the width at the middle of the canvas my x coordinate will have to be width divided by 2. my y coordinate will have to be height divided by 2 and then for the size i'm just going to give it an arbitrary number of 100 which will be which will be translated into pixel values so it'll be it will have a diameter of 100 pixels if we run this we see a circle in the middle of our canvas exactly in the middle of the canvas um and at the with an if you see this the x and the y coordinates are used for the center of the circle right and then 100 is for the diameter of the circle um and let's actually go ahead and i think this was to do before this it says set no stroke and fill color so we're gonna do here and we're going to use a fill function which um change the fill color so the color the solid color that the shape is filled with to another color that you can define in here and a couple of notes on the fill function is um if you're familiar with web programming you know that there's multiple ways that you can define colors for example in within css right you have hexadecimal colors you've got name color colors so for example like pink beige black and all that kind of things that you can use within css you can also define colors in rgb and hsl and so on all of those things you can do within p5.js things will be a little bit different in terms of syntax but you should be able to do something like let's say in string if i say pink it will fill our circle in pink um also if you were to do some sort of like a hex number in here and say uh um is this number sign and then to i think this just should give us blue zero zero zero ff which it does and you can also use rgb numbers which you don't have to do like rgb and another function inside like you would do for css you can just directly give it three arguments for the fill function so if i were to give 255 0 and 0 this should color our circle in red yeah the way i think about it is lots of red no green no blue if we did like 255 255 0 it would be what that's mixing r and g so it's going to be mixing red and green which gives yellow yeah cool why didn't i try it out that's what i say and then i'm gonna write and what happens if i do something like this what kind of color do we get get like an orangey color which looks nice too um i'm also gonna maybe just kind of ignore the prompts in the um project a little bit because i also do wanna wait actually i do wanna show you different shapes but before i do that i'm going to move my circle so that it sits on the top left top right quadrant of our canvas which i'm also going to try doing with the width and the height variables so if you want to do some if you want to position our center of our circle to be at the center of our top right quadrant we have to divide up our canvas a little bit more right so in order for us to say okay we want to have our y to be here and we know that our y is at zero at the top of our canvas and it will gradually increase as it reaches towards the bottom this is at height divided by two so if it's a quarter height divided by four that it should sit in the middle of our top right quadrant um vertically so let's go ahead and change that so the height is not divided by two but divided by four and click run and you will see that it now sits um quarter way from the top to the bottom of our account again a good point to just remind yourself that zero is top left so you know if you're familiar with like more traditional coordinates that you might see in math you're starting from the bottom we're starting from the top and going down so that's a fourth of the way down the the canvas cool so now we're going to do the similar thing where um we're going to calculate how to position our xcoordinate here with our width um variable builtin v5.js variable so if i were to go from the left um boundary of our canvas being at zero zero coordinate for our x coordinate zero for our x coordinate then this would be at where the width is divided by 4 because it's quarter way in but in order for us to get all the way here that would actually be three quarters of the way in so what we're going to do is we're going to actually divide the width divided by 4 and times it by 3 so that way we have three of our quarters which would make our circle be sitting on the center of the top right quadrant of our canvas nice cool and then i'm going to move on and i also want to show you a different 2d primitive shape which is we're going to try um using a square so you can create a square using a function called square i think this is another really nice thing about v5js is that a lot of the functions that they have inside of their reference or inside the whole library itself really is selfexplanatory if the function is called square it will draw you a square if it's called rect it will draw your rectangle if it's called the lips it will draw your lips um so with that okay let's try clicking on the reference page for the square function which basically it will give um it is um telling you that we need three variables at the least so i guess one little note about how you can read the references on the p5.js website if you're looking at the syntax and things are in square brackets this means that those are optional values and you don't need to have them in order for you to draw a square and also if you think about it logically in order for you to draw a square you need absolutely an x and y coordinate and you also need some sort of a size and because it's a perfect square where the width and the height of the shape is the same you really need just one number right to afford it to be the size of the square so similarly let's just start off by creating our square in the middle of the canvas by doing width divided by two height divided by two and also similarly i'm just going to put in a static number in here for now for 100 pixels and notice that immediately you kind of see something different here right when we drew our circle previously we had our the middle of our circles as the center position of our circle match the center position of earth of our canvas in the case of square we see that the top left corner of our canvas matches the middle of our canvas this is because the x and y coordinates that we pass through the square function is used to position the left um top left corner of the square and the 100 um the as given as the third argument of this function is used as the width and the height of the sheet so in order for us to basically say there are multiple ways of doing this actually to have us position our shape in the middle of the canvas for example which would be to change our x and y coordinates that we're giving into the function itself so for example we know that the the width and height of our shape is supposed to be 100 so if we minus 50 it will move 50 pixels to the left and then if we also minus 50 for the height for the y coordinate sorry not the height for the y coordinate it's going to move 50 pixels towards the top of the canvas so if we do this and save we'll see that now our um square is positioned in the middle of the canvas but also what we can do here is let's say that we do want to keep our x and y coordinates to be with divided by two and height divided by two inside of our reference we're going to take a look at and a function that exists from the fifa just library called rect mode which stands for rectangular mode so using this function you can set you can tell p5.js um program to basically say um please interpret my the numbers that i'm giving to direct function and the square function differently and if we tell direct function to be at center so here i'll do it right above my square function and say rect mode and right center in all caps what this will do is that after we set rectmode to be at center or rectangular mode to be a center our x and our y coordinates for our square and rectangle functions are going to be used to be at the center position of our shape for our rectangular shapes which we include rectangle and square cool um i guess maybe this might be a good time to take any questions um from the chat if we have some but basically what i wanted to show you during this first series of our live stream for creative coding is that you know there is a javascript library called p5.js it's available for everyone to use because it's an open source library this is the web page that you can go to for references for all the documentation on all the functions that they have the library has available for you and that i also wanted to give you a little bit of a taste of what you can do with javascript to create um 2d drawings on the web page i uh yeah we can we can wait for some questions to come in from the chat um we had a question earlier that was um uh can you talk a little bit about the difference between p5.js and processing and which one is better for use on the web so processing was never really um developed for it to be used on the web itself it really was a library that was built for um for java the program language java which is very different from javascript so javascript is a scripting language that you can we use for the web page um to do any sort of like an actionable things within the web page itself and java is more of like um how would i explain this um alex i feel like you might be more apt at explaining what java is but basically um it is a programming language yeah java is used for nonweb applications right so if you wanted to make a little application that's sitting on your desktop right you could do that using java and so processing is a very similar library where you can do all sorts there's a canvas you can draw shapes you can animate the stuff on the canvas really very similar functionality right so um if you've ever used processing or if you intend to use processing you will have to download what's called an ide which is um integra what is it what does it stand for ide idea integrated development environment integrated development environment which means that you're going to be opening downloading and opening the software where you create where you program all of your things that for your visualizations and you can run them and see them and etc but basically you need a special sort of um interpreter of your program to create the equity and see those visualizations and if you do download that you will see that there will be an option to interpret that code in javascript and you can use you can copy that and then paste it into like a web page similar to with a similar setup to what we have here for our index.html and it should be you should be able to run that on the web page but really p5 the processing the ide itself it does um provide you with an option for you to display your code online but it was never really intended to um the initial motivation that's um so to speak was not for it to run on the web page and this is where p5.js came in and p5.js was specifically um created so that it takes all advantage of web programming of sorry of web graphics programming for um and and really i'd say if you're going to create visualizations on the web page usb 5.js because that's what it was built for g1 could we get a little bit of a preview of how to animate stuff uh isaac is asking how do you animate and spin the shapes i i always uh spinning i always found to be a little bit different spinning involves at least the way that i always thought it involves like rotating the canvas itself which starts to get a little bit mindbending but i was wondering if you want if we could just see one of these balls kind of start to drop okay so if you want to rotate anything there is a function called rotate which you can put in a static angle in here and v5.js angles are given in radians i'm going to go through this really fast but uh we there's also another um p5.js builtin variable called frame count which basically increments one per frame rendered so it renders around 60 frames per second so um it will have go from zero to 60 for each second basically in a b5.js in the world of b5.js if you're trying to animate something really really quickly you use this number and i'm going to slow it down by timesing it by 0.01 and what this will do is something like that that's not spinning with its center on its own because when you rotate something in p5.js you're rotating the whole canvas right you're not just rotating the shape itself right so you can almost imagine it's like the the canvas is kind of like spinning around that top left corner uh it's how i i try to visualize it yeah so when we do change our square to have a x and y coordinate zero comma zero you can see that it's rotating at the top left corner like this um so in order for us to basically move our rectangle back to the center of our canvas what we'll need to do is actually use another function called translate which translates the position of our canvas the entire canvas from zero comma zero to zero to width divided by two and height divided by two so what i'm doing is i'm actually moving the whole origin point of my canvas from the top left corner to the middle of the canvas if we do this and we run it we have the whole canvas which which moved from top left corner to the middle of the canvas and spinning on its own and notice how like it's created this trace of um a white circle around it because our stroke color um is white but if we were to not want our strokes in here i would say no stroke before we draw the shape and we won't have any stroke so now we're actually it's also creating a circle right because it's the uh if we if we have no fill i guess we will just see the um um actually if we use a background function at the beginning of our draw it's refreshing with that background color and then it's drawing the shape on top of it so it will look like you know it's wiping it out in black and then it's drawing that the shape in that particular rotation and so on um continuously and this is actually the thing that i was talking about about how the draw function runs and that after the setup function runs once so you will also see that all of our lines disappeared that's because at the beginning when the program runs we had all of those lines but immediately after we're wiping our background to a black a solid black color again and then drawing these shapes on top of it that's why we no longer see those white guidelines yeah you can think of that background as painting over everything that existed before and then the draw loop happens again that repaints the shapes um challenge challenge for the um audience if do you want if you what's the what's the builtin variable it's called free uh like frame count so if you put in frame count as the x value for your circle there and maybe you divide it by uh or you multiply it by a small amount or something um let's not hit run yet let's see if our audience can guess what happens and then sorry what were you going to say do you want i was going to say we could just leave it the way it is i don't think we need to do anything to it just use frame count the way it is for the x yep yeah i think that that makes sense um but i was gonna say though um let me actually revert this back because i do want to show something sure that is really really quick while we wait for the audience to think about that but um you can also give alpha or opacity value to your colors and if you put in a little bit of opacity in the background function by giving it the second value when you only have you know two values it's going to create this like tracing effect do people see this i think it's more noticeable when it's a little bit faster yeah it's hard it's hard to see but there we go that's cool that's because um the background color is being uh cleared out with some opacity so it still leaves traces of things um right the previous square that we're painting over we can still see a little bit of it and then we um uh continue to paint paint over the background yeah um okay cool let's look at if we so if we replace this before this was a constant value right it was always width divided by two or whatever it was now it's going to be frame count and frame count is this value that's keeping track of how many frames have existed since the start so presumably it starts at zero and every frame it increases by one and so our position is going to be changing every time we draw it so if we go ahead and run this we'll see there we go our circle is moving it's x yeah it's x position is dependent on the frame count it's no longer static so it looks like the circle is moving cool um i guess maybe one last question i think just came in through the chat if you're new to programming i'd say that our learn p5.js course is really intended for beginners and it does take you from the beginning of like knowing nothingness to really really slowly progressing through but it does assume a little bit that you will have some knowledge of fundamental programming concepts so i would um personally recommend that you take our learn javascript course before taking our learn b5.js course but if you just kind of want to like go through and get a taste of like programming like what it's like to program without worrying too much about learning how to program in general then i think you wouldn't have problems just following along the learn p5.js course from the beginning yeah again i think it's a it's a great way to learn those fundamentals too of if you if you don't know what a for loop is or how to write a for loop well you can write a for loop using p5 and instead of creating one circle you can try to create 100 circles using a for loop so it's a nice really visual way to kind of hone those fundamentals which is the thing that this um project originally intends to do which is trying having learners basically use multiple um sets of four loops to create these patterns that repeat in in different numbers so for example this line um pattern uses one set of for loop that draws these lines for how many uses like nine i think and then like same for the polka dots and checkers and like these on diagonal lines and so on cool all right juwan do you want to give a brief preview of what we're doing next week yeah so for next week we're going to talk a little bit about the concepts that are covered in this animation module of their learning people just course um and we're going to talk about uh or do a walkthrough of this bouncing balls project which does this cool awesome so we're really going to go into um creating animations with b5.js and create multiples of the same multiple variations of the same shape cool that works good to me so thank you for uh checking this out and um yeah uh we will uh we will see you next week
