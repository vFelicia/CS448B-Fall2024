With timestamps:

00:00 - looks right it's saying that it's live
00:03 - on custom live streaming service
00:08 - let's give it a couple of seconds oh
00:12 - we're live i think
00:16 - cool so welcome everyone to our last
00:20 - session of curcamilife for creative
00:22 - coding
00:23 - um today um i'm well obviously i am back
00:26 - my name is juwan i'm a curriculum
00:28 - developer here at academy
00:30 - and we also have nick today hello
00:33 - um and we'll be going through today
00:36 - we'll be going through audio
00:37 - visualization so we'll be
00:39 - um using another p5 p5.js add-on library
00:43 - called p5.sound.js
00:45 - um just to quickly recap on some of the
00:48 - things that we've been going through in
00:50 - the past
00:50 - seven weeks eight weeks including this
00:52 - week um what we've been doing during our
00:54 - um
00:55 - academy live for creative coding series
00:57 - is that we've been going through some of
00:59 - the content
01:00 - in our learn p5.js course it's a
01:03 - free course on our platform and we've
01:05 - been going through some of the topics
01:07 - that are
01:08 - mentioned in each of these modules
01:09 - during the weeks of livestream
01:11 - so we've gone from you know creating
01:14 - really basic
01:14 - simple um 2d primitive shapes on the
01:17 - canvas
01:18 - and then we made those um shapes move on
01:21 - the canvas using frame crown and all
01:22 - sorts of different techniques
01:24 - and then we also um took a look at
01:26 - adding um
01:28 - inter interactions using mouse and
01:29 - keyboard interactions to our sketches
01:31 - and we also looked at how to add images
01:34 - and videos to our um
01:35 - b5.js canvases and the last two weeks
01:38 - were a bit special because alex
01:40 - um he also demonstrated how you can
01:42 - visualize
01:44 - fundamental programming concepts with
01:46 - b5.js so we looked at how to
01:48 - visualize object-oriented programming so
01:50 - we created these like
01:51 - classes of visual elements that we can
01:54 - use to create multiples of on our canvas
01:57 - and we also last week looked at how to
01:59 - visualize the nearest k-neighbor
02:01 - algorithm
02:02 - so this is going to be like hopefully a
02:04 - grand ending to our
02:06 - um livestream series for creative coding
02:10 - we're gonna look at what's called audio
02:12 - visualization so what that means is that
02:14 - we're going to first look at how to load
02:17 - sound files to our canvas um so we're
02:20 - gonna be also um using the
02:22 - um p5 web editor to do all of these
02:25 - things
02:26 - so first you know where to look for
02:27 - those sound sources
02:29 - free and open source um sound sources
02:31 - and downloading them
02:32 - and uploading it to rp5 um web editor
02:35 - and then we'll look at how we can play
02:37 - those files in the canvas
02:39 - so starting from like you know really
02:40 - basic things and also maybe taking a
02:43 - look at how we can use microphone input
02:45 - as well
02:46 - and then we'll also move on to then you
02:48 - know really looking at those
02:50 - um sound files as data and doing you
02:52 - know
02:53 - visualizations of those audio data so
02:55 - really you know it's like a
02:57 - really interesting cross between um data
02:59 - visualization
03:00 - because like the data that we're going
03:02 - to be using are going to be audio data
03:04 - like you know
03:05 - audio can be we're going to talk about
03:07 - this in a little more
03:08 - in-depth but you can um see audio in
03:11 - different forms of data depending on
03:13 - what values that you look at that's
03:14 - related to the audio file itself or the
03:16 - sound that you're hearing at that moment
03:18 - so that's kind of sort of the plan and
03:20 - we'll take it um from the very beginning
03:22 - and it will build everything up does it
03:25 - sound like a plan nick
03:27 - that sounds great to me the
03:31 - final participant okay cool
03:34 - um so i've shared my screen people
03:36 - should see this really blank
03:38 - um p5.js web editor view this is the
03:41 - first thing that you get when you create
03:42 - a new sketch on the p5 web editor
03:44 - um we've got our canvas 400 pixels by
03:48 - 400 pixels
03:49 - it's just like a personal preference i
03:51 - just like to start off with my canvas
03:53 - being window width and window height
03:56 - window window height so that we can use
03:59 - the full extent of our preview window in
04:01 - here
04:02 - um and the next thing that i'm going to
04:04 - be doing is basically before i get
04:06 - like really go into creating my canva my
04:09 - sketch today
04:10 - i'm going to go into my index.html file
04:13 - in here so if you click on this arrow
04:15 - key you should be able to see all the
04:16 - files inside of the sketch
04:18 - um that this preview window was running
04:21 - and then you will see
04:22 - in line um this is i think five
04:25 - there's a script tag in here um and it's
04:28 - so the
04:29 - inline four the script tag in here um is
04:32 - importing the p5.js library the core
04:34 - library into our html page that we're
04:37 - able to utilize all the components of
04:39 - the p5.js
04:40 - library but in la in line five you will
04:43 - see that there's another library that is
04:45 - automatically imported
04:46 - in here for you called p5.sound.min.js
04:51 - file
04:52 - so what this file upload does is that so
04:54 - b5.js
04:55 - library itself this is the core library
04:58 - most of the times if you're not going
05:00 - into the domains of the sound you
05:01 - you won't have to think about you know
05:03 - this additional line that you have in
05:05 - here
05:06 - but what this means is that if you have
05:08 - this um file imported as a script tag
05:11 - inside of your
05:12 - index.html file you should also be able
05:14 - to use
05:15 - an additional library so if we go to the
05:18 - p5
05:18 - um js the the organization or the
05:22 - documentation website and you go to
05:24 - references
05:25 - at the very top it should say something
05:27 - like can't find what you're looking for
05:29 - you may want to check out b5 that sounds
05:31 - it's because the um the sound library is
05:34 - what they call an add-on library that
05:36 - works
05:36 - on top of the main core p5.js the
05:39 - library itself
05:40 - and they've also got a separate
05:42 - documentation page
05:44 - so when you are working with sound with
05:46 - f5.js this is like an important thing to
05:48 - keep in mind that
05:49 - all the references to everything that
05:51 - we're going to be using in our live
05:52 - stream today
05:53 - you're not going to find it in the main
05:55 - reference page you will have to click on
05:56 - the link to go to the b5 sound
05:58 - library references so that's something
06:00 - to keep in mind in here
06:02 - and if you're also if there are some
06:03 - people who are working locally
06:05 - that means that if you only what i mean
06:07 - is like if you have these you know um
06:10 - if you're working and creating p5.js
06:12 - files or projects locally on your own
06:14 - computer
06:15 - you're also going to want to make sure
06:17 - that you have this
06:18 - sound file included in your index.html
06:22 - file as well
06:24 - so having said that i think one of the
06:26 - good reasons other good reasons of why
06:28 - you know working on the p5 web editor is
06:30 - a good thing when it comes to sound
06:32 - is because um p5 the the p5 web editor
06:36 - will take care of a lot of um
06:38 - autoplay issues and like you know
06:40 - blocking of auto playing sound that kind
06:42 - of stuff
06:43 - it will take care of it for you in the
06:46 - web editor itself
06:47 - if you don't know what i'm talking about
06:49 - and you've never experienced
06:52 - but you know you know websites blocking
06:54 - autoplay of video and sound you don't
06:56 - have to worry too much about it right
06:57 - now if you're going to be working on the
06:59 - b5
07:00 - editor itself um so just but i did want
07:03 - to like make sure that i mentioned that
07:04 - just you know to make sure that if
07:06 - you're working locally
07:08 - and you're saying you're thinking oh why
07:10 - is my sound file not working
07:11 - chances are it's because of the whole
07:13 - autoplay issue and there are multiple
07:15 - ways to resolve it but i think it's a
07:17 - little bit out of the scope of the live
07:19 - stream itself and we're going to focus
07:20 - on
07:20 - using um sound files in our b5 js
07:24 - canvases for now
07:26 - so first things first if i'm going to be
07:28 - playing with
07:29 - sound and the sound files that means i
07:33 - need to
07:34 - find a sound file to work with
07:38 - and um you know i there's a number of
07:40 - different things that you can look for
07:42 - i might go to is um i go to a website
07:45 - called free music archive
07:47 - and they have all of these um open
07:49 - source and royalty free music
07:51 - you know i generally go to search and
07:54 - then
07:55 - go to charts for all time and then pick
07:58 - something
07:58 - you can also listen to it because my
08:01 - sound is working right
08:05 - i'm not hearing you're not hearing
08:08 - anything
08:09 - let me make sure my
08:13 - sound should be shared let me share it
08:15 - again there's
08:16 - like this one in particular this
08:18 - particular file it starts with a really
08:20 - low base so let me actually try another
08:22 - one
08:24 - you heard that oh yeah okay cool so you
08:28 - can download any of these um sound files
08:31 - from here
08:32 - i'm gonna go ahead and say anderson
08:34 - agree and then i have the sound file
08:36 - downloaded in here
08:38 - so with the sound file downloaded
08:40 - somewhere on your computer
08:41 - in order for you to import in something
08:44 - external
08:45 - to the p5 web editor what you will need
08:47 - to do is you will click on that
08:49 - um you know sketch files directory again
08:51 - and if you click on this
08:53 - um arrow down key in here oh i see a lot
08:56 - of people on chat telling me that
08:57 - they've heard it that's great
08:59 - and then if you click on this button
09:01 - there's an option
09:02 - for you to upload a file so if you click
09:05 - on this and i'm going to be navigating
09:07 - to my finder which you will not see
09:09 - um being shared on this particular
09:11 - screen
09:12 - sharing because i've not shared um
09:16 - the entire desktop but that's okay
09:20 - and i'm going to name my um sound file
09:23 - to
09:24 - siesta which is the name of this
09:25 - particular um song
09:27 - because you want your sound files to be
09:29 - shorter because if
09:30 - your song your if your files are longer
09:32 - that means that you have to type in the
09:34 - whole thing
09:35 - making sure you know like the charac the
09:37 - spacebar characters are accounted for
09:39 - and all that kind of stuff
09:40 - so i've named my the download uh renamed
09:43 - it to siesta.mp3
09:45 - i can drag and drop that file in here
09:48 - and you should see this progress bar
09:49 - happen
09:50 - and only when you see the name of the
09:53 - file
09:53 - appear on the left um left sidebar here
09:57 - is the um a file fully uploaded so some
10:00 - people do make a little
10:02 - you know obviously something that could
10:04 - be improved on in terms of
10:06 - the design of the v5 editor tool itself
10:09 - but
10:09 - um some people do make a mistake of you
10:11 - know oh they see this progress bar
10:13 - happen and they
10:14 - close the upload file uh window but they
10:17 - will see that this
10:18 - file won't appear in the sketch files
10:19 - that means that it's not uploaded
10:21 - properly
10:21 - so just make sure that you give it some
10:23 - time and then it shows up in the sketch
10:25 - files directory in here
10:26 - and once that is done the file itself is
10:29 - has been uploaded to this particular
10:31 - sketch
10:32 - itself and now it's ready to be
10:34 - referenced to and ready to be um
10:37 - imported within our p5.js canvas for me
10:40 - to able to use
10:41 - and play so the first thing that we'll
10:43 - do is basically we're going to
10:45 - use the sound file that we've uploaded
10:47 - in here within our canvas
10:49 - and then there's multiple things to note
10:51 - in here basically the function
10:53 - to use to upload our sound file is going
10:55 - to be the load sound
10:57 - function but there is this um this
11:00 - function node sound function
11:01 - isn't in our setup function right
11:04 - and notice how when you know a blank
11:07 - sketch is created there's only setup and
11:09 - draw
11:09 - it is in another function called preload
11:13 - so based on the name of the function
11:16 - nick what do you think the preload
11:18 - function does
11:20 - does it happen before load
11:25 - it happens before something and it
11:27 - happens before the setup function
11:29 - so what the preload function is that um
11:32 - it is most commonly used to pre-load
11:34 - media assets so that includes you know
11:36 - image files video files and
11:38 - and also audio files and you will want
11:41 - to use the preload function to make sure
11:43 - all of your assets media assets are
11:45 - loaded even before the set of setup
11:48 - function runs for your p5.js sketch
11:50 - so that's the thing that we're going to
11:51 - be doing in here so i'm going to also do
11:53 - it above
11:54 - it doesn't matter where you define your
11:57 - function your preload function
11:58 - but just for the sake of you know me
12:01 - having a logical structure
12:03 - in my code i'm going to put my function
12:05 - preload above my setup
12:08 - um and then in here well before all of
12:10 - this i'm going to
12:11 - create a global variable called sound
12:13 - and i'm going to
12:14 - save sound to the output of the load
12:17 - sound
12:17 - function which i'm going to give it to
12:20 - the path of the sound file that i want
12:22 - to load in my p5.js canvas
12:24 - so i'm going to call it in this case
12:26 - siesta dot mp3
12:28 - if your sound file is staged inside a
12:30 - directory if your sound file is called
12:32 - something else
12:33 - obviously you should be calling giving
12:35 - it a different path remember this is the
12:37 - path to the
12:38 - file not just the name of the file
12:39 - itself
12:41 - um sorry um
12:44 - and so once that is done and if you
12:46 - click um nothing should happen
12:48 - except for the fact that if you notice
12:50 - it here the loading will take a little
12:52 - longer
12:53 - that's because there is a media file
12:54 - that needs to be imported and loaded
12:56 - into the p5.js sketch
12:58 - even if we're not using it yet so in
13:00 - order for me to
13:01 - use the sound file by which i mean here
13:03 - the sound file being played in our p5.js
13:06 - canvas
13:07 - is inside of our setup after the sound
13:09 - file is being loaded into this variable
13:12 - called
13:12 - sound i can do something like sound.play
13:16 - which is of which is a method of this
13:18 - particular sound object in here
13:24 - so what that would display method should
13:26 - do is that it should play the sound file
13:28 - only once
13:29 - and then stop after it's being played
13:31 - once if you wanted to do something
13:34 - like you wanted to just keep the sound
13:35 - being looped let's actually go back to
13:37 - the reference in here and underneath you
13:39 - should see
13:40 - some methods of this particular sound
13:42 - file object that you're creating
13:44 - so there's this um play method in here
13:46 - place the v5 sound file
13:48 - there's also pause in here you can pause
13:50 - your soundtop being played at certain
13:52 - times
13:52 - if you want you can also set your sound
13:55 - files to loop but that means that it
13:57 - will just
13:58 - once that sound file reaches the first
14:00 - time it plays all the way through it'll
14:01 - just loop back to the beginning of the
14:03 - file and then
14:04 - go over and over and over again so um
14:07 - you know generally if you're working
14:08 - with like a shorter sound file and you
14:10 - just want to keep you know
14:12 - experimenting with the data you're
14:14 - getting from the sound file itself doing
14:16 - sound.loop
14:17 - may be a good idea just so that you can
14:19 - you know keep hearing the sound and keep
14:21 - using the data from the sound
14:23 - um there's another um type of sound that
14:25 - we can use in our p5.js canvases
14:28 - here we're using this like you know a
14:30 - static sound
14:31 - file in our sketch you can also use a
14:34 - your microphone
14:35 - input to drive any sort of you know
14:37 - audio visualizations that we're going to
14:38 - be creating today
14:40 - for that particular purpose there is it
14:42 - is p5.audio
14:43 - in object um so you can click on this
14:46 - and it's going to um if you've never
14:48 - visited this webpage before it's or if
14:51 - even if you have
14:52 - it may ask you if i you can you want to
14:54 - allow your p5
14:56 - if you want to allow p5.js.org
15:01 - website to use your microphone input you
15:03 - can do allow
15:05 - in which case it should be using your
15:07 - microphone input i'm actually
15:09 - not entirely sure if i'm going to be
15:11 - able to get this working because i'm
15:14 - my microphone being input is being used
15:16 - by zoom
15:17 - at this moment in time and it doesn't
15:19 - seem like for this particular one it's
15:22 - working
15:23 - let's actually see my continue using
15:26 - access
15:27 - microphone default okay so i'm not
15:30 - entirely sure if this particular example
15:32 - is
15:32 - gonna work for you know the demo the
15:35 - live demo
15:35 - but i wanted to um just make sure that
15:38 - you guys are aware
15:39 - that you can also use microphone input
15:42 - within your p5.js sketch as well
15:44 - cool is there anything um
15:48 - do anyone have any questions so far
15:50 - about anything
15:52 - about loading sound or using microphone
15:54 - input
15:58 - or maybe i can assume that i've
16:00 - explained everything clearly
16:04 - okay so once we've got the sound file
16:08 - being loaded into your p5.js canvas
16:10 - and now we've got the sound to loop the
16:12 - next step to think about that
16:14 - would be um so what can i do with the
16:16 - sound file right
16:18 - um well there are multiple things that
16:21 - we can do with the sound file itself and
16:23 - for today's
16:24 - uh for the purpose of today we're going
16:25 - to be looking at um three big things
16:27 - we're gonna well
16:28 - two big things and then three components
16:31 - in total
16:32 - so we're gonna look at um how to use the
16:34 - amplitude values of the
16:36 - of the um sound file itself and then
16:39 - we're also going to look at
16:41 - um what kind of data we can use and what
16:43 - we can get by using this what's called
16:45 - fft so the first thing that we're going
16:47 - to be looking at is basically
16:49 - we're going to use um try to get
16:52 - basically using the v5 sound library
16:54 - to get the amplitude of the sound file
16:57 - for this given moment in time
16:58 - but the amplitude of the whole file so
17:01 - what is amplitude i think that's like
17:04 - the first question that we need to
17:05 - answer
17:06 - um before we get even into using
17:09 - amplitude of the sound file
17:12 - nick what is amplitude
17:15 - okay wait i know this one amplitude
17:19 - is like volume so high amplitude means a
17:22 - loud sound
17:23 - little amplitude means small quiet sound
17:26 - so what what do you think it means when
17:28 - i say amplitude of a sound file though
17:34 - it means the amplitude so the volume of
17:37 - each frequency
17:39 - so like low sounds and high sounds how
17:41 - loud each one is
17:42 - um there is a way for us to get that
17:44 - data too but
17:46 - when i say the amplitude the whole sound
17:47 - file um
17:49 - within even that sound file itself like
17:51 - any sort of music or any sort of sound
17:54 - there are time points in time when the
17:56 - sound is
17:57 - softer and there their points in time as
18:00 - it is typically in music when it gets
18:02 - more closer to climax
18:04 - the whole volume of the whole sound file
18:06 - will increase
18:07 - so the first thing that we're going to
18:09 - look at is an amplitude
18:11 - for each mode it's each frequency band
18:14 - it would be rather for
18:15 - each moment in time how loud or how um
18:19 - soft the sound is for that sound file in
18:21 - that moment in time
18:22 - and i think sound is actually you know
18:24 - one of the most difficult things to talk
18:26 - about i feel like
18:28 - you can listen to the sound and you can
18:29 - compare you know your descriptions of
18:31 - what that sounds like
18:33 - but it's also like when we talk about
18:34 - different amplitudes or different like
18:36 - characteristics of the sound
18:38 - i think it's one of the most difficult
18:40 - things to you know talk about without
18:42 - having any visualizations well i think
18:44 - we're in luck because we're going to
18:47 - visualize the amplitude of this
18:48 - particular sound file that we've
18:50 - included in here
18:51 - and so the first thing if i want to have
18:54 - any sort of analysis
18:56 - done for our my uh sound file the first
18:59 - thing that i will need to do is create
19:01 - an instance
19:01 - of this component that mp5 sound library
19:04 - calls
19:05 - the p5.amplitude so um let's actually do
19:09 - go ahead in here and as a global
19:11 - variable i'm going to create a
19:13 - variable called let amp and inside of
19:16 - our setup
19:17 - um we're going to say empty is going to
19:19 - equal to a new instance of p5 dot amply
19:23 - spelling is important amplitude
19:26 - and notice how this sort of um statement
19:29 - it resembles something that we've seen
19:32 - um two weeks ago what does this look
19:34 - like to you nick
19:35 - what does it look like i'm doing in
19:36 - terms of programming
19:39 - let's see here online
19:43 - 13. okay you
19:46 - are making a new object right
19:50 - and then the variable amp yeah
19:53 - so this is exactly what we're doing and
19:55 - which is one of the unique things that's
19:57 - happening
19:58 - throughout the whole p5 sign library
20:00 - itself if you're going to be using any
20:02 - of the features like p5m
20:04 - uh like audio in and also
20:08 - like you know fft that we're going to be
20:09 - looking at essentially what you're doing
20:12 - behind the scenes is that you are
20:13 - creating an
20:14 - instance of that object which contains
20:17 - all the audio features that you want to
20:19 - use
20:20 - and automatically what it does for us is
20:22 - that
20:23 - whatever sound that is currently being
20:25 - played in the sketch
20:26 - will be used as the audio in so to speak
20:29 - and will be used to for all the features
20:32 - of the amplitude
20:33 - object that we are going to be using
20:35 - very momentarily
20:37 - it is a little bit of like an um
20:38 - interesting and in the complex com
20:41 - concept to wrap your head around you
20:42 - know like different there's multiple
20:44 - things going on here you have to you
20:45 - have some amount of
20:47 - you know audio knowledge right you know
20:50 - audio theory audio knowledge
20:51 - but you also have to know that whenever
20:54 - you create any of these features you're
20:56 - creating an
20:56 - instance of an object and behind the
20:59 - scenes by the way all of these things um
21:01 - the p5 sound library does for you
21:03 - are basically um behind the scenes are
21:06 - all vanilla javascript functions for um
21:08 - that uses the web audio api features and
21:12 - it just
21:12 - makes it a whole lot easier for you to
21:14 - use all of these things
21:16 - within the b5 sound p5.js canvas so
21:19 - here with the amplitude if you were to
21:22 - write this in using web api using
21:24 - vanilla javascript
21:25 - i think it will be at least minimum of
21:27 - 50 lines of code because
21:28 - there's a lot of different things like
21:30 - you know you have to hook your audio
21:32 - input
21:33 - into this input of this amplitude web
21:36 - api and all that kind of stuff
21:37 - and so with one single line of code in
21:40 - b5 sound library
21:41 - you can get all the amplitude data for
21:43 - your sound
21:44 - um file that we've imported in here
21:48 - so once we've created this instance of
21:49 - the amplitude object what we're going to
21:51 - do in the draw
21:52 - and we're going to do in the draw
21:54 - because every time our draw function
21:56 - loops we want to get the new amplitude
21:59 - data
21:59 - for that moment in time of the sound
22:01 - file being played
22:02 - so the thing that i'm going to do in
22:04 - here is i'm going to create a local
22:06 - variable called light level
22:08 - and then the level is going to be the
22:11 - amplitude
22:12 - whatever that amplitude the whole um
22:14 - package of the object information that
22:16 - we get from the amplitude object
22:18 - i'm going to use a method called get
22:21 - level and we can check out the reference
22:24 - for the get level um
22:26 - oh i mean the wrong reference let's go
22:29 - back into the amplitude reference and
22:31 - then we can check
22:31 - out the um documentation for the get
22:35 - level method in here so it says it will
22:37 - return a single
22:38 - single amplitude reading at that moment
22:40 - um it is cold
22:42 - so for continuous running it says to run
22:44 - it in the draw loop which is exactly
22:45 - what we're doing
22:46 - so before we draw anything i'm going to
22:48 - go ahead and i'm going to add a
22:50 - console.log statement in here
22:52 - and i'm going to print out the the value
22:54 - of level that i get
22:57 - [Music]
23:06 - so if you study the values that you get
23:08 - in the console long enough
23:10 - you will notice that it does tend to
23:13 - stay
23:13 - within a specific boundary of um
23:16 - amplitudes
23:17 - so it's never going to go all the way to
23:19 - one and it's going to nip
23:21 - well it's going to be zero when there is
23:23 - silence in the file as we saw at the
23:25 - very beginning for two
23:26 - frames when we uh run this particular
23:29 - p5.js
23:30 - um sketch so one thing to note in here
23:33 - is that well
23:34 - if there is going to be if the level uh
23:37 - value is first
23:38 - between 0 and 1 and it's going to be
23:41 - decimal number
23:42 - but it's never going to reach a all the
23:44 - way to 1
23:45 - so a good function that we can use to
23:48 - visualize this level value is going to
23:50 - be
23:50 - the function called map that we've been
23:53 - using continuously over the course of
23:55 - the weeks
23:56 - uh just as a reminder what the map
23:58 - function does as i type in here so let's
24:00 - actually
24:01 - create a visualization where we
24:03 - basically use the level value to create
24:05 - this uh to change the size of the
24:07 - ellipse
24:08 - the first thing that we'll do here then
24:10 - i'll say another create another local
24:12 - variable called size
24:13 - i'll say i'm going to map the value of
24:15 - level that i
24:16 - i'm getting in line 12 19 in here that's
24:19 - going to have a range between
24:21 - zero and one and i want it to be mapped
24:24 - between when it's zero maybe i'll have
24:27 - the size be zero as well
24:28 - but it's at one i want the whole um i
24:31 - want it to be mapped to width divided by
24:33 - two so half of the width of my canvas
24:36 - and then i'm going to use the size um
24:39 - value in here
24:41 - inside of my ellipse function or
24:43 - actually i'll just use the circle
24:44 - function in here
24:45 - i'm going to set the x and y coordinates
24:47 - to the middle of my canvas and width
24:49 - divided by 2
24:50 - height divided by 2 and i'll use the
24:52 - size that we calculate in line 21 in
24:55 - here
24:55 - and we'll just give it a some like a red
24:58 - fill color for now
25:04 - [Music]
25:14 - i feel like it's like the most basic
25:16 - audio visualization that you can do but
25:17 - it's so
25:18 - it's always like really nice to see it
25:20 - because um you know
25:22 - you see it moving you see something
25:24 - moving not because of your mouse not
25:26 - because of the keyboard but because of
25:28 - like the how
25:29 - this particular music is being played
25:34 - and if i add
25:39 - that's what happens if you had a little
25:41 - bit opacity to your background
25:43 - so now that we've seen what amplitude
25:46 - does the next thing that i do want to
25:48 - talk about
25:48 - is um another sort of um
25:52 - algorithm or another another p5 sound
25:55 - object that we can use to get old to
25:57 - access all of these tools
25:58 - behind is called fft and this is
26:02 - it gets now a little bit more towards
26:05 - like you know
26:05 - audio knowledge domain because what
26:11 - does anyone know what fft stands for
26:15 - maybe i'll give it a couple of moments
26:16 - in the chat i think i kind of like
26:19 - scrolled down to it to reveal the answer
26:22 - in that split
26:23 - second of time but i cheated i already
26:25 - looked earlier today so
26:31 - okay what what is
26:34 - fft and here if you scroll down to the
26:37 - description you will see that it stands
26:39 - for what's called
26:40 - fast for your transform which even it
26:44 - already sounds like it's a
26:45 - big mathy thing
26:49 - let's actually look up fast or
26:53 - re-transform
26:56 - and if you click on the wikipedia
26:58 - article it's got some like intense
26:59 - things happening oh we had an
27:01 - um answer from chat too
27:07 - is that a lot better it sounds a lot
27:09 - cooler
27:10 - or your form transform
27:13 - it's the middle of a tongue twister too
27:16 - do you want to explain to us nick what
27:18 - it does without you know me having to
27:20 - read through all of these
27:21 - mathy algorithms i would
27:24 - love to if i could
27:29 - um you know please feel free to read
27:32 - through the wikipedia article
27:34 - if you're really interested in what
27:35 - happens within this particular algorithm
27:38 - but basically um i also don't have any
27:41 - background in
27:42 - you know music conceptual music or
27:44 - whatever
27:45 - music theory any any of that kind of
27:47 - stuff but as far as
27:48 - i am concerned and as far as um i'm
27:51 - concerned in terms of creating audio
27:52 - visualizations
27:54 - what it does is that it is an analysis
27:57 - algorithm that isolates individual audio
28:00 - frequencies in a waveform
28:02 - we have also another person saying it's
28:04 - a fast forward
28:05 - i can't say that word i think it's a
28:07 - type of dinosaur
28:08 - anyway so basically what it does is that
28:12 - it gives us more
28:13 - granular access to the audio data that
28:16 - we have in our b5.js canvas
28:18 - so what that means is then it gives
28:21 - us two and two big things from the fft
28:25 - object that we can create using dp5
28:27 - sound library we can get what's called a
28:29 - waveform
28:30 - and we can get what's called an um well
28:33 - the function
28:34 - the method you can use to get it is
28:36 - analyzed but what you will get
28:38 - is a spectrum of sound spectrum of
28:41 - sounds throughout different frequencies
28:43 - and i think for the sake of time what i
28:45 - will do is that i'm going to just um
28:48 - show you what each of those
28:49 - visualizations look like
28:52 - so here we've got um my sketch that i
28:55 - can oh i'll include these two after the
28:57 - live stream
28:58 - into the description of the um youtube
29:01 - video
29:02 - but for this particular one what it does
29:04 - is that it visualizes
29:05 - visualize this fft waveform and
29:08 - um and the next i will play right after
29:10 - it um the visualization of the spectrum
29:13 - and maybe nick you can tell us what the
29:16 - differences between these
29:17 - um visualizations are okay i'll play the
29:20 - waveform one first
29:33 - oh let me let me take out all the the
29:36 - frills of um
29:37 - opacity in the background so you can see
29:39 - it better
29:48 - [Music]
29:55 - okay so that was the waveform and then
29:58 - we'll play
30:00 - the spectrum
30:12 - [Music]
30:19 - and for everyone watching i don't know
30:22 - if it's just me but i think that
30:23 - the preview is a little bit behind the
30:27 - audio
30:28 - okay which is which is just a internet
30:31 - thing
30:32 - but just heads up if that's why it's
30:34 - looking a little like
30:35 - off not matching oh it's a shame
30:40 - um actually i think the other thing that
30:41 - we could do is um
30:43 - the difference between the spectrum and
30:45 - waveform per
30:46 - sound file is also interesting so this
30:49 - one is the another sound file
30:52 - that is running the spectrum
30:55 - [Music]
31:02 - visualization
31:04 - [Music]
31:18 - you see how like the second part oops
31:21 - the second section like the middle
31:23 - section kind of gave a rise
31:25 - at when that got to that particular part
31:27 - of the
31:28 - um the sound and then also change the
31:30 - waveform
31:31 - to the other file too
31:48 - so what's the difference between this
31:50 - one and this one
31:52 - so uh the first one
31:56 - with the squiggly it's the waveform
32:02 - right and the waveform is
32:05 - over we we've talked about this and i've
32:08 - already forgotten but it's over a short
32:09 - amount of time
32:10 - right amplitude at within a
32:14 - small duration um
32:18 - and when the wave is big it's loud when
32:20 - it's small it's quiet
32:22 - and then the uh
32:25 - spectrum is the second one we saw that
32:28 - looked like a graph
32:31 - i'll let you um sorry i'm just trying to
32:33 - turn off volume so that i can play this
32:35 - without hearing the
32:40 - it's not working i think it's
32:43 - probably because volume is
32:48 - a property so this one
32:51 - spectrum looks like that graph is
32:54 - the um
32:58 - how loud like each frequency is so
33:01 - like with the siesta one when the hi-hat
33:04 - comes in they're like
33:06 - that is like a very high frequency it's
33:09 - like a high
33:10 - tone there and so that's where it's
33:13 - coming in
33:14 - within an instant right so the
33:17 - difference between the waveform and
33:19 - spectrum is that waveform will show you
33:21 - amplitude of that split moment in time
33:26 - um but the amplitude of whole file
33:29 - similar to the one that we saw when we
33:30 - did the amplitude
33:32 - visualization with the ellipse in here
33:35 - and
33:35 - um the thing that spectrum does is that
33:38 - it gives you amplitude
33:39 - per frequency band which is really
33:42 - interesting
33:43 - and if you wanted to go really deep into
33:45 - you know how what kind of frequency
33:47 - bands that you get
33:48 - uh for the spectrum you can go to the
33:51 - analyze
33:52 - documentation for the analyze method and
33:54 - it will tell you in here that
33:56 - the length of the frequency band is
33:59 - going to be
34:00 - 124 frequency bands
34:04 - and like what that covers between those
34:05 - two things um
34:08 - i'm not entirely sure because i'm not
34:11 - like a really big expert in
34:13 - um audio you know theory but everything
34:16 - is in here
34:16 - if you want to take a look at take a
34:18 - read um and you know there are what's
34:20 - called
34:21 - bins so you know that it can be it has
34:23 - to be a power of two between 16 and
34:26 - and the result of the power of two has
34:28 - to be between 16 and 1024
34:31 - but you can set different frequency bins
34:34 - by which i mean like you know the little
34:35 - differences in frequency you can group
34:37 - them
34:37 - back together in smaller bins or in you
34:40 - know like the default bins of 120 64
34:43 - bins
34:43 - um it's something that you can do by
34:45 - passing in different numbers in here as
34:47 - arguments of the analyst method
34:49 - but we're not going to go in too deep
34:51 - into that because
34:52 - um things start getting starts to get a
34:54 - little bit um too complicated
34:57 - and i think we are running a little bit
35:00 - of out of time
35:01 - with you know the end goal that i had in
35:03 - mind for this particular live stream
35:04 - which i
35:05 - totally expected because there's a lot
35:06 - to cover in terms of theory
35:08 - but i let's actually not try to create
35:12 - the
35:12 - um there is a sketch that is included as
35:15 - the solution code
35:16 - inside of the youtube description right
35:18 - now instead of doing that i think we
35:20 - should try to create a different kind of
35:22 - visualization
35:23 - just using what we've got in here so for
35:26 - example for this particular sound file
35:28 - we've got a circle
35:32 - which i think we can tweak it a little
35:33 - bit around so that we can use it as like
35:35 - the sun or something
35:37 - so i'm gonna go ahead and do that and so
35:39 - we can change the height of it
35:42 - to be something like a hundred and fifty
35:49 - so then we should see it at the top and
35:51 - i think i actually
35:52 - did turn off um
35:55 - share sound it sounds like it sounds
35:58 - like
35:59 - you're not to get meta on sound but
36:02 - it sounds like your mic is fairly
36:05 - sensitive
36:07 - so i think it maxes out like pretty
36:10 - easily
36:11 - i don't know if you can move it farther
36:12 - away from your like mouth
36:14 - or speaker
36:16 - [Music]
36:21 - does that does that impact my microphone
36:24 - sound
36:25 - the sound of the music no it doesn't
36:27 - matter if it's playing or not i think
36:28 - just your microphone's very sensitive
36:30 - okay i will keep that in mind but i
36:33 - think we can use this circle
36:34 - as like a sun in here and then i'll take
36:36 - out the stroke here as well
36:38 - and the next thing i'm going to do is
36:39 - i'm going to create um another global
36:42 - variable and i'm going to call it fft
36:44 - and then down here in the setup i'll say
36:46 - fft it's going to equal to new
36:48 - p5 not fft
36:52 - so that now we have the um the an
36:55 - instance of the fft
36:57 - object is saved inside of our fft local
37:00 - variable
37:01 - global variable sorry and so then we can
37:03 - use all the features of the fft stuff
37:05 - inside of our draw function so in order
37:08 - for me to get the values
37:09 - of the waveform and a spectrum what's
37:12 - going to happen is that here i'm going
37:14 - to say
37:14 - let waveform as a local variable inside
37:17 - of our draw function
37:18 - and i'll say um fft.um
37:22 - is going to be the waveform method so
37:24 - i'll say waveform
37:27 - and then for um spectrum
37:31 - i'm going to say fft.analyze
37:35 - a couple of different things to also
37:37 - note for each of these uh waveform and
37:39 - spectrum
37:39 - objects so what's gonna happen is
37:41 - actually let me just um console log
37:43 - waveform
37:47 - and what's gonna happen here
37:51 - is that waveform is not just one number
37:55 - waveform is giant array
37:58 - that's because for each spectrum band
38:02 - we're getting a number between minus one
38:04 - and one
38:05 - and minus one and one being the
38:07 - amplitude for each of those frequencies
38:09 - and you can read all about them inside
38:12 - of our
38:13 - um you know the method documentation
38:16 - here for waveform and it will say
38:18 - returns an array of amplitude values
38:19 - between minus one and one
38:21 - the reason why it's between minus and
38:22 - one is beyond my knowledge and i think
38:24 - it has to do with a lot of the audio
38:25 - theory things
38:26 - but basically it will give you a
38:28 - snapshot of wave um amplitude
38:30 - readings in a single buffer and also the
38:33 - length will also then hear the length of
38:35 - the array that we're going to get for
38:36 - the waveform equals 101 thousand and 24.
38:40 - so those everything you consoled was
38:43 - waveform right
38:45 - and that would all those numbers are
38:47 - different amplitudes for
38:49 - each frequency yes okay
38:53 - so cool frequencies okay so having said
38:56 - that what that means for us
38:57 - is that if we wanted to do something
38:59 - like for let i is equal to zero
39:01 - then i can run it for the length of the
39:03 - waveform array that we have saved in
39:06 - line
39:06 - 23 in here as a waveform variable
39:09 - so now i can say waveform dot length and
39:14 - then i can
39:14 - progress it by one and then in here i
39:17 - can do
39:18 - multiple different things for now i'm
39:20 - going to draw it in
39:21 - um let's let's try using ellipses in
39:24 - here
39:25 - so what i can do here is i can say maybe
39:28 - say my fill color could be
39:30 - blue
39:33 - and then for my ellipse if i wanted to
39:35 - change the height
39:36 - of my ellipse then i can do another map
39:40 - use another map function in here and say
39:42 - i'm going to say let wise equal to
39:44 - map of and in order for me to access an
39:47 - element inside of the waveform array i'm
39:49 - going to have to refer to it using the
39:51 - index number so in this case i'll use
39:53 - the i the iterator
39:55 - iterator variable inside of our for loop
39:57 - so i'll say
39:58 - take the value of waveform at index i
40:01 - which is going to be have a minimum of
40:03 - minus one maximum of one
40:05 - and i want it to be mapped between maybe
40:07 - the lower some lower half of my canvas
40:10 - which is going to be if it's at the
40:12 - lowest i'm going to draw at the height
40:14 - so at the very bottom of my canvas
40:16 - but if it's high i'm going to draw it at
40:17 - the height divided by 2 so the middle of
40:20 - my canvas
40:21 - so if we have something like that and
40:22 - then now we can use this particular y
40:25 - variable here
40:26 - for our circle um shape so that i can
40:29 - use
40:30 - x could be wherever i is so actually
40:33 - if we want to make this a lot more
40:34 - accurate then we can also map
40:36 - x say map of between so in this case i'm
40:40 - going to map the
40:41 - iterative variable i itself which is
40:43 - going to range between 0
40:45 - and 1024 or we can just put in waveform
40:48 - that length in here
40:49 - and then it's going to be mapped between
40:51 - 0 and width
40:54 - so let's use all of those math variables
40:56 - inside of my circle functions i'll say x
40:58 - comma y
40:59 - and let's keep size to 5 for now
41:03 - and i'm actually going to take my no
41:04 - stroke from line 36 in here
41:07 - and move it to set up so that all of my
41:09 - shapes have no strokes
41:11 - so let's see what that looks like
41:23 - [Music]
41:27 - it's already kind of looking like a you
41:29 - know very
41:30 - abstract sun in the intel
41:33 - in an ocean wavy sort of feel to it but
41:36 - basically we've drawn the waveform on
41:38 - the top
41:38 - on the bottom and we've got the sun on
41:40 - the top and
41:42 - let's actually take a look at what the
41:44 - sun the spectrum
41:45 - array also looks like the way that we're
41:47 - going to be doing spectrum is going to
41:49 - be very similar to the way that we drew
41:51 - our waveforms
41:52 - is because let's go back to the
41:55 - reference page
41:57 - for our fft and i will go to the
42:00 - reference page for analyze method
42:02 - and then here you will see returns an
42:04 - array of amplitude values between
42:06 - 0 and 255 across the frequency spectrum
42:10 - so then now it's like really really
42:12 - interesting because
42:13 - the the our range of numbers has changed
42:16 - so for a rate waveform the range of
42:19 - number was between minus one and one
42:21 - but for spectrum the range of numbers is
42:24 - between zero and 255.
42:26 - so it's just something like if you don't
42:28 - know you know audio theory
42:30 - uh music theory you don't need to you
42:32 - know worry too much about it
42:33 - all you need to know is that when we use
42:35 - the map function
42:36 - the minimum and maximum range is going
42:38 - to be different so that's just something
42:40 - that really gets good to keep in mind
42:42 - and i i also personally have to go back
42:44 - and forth just to double check that
42:46 - waveform is minus between -1 and 1
42:48 - and spectrum is between 0 and 255 and i
42:51 - think that just
42:52 - is something natural to do you know like
42:54 - you never you don't have to memorize all
42:56 - of these things in your head and you
42:57 - don't have to
42:58 - you know have them in your head for you
43:00 - to use it
43:01 - so what i'm going to do here is i'm
43:03 - going to say for let i
43:05 - is equal to zero i is less than spectrum
43:08 - that length and i'll say i plus plus and
43:11 - inside of here
43:12 - um let's actually do another map of
43:15 - x for the um
43:18 - for all of the um elements of the
43:21 - spectrum array
43:22 - so i'll say i um take the value of i
43:26 - that's going to be between 0 and
43:27 - spectrum
43:29 - that length and map it between 0 and
43:32 - width
43:35 - and then in here let's say um y is going
43:38 - to be
43:39 - let actually do i want y i'm going to
43:41 - actually going to set
43:43 - um the size okay i'm trying to
43:47 - map this in my head i'm going to set
43:50 - this as the size of the rectangle
43:52 - because i'm trying to draw i'm going to
43:54 - draw
43:54 - rectangles and i want my rectangles to
43:57 - be
43:57 - taller to be um longer
44:00 - if the value of my spectrum the value
44:04 - inside of the spectrum array is bigger
44:07 - meaning that if that
44:08 - frequency band has a higher amplitude i
44:11 - want my
44:12 - rectangle to be taller so in order for
44:14 - me to do that let's do a map and they
44:17 - say take a value of spectrum inside of
44:20 - the element i
44:21 - that's going to between 0 and 255
44:24 - as the documentation said and i want it
44:26 - to be mapped between
44:29 - 0 and the height let's see
44:33 - let's see what that looks like and i'll
44:35 - draw a rectangle in here
44:37 - and the x is going to be x y is going to
44:40 - start at height
44:42 - okay so y is going to start at height
44:46 - minus size
44:49 - so what what happens if i do height
44:51 - minus size
44:52 - so height is all going from the bottom
44:56 - because you draw
44:57 - from the top left right so it's
45:00 - x units over to the right and then
45:02 - height would be at the very bottom
45:04 - height minus size would be like maybe
45:08 - canvas is the size is going to be
45:10 - wherever
45:11 - you know if the height let's say size is
45:13 - 100 pixels
45:14 - that's going to move up 100 pixels so we
45:16 - can draw the 400 pixels
45:18 - yes of the rectangle so and then let's
45:21 - keep
45:22 - width to be maybe five pixels this is
45:24 - arbitrary
45:25 - and then let's put size here as the
45:27 - fourth argument
45:28 - and oh let's give it a different fill
45:30 - color this time i'll give it green
45:32 - it's gonna be very rgb painting
45:36 - [Music]
45:43 - okay cool cool um i just had a little
45:47 - thought though
45:48 - i think we can flip the order of these
45:50 - two
45:51 - and i go edit tidy code
45:54 - [Music]
45:59 - and then i think what i'm going to do is
46:02 - i'm going to
46:03 - draw the what we just drew for spectrum
46:06 - starting from the middle of the canvas
46:08 - and i'm going to flip it
46:09 - so that now we've got like a mountainy
46:11 - structure
46:13 - this is very impromptu so
46:16 - what i'm going to do here is here
46:18 - instead of x being between
46:20 - 0 and width i'm going to have it start
46:22 - at width divided by 2.
46:29 - and wait that's the wrong one not that
46:32 - one
46:33 - oops um tidy code again
46:38 - i'm gonna have the mountain which is the
46:40 - one here for spectrum because i i got
46:42 - confused because i
46:43 - switched the places so i'll have this
46:45 - one start at
46:46 - width divided by two
46:50 - there we go and then i'm going to limit
46:52 - this height to something a little bit
46:54 - smaller
46:55 - let's do it divide by two see what that
46:57 - looks like
46:59 - okay maybe a little bit bigger so i'll
47:01 - do four divided by three
47:03 - and then what i'll do is i'm gonna draw
47:05 - another rectangle
47:08 - um that's gonna go from
47:11 - okay so i'm gonna do minus width divided
47:14 - by two
47:15 - so what that will do is that i'm gonna
47:17 - shift wait but that's not gonna flip it
47:19 - is it i think i'm to keep it simple and
47:23 - not do math and use math again
47:26 - so i'll say i'll say let's flip
47:31 - x and i'll say another map between
47:34 - i and 0 and um between
47:38 - between zero and spectrum that length
47:41 - and then what i will do here is i'm
47:43 - gonna flip it so that
47:45 - the first one gets drawn from width
47:47 - divided by two
47:49 - and the last one gets drawn all the way
47:51 - at the towards the left which should be
47:52 - at zero
47:54 - so that instead of me trying to
47:56 - calculate beings
47:58 - i'm going to take this and say use the
48:00 - flipped
48:01 - x flipped x value instead
48:09 - [Music]
48:13 - there's a lot of different things that
48:15 - you can do obviously to
48:16 - you know make your painting look better
48:19 - you know one of which will be not using
48:21 - these hideous three colors that we've
48:23 - used in here
48:24 - other things like instead of using
48:26 - circles in here what if these were also
48:28 - all using rectangles so that they feel
48:30 - more like you know a wavy thing that's
48:32 - happening
48:33 - and also things like what if you wanted
48:36 - to
48:36 - for example here ignore all of the
48:39 - spectrum length what if you only cared
48:40 - about half of your spectrum length
48:42 - so you don't want to care about um all
48:45 - of the things that are happening in the
48:47 - further up frequency bands so then you
48:49 - can do something like this where you
48:51 - only play with the
48:55 - half of the spectrum so that it creates
48:57 - a bigger like a fuller and like a
48:59 - slightly wider mountain
49:01 - for our visualization so there's a lot
49:03 - of different things
49:05 - and we've got maybe
49:09 - five minutes or so or we've got ten
49:12 - minutes
49:12 - seven minutes no eight minutes sorry
49:16 - so if there's any requests for that
49:20 - so if we wanted to um you know
49:24 - um have anything from the audience it
49:27 - is our like last live stream for
49:29 - creative coding so i'm willing to take
49:31 - up any challenge
49:33 - then you know any modifications
49:34 - challenge to this particular um
49:37 - sketch that we've gotten here or nick if
49:39 - you want me to try different things
49:41 - i'm happy to give it a try
49:44 - i'm i'm loving what i'm seeing so far
49:46 - the nice little
49:47 - it's a nice little painting you know
49:53 - i think the sun needs to move up though
49:55 - because it kind of is making it look
49:57 - like a very vibrant
49:58 - lord of the rings what's that tower with
50:00 - the eye
50:02 - yeah it's the eye of sarah like an
50:04 - apocalypse wildfire
50:06 - son also yeah so i think you know one
50:09 - big thing would be to
50:11 - tweak around um with the placement
50:14 - of the sun a little bit for sure but the
50:17 - other thing
50:17 - to also keep in mind is that notice when
50:20 - i like flipped
50:21 - um the placements of these for loops you
50:23 - know
50:24 - you know i moved the waveform to below
50:26 - to be below
50:27 - um the spectrum visualization and that
50:30 - brought the
50:31 - the waves to appear on the front in
50:33 - front of the
50:34 - mountain so then like you know the one
50:36 - thing that i think
50:37 - um actually we do want the sun to be all
50:39 - the way at the top so maybe
50:41 - the thing that i will do is i move it to
50:42 - the corner left corner
50:46 - you know julian i did see one question
50:47 - in chad
50:49 - i didn't get to um savannah what are the
50:53 - real world use cases for this audio app
50:55 - like where can we publish it
50:56 - where can it be used well you can have
50:59 - it as part of your
51:01 - portfolio website that would bring
51:03 - another zing to your portfolio
51:06 - to be like here i can do all of these
51:08 - audio visualizations
51:09 - other things like i think there'd be a
51:11 - lot of like creative uses
51:14 - sorry i just saw alex's cone i think
51:17 - there'd be a lot of creative uses to
51:19 - audio visualization like if you have you
51:22 - know
51:22 - friends who make music for example and
51:25 - they want to have an audio visualization
51:28 - that could go with their music
51:30 - you could create something simple like
51:31 - this and you can use it as like a source
51:34 - for a music video that's something that
51:35 - i've actually personally done
51:37 - you know like in i don't think i've made
51:39 - a music video that's like a full extent
51:41 - the whole thing is um generative
51:44 - visualizations or audio visualizations
51:46 - um
51:47 - that i've coded but i've definitely used
51:49 - different parts of
51:51 - of a music video to be that you know i
51:54 - also get a lot of inspiration from
51:58 - i think the arctic monkeys has a really
52:00 - cool a music video for the do i wanna
52:02 - know song i don't know if that's actual
52:04 - title of that song
52:05 - but they've got these like line based
52:07 - drawings that's definitely not done in
52:08 - programming but i draw a lot of
52:10 - inspiration from that so by which i'm
52:13 - saying is
52:14 - if there's music and you wanna put
52:16 - visuals on it
52:18 - this is a great way to get started with
52:19 - it
52:22 - but obviously i think it'd be really
52:24 - cool to have
52:26 - this be a background of someone's
52:27 - portfolio
52:29 - i think that's super creative yeah i
52:31 - think it'd be super creative
52:34 - maybe not like a song that's like this
52:36 - banging but
52:38 - a more subtle song so chat if you have
52:41 - questions for j1 the p5 expert
52:44 - please put them in i have more questions
52:45 - but i can keep going
52:47 - um so i'll just i'll just keep going
52:49 - until others chime in here
52:51 - what's what's next if i was into music
52:54 - like analysis and visualization in terms
52:57 - of p5 which else should i
52:59 - play with in terms of p5 i think you
53:02 - could definitely hone in on the fft
53:04 - stuff because there's a lot more
53:05 - that you can do in here um i let's
53:08 - actually take a look at the p5
53:10 - um sound library other things that you
53:12 - can do is you can also think about
53:14 - creating sound within using the p5.js um
53:17 - p5 sound library so not only does v5
53:20 - sound library have features that you can
53:22 - analyze the existing sounds so you can
53:24 - import in like
53:25 - a sound file and you can do analog
53:27 - analysis in it using
53:28 - fft or amplitude objects you can also
53:32 - try out this oscillator so you can
53:35 - create your own
53:36 - sound oscillator so like a sound
53:38 - oscillator wave or like a sawtooth wave
53:41 - all that sort of thing so let's actually
53:43 - go ahead and see if we can just use the
53:44 - example
53:49 - [Music]
53:53 - you can create a digital fermin
53:57 - which would also be cool you could
53:58 - create a theorem and using your mouse
53:59 - position
54:00 - [Music]
54:02 - can we do filters yeah there's also a
54:05 - thing called filter
54:07 - there's also that's amazing there's also
54:10 - a filter for
54:11 - so now this gets to a point where you
54:13 - need to have some
54:15 - music knowledge some audio knowledge
54:17 - because you need to know what kind of
54:19 - filters are generally out there
54:21 - there's also different things called p5
54:23 - effect in here
54:24 - then you can also put in different kinds
54:26 - of effect but these
54:28 - obvi they have the way that the method
54:30 - works
54:31 - the methods work and like you can also
54:33 - see from it if you look at their example
54:36 - code
54:37 - there's no things that you have to
54:38 - connect and disconnect
54:41 - what this kind of comes from like all
54:43 - the um
54:44 - i think generally how music works in
54:46 - terms of like plugging
54:47 - basically plugging in things from one
54:49 - source to another
54:50 - but what happens with like when you put
54:52 - in more things in between
54:54 - the input and the output of the file
54:57 - output of what it comes out of your
54:58 - speaker
54:59 - you will have to chain um audio files or
55:03 - like audio inputs so going from one
55:05 - audio input
55:06 - and you put it through one filter and
55:07 - you put it through another effect so you
55:09 - have to take
55:10 - audio file put it as input of audio
55:13 - filter
55:14 - take audio filters output put it as
55:16 - audio input
55:17 - of another effect and so on so it gets a
55:20 - little bit complicated
55:22 - and a little bit convoluted and
55:26 - i was suggesting you have patience
55:29 - and you study the um example code if
55:33 - you're
55:33 - if you want to go to that route another
55:36 - thing is if you're
55:36 - really really serious about using web
55:39 - audio
55:40 - um i would even go beyond the p5 sound
55:43 - library because p5 sound library is
55:45 - great if you want to get
55:46 - started with all these web audio
55:48 - features there's another
55:50 - um javascript library called tone.js
55:54 - that i think is also another place to
55:56 - another place where
55:57 - you can do a lot more in-depth
56:01 - um effects and also analysis all the
56:04 - sort of things
56:05 - you can do with tone.js as well there's
56:07 - something that i would also
56:10 - recommend that you look at if you're
56:11 - into web audio
56:13 - cool yeah
56:17 - anything else
56:21 - i think i'll make sure i'll make sure to
56:23 - upload the sketch that we created
56:25 - together during the live stream let me
56:27 - actually save that because i'm scared of
56:29 - losing it
56:30 - and then i'll add in these files that i
56:33 - have
56:34 - um that i demoed the waveform and the um
56:37 - the spectrum visualizations under the
56:40 - description for this odd
56:41 - video as well and for inspiration can we
56:44 - see
56:44 - your your final oh
56:48 - yeah so i've got it right here
56:59 - [Music]
57:10 - and a nice
57:11 - [Music]
57:14 - deeply inspired by the song itself
57:16 - despite the fact that it's called siesta
57:19 - it's for some reason it triggers it's
57:20 - like you know aurora
57:22 - sort of like night sky sort of feel to
57:25 - it
57:26 - the song that's why um i i the
57:29 - the the things that you see up in the
57:31 - night sky
57:32 - is um by the way using spectrum so i'm
57:35 - laying out all the spectrum bands on top
57:37 - of each other and then like depending on
57:39 - how
57:40 - high they are the size of the rectangle
57:43 - and the color of the rectangle is
57:44 - changing
57:45 - and then the bottom the wavy
57:48 - ocean floor there is using waveform and
57:51 - then whenever
57:52 - amplitude reaches a certain number above
57:54 - a certain number in this case
57:56 - this number which i derive from watching
57:58 - the amplitude values coming in
58:00 - using through console log whenever it's
58:03 - above that
58:03 - it draws a random um star sparkles
58:08 - so everything is being driven by
58:11 - different data in the
58:15 - sound file very cool cool
58:20 - um i think i think this was a
58:23 - hopefully one of the most entertaining
58:26 - one of the more entertaining sessions
58:28 - that we have with creative coding
58:30 - because you know there's like things
58:31 - with like sound and then you see things
58:33 - as well and then you
58:34 - you know create animations based on you
58:37 - know the different
58:38 - um data in the um sound file so i hope
58:42 - everyone really enjoyed it
58:43 - and i think academy will come back real
58:47 - soon with another
58:48 - live live stream series but yeah
58:51 - i hope everyone enjoyed the creative
58:53 - coding series
58:56 - yay
59:02 - bye

Cleaned transcript:

looks right it's saying that it's live on custom live streaming service let's give it a couple of seconds oh we're live i think cool so welcome everyone to our last session of curcamilife for creative coding um today um i'm well obviously i am back my name is juwan i'm a curriculum developer here at academy and we also have nick today hello um and we'll be going through today we'll be going through audio visualization so we'll be um using another p5 p5.js addon library called p5.sound.js um just to quickly recap on some of the things that we've been going through in the past seven weeks eight weeks including this week um what we've been doing during our um academy live for creative coding series is that we've been going through some of the content in our learn p5.js course it's a free course on our platform and we've been going through some of the topics that are mentioned in each of these modules during the weeks of livestream so we've gone from you know creating really basic simple um 2d primitive shapes on the canvas and then we made those um shapes move on the canvas using frame crown and all sorts of different techniques and then we also um took a look at adding um inter interactions using mouse and keyboard interactions to our sketches and we also looked at how to add images and videos to our um b5.js canvases and the last two weeks were a bit special because alex um he also demonstrated how you can visualize fundamental programming concepts with b5.js so we looked at how to visualize objectoriented programming so we created these like classes of visual elements that we can use to create multiples of on our canvas and we also last week looked at how to visualize the nearest kneighbor algorithm so this is going to be like hopefully a grand ending to our um livestream series for creative coding we're gonna look at what's called audio visualization so what that means is that we're going to first look at how to load sound files to our canvas um so we're gonna be also um using the um p5 web editor to do all of these things so first you know where to look for those sound sources free and open source um sound sources and downloading them and uploading it to rp5 um web editor and then we'll look at how we can play those files in the canvas so starting from like you know really basic things and also maybe taking a look at how we can use microphone input as well and then we'll also move on to then you know really looking at those um sound files as data and doing you know visualizations of those audio data so really you know it's like a really interesting cross between um data visualization because like the data that we're going to be using are going to be audio data like you know audio can be we're going to talk about this in a little more indepth but you can um see audio in different forms of data depending on what values that you look at that's related to the audio file itself or the sound that you're hearing at that moment so that's kind of sort of the plan and we'll take it um from the very beginning and it will build everything up does it sound like a plan nick that sounds great to me the final participant okay cool um so i've shared my screen people should see this really blank um p5.js web editor view this is the first thing that you get when you create a new sketch on the p5 web editor um we've got our canvas 400 pixels by 400 pixels it's just like a personal preference i just like to start off with my canvas being window width and window height window window height so that we can use the full extent of our preview window in here um and the next thing that i'm going to be doing is basically before i get like really go into creating my canva my sketch today i'm going to go into my index.html file in here so if you click on this arrow key you should be able to see all the files inside of the sketch um that this preview window was running and then you will see in line um this is i think five there's a script tag in here um and it's so the inline four the script tag in here um is importing the p5.js library the core library into our html page that we're able to utilize all the components of the p5.js library but in la in line five you will see that there's another library that is automatically imported in here for you called p5.sound.min.js file so what this file upload does is that so b5.js library itself this is the core library most of the times if you're not going into the domains of the sound you you won't have to think about you know this additional line that you have in here but what this means is that if you have this um file imported as a script tag inside of your index.html file you should also be able to use an additional library so if we go to the p5 um js the the organization or the documentation website and you go to references at the very top it should say something like can't find what you're looking for you may want to check out b5 that sounds it's because the um the sound library is what they call an addon library that works on top of the main core p5.js the library itself and they've also got a separate documentation page so when you are working with sound with f5.js this is like an important thing to keep in mind that all the references to everything that we're going to be using in our live stream today you're not going to find it in the main reference page you will have to click on the link to go to the b5 sound library references so that's something to keep in mind in here and if you're also if there are some people who are working locally that means that if you only what i mean is like if you have these you know um if you're working and creating p5.js files or projects locally on your own computer you're also going to want to make sure that you have this sound file included in your index.html file as well so having said that i think one of the good reasons other good reasons of why you know working on the p5 web editor is a good thing when it comes to sound is because um p5 the the p5 web editor will take care of a lot of um autoplay issues and like you know blocking of auto playing sound that kind of stuff it will take care of it for you in the web editor itself if you don't know what i'm talking about and you've never experienced but you know you know websites blocking autoplay of video and sound you don't have to worry too much about it right now if you're going to be working on the b5 editor itself um so just but i did want to like make sure that i mentioned that just you know to make sure that if you're working locally and you're saying you're thinking oh why is my sound file not working chances are it's because of the whole autoplay issue and there are multiple ways to resolve it but i think it's a little bit out of the scope of the live stream itself and we're going to focus on using um sound files in our b5 js canvases for now so first things first if i'm going to be playing with sound and the sound files that means i need to find a sound file to work with and um you know i there's a number of different things that you can look for i might go to is um i go to a website called free music archive and they have all of these um open source and royalty free music you know i generally go to search and then go to charts for all time and then pick something you can also listen to it because my sound is working right i'm not hearing you're not hearing anything let me make sure my sound should be shared let me share it again there's like this one in particular this particular file it starts with a really low base so let me actually try another one you heard that oh yeah okay cool so you can download any of these um sound files from here i'm gonna go ahead and say anderson agree and then i have the sound file downloaded in here so with the sound file downloaded somewhere on your computer in order for you to import in something external to the p5 web editor what you will need to do is you will click on that um you know sketch files directory again and if you click on this um arrow down key in here oh i see a lot of people on chat telling me that they've heard it that's great and then if you click on this button there's an option for you to upload a file so if you click on this and i'm going to be navigating to my finder which you will not see um being shared on this particular screen sharing because i've not shared um the entire desktop but that's okay and i'm going to name my um sound file to siesta which is the name of this particular um song because you want your sound files to be shorter because if your song your if your files are longer that means that you have to type in the whole thing making sure you know like the charac the spacebar characters are accounted for and all that kind of stuff so i've named my the download uh renamed it to siesta.mp3 i can drag and drop that file in here and you should see this progress bar happen and only when you see the name of the file appear on the left um left sidebar here is the um a file fully uploaded so some people do make a little you know obviously something that could be improved on in terms of the design of the v5 editor tool itself but um some people do make a mistake of you know oh they see this progress bar happen and they close the upload file uh window but they will see that this file won't appear in the sketch files that means that it's not uploaded properly so just make sure that you give it some time and then it shows up in the sketch files directory in here and once that is done the file itself is has been uploaded to this particular sketch itself and now it's ready to be referenced to and ready to be um imported within our p5.js canvas for me to able to use and play so the first thing that we'll do is basically we're going to use the sound file that we've uploaded in here within our canvas and then there's multiple things to note in here basically the function to use to upload our sound file is going to be the load sound function but there is this um this function node sound function isn't in our setup function right and notice how when you know a blank sketch is created there's only setup and draw it is in another function called preload so based on the name of the function nick what do you think the preload function does does it happen before load it happens before something and it happens before the setup function so what the preload function is that um it is most commonly used to preload media assets so that includes you know image files video files and and also audio files and you will want to use the preload function to make sure all of your assets media assets are loaded even before the set of setup function runs for your p5.js sketch so that's the thing that we're going to be doing in here so i'm going to also do it above it doesn't matter where you define your function your preload function but just for the sake of you know me having a logical structure in my code i'm going to put my function preload above my setup um and then in here well before all of this i'm going to create a global variable called sound and i'm going to save sound to the output of the load sound function which i'm going to give it to the path of the sound file that i want to load in my p5.js canvas so i'm going to call it in this case siesta dot mp3 if your sound file is staged inside a directory if your sound file is called something else obviously you should be calling giving it a different path remember this is the path to the file not just the name of the file itself um sorry um and so once that is done and if you click um nothing should happen except for the fact that if you notice it here the loading will take a little longer that's because there is a media file that needs to be imported and loaded into the p5.js sketch even if we're not using it yet so in order for me to use the sound file by which i mean here the sound file being played in our p5.js canvas is inside of our setup after the sound file is being loaded into this variable called sound i can do something like sound.play which is of which is a method of this particular sound object in here so what that would display method should do is that it should play the sound file only once and then stop after it's being played once if you wanted to do something like you wanted to just keep the sound being looped let's actually go back to the reference in here and underneath you should see some methods of this particular sound file object that you're creating so there's this um play method in here place the v5 sound file there's also pause in here you can pause your soundtop being played at certain times if you want you can also set your sound files to loop but that means that it will just once that sound file reaches the first time it plays all the way through it'll just loop back to the beginning of the file and then go over and over and over again so um you know generally if you're working with like a shorter sound file and you just want to keep you know experimenting with the data you're getting from the sound file itself doing sound.loop may be a good idea just so that you can you know keep hearing the sound and keep using the data from the sound um there's another um type of sound that we can use in our p5.js canvases here we're using this like you know a static sound file in our sketch you can also use a your microphone input to drive any sort of you know audio visualizations that we're going to be creating today for that particular purpose there is it is p5.audio in object um so you can click on this and it's going to um if you've never visited this webpage before it's or if even if you have it may ask you if i you can you want to allow your p5 if you want to allow p5.js.org website to use your microphone input you can do allow in which case it should be using your microphone input i'm actually not entirely sure if i'm going to be able to get this working because i'm my microphone being input is being used by zoom at this moment in time and it doesn't seem like for this particular one it's working let's actually see my continue using access microphone default okay so i'm not entirely sure if this particular example is gonna work for you know the demo the live demo but i wanted to um just make sure that you guys are aware that you can also use microphone input within your p5.js sketch as well cool is there anything um do anyone have any questions so far about anything about loading sound or using microphone input or maybe i can assume that i've explained everything clearly okay so once we've got the sound file being loaded into your p5.js canvas and now we've got the sound to loop the next step to think about that would be um so what can i do with the sound file right um well there are multiple things that we can do with the sound file itself and for today's uh for the purpose of today we're going to be looking at um three big things we're gonna well two big things and then three components in total so we're gonna look at um how to use the amplitude values of the of the um sound file itself and then we're also going to look at um what kind of data we can use and what we can get by using this what's called fft so the first thing that we're going to be looking at is basically we're going to use um try to get basically using the v5 sound library to get the amplitude of the sound file for this given moment in time but the amplitude of the whole file so what is amplitude i think that's like the first question that we need to answer um before we get even into using amplitude of the sound file nick what is amplitude okay wait i know this one amplitude is like volume so high amplitude means a loud sound little amplitude means small quiet sound so what what do you think it means when i say amplitude of a sound file though it means the amplitude so the volume of each frequency so like low sounds and high sounds how loud each one is um there is a way for us to get that data too but when i say the amplitude the whole sound file um within even that sound file itself like any sort of music or any sort of sound there are time points in time when the sound is softer and there their points in time as it is typically in music when it gets more closer to climax the whole volume of the whole sound file will increase so the first thing that we're going to look at is an amplitude for each mode it's each frequency band it would be rather for each moment in time how loud or how um soft the sound is for that sound file in that moment in time and i think sound is actually you know one of the most difficult things to talk about i feel like you can listen to the sound and you can compare you know your descriptions of what that sounds like but it's also like when we talk about different amplitudes or different like characteristics of the sound i think it's one of the most difficult things to you know talk about without having any visualizations well i think we're in luck because we're going to visualize the amplitude of this particular sound file that we've included in here and so the first thing if i want to have any sort of analysis done for our my uh sound file the first thing that i will need to do is create an instance of this component that mp5 sound library calls the p5.amplitude so um let's actually do go ahead in here and as a global variable i'm going to create a variable called let amp and inside of our setup um we're going to say empty is going to equal to a new instance of p5 dot amply spelling is important amplitude and notice how this sort of um statement it resembles something that we've seen um two weeks ago what does this look like to you nick what does it look like i'm doing in terms of programming let's see here online 13. okay you are making a new object right and then the variable amp yeah so this is exactly what we're doing and which is one of the unique things that's happening throughout the whole p5 sign library itself if you're going to be using any of the features like p5m uh like audio in and also like you know fft that we're going to be looking at essentially what you're doing behind the scenes is that you are creating an instance of that object which contains all the audio features that you want to use and automatically what it does for us is that whatever sound that is currently being played in the sketch will be used as the audio in so to speak and will be used to for all the features of the amplitude object that we are going to be using very momentarily it is a little bit of like an um interesting and in the complex com concept to wrap your head around you know like different there's multiple things going on here you have to you have some amount of you know audio knowledge right you know audio theory audio knowledge but you also have to know that whenever you create any of these features you're creating an instance of an object and behind the scenes by the way all of these things um the p5 sound library does for you are basically um behind the scenes are all vanilla javascript functions for um that uses the web audio api features and it just makes it a whole lot easier for you to use all of these things within the b5 sound p5.js canvas so here with the amplitude if you were to write this in using web api using vanilla javascript i think it will be at least minimum of 50 lines of code because there's a lot of different things like you know you have to hook your audio input into this input of this amplitude web api and all that kind of stuff and so with one single line of code in b5 sound library you can get all the amplitude data for your sound um file that we've imported in here so once we've created this instance of the amplitude object what we're going to do in the draw and we're going to do in the draw because every time our draw function loops we want to get the new amplitude data for that moment in time of the sound file being played so the thing that i'm going to do in here is i'm going to create a local variable called light level and then the level is going to be the amplitude whatever that amplitude the whole um package of the object information that we get from the amplitude object i'm going to use a method called get level and we can check out the reference for the get level um oh i mean the wrong reference let's go back into the amplitude reference and then we can check out the um documentation for the get level method in here so it says it will return a single single amplitude reading at that moment um it is cold so for continuous running it says to run it in the draw loop which is exactly what we're doing so before we draw anything i'm going to go ahead and i'm going to add a console.log statement in here and i'm going to print out the the value of level that i get so if you study the values that you get in the console long enough you will notice that it does tend to stay within a specific boundary of um amplitudes so it's never going to go all the way to one and it's going to nip well it's going to be zero when there is silence in the file as we saw at the very beginning for two frames when we uh run this particular p5.js um sketch so one thing to note in here is that well if there is going to be if the level uh value is first between 0 and 1 and it's going to be decimal number but it's never going to reach a all the way to 1 so a good function that we can use to visualize this level value is going to be the function called map that we've been using continuously over the course of the weeks uh just as a reminder what the map function does as i type in here so let's actually create a visualization where we basically use the level value to create this uh to change the size of the ellipse the first thing that we'll do here then i'll say another create another local variable called size i'll say i'm going to map the value of level that i i'm getting in line 12 19 in here that's going to have a range between zero and one and i want it to be mapped between when it's zero maybe i'll have the size be zero as well but it's at one i want the whole um i want it to be mapped to width divided by two so half of the width of my canvas and then i'm going to use the size um value in here inside of my ellipse function or actually i'll just use the circle function in here i'm going to set the x and y coordinates to the middle of my canvas and width divided by 2 height divided by 2 and i'll use the size that we calculate in line 21 in here and we'll just give it a some like a red fill color for now i feel like it's like the most basic audio visualization that you can do but it's so it's always like really nice to see it because um you know you see it moving you see something moving not because of your mouse not because of the keyboard but because of like the how this particular music is being played and if i add that's what happens if you had a little bit opacity to your background so now that we've seen what amplitude does the next thing that i do want to talk about is um another sort of um algorithm or another another p5 sound object that we can use to get old to access all of these tools behind is called fft and this is it gets now a little bit more towards like you know audio knowledge domain because what does anyone know what fft stands for maybe i'll give it a couple of moments in the chat i think i kind of like scrolled down to it to reveal the answer in that split second of time but i cheated i already looked earlier today so okay what what is fft and here if you scroll down to the description you will see that it stands for what's called fast for your transform which even it already sounds like it's a big mathy thing let's actually look up fast or retransform and if you click on the wikipedia article it's got some like intense things happening oh we had an um answer from chat too is that a lot better it sounds a lot cooler or your form transform it's the middle of a tongue twister too do you want to explain to us nick what it does without you know me having to read through all of these mathy algorithms i would love to if i could um you know please feel free to read through the wikipedia article if you're really interested in what happens within this particular algorithm but basically um i also don't have any background in you know music conceptual music or whatever music theory any any of that kind of stuff but as far as i am concerned and as far as um i'm concerned in terms of creating audio visualizations what it does is that it is an analysis algorithm that isolates individual audio frequencies in a waveform we have also another person saying it's a fast forward i can't say that word i think it's a type of dinosaur anyway so basically what it does is that it gives us more granular access to the audio data that we have in our b5.js canvas so what that means is then it gives us two and two big things from the fft object that we can create using dp5 sound library we can get what's called a waveform and we can get what's called an um well the function the method you can use to get it is analyzed but what you will get is a spectrum of sound spectrum of sounds throughout different frequencies and i think for the sake of time what i will do is that i'm going to just um show you what each of those visualizations look like so here we've got um my sketch that i can oh i'll include these two after the live stream into the description of the um youtube video but for this particular one what it does is that it visualizes visualize this fft waveform and um and the next i will play right after it um the visualization of the spectrum and maybe nick you can tell us what the differences between these um visualizations are okay i'll play the waveform one first oh let me let me take out all the the frills of um opacity in the background so you can see it better okay so that was the waveform and then we'll play the spectrum and for everyone watching i don't know if it's just me but i think that the preview is a little bit behind the audio okay which is which is just a internet thing but just heads up if that's why it's looking a little like off not matching oh it's a shame um actually i think the other thing that we could do is um the difference between the spectrum and waveform per sound file is also interesting so this one is the another sound file that is running the spectrum visualization you see how like the second part oops the second section like the middle section kind of gave a rise at when that got to that particular part of the um the sound and then also change the waveform to the other file too so what's the difference between this one and this one so uh the first one with the squiggly it's the waveform right and the waveform is over we we've talked about this and i've already forgotten but it's over a short amount of time right amplitude at within a small duration um and when the wave is big it's loud when it's small it's quiet and then the uh spectrum is the second one we saw that looked like a graph i'll let you um sorry i'm just trying to turn off volume so that i can play this without hearing the it's not working i think it's probably because volume is a property so this one spectrum looks like that graph is the um how loud like each frequency is so like with the siesta one when the hihat comes in they're like that is like a very high frequency it's like a high tone there and so that's where it's coming in within an instant right so the difference between the waveform and spectrum is that waveform will show you amplitude of that split moment in time um but the amplitude of whole file similar to the one that we saw when we did the amplitude visualization with the ellipse in here and um the thing that spectrum does is that it gives you amplitude per frequency band which is really interesting and if you wanted to go really deep into you know how what kind of frequency bands that you get uh for the spectrum you can go to the analyze documentation for the analyze method and it will tell you in here that the length of the frequency band is going to be 124 frequency bands and like what that covers between those two things um i'm not entirely sure because i'm not like a really big expert in um audio you know theory but everything is in here if you want to take a look at take a read um and you know there are what's called bins so you know that it can be it has to be a power of two between 16 and and the result of the power of two has to be between 16 and 1024 but you can set different frequency bins by which i mean like you know the little differences in frequency you can group them back together in smaller bins or in you know like the default bins of 120 64 bins um it's something that you can do by passing in different numbers in here as arguments of the analyst method but we're not going to go in too deep into that because um things start getting starts to get a little bit um too complicated and i think we are running a little bit of out of time with you know the end goal that i had in mind for this particular live stream which i totally expected because there's a lot to cover in terms of theory but i let's actually not try to create the um there is a sketch that is included as the solution code inside of the youtube description right now instead of doing that i think we should try to create a different kind of visualization just using what we've got in here so for example for this particular sound file we've got a circle which i think we can tweak it a little bit around so that we can use it as like the sun or something so i'm gonna go ahead and do that and so we can change the height of it to be something like a hundred and fifty so then we should see it at the top and i think i actually did turn off um share sound it sounds like it sounds like you're not to get meta on sound but it sounds like your mic is fairly sensitive so i think it maxes out like pretty easily i don't know if you can move it farther away from your like mouth or speaker does that does that impact my microphone sound the sound of the music no it doesn't matter if it's playing or not i think just your microphone's very sensitive okay i will keep that in mind but i think we can use this circle as like a sun in here and then i'll take out the stroke here as well and the next thing i'm going to do is i'm going to create um another global variable and i'm going to call it fft and then down here in the setup i'll say fft it's going to equal to new p5 not fft so that now we have the um the an instance of the fft object is saved inside of our fft local variable global variable sorry and so then we can use all the features of the fft stuff inside of our draw function so in order for me to get the values of the waveform and a spectrum what's going to happen is that here i'm going to say let waveform as a local variable inside of our draw function and i'll say um fft.um is going to be the waveform method so i'll say waveform and then for um spectrum i'm going to say fft.analyze a couple of different things to also note for each of these uh waveform and spectrum objects so what's gonna happen is actually let me just um console log waveform and what's gonna happen here is that waveform is not just one number waveform is giant array that's because for each spectrum band we're getting a number between minus one and one and minus one and one being the amplitude for each of those frequencies and you can read all about them inside of our um you know the method documentation here for waveform and it will say returns an array of amplitude values between minus one and one the reason why it's between minus and one is beyond my knowledge and i think it has to do with a lot of the audio theory things but basically it will give you a snapshot of wave um amplitude readings in a single buffer and also the length will also then hear the length of the array that we're going to get for the waveform equals 101 thousand and 24. so those everything you consoled was waveform right and that would all those numbers are different amplitudes for each frequency yes okay so cool frequencies okay so having said that what that means for us is that if we wanted to do something like for let i is equal to zero then i can run it for the length of the waveform array that we have saved in line 23 in here as a waveform variable so now i can say waveform dot length and then i can progress it by one and then in here i can do multiple different things for now i'm going to draw it in um let's let's try using ellipses in here so what i can do here is i can say maybe say my fill color could be blue and then for my ellipse if i wanted to change the height of my ellipse then i can do another map use another map function in here and say i'm going to say let wise equal to map of and in order for me to access an element inside of the waveform array i'm going to have to refer to it using the index number so in this case i'll use the i the iterator iterator variable inside of our for loop so i'll say take the value of waveform at index i which is going to be have a minimum of minus one maximum of one and i want it to be mapped between maybe the lower some lower half of my canvas which is going to be if it's at the lowest i'm going to draw at the height so at the very bottom of my canvas but if it's high i'm going to draw it at the height divided by 2 so the middle of my canvas so if we have something like that and then now we can use this particular y variable here for our circle um shape so that i can use x could be wherever i is so actually if we want to make this a lot more accurate then we can also map x say map of between so in this case i'm going to map the iterative variable i itself which is going to range between 0 and 1024 or we can just put in waveform that length in here and then it's going to be mapped between 0 and width so let's use all of those math variables inside of my circle functions i'll say x comma y and let's keep size to 5 for now and i'm actually going to take my no stroke from line 36 in here and move it to set up so that all of my shapes have no strokes so let's see what that looks like it's already kind of looking like a you know very abstract sun in the intel in an ocean wavy sort of feel to it but basically we've drawn the waveform on the top on the bottom and we've got the sun on the top and let's actually take a look at what the sun the spectrum array also looks like the way that we're going to be doing spectrum is going to be very similar to the way that we drew our waveforms is because let's go back to the reference page for our fft and i will go to the reference page for analyze method and then here you will see returns an array of amplitude values between 0 and 255 across the frequency spectrum so then now it's like really really interesting because the the our range of numbers has changed so for a rate waveform the range of number was between minus one and one but for spectrum the range of numbers is between zero and 255. so it's just something like if you don't know you know audio theory uh music theory you don't need to you know worry too much about it all you need to know is that when we use the map function the minimum and maximum range is going to be different so that's just something that really gets good to keep in mind and i i also personally have to go back and forth just to double check that waveform is minus between 1 and 1 and spectrum is between 0 and 255 and i think that just is something natural to do you know like you never you don't have to memorize all of these things in your head and you don't have to you know have them in your head for you to use it so what i'm going to do here is i'm going to say for let i is equal to zero i is less than spectrum that length and i'll say i plus plus and inside of here um let's actually do another map of x for the um for all of the um elements of the spectrum array so i'll say i um take the value of i that's going to be between 0 and spectrum that length and map it between 0 and width and then in here let's say um y is going to be let actually do i want y i'm going to actually going to set um the size okay i'm trying to map this in my head i'm going to set this as the size of the rectangle because i'm trying to draw i'm going to draw rectangles and i want my rectangles to be taller to be um longer if the value of my spectrum the value inside of the spectrum array is bigger meaning that if that frequency band has a higher amplitude i want my rectangle to be taller so in order for me to do that let's do a map and they say take a value of spectrum inside of the element i that's going to between 0 and 255 as the documentation said and i want it to be mapped between 0 and the height let's see let's see what that looks like and i'll draw a rectangle in here and the x is going to be x y is going to start at height okay so y is going to start at height minus size so what what happens if i do height minus size so height is all going from the bottom because you draw from the top left right so it's x units over to the right and then height would be at the very bottom height minus size would be like maybe canvas is the size is going to be wherever you know if the height let's say size is 100 pixels that's going to move up 100 pixels so we can draw the 400 pixels yes of the rectangle so and then let's keep width to be maybe five pixels this is arbitrary and then let's put size here as the fourth argument and oh let's give it a different fill color this time i'll give it green it's gonna be very rgb painting okay cool cool um i just had a little thought though i think we can flip the order of these two and i go edit tidy code and then i think what i'm going to do is i'm going to draw the what we just drew for spectrum starting from the middle of the canvas and i'm going to flip it so that now we've got like a mountainy structure this is very impromptu so what i'm going to do here is here instead of x being between 0 and width i'm going to have it start at width divided by 2. and wait that's the wrong one not that one oops um tidy code again i'm gonna have the mountain which is the one here for spectrum because i i got confused because i switched the places so i'll have this one start at width divided by two there we go and then i'm going to limit this height to something a little bit smaller let's do it divide by two see what that looks like okay maybe a little bit bigger so i'll do four divided by three and then what i'll do is i'm gonna draw another rectangle um that's gonna go from okay so i'm gonna do minus width divided by two so what that will do is that i'm gonna shift wait but that's not gonna flip it is it i think i'm to keep it simple and not do math and use math again so i'll say i'll say let's flip x and i'll say another map between i and 0 and um between between zero and spectrum that length and then what i will do here is i'm gonna flip it so that the first one gets drawn from width divided by two and the last one gets drawn all the way at the towards the left which should be at zero so that instead of me trying to calculate beings i'm going to take this and say use the flipped x flipped x value instead there's a lot of different things that you can do obviously to you know make your painting look better you know one of which will be not using these hideous three colors that we've used in here other things like instead of using circles in here what if these were also all using rectangles so that they feel more like you know a wavy thing that's happening and also things like what if you wanted to for example here ignore all of the spectrum length what if you only cared about half of your spectrum length so you don't want to care about um all of the things that are happening in the further up frequency bands so then you can do something like this where you only play with the half of the spectrum so that it creates a bigger like a fuller and like a slightly wider mountain for our visualization so there's a lot of different things and we've got maybe five minutes or so or we've got ten minutes seven minutes no eight minutes sorry so if there's any requests for that so if we wanted to um you know um have anything from the audience it is our like last live stream for creative coding so i'm willing to take up any challenge then you know any modifications challenge to this particular um sketch that we've gotten here or nick if you want me to try different things i'm happy to give it a try i'm i'm loving what i'm seeing so far the nice little it's a nice little painting you know i think the sun needs to move up though because it kind of is making it look like a very vibrant lord of the rings what's that tower with the eye yeah it's the eye of sarah like an apocalypse wildfire son also yeah so i think you know one big thing would be to tweak around um with the placement of the sun a little bit for sure but the other thing to also keep in mind is that notice when i like flipped um the placements of these for loops you know you know i moved the waveform to below to be below um the spectrum visualization and that brought the the waves to appear on the front in front of the mountain so then like you know the one thing that i think um actually we do want the sun to be all the way at the top so maybe the thing that i will do is i move it to the corner left corner you know julian i did see one question in chad i didn't get to um savannah what are the real world use cases for this audio app like where can we publish it where can it be used well you can have it as part of your portfolio website that would bring another zing to your portfolio to be like here i can do all of these audio visualizations other things like i think there'd be a lot of like creative uses sorry i just saw alex's cone i think there'd be a lot of creative uses to audio visualization like if you have you know friends who make music for example and they want to have an audio visualization that could go with their music you could create something simple like this and you can use it as like a source for a music video that's something that i've actually personally done you know like in i don't think i've made a music video that's like a full extent the whole thing is um generative visualizations or audio visualizations um that i've coded but i've definitely used different parts of of a music video to be that you know i also get a lot of inspiration from i think the arctic monkeys has a really cool a music video for the do i wanna know song i don't know if that's actual title of that song but they've got these like line based drawings that's definitely not done in programming but i draw a lot of inspiration from that so by which i'm saying is if there's music and you wanna put visuals on it this is a great way to get started with it but obviously i think it'd be really cool to have this be a background of someone's portfolio i think that's super creative yeah i think it'd be super creative maybe not like a song that's like this banging but a more subtle song so chat if you have questions for j1 the p5 expert please put them in i have more questions but i can keep going um so i'll just i'll just keep going until others chime in here what's what's next if i was into music like analysis and visualization in terms of p5 which else should i play with in terms of p5 i think you could definitely hone in on the fft stuff because there's a lot more that you can do in here um i let's actually take a look at the p5 um sound library other things that you can do is you can also think about creating sound within using the p5.js um p5 sound library so not only does v5 sound library have features that you can analyze the existing sounds so you can import in like a sound file and you can do analog analysis in it using fft or amplitude objects you can also try out this oscillator so you can create your own sound oscillator so like a sound oscillator wave or like a sawtooth wave all that sort of thing so let's actually go ahead and see if we can just use the example you can create a digital fermin which would also be cool you could create a theorem and using your mouse position can we do filters yeah there's also a thing called filter there's also that's amazing there's also a filter for so now this gets to a point where you need to have some music knowledge some audio knowledge because you need to know what kind of filters are generally out there there's also different things called p5 effect in here then you can also put in different kinds of effect but these obvi they have the way that the method works the methods work and like you can also see from it if you look at their example code there's no things that you have to connect and disconnect what this kind of comes from like all the um i think generally how music works in terms of like plugging basically plugging in things from one source to another but what happens with like when you put in more things in between the input and the output of the file output of what it comes out of your speaker you will have to chain um audio files or like audio inputs so going from one audio input and you put it through one filter and you put it through another effect so you have to take audio file put it as input of audio filter take audio filters output put it as audio input of another effect and so on so it gets a little bit complicated and a little bit convoluted and i was suggesting you have patience and you study the um example code if you're if you want to go to that route another thing is if you're really really serious about using web audio um i would even go beyond the p5 sound library because p5 sound library is great if you want to get started with all these web audio features there's another um javascript library called tone.js that i think is also another place to another place where you can do a lot more indepth um effects and also analysis all the sort of things you can do with tone.js as well there's something that i would also recommend that you look at if you're into web audio cool yeah anything else i think i'll make sure i'll make sure to upload the sketch that we created together during the live stream let me actually save that because i'm scared of losing it and then i'll add in these files that i have um that i demoed the waveform and the um the spectrum visualizations under the description for this odd video as well and for inspiration can we see your your final oh yeah so i've got it right here and a nice deeply inspired by the song itself despite the fact that it's called siesta it's for some reason it triggers it's like you know aurora sort of like night sky sort of feel to it the song that's why um i i the the the things that you see up in the night sky is um by the way using spectrum so i'm laying out all the spectrum bands on top of each other and then like depending on how high they are the size of the rectangle and the color of the rectangle is changing and then the bottom the wavy ocean floor there is using waveform and then whenever amplitude reaches a certain number above a certain number in this case this number which i derive from watching the amplitude values coming in using through console log whenever it's above that it draws a random um star sparkles so everything is being driven by different data in the sound file very cool cool um i think i think this was a hopefully one of the most entertaining one of the more entertaining sessions that we have with creative coding because you know there's like things with like sound and then you see things as well and then you you know create animations based on you know the different um data in the um sound file so i hope everyone really enjoyed it and i think academy will come back real soon with another live live stream series but yeah i hope everyone enjoyed the creative coding series yay bye
