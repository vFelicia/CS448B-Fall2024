With timestamps:

00:00 - all right hi everybody
00:03 - um i hope that everybody is doing well
00:06 - and i'm really excited to be here with
00:08 - alex um i'm sophie and we're going to be
00:11 - taking you through
00:13 - some um through a lesson on data
00:15 - manipulation with pandas today
00:17 - um but before we get started i'm just
00:19 - gonna kind of walk through
00:21 - um the context of where we're at in this
00:25 - whole series
00:26 - um and so feel free as we're getting
00:28 - started to just
00:30 - say hello on the chat introduce yourself
00:33 - let us know that everything is going
00:37 - is copacetic because this is my first
00:39 - time
00:41 - live streaming directly so in case there
00:43 - are any issues i want to know
00:46 - yeah i i know we're right now we're
00:48 - streaming on facebook
00:49 - and uh twitter and youtube and i think
00:52 - also twitch although
00:53 - not very many people know about the
00:55 - existence of our twitch channel um
00:57 - but sophie and i will predominantly be
00:58 - looking at the youtube chat
01:00 - so um if you're watching on any of those
01:03 - other platforms
01:04 - um you could come find us on youtube and
01:05 - chat with us and then yeah if you're
01:07 - watching the recorded version of this
01:09 - um we have been doing these live streams
01:11 - every tuesday at 1 pm eastern time
01:14 - so if you're catching the recording
01:15 - version we would love to see you during
01:17 - a live version
01:18 - yeah um so if you
01:22 - want to learn more about the events that
01:25 - are going on
01:26 - you can always come to the
01:28 - codecademy.com
01:29 - events page and this is our event today
01:33 - and this is
01:34 - our event on thursday when we're going
01:35 - to have
01:37 - a a pro event where you can come and ask
01:39 - questions more of like an open
01:41 - office hours event um
01:44 - and today we are continuing our
01:46 - visualization
01:47 - with or visualize data with python
01:51 - uh path and um so
01:54 - last week uh zoe and jamie
01:58 - went through um some of this earlier
02:01 - content i think
02:02 - they were where were they last week
02:05 - yeah so i think they did the kind of
02:07 - second series of uh matplotlib lessons
02:10 - which matplotlib
02:11 - is the kind of standard python graphing
02:13 - library and i think
02:15 - yeah so jamie and sophie or sorry jamie
02:17 - and zoe
02:18 - did uh a lesson on matplotlib and then i
02:22 - think on the thursday session for pro
02:23 - members they
02:24 - dove into the kind of cumulative project
02:26 - we have there
02:27 - right so today we're going to be going
02:30 - through
02:31 - this lesson on data manipulation with
02:33 - pandas
02:34 - um creating loading and selecting data
02:36 - with pandas
02:38 - so if you want to follow along i think
02:40 - the link is on youtube but you can also
02:42 - find it
02:43 - on codecademy directly and
02:46 - just to give a little context on why
02:49 - we're kind of
02:50 - breaking from our content on matplotlib
02:53 - and actual graphing and now getting into
02:55 - this kind of data manipulation
02:57 - section is that in the real world
03:01 - a lot of the time you'll have data that
03:03 - you're collecting
03:04 - uh either you know in a google sheet or
03:08 - a
03:09 - excel file and then you want to be able
03:11 - to import that data
03:13 - into python so that you can actually
03:15 - create visualizations of that
03:17 - and so the the content that we've gone
03:20 - through so far has been really focused
03:21 - on
03:22 - using some built-in data structures like
03:25 - lists
03:25 - to build these uh visuals but now we're
03:29 - going to kind of talk about
03:31 - the the step that precedes that where
03:33 - you need to actually be able to load
03:35 - your data
03:36 - in and then and get it in a form
03:39 - where you can then use those plotting
03:41 - libraries
03:42 - to actually make the visualizations of
03:44 - the data that you have
03:46 - um do you have anything to add to alex
03:48 - no i i think we should get into it like
03:50 - you said like before the
03:51 - all the visualization stuff that we've
03:53 - done so far it's like kind of been demo
03:55 - examples of like oh we created a list of
03:57 - like five numbers and let's draw five
03:58 - bar
03:59 - graph or you know five bars and a bar
04:01 - chart to represent those numbers
04:02 - and so we haven't really been able to
04:04 - work with like real data in a meaningful
04:06 - way yet and so this lesson is kind of
04:08 - like the intro to that of like
04:10 - okay i have this giant spreadsheet of
04:12 - data how do i even
04:13 - get that into python so i can eventually
04:15 - get turn it into a graph
04:16 - and so that's what this lesson is
04:18 - talking about of using pandas which is
04:20 - the thing that lets you
04:22 - get all this data into python yeah
04:25 - all right so uh to get started
04:28 - we're going to have to load the pandas
04:31 - library
04:32 - into our workspace um and that's really
04:35 - the purpose of this initial exercise
04:37 - here um we talked about this a little
04:40 - bit the last time we were on um
04:42 - but alex do you want to talk for a
04:44 - second about
04:46 - why we're importing pandas as pd
04:49 - yeah so in python and most programming
04:52 - languages whenever you
04:53 - import a library or a module into the
04:57 - code that you're working with
04:58 - you'll often have to like reference that
05:00 - library whenever you use any of its
05:02 - functionality
05:03 - so for example the pandas library we're
05:06 - going to be using
05:07 - i think the function yeah we can even
05:08 - see over in the right hand side side
05:10 - we're going to be using
05:11 - read csv that function a lot of times
05:14 - and so
05:15 - um we in order to use that we need to
05:18 - say what library is going to come from
05:20 - and it comes from the pandas library so
05:22 - every time we could type uh
05:24 - you know pandas dot read csv basically
05:27 - meaning
05:27 - use the read csv function from the
05:29 - pandas library
05:30 - but because we're gonna have to do that
05:32 - again and again and again it's like
05:34 - typical to abbreviate it as pd
05:37 - or you'll see other libraries do this um
05:40 - uh what is the last time we were loading
05:43 - numpy as np
05:45 - um yeah and matplotlib we usually
05:48 - end up loading it as like plt and so
05:51 - it's just
05:51 - kind of a nice little trick that you can
05:53 - do to avoid having to type out the same
05:55 - long library name every single time yeah
05:58 - exactly
05:59 - so um so we'll just take a look at this
06:02 - first page for a second because i think
06:04 - it's just helpful to see this visual of
06:06 - some data really quickly to get a sense
06:08 - of
06:09 - what pandas is going to allow us to do
06:12 - um
06:12 - and so if you've been following the
06:14 - series you've seen lists you might have
06:16 - also seen dictionaries
06:18 - in python but pandas is really what's
06:21 - going to enable us
06:22 - to load data in a tabular form and this
06:25 - might look really similar to what you
06:27 - have seen if you've ever opened an excel
06:29 - file or
06:31 - a google doc or a google sheet you
06:34 - you'll often see data that's stored in
06:36 - this way and you can see that we have
06:38 - this example has some rows each one
06:41 - references a person
06:43 - and it has some different columns with
06:45 - information
06:46 - it looks like maybe these are sales um
06:49 - so people who made a sale or
06:52 - made a purchase of shoes and that's
06:55 - being collected in this
06:56 - in this data frame and so
07:00 - we're going to walk through these steps
07:01 - in a moment but you can see that
07:03 - pandas allows us to read in this data
07:05 - that's in this new format that we
07:07 - haven't necessarily been able to
07:10 - create with the existing structures
07:13 - we've gone through
07:14 - yeah and furthermore it's like you could
07:17 - do all of this stuff
07:18 - using just kind of base python right you
07:20 - could have like a list of lists that
07:21 - could create this
07:23 - two-dimensional spreadsheet like formula
07:25 - but it kind of becomes a huge pain in
07:27 - the butt to like
07:28 - learn how to like navigate that and so
07:29 - one of the strengths of pandas that
07:31 - you'll see is that we can like very
07:32 - easily access stuff by
07:34 - uh column name so we might be able to
07:37 - say like okay get me the
07:38 - give me just the email column that would
07:40 - be way harder to do if we were just
07:42 - using
07:42 - lists for example yeah i actually think
07:45 - in one of the future exercises you're
07:47 - going to see how we can take
07:48 - a list of lists or we can take a
07:51 - dictionary and turn that into a data
07:53 - frame
07:54 - for just that reason there's also some
07:56 - other things that make it really cool
07:58 - and i'll try to demo those as we go yeah
08:00 - we have a good question the chat from
08:02 - quartz three i don't know how to exactly
08:04 - say that but uh yeah
08:06 - so you can import pandas as p and yeah
08:08 - you can totally do that the
08:09 - the thing that comes after as you can
08:11 - kind of think of it as like you're
08:13 - defining a variable name
08:14 - for the library where you can make it
08:16 - whatever you want um
08:17 - so you could do p you could do pd um
08:20 - yeah whatever
08:21 - all right alex we've got a little a
08:23 - slight issue
08:25 - let's see does not seem to be loading
08:27 - let's just give it a refresh see what
08:28 - happens
08:32 - there we go okay
08:36 - when in doubt refresh got it um
08:39 - okay so this first exercise
08:42 - is just kind of walking us through a
08:45 - very
08:46 - basic uh data frame that we can create
08:49 - with just
08:50 - i think this is a dictionary right yes
08:53 - exactly
08:54 - yeah um and so if you look at this
08:57 - example code they've kind of
08:59 - we've kind of walked you through
09:00 - creating this very simple data frame
09:02 - it's got
09:03 - uh three columns name address and age
09:07 - and this structure so if you just look
09:09 - at this piece
09:11 - that's inside kind of the um
09:15 - the parentheses and same thing here if
09:17 - you look at this piece
09:18 - inside the parenthesis this is a python
09:21 - dictionary
09:22 - but we're going to now use a a pandas
09:26 - function to turn it into this new
09:28 - structure
09:29 - which we're calling a data frame so um
09:33 - we can walk through i think this
09:35 - exercise is just asking us to add
09:37 - some more data to this um
09:41 - to this data frame yes this first one is
09:45 - saying
09:46 - okay i can define my columns i can give
09:48 - columns the
09:49 - key name in the dictionary and then the
09:51 - value will be a list
09:53 - of the things that will go in that
09:54 - column these first couple of exercises
09:57 - in this lesson are going to be showing
09:59 - basically how to just create the data
10:01 - frames to begin with
10:02 - and then the rest are showing okay what
10:04 - can we do now that the data frame exists
10:06 - and uh i think that uh this is probably
10:10 - one of the
10:11 - more unusual ways to create a
10:15 - data frame i think probably the most
10:16 - typical one is just loading from
10:18 - a csv file which is a file that you um
10:23 - a file that you might be familiar with
10:24 - if you're if you've worked in excel or
10:25 - spreadsheets
10:26 - um most of the times when i use pandas
10:29 - i'm just loading from a csv file i don't
10:30 - really do this work of like
10:32 - putting all my data in by hand and then
10:35 - turning it into a data frame
10:36 - um but it's good to know that you have
10:38 - the option to do so
10:40 - yeah i think a lot of times one of the
10:42 - things
10:43 - and i should preface this by telling you
10:45 - all that my prefer
10:46 - or my expert languages are and i'm still
10:50 - honestly learning python so this is a
10:52 - learning experience for
10:54 - all of us um but i think one of the
10:56 - things that
10:57 - can happen a lot is sometimes the
10:59 - functions that you want to use can only
11:02 - take
11:02 - certain types of objects so knowing what
11:05 - object
11:06 - type you have and then what you can turn
11:09 - that into
11:10 - in order to get different types of
11:12 - functions from different libraries to
11:13 - work is kind of
11:14 - a useful thing it's always helpful to
11:17 - know what you have and what you can turn
11:19 - it into
11:20 - yeah yeah okay so i think i got this
11:23 - so we added two more columns here where
11:25 - we added a product name column and a
11:27 - color column
11:28 - um little details in here where it's
11:31 - like we're creating a dictionary so
11:32 - you'll notice that
11:34 - um there's a comma after
11:37 - you know after the list of product ids
11:38 - there's a comma and then a comma after
11:41 - the list of
11:42 - product names so kind of this is the way
11:44 - that you create a dictionary in
11:45 - python is that you have the key which is
11:47 - a string and then a colon
11:49 - and then the value which is a list in
11:53 - this case
11:53 - and then that pattern repeated between
11:56 - commas for every item in your dictionary
11:59 - exactly and then you can see i've
12:01 - printed this data frame
12:02 - that i created and so we've got our
12:05 - three
12:06 - uh columns color product id and product
12:09 - name
12:10 - and then you can also see um i didn't
12:13 - actually
12:14 - put this in anywhere but you can see
12:16 - that it's automatically kind of
12:18 - labeled our rows with
12:21 - indices so from zero to three
12:24 - and that's something that i'll talk
12:26 - about a little bit later too or we'll
12:28 - talk about once we get
12:29 - into um some of the indexing stuff in
12:32 - the future exercises but i think it's
12:34 - it's kind of interesting to notice that
12:36 - something is existing here and we didn't
12:38 - even
12:39 - put that in yeah good point yeah another
12:42 - good question in the youtube chat from
12:45 - john david rocha he asks
12:48 - so we mentioned that uh the naming
12:50 - conventions of using pandas as pd
12:52 - is pretty standard and he's wondering
12:54 - how universal is this
12:55 - i would say it's pretty universal john
12:57 - um if you look at like the
12:59 - pandas documentation you'll see that all
13:02 - over the documentation they do the exact
13:04 - same thing
13:04 - where they imported as pd yeah
13:08 - i have taken numerous online classes
13:12 - in pandas and numpy and all of them um
13:16 - have the same convention so i i haven't
13:18 - actually seen it
13:20 - not abbreviated as pd i think yeah me
13:22 - too
13:24 - all right so this next exercise
13:28 - is also creating a data frame so you'll
13:30 - notice we're actually using
13:31 - the exact same function as we
13:35 - were using in the previous exercise so
13:37 - go back for a second so you can see that
13:40 - this pd.data frame x or pd.data frame
13:44 - function
13:45 - is going to do different things i don't
13:48 - know why my
13:49 - my computer is a little slow
13:53 - so this same function can take different
13:55 - inputs
13:56 - depending on what you
14:00 - what you want to turn into a data frame
14:02 - so it can kind of figure out what you
14:04 - want
14:04 - based on what you put in um okay
14:08 - so here we've got a list of lists that
14:11 - we're going to turn into a data frame
14:13 - um and so we've got again
14:17 - uh three columns or sorry
14:20 - three now we've got in each of these
14:24 - lists actually the columns are kind of
14:27 - you can almost see them
14:28 - by looking vertically so
14:32 - uh in each row of our or each list
14:36 - that we're including in here we're
14:37 - actually including um
14:40 - multiple columns of data so this is
14:42 - really
14:43 - our first row of our data frame second
14:46 - row
14:47 - third row etc and then we've got um
14:50 - our column names are another input
14:54 - to this function yeah the syntax is a
14:57 - little bit tricky there where it's like
14:58 - a list of lists and then a comma
15:00 - and then another list so the syntax is a
15:03 - little bit tricky there
15:04 - i think one thing that to highlight here
15:05 - which is another question that
15:07 - john rocca uh said in the chat where
15:10 - he was asking in the last exercise the
15:13 - column
15:14 - or the color column ended up as the
15:16 - first column in the in the data frame
15:18 - even though in our dictionary it maybe
15:19 - wasn't the first and so
15:22 - basically this question is like why did
15:23 - that happen and i think that you'll see
15:25 - um using this method
15:27 - i believe the columns are going to show
15:30 - up
15:30 - um in the order in which we put them in
15:32 - in the columns
15:34 - list here so if the columns are um
15:38 - that go into this list are going to be
15:40 - uh whatever these are store location
15:43 - or store id location and number of
15:44 - employees i think we can
15:46 - kind of force them to be in that order
15:49 - ultimately it doesn't really matter
15:51 - you're never really going to be using
15:53 - these data frames in a way where you're
15:54 - saying
15:55 - i want the second column you're almost
15:57 - always going to be just saying i want
15:58 - the color column
16:00 - so uh you can't you can do things to
16:03 - force the column order
16:04 - but for the most part uh that's kind of
16:07 - unnecessary
16:09 - yeah that was a good catch
16:12 - let's see this works there we go
16:16 - um and it is in store id number employ
16:20 - or location and the number of employees
16:22 - that's the same order as here
16:24 - um that's interesting i wonder if it did
16:26 - it alphabetically for the last year yeah
16:28 - if we go back and look at it hopefully
16:29 - it's up um
16:31 - but yeah good good question john um
16:34 - and yeah uh kurt says because
16:37 - dictionaries don't care about the order
16:38 - so it makes sense that the dictionaries
16:40 - are sorted in alphabetical order right
16:41 - dictionaries don't really have a sense
16:43 - of
16:44 - ordering right in the way that lists do
16:46 - where a list knows what's first second
16:47 - third dictionaries
16:48 - don't really have that structure built
16:50 - into them so you're exactly right uh
16:52 - of course uh it makes sense for them to
16:54 - just kind of default to alpha
16:55 - alphabetical
16:56 - that's really yeah that's good to know
16:59 - and again this is like a a good reason
17:03 - to often to always print your
17:06 - data or take a look at your data and i
17:08 - think in a future exercise we'll see how
17:10 - you can
17:11 - if you have a large data set you can
17:12 - only you can look at a few columns at a
17:15 - time
17:15 - but if you wanted to index the columns
17:18 - based on their index
17:20 - um or if you wanted to pull out a column
17:22 - based on
17:23 - its index then you'd have to know what
17:25 - order they're in so
17:26 - that would be a useful thing to at least
17:29 - be aware of
17:30 - and i didn't notice that the first time
17:32 - i did that so that's great you learn
17:34 - learn something new sophie before we
17:36 - move on actually i want to try something
17:38 - and this is
17:38 - perhaps a tangent but i think one of the
17:41 - reasons why
17:42 - yeah one of the reasons why i like doing
17:43 - these like live shows is because it kind
17:45 - of like shows you
17:46 - if i were taking a codecademy course the
17:48 - kind of stuff that i would
17:50 - be doing and like i really want to
17:51 - encourage people to play around with
17:53 - these workspaces
17:54 - even after they you know pass our checks
17:57 - and so
17:58 - something that i would be interested in
17:59 - is let's say that first list of san
18:02 - diego
18:03 - what if we add a fourth item to the list
18:05 - let's just say like
18:07 - 300 right and so now now we have
18:10 - one row with four columns right we have
18:13 - one
18:14 - san diego 100 300 and then all the other
18:17 - rows only have three columns and i
18:19 - frankly have no idea what's going to
18:20 - happen maybe they'll
18:21 - insert nulls maybe this row won't exist
18:23 - uh
18:24 - so let's see what happens if we try this
18:26 - okay
18:29 - interesting so it just ignored it it
18:32 - looks like
18:32 - in order what if we put a four thing in
18:34 - the column yeah so if we give a fourth
18:37 - column name
18:38 - obviously the 300 should show up and
18:41 - then yeah
18:43 - very nice so if you want to explain what
18:46 - those nands are
18:48 - yeah so nan stands for not a number
18:52 - um and so basically this is
18:55 - missing data actually i'm curious so
18:58 - i usually i work in r where missing data
19:02 - is is identified by like an n a
19:05 - and then usually not a number comes up
19:07 - when
19:09 - let's say you've got two columns and you
19:11 - want to calculate
19:12 - a proportion or something so you divide
19:15 - one by the other and
19:16 - that creates division by zero in some
19:18 - place which
19:19 - you can't do and so usually not a number
19:22 - shows up in
19:23 - r when um when you've got like a
19:27 - a numerical error a numerical error um
19:31 - is nan just like all missing data in
19:34 - python
19:35 - so no i don't think so but again this is
19:37 - something that i would
19:38 - uh so i don't really know the answer to
19:40 - this and so to figure out the answer i
19:42 - would probably experiment with it and
19:43 - i'm guessing that because we put
19:45 - 300 as that value that exists
19:48 - it's like forcing this column to deal
19:50 - with numbers if we change that to a
19:51 - string
19:52 - i bet we get something other than n-a-n
19:55 - yeah oh yeah interesting yeah
19:58 - wow so fun
20:02 - okay uh shall we move on yeah
20:06 - so so that's again that's a good example
20:08 - of one feel free to like play around
20:09 - with these workspaces
20:11 - um it's a really great way to learn what
20:12 - you're dealing with and then
20:14 - two like don't be af like
20:18 - don't be afraid if you don't understand
20:20 - something right it's like more important
20:21 - to know how to deal with it so it's like
20:23 - oh these like
20:24 - mans um popped up and you don't really
20:26 - know why
20:27 - but it's good that you at least know
20:29 - that they're represented as
20:30 - nans rather than nuns um so it's just
20:33 - like the more you
20:34 - experiment the more opportunities you
20:35 - have to like understand what's happening
20:37 - behind the scenes
20:38 - yeah totally and you know after this
20:42 - i probably will go and look up all the
20:45 - different
20:46 - forms of missing data in python to
20:48 - understand them because
20:49 - it's also an important thing to be able
20:51 - to understand like
20:52 - i would also want to know at some point
20:54 - whether this this
20:56 - none if that's being read by python as a
20:59 - string
21:00 - or if like python is or if we're able to
21:03 - recognize that that's really like
21:05 - missing information yeah um
21:08 - we have some yeah so we can go on to the
21:10 - next one sophie but as we as we go on to
21:11 - the next one we have some good questions
21:13 - from siddharth i hope i'm saying that
21:15 - correctly how do we force convert nand
21:16 - values in a data frame to a float or an
21:18 - integer
21:19 - like some columns all at once um i
21:21 - believe we have some exercises later on
21:24 - in codecademy that deal with this
21:26 - concept of like
21:27 - kind of tidying up your data of you have
21:31 - you have a data frame and you have like
21:33 - empty values or you have
21:34 - null values and so there are definitely
21:36 - some functions that you can use to say
21:38 - okay automatically replace all nands
21:40 - with zeros
21:41 - or um i'll replace all nuns with the
21:44 - empty string or something like that
21:46 - obviously there are like consequences
21:47 - for doing that where now you have zeros
21:49 - everywhere and your averages might be
21:50 - all screwed up but like
21:52 - there are ways to to do that sort of
21:54 - thing yeah
21:56 - yeah there's it's a whole separate
21:58 - course on what to do with missing data
22:00 - but
22:00 - um there's definitely functionality you
22:03 - do not know it off the top my head yeah
22:05 - neither do i
22:07 - okay uh so i'm
22:11 - actually going to skip this exercise
22:15 - well okay we'll we'll do it let's talk
22:17 - about the co
22:18 - yeah let's talk about the content and
22:20 - actually sophie i i don't mind so
22:22 - there's a there's an annoying bug in
22:23 - this exercise and i don't mind if you
22:25 - like
22:25 - talk about it and why it's an annoying
22:27 - bug on codecademy right now
22:28 - okay sure um yeah i was bothering alex
22:32 - about this yesterday
22:34 - uh in prepping for this i went through
22:36 - um
22:37 - this exercise so first let me give you
22:40 - the context so
22:41 - this is an exercise about comma
22:43 - separated values
22:45 - or csv files and basically
22:49 - most spreadsheets could be converted to
22:52 - a csv file it's one of the most common
22:54 - data formats that i've seen so if you
22:57 - have like an excel
22:58 - or or a google sheet you can save it as
23:02 - a csv file and then
23:04 - read it into your workspace in python
23:07 - using pandas
23:09 - so this exercise is really just showing
23:12 - you what a csv file looks like and
23:14 - basically
23:15 - you can imagine that this is a data
23:18 - frame we want to create
23:20 - and so if we're going to save this
23:22 - information
23:23 - in a csv file then we need to save it
23:26 - um basically in a file that ends in dot
23:29 - csv
23:30 - and the contents of it is going to be
23:32 - each row will be its own line and all
23:35 - the values in that row will be separated
23:37 - by commas
23:38 - comma separated values and so this
23:42 - exercise is asking
23:43 - you to create a csv file
23:47 - that would have all of this data in it
23:50 - um and so
23:51 - what i did because i was feeling a
23:54 - little bit lazy and i didn't want to
23:55 - type this all out
23:57 - is i copied um i think you guys saw me
24:00 - do that but i'll just do it again so
24:02 - um i i copied this oops
24:06 - um copied that all the contents of that
24:10 - table
24:11 - and pasted it in uh to the uh the csv
24:14 - file
24:15 - and then i went back through and i
24:17 - deleted all the spaces
24:20 - um and replaced them with commas
24:23 - and then and i'll
24:27 - do that really fast and i guess as
24:30 - sophie is doing that i'll say
24:31 - the and watch out i think birthday cake
24:33 - is one entry oh yeah
24:35 - i'll say this exercise is showing what a
24:38 - csv is
24:39 - and then i believe the next exercise is
24:41 - saying like okay let's assume you have
24:42 - your csv file it's ready to go
24:44 - let's show how we load that into python
24:47 - using pandas and create a data frame out
24:48 - of it so this this exercise is really
24:50 - just kind of
24:51 - trying to show what a csv is um and
24:54 - as sophie will show here this is a kind
24:56 - of annoying bug
24:58 - because we i imagine that many people
24:59 - will just copy and paste
25:01 - uh that data in um so
25:04 - it's smelling this um and it turns out
25:08 - that the reason is
25:09 - in this whatever this font is this is
25:12 - like a
25:12 - curly um apostrophe
25:16 - and it's not getting recognized here we
25:19 - want this like straight
25:20 - apostrophe um and so if i delete that
25:24 - and
25:24 - replace it yeah so this is this is like
25:27 - really not important this is just like a
25:29 - nice little
25:30 - like uh how codecademy works for those
25:33 - of you watching this stream
25:34 - where for uh our back-end test that is
25:37 - testing to see if you've done this
25:38 - correctly
25:39 - is we are we're checking to see if your
25:41 - text literally matches
25:43 - the text that we want it to match and we
25:45 - are using one type of apostrophe that's
25:47 - not like this curly apostrophe
25:49 - in the test but if you copy over
25:53 - all of the information from the left
25:55 - pane over here it has the wrong kind of
25:57 - apostrophe
25:58 - it's a very easy thing to fix i think
26:00 - after this uh after this lesson sophie i
26:01 - will like go fix it
26:03 - but uh you know those of you that that
26:05 - use codecad me i'm sure you've run into
26:07 - buggy tests um before and uh
26:10 - sophie and i found one and we'll
26:12 - hopefully go and fix it soon we'll fix
26:14 - it
26:15 - um okay so now we get to
26:18 - some of the fun stuff yes this is this
26:21 - is where
26:22 - those first exercises just gotta
26:26 - get our framework together and now we
26:28 - can actually
26:30 - load in some data yeah court says it's
26:33 - an important message the devil's in the
26:34 - details and yeah you're exactly right
26:36 - like
26:37 - this different kind of apostrophe was
26:39 - really screwing it up
26:41 - so funny yeah it's funny
26:44 - i definitely um you know as i'm going
26:48 - through these exercises
26:50 - i'm having i think the same experience
26:53 - that a lot of our learners
26:54 - feel when you know you get somewhere and
26:56 - then it doesn't pass the test and you
26:58 - just really want that green check mark
27:01 - as the self validation that you know
27:03 - you're doing and so
27:04 - when you find silly little things like
27:06 - that
27:08 - it can be frustrating but yeah it's good
27:10 - to it's good to like one of the benefits
27:12 - of doing these courses is that we get to
27:13 - really like user test them
27:15 - even yeah this course came out probably
27:17 - over a year and a half ago and so
27:19 - it's good to get kind of fresh eyes on
27:21 - it yeah totally
27:24 - um okay so now we're gonna get into
27:27 - some functions to read csv files into
27:30 - your workspace and also to write csv
27:33 - files
27:34 - and so that means if you have a data
27:37 - frame that's already
27:38 - created or you've worked on that data
27:40 - frame in some way you've modified the
27:41 - data
27:43 - created new columns you can always
27:45 - create a csv file
27:46 - again on your computer um so
27:51 - alex do you want to maybe talk about
27:52 - like why that's so powerful that you can
27:56 - you can both read and write csv files
27:59 - yeah sure
28:01 - uh oh did you add did you ask me to talk
28:03 - about it yeah i see yeah
28:04 - so um yeah so reading csv files is
28:08 - is really important because a lot of
28:10 - times that's where your data sources
28:12 - will come from if you look for
28:14 - you know data online the i would say the
28:17 - majority of the time or at least the the
28:19 - format that i'm
28:20 - most comfortable with dealing with is
28:22 - data that comes in a
28:23 - csv file um so they're yeah so that's
28:27 - the importance of reading it is that
28:28 - that's kind of the format or one of the
28:30 - formats that real data exists in a lot
28:32 - of times
28:33 - and then yeah uh being able to write to
28:35 - a csv
28:36 - file is really powerful because
28:40 - we'll be able to do something in python
28:43 - and do something like fairly complicated
28:45 - right let's say you're
28:46 - um i don't even have a good example but
28:49 - let's say
28:49 - you do something fairly complicated in
28:51 - python and you end up with this
28:53 - data that you want to show somebody else
28:56 - but
28:56 - not everybody knows how to use python
28:58 - not everybody could take
29:00 - uh you know take your python script and
29:02 - know how to run it and know how to
29:03 - interpret the results and all that sort
29:05 - of stuff
29:05 - and so it's really powerful to be able
29:07 - to then write to a csv file
29:09 - that you can then give to someone and
29:10 - they could open it up in excel and
29:12 - you know if they're trained to use excel
29:14 - properly they'll be able to do whatever
29:16 - they need to do with it
29:16 - so um yeah writing a csv file is really
29:20 - important for basically just sharing
29:21 - your work
29:22 - yeah yeah a lot of times um
29:25 - when you're working maybe you're working
29:28 - with pandas you're
29:29 - trying to clean some data and so you've
29:31 - got this really messy data set that you
29:33 - have to
29:34 - fix the missing data you have to create
29:36 - some new columns
29:37 - maybe delete some columns delete some
29:39 - rows and so you're making all these
29:41 - edits
29:42 - and sometimes also you just don't want
29:45 - to have
29:45 - all that code in the same place where
29:47 - you're making let's say your
29:49 - visualizations or something else so
29:51 - um a lot of times what i'll do is i'll
29:54 - have a script that does all the cleaning
29:56 - and all the data modification and then
29:59 - i'll write the i'll read in the data
30:02 - i'll modify it
30:03 - write it again and then i'll read that
30:05 - new data set into a new script
30:08 - um that actually does like the data
30:10 - visualization piece and i think
30:12 - that can also help um make your files a
30:16 - little bit cleaner and
30:17 - have clear purposes for everything every
30:20 - set of code that you write um
30:22 - yeah which i think is yeah i do this for
30:23 - my job all the time where again i'm a
30:25 - curriculum developer so i'm
30:26 - one of the people that is are making
30:28 - these lessons and so
30:30 - usually i develop my lessons on my own
30:32 - computer
30:33 - using something like python and i kind
30:35 - of need to like
30:36 - then take the output of that like i'll
30:39 - i'll make a csv file that
30:41 - i then need to like move into codecademy
30:44 - um and so i will you know have my local
30:48 - python script on my computer
30:50 - uh export the csv uh file
30:53 - from python to my computer and then
30:55 - upload that csv file to codecademy um
30:57 - yeah um okay so i have
31:02 - while alex is talking um written
31:05 - a line of code so this is just using the
31:08 - p
31:09 - pd dot read underscore csv function
31:12 - um so the read underscore csv function
31:15 - from pandas
31:16 - i'm giving it the name of my file
31:20 - and so codecademy under the hood just
31:22 - has
31:23 - has already given you this csv file in
31:26 - your workspace
31:27 - i think it's here yeah so sample.csv
31:31 - exists in your in your file structure
31:33 - and so
31:35 - pandas can read it in and i think if
31:37 - you're working on your own computer
31:39 - we have some off platform projects that
31:41 - will show you how to get it
31:43 - set up so that um so that you can
31:46 - read a file in from a different location
31:49 - i wonder
31:50 - if alex froze can anyone in the chat
31:54 - just let me know that you can still hear
31:56 - me
31:58 - since i do not see alex
32:03 - i'm gonna keep talking for now but
32:05 - hopefully somebody can let me know that
32:07 - we are
32:08 - still online um
32:12 - okay uh so
32:16 - let's go ahead and look at this
32:19 - uh still haven't seen
32:23 - anyone okay
32:26 - i'm gonna keep going but let me know
32:29 - okay yes you can see me
32:30 - great thank you um all right perfect
32:34 - thanks
32:35 - uh okay so we're gonna take a look at
32:38 - this data frame that we just loaded
32:40 - um so this looks just like what we saw
32:43 - in the other
32:44 - exercises but now we've been able to
32:46 - load the csv file
32:49 - from our workspace into python and we've
32:54 - called it df um short for a data frame i
32:57 - think a lot of times when you're just
32:58 - working
32:59 - with a random data set and you want to
33:02 - save it as something
33:03 - quickly people try to pick like a short
33:06 - name that they can
33:07 - use really really quickly and df is um
33:10 - probably the most common
33:11 - one that people kind of come up with
33:15 - you're back sorry no you're good
33:18 - i was like am i did i internet or did
33:22 - you but it seems like oh yeah
33:26 - yeah john david says sorry the slow chat
33:28 - makes it tough to respond sometimes
33:30 - yeah yeah thank you guys you guys are
33:32 - the best sorry everyone i just moved uh
33:35 - locations and this is the first time
33:36 - testing out one of these streams on uh
33:38 - the the new building that i'm in so
33:40 - internet might be uh
33:42 - might be a tad touchy no worries um so i
33:45 - was just saying
33:46 - we saved this as something called df and
33:48 - then we were able to print it in our
33:50 - workspace
33:51 - and it looks pretty similar to what we
33:53 - saw before we noticed that that same
33:55 - thing is happening here where we've got
33:57 - the numbers
33:58 - um 0 through 4 kind of automatically
34:01 - listed here and i can pretty much
34:03 - guarantee you those are not
34:04 - in the actual csv file i wonder if we
34:07 - can kind of see
34:08 - oh yeah so you can check so those
34:10 - numbers were not in that csv file but
34:13 - just like when we were creating our
34:16 - data frame from a list of lists or a
34:19 - dictionary
34:20 - we're still getting these um indices and
34:23 - so
34:23 - we can come back to that uh when we get
34:26 - a little bit further along but i think
34:27 - it's
34:28 - again useful to know that those are
34:30 - there
34:31 - okay nice um all right let
34:35 - us go to the next one
34:38 - um okay
34:41 - so this is like this
34:45 - this lessons title inspect a data frame
34:48 - really is probably
34:51 - the most important thing that you need
34:53 - to know how to do
34:55 - in order to do data science like
34:58 - looking at your data and ex inspecting
35:01 - it to understand what's going on
35:03 - is by far the most important step
35:06 - before you do any sort of visualization
35:09 - or anything else
35:10 - like any sort of cleaning um that's what
35:13 - you
35:14 - you need to do to get started yeah in
35:17 - most in most of our curriculum this is
35:18 - like kind of the first step that we'll
35:20 - always have you do in a new lesson of
35:21 - like let's just get familiar with the
35:22 - data that we're working with
35:25 - guys my mom is watching this and she
35:27 - just texted me i can still see you
35:33 - thanks for summer
35:36 - um okay so uh
35:40 - let's take a look so we've got a couple
35:42 - of functions that are going to help us
35:45 - take a look at this data set so i think
35:46 - i mentioned this when we first started
35:48 - um this dot head
35:51 - would you call this a method or a
35:53 - function this is a good
35:55 - question i probably against my better
35:58 - judgment use those
35:59 - terms pretty interchangeably technically
36:01 - a method is
36:02 - like belongs to a certain class and so
36:06 - uh i bet you could make the argument
36:09 - that
36:10 - this that head it belongs to the class
36:12 - of data frame
36:14 - meaning you can like call the head
36:15 - method on data frames
36:17 - um so yeah i think method works but
36:21 - uh i know in codecademy at least we
36:23 - might use those
36:24 - somewhat interchangeably when they have
36:27 - strict definitions
36:28 - um but so for me that's kind of
36:31 - something that i shrug
36:32 - shrug my shoulders on where uh it's
36:35 - important to understand like the
36:36 - concept of these things and like these
36:38 - precise language is like
36:40 - not super important um okay especially
36:43 - yeah
36:46 - i never so i think the hardest one of
36:49 - the hardest
36:50 - steps for me and kind of getting used to
36:53 - doing some of the data analysis
36:55 - stuff that we're doing now in python is
36:57 - that
36:58 - um coming from an r background i
37:01 - was not really used to this idea of like
37:04 - objects and methods and
37:05 - uh things like that so that is a little
37:08 - bit new for me
37:11 - i was basically the reverse where i i
37:13 - learned programming in python so i'm
37:15 - super
37:16 - familiar with python and then i recently
37:17 - wrote our courses for codecademy and it
37:20 - was my first time using r
37:21 - and yeah it's definitely very different
37:24 - yeah okay so we're trying to
37:29 - do this the other thing that surprises
37:31 - me sometimes about
37:32 - or that confuses me i think a little bit
37:34 - about methods and maybe you can
37:36 - clarify this maybe other people have the
37:38 - same question
37:39 - is that that sometimes when you
37:43 - use a method it like changes the object
37:47 - directly and then sometimes you have to
37:49 - like
37:50 - re-save the object uh in order to
37:53 - keep that change yeah so
37:56 - we'll see that come up and it really
37:58 - happens
38:00 - there's no strict like it can't always
38:03 - do this or this always happens it really
38:05 - depends on the method but yeah
38:06 - i think you'll see us talking about this
38:07 - of like it happens in place
38:10 - versus it like returns a value and i
38:13 - think that this comes up
38:14 - in um
38:18 - like adding to us uh an array
38:21 - where you can do you don't have to do
38:23 - like let's say you have an array named a
38:25 - you don't have to do a equals a dot add
38:28 - you know whatever number you can just do
38:30 - a dot add number
38:31 - and it does it in place it automatically
38:33 - overrides what it used to store there
38:34 - and so
38:35 - there's no strict rule as to like which
38:37 - ones do it in place and which ones don't
38:40 - interesting yeah it's something that
38:42 - like
38:43 - it's a place where i feel like i
38:46 - commonly make
38:46 - mistakes in python where i'm like why
38:49 - isn't my data frame updated and then
38:51 - i realized it's because i didn't resave
38:53 - it and i needed to
38:55 - yeah as as lisa who i know is in chat
38:57 - said earlier just like
38:58 - print is your friend right if you're
39:00 - ever curious about like what you're even
39:01 - working with just
39:02 - just print it out yes okay so
39:05 - i have um loaded this
39:08 - data frame called imdb.csv into
39:12 - a data frame called df using the read
39:14 - underscore csv function
39:17 - and now i guess i'll do that first step
39:22 - and now let's say that we want to see
39:26 - some of the rows of that data
39:28 - that data frame but we're not sure how
39:29 - many rows there are and so
39:31 - you know if there's a million rows we
39:33 - don't want to try to print those all
39:35 - out at once so we can use this
39:39 - dot head method or function
39:44 - or whatever you would like to call it
39:48 - to see the first few rows
39:51 - and so you'll see them over here
39:55 - and that gave us uh
39:58 - five rows um and then you can always
40:01 - i think this was in the explanation or
40:03 - in the narrative
40:04 - as well but you can always change the
40:07 - input
40:08 - to a different number so if we wanted 10
40:11 - rows we could put a 10 there
40:13 - i think five is just the default so um
40:17 - oh it's yelling at me because i didn't
40:18 - do the next step
40:20 - um so now we've got 10 rows
40:23 - okay and then we can also use
40:27 - uh the info method to
40:30 - get some more info about our data frame
40:34 - and so i'm going to do that down here
40:38 - um you'll notice so when we print
40:42 - the um the first however many rows it
40:45 - prints over here
40:46 - uh alex do you want to explain like
40:48 - what's going on here
40:49 - yeah i was gonna do that in a second uh
40:51 - let's do info first and then
40:53 - we can talk about it nice cool
40:57 - so yeah so down here you can see the
40:59 - output of df.info
41:02 - and so it's telling us a little bit
41:03 - about the columns it tells us what each
41:05 - of the columns
41:06 - are how many values are in there
41:10 - and how many are not null i assume that
41:13 - it tells you if there's a null value in
41:15 - there how many
41:16 - nulls there are interesting um
41:20 - yeah i wish there was an easy way for us
41:21 - to like add a row with the null value i
41:22 - don't know that syntax off the top of my
41:24 - head
41:24 - um yeah but that's something that we
41:27 - could
41:28 - uh get trying to play around with um on
41:31 - thursday
41:31 - for sure yeah and that tells you the
41:34 - type as well
41:35 - yeah um so yeah a couple of questions
41:39 - there are a couple of things to go over
41:40 - one is that lisa in chat is asking about
41:42 - the tail function
41:43 - um so sophie as i talked you want to
41:45 - like experiment with tails see if you
41:47 - can give a tail
41:48 - a number see what that does um
41:51 - yeah and then the distinction between
41:53 - these kind of two panels that are
41:54 - showing different things one is
41:56 - this uh panel on the right hand side
41:59 - that is showing
42:00 - our data frames kind of nicely printed
42:02 - out and then the other is this
42:04 - black panel with white text so the one
42:06 - on the right
42:07 - is kind of our fancy like codecademy
42:10 - rendering
42:11 - of the output where you'll see that at
42:13 - the top of all these files we import
42:14 - codecademy lib
42:16 - again this is like kind of behind the
42:18 - scenes stuff that you don't really have
42:19 - to worry about that much but
42:20 - that is the thing that will take the
42:23 - output
42:23 - and transform it into this like very
42:26 - pretty
42:26 - you know table that you can scroll and
42:29 - spaced out
42:30 - secretly this is like an html file and
42:32 - uh
42:33 - uh yeah it's just an html file um
42:37 - but if you're doing this on your own
42:38 - computer you're not going to have a nice
42:40 - pretty printout like that
42:42 - you're just going to have your terminal
42:44 - which will look something like this
42:45 - um so when you print out a data frame
42:48 - just locally using your terminal
42:50 - that's the kind of thing that you'll see
42:54 - yeah and this is part of the reason why
42:56 - i like um
42:58 - jupiter notebooks so much is that uh
43:01 - jupiter notebooks will do this for you
43:03 - they will make it
43:04 - make these things look nice but also
43:06 - print out
43:07 - um your typical like
43:10 - code results yeah terminal results
43:14 - terminal results yeah so it'll it'll
43:16 - kind of format everything nicely and
43:19 - as somebody with a little bit of ocd
43:23 - that is something that i appreciate yeah
43:26 - um
43:26 - okay so so what did tale do there as a
43:29 - oh yeah yeah
43:30 - so tail gives you the last five rows
43:33 - cool um or however many rows you want
43:36 - yeah yeah that was a good good point
43:39 - with someone with
43:40 - i don't know if it's ocd but i it's
43:41 - someone who likes movies i'm trying to
43:43 - figure out what this list of movies is
43:44 - it might be
43:46 - highest grossing of all time but i don't
43:48 - know maybe we say somewhere in the
43:49 - narrative
43:50 - what you're saying yeah cool
43:54 - yeah oh and then the other thing that i
43:56 - think um
43:58 - i think we mentioned this in our last
44:01 - live stream
44:02 - um but i think it's not covered so much
44:05 - in
44:05 - this lesson but i'm just going to show
44:08 - really fast
44:09 - another thing that's and this is maybe
44:12 - to add on to the point about
44:13 - it's important to know what kind of
44:14 - object you have
44:16 - because it alters the way that you can
44:18 - work with this information
44:21 - is that now that we have this in a data
44:23 - frame
44:24 - uh each of these columns is
44:27 - going to give us some different behavior
44:29 - than what we saw in lists
44:31 - and dictionaries so now for example
44:34 - if i wanted to like add a number to
44:39 - everything in this column i guess i
44:40 - shouldn't do this until after we can
44:42 - pull out a column
44:43 - but um i could simultaneously add a
44:46 - number to every value in this column so
44:49 - all of a sudden these data frames are
44:51 - going to be operating in a different way
44:54 - than our
44:54 - lists and dictionaries were operating
44:56 - and again in a way that's like probably
44:58 - easier if you caught the last session
44:59 - that sophie and i ran
45:00 - we were showing like these really kind
45:01 - of confusing list comprehensions which
45:04 - are trying to add you know five to every
45:06 - item in the list and it looks really
45:07 - ugly
45:08 - and again the point of data frames is
45:10 - that it makes it super easy to do
45:12 - you can essentially just say get your
45:13 - column and plus five and it does it
45:16 - automatically
45:17 - yeah exactly okay let's see what we've
45:20 - got now so
45:21 - this section is now getting into
45:25 - uh selecting columns and i think this is
45:29 - probably again a very very important
45:33 - thing to know how to do
45:35 - and one of the powers like alex
45:38 - mentioned of
45:39 - pandas because now we can kind of pull
45:41 - out rows and columns of our data
45:43 - in a much simpler way than we could have
45:45 - with
45:46 - a list or a dictionary um okay so
45:49 - let's see um
45:53 - we've got this data frame i'm gonna go
45:55 - ahead
45:56 - and um and just print
45:59 - it out um so we can see actually
46:02 - now it looks like we've got a terminal
46:05 - yeah
46:06 - so we can see what this looks like in a
46:08 - terminal
46:11 - we don't need that import codecademy lab
46:13 - at the top of this uh
46:14 - now that's another little thing that we
46:16 - can go back and fix eventually
46:19 - oh yeah i like to i've been working on
46:22 - this on my own and pulling this window
46:25 - really wide so you can see all of this
46:27 - data
46:28 - but now you can see yeah so it's got all
46:31 - the same information
46:32 - it just doesn't look quite as fancy um
46:35 - all right so
46:36 - but it's giving me this thing because
46:38 - it's telling me
46:39 - we didn't do the exercise oh yeah
46:42 - okay so it's asking me to create a
46:45 - variable called clinic underscore
46:47 - north that contains only the data from
46:50 - clinic underscore column clinic
46:53 - underscore north so basically
46:54 - we're going to try to pull this column
46:57 - out of our data frame
46:59 - so again this is really the first
47:00 - opportunity that we've that we're really
47:01 - seeing the like power of
47:03 - uh of these data frames where this is
47:05 - something that would be
47:06 - a real pain in the butt to do in basic
47:08 - python but
47:09 - super easy here yeah so okay so
47:13 - we're gonna just use this syntax so um
47:16 - the name
47:16 - of the of the data frame and then the
47:20 - name of the
47:21 - column that we want in quotes so here
47:23 - we've got
47:24 - clinic underscore north
47:27 - and we're going to save that as
47:31 - what does it want me to save it as
47:33 - clinic
47:35 - underscore north um
47:39 - and run and now it looks good
47:42 - um i think there's a point that gets
47:46 - made earlier in this
47:47 - it says um or maybe it's in the next
47:51 - one about oh it's in the next
47:55 - one but um saying that you can pull
47:59 - out a column using this other syntax as
48:03 - well so like
48:04 - the the name of the data frame dot the
48:07 - column name
48:08 - oh it is here sorry and it says if it
48:11 - um doesn't contain spaces or special
48:14 - characters
48:15 - um which makes some sense so one of the
48:17 - things in the spirit of kind of playing
48:19 - with this workspace
48:21 - that we might want to see is what
48:23 - happens if
48:24 - some of our column names have spaces
48:27 - so i'm going to try that i'm going to
48:32 - put a space
48:33 - in here and then try
48:37 - to so we were able to do this but now
48:39 - i'm going to say
48:41 - like print df dot
48:46 - so let's first print clinic north
48:49 - because
48:50 - we never printed that out to actually
48:51 - like show that it exists and look at
48:52 - that
48:53 - that column on its own that's a good
48:55 - point but then yeah i love this
48:56 - idea of trying to add this space oh yeah
49:00 - and also sorry the second part of this
49:03 - uh exercise also has you print the type
49:08 - of um object that this is which i think
49:11 - is
49:12 - also very valuable um because then we
49:16 - see
49:18 - so oh good question from corey in the
49:21 - chat i see that
49:22 - we'll touch on that as well so here's
49:24 - the um
49:25 - the north column that we pulled out
49:28 - and then you'll see that um
49:32 - that this is now saved as a panda series
49:36 - um and the whole data frame is
49:39 - if we do like print
49:43 - type df that's going to tell us that our
49:47 - data frame
49:49 - is a is a data frame but now that we've
49:53 - pulled out a single
49:54 - column it's become something called a
49:56 - series so
49:57 - we noticed that when we pulled out the
49:59 - column the type of data
50:01 - changed which is relevant to now well
50:03 - yeah and that's relevant because it's
50:05 - like the things that you can do
50:06 - with those different data types are
50:08 - different so like obviously
50:10 - a data frame it understands what this
50:12 - bracket notation is
50:13 - where if you say the data frame name and
50:16 - then with the bracket
50:17 - it's going to try to grab that column if
50:19 - you try to do that with a series
50:21 - i think it will just error i don't i
50:22 - don't know what the expected behavior
50:24 - for that is but
50:25 - basically there are different things
50:26 - that you can do with series different
50:27 - things that you can do with data frames
50:28 - um this is something that i was chatting
50:31 - with john in the chat about where you
50:32 - can kind of think of a series as a
50:34 - vector
50:34 - um sophie that's where you're like yeah
50:37 - vector edition stuff is going to come
50:38 - into play
50:40 - yeah john just said that yeah you can
50:41 - think of a series as a vector in a data
50:43 - frame as a matrix that's exactly right
50:45 - totally and i saw there was this
50:47 - question about the double
50:49 - brackets versus single brackets and i
50:51 - actually think that that changes the
50:53 - type
50:54 - so i think if i put the double brackets
50:57 - and then we print here i'm going to
50:59 - delete this
51:01 - i'm going to delete this to make
51:04 - ourselves a little more space
51:07 - i think that what happens if i run this
51:12 - yeah so now notice that the type of
51:15 - clinic
51:15 - underscore north is a data frame
51:17 - interesting even though it's still
51:19 - only one column it looks like i just
51:21 - read this because i was looking
51:23 - this up the other day as i was going
51:25 - through this x
51:26 - exercise um but yeah so
51:29 - the double brackets keeps it as a data
51:32 - frame
51:33 - um versus the single brackets turns it
51:35 - into a series
51:36 - and so this is relevant at this point we
51:39 - only have eight minutes left so i think
51:40 - we should like kind of abandon the rest
51:41 - of the lesson and just like
51:42 - continue talking about the points um
51:45 - all right anything you want to say about
51:47 - this yeah so this is
51:49 - this is relevant because we hear you
51:50 - alex oh no
51:53 - shoot i'll leave and come back
51:56 - okay all right i'll keep moving
51:59 - hopefully you guys can hear me um okay
52:03 - so i'm gonna go to the next
52:06 - exercise and we'll start selecting now
52:10 - multiple columns so in the last one we
52:12 - only
52:13 - got one column at a time now we're gonna
52:16 - pull
52:16 - multiple columns out of our data frame
52:20 - so and this kind of goes back to this
52:22 - double brackets for single brackets
52:25 - situation so
52:27 - basically if you're going to take
52:29 - multiple columns
52:30 - out of a data frame then we're gonna
52:32 - pass we're gonna have to pass
52:34 - a list of the column names in order to
52:37 - extract those
52:39 - um and just in the same way that we were
52:41 - talking about how
52:42 - the single column became a series it was
52:45 - really because
52:46 - and i know maybe not everyone is
52:48 - familiar with the word
52:49 - vector but a vector you can think of as
52:54 - like a single string of values and so
52:56 - when we pulled out one column we just
52:58 - had one string of values
53:01 - um versus if we have if we're taking
53:04 - multiple columns
53:06 - then we can't really have that turn into
53:09 - a series anyway
53:10 - are you back alex yeah sophie can you
53:12 - hear me oh i can't
53:14 - hear you i think it's on your end is
53:16 - that my problem or you are
53:22 - see people in chat were saying that they
53:24 - could hear me yeah
53:25 - before so maybe uh
53:29 - i'm sorry guys
53:33 - am i muted nope
53:38 - huh you can hear both of me
53:42 - both of us um
53:47 - um we only have like five minutes left
53:49 - and so i'm gonna let sophie just like
53:50 - close out the show
53:51 - and um my mom is also texting me to let
53:55 - me know that
53:56 - you can hear me okay uh
54:01 - i guess
54:06 - i will
54:13 - i don't know
54:16 - sorry everyone um oh that worked
54:20 - oh hey now can you still hear me yeah
54:24 - okay maybe your headphones died i've
54:26 - died okay
54:27 - i'm saying we're basically out of time
54:29 - so i want to plug all of the
54:31 - events that we have going on uh in the
54:33 - future i also want to
54:35 - thank everyone in chat this was a really
54:37 - awesome chat today
54:38 - um john david roca you asked great
54:40 - questions
54:41 - uh courts this is the first time i
54:42 - recognized your name in here so thank
54:44 - you for joining
54:45 - lisa as always you're awesome for
54:46 - checking these out um
54:48 - corey nice to see you i think i've seen
54:50 - you before corey um
54:52 - so thank you all for coming i
54:56 - really really appreciate it honestly
54:57 - it's like these are the like sophie and
54:59 - i love doing these things and chatting
55:00 - with you folks
55:01 - and um we're always hoping to get more
55:04 - and more people watching so i am
55:05 - very appreciative for all of you that
55:07 - you know hang out with us for an hour
55:09 - um i i wanted to plug the thing that we
55:12 - have on thursday
55:14 - so if we um
55:17 - let's see so the thing that we have on
55:18 - thursday if you're a pro member and go
55:20 - to the events page
55:22 - you should see an event on thursday that
55:26 - sophie and i are going to be hosting um
55:28 - it isn't stream to youtube
55:30 - it's just a zoom call that you register
55:32 - for and then you basically can get on
55:33 - the call with us
55:34 - and talk through this stuff um so that's
55:36 - when we'll have more time to do kind of
55:39 - deeper dives into all of this stuff um
55:42 - john if you can make it i would love to
55:43 - talk like more matrix math
55:45 - stuff with you um i think a potential
55:48 - plan for the day
55:49 - might be to tie all of this to data
55:52 - visualization in some way
55:53 - where like this entire session really
55:55 - has had nothing to do with data
55:57 - visualization
55:57 - so taking a little bit of time to tie
56:00 - these data frames to a data
56:01 - visualization
56:02 - um so yeah so if you go to the events
56:06 - page
56:06 - which is that and you're a pro member
56:09 - you should see an event
56:10 - for thursday the 23rd which sophie and i
56:13 - will be running
56:14 - yep cool right here sophie i'm sorry i
56:17 - feel like i just took over
56:18 - uh no that looks great i'm sorry that
56:22 - my uh technology was not fully on my
56:26 - side
56:26 - or either of our sites right now but um
56:30 - but this was really really fun
56:31 - like alex said this is like one of the
56:33 - highlights of my week
56:35 - um i love getting to talk to all of you
56:37 - and it's awesome that people were
56:39 - engaging with us and asking questions in
56:41 - the chat that always is a lot of fun and
56:43 - i definitely learned some things myself
56:45 - in this and i have some things to look
56:47 - into
56:47 - as well um so i'm really excited and i
56:50 - hope people show up
56:51 - on thursday to keep talking about this
56:53 - because it's always more fun if people
56:55 - have
56:55 - more questions and there's more to be
56:58 - learned so
56:59 - yeah um john david you asked will the
57:01 - call be saved for viewing offline i'm
57:03 - gonna be out of town but maybe i can
57:04 - join zoom remotely
57:05 - on my cell phone i can try to set it up
57:08 - so it's
57:09 - um recorded um after the fact
57:12 - um in fact i'll do that i don't know
57:14 - exactly how that works i haven't like
57:17 - dove that deep into the the zoom stuff
57:18 - yet but i can try to set that up
57:21 - and then as always um uh you know
57:24 - feel free to reach out to us i always
57:26 - post my email on this stuff um
57:28 - i'm a koontz at
57:32 - codecademy.com
57:34 - um yeah again feel free to shoot me an
57:36 - email about any of this stuff if you
57:37 - have feedback
57:38 - um we'd love to hear it if you would
57:39 - like other things for us to be doing on
57:41 - these sessions i would love to hear it
57:42 - so
57:43 - um yeah love to it's fun building
57:46 - these kind of shows with you all yeah
57:48 - and feel free
57:49 - to email me as well um
57:52 - mine is sophie academy.com
57:56 - yeah cool great all right
57:59 - i will stop the share and
58:03 - i don't know how to how do i turn it off
58:05 - yeah if you just let me find

Cleaned transcript:

all right hi everybody um i hope that everybody is doing well and i'm really excited to be here with alex um i'm sophie and we're going to be taking you through some um through a lesson on data manipulation with pandas today um but before we get started i'm just gonna kind of walk through um the context of where we're at in this whole series um and so feel free as we're getting started to just say hello on the chat introduce yourself let us know that everything is going is copacetic because this is my first time live streaming directly so in case there are any issues i want to know yeah i i know we're right now we're streaming on facebook and uh twitter and youtube and i think also twitch although not very many people know about the existence of our twitch channel um but sophie and i will predominantly be looking at the youtube chat so um if you're watching on any of those other platforms um you could come find us on youtube and chat with us and then yeah if you're watching the recorded version of this um we have been doing these live streams every tuesday at 1 pm eastern time so if you're catching the recording version we would love to see you during a live version yeah um so if you want to learn more about the events that are going on you can always come to the codecademy.com events page and this is our event today and this is our event on thursday when we're going to have a a pro event where you can come and ask questions more of like an open office hours event um and today we are continuing our visualization with or visualize data with python uh path and um so last week uh zoe and jamie went through um some of this earlier content i think they were where were they last week yeah so i think they did the kind of second series of uh matplotlib lessons which matplotlib is the kind of standard python graphing library and i think yeah so jamie and sophie or sorry jamie and zoe did uh a lesson on matplotlib and then i think on the thursday session for pro members they dove into the kind of cumulative project we have there right so today we're going to be going through this lesson on data manipulation with pandas um creating loading and selecting data with pandas so if you want to follow along i think the link is on youtube but you can also find it on codecademy directly and just to give a little context on why we're kind of breaking from our content on matplotlib and actual graphing and now getting into this kind of data manipulation section is that in the real world a lot of the time you'll have data that you're collecting uh either you know in a google sheet or a excel file and then you want to be able to import that data into python so that you can actually create visualizations of that and so the the content that we've gone through so far has been really focused on using some builtin data structures like lists to build these uh visuals but now we're going to kind of talk about the the step that precedes that where you need to actually be able to load your data in and then and get it in a form where you can then use those plotting libraries to actually make the visualizations of the data that you have um do you have anything to add to alex no i i think we should get into it like you said like before the all the visualization stuff that we've done so far it's like kind of been demo examples of like oh we created a list of like five numbers and let's draw five bar graph or you know five bars and a bar chart to represent those numbers and so we haven't really been able to work with like real data in a meaningful way yet and so this lesson is kind of like the intro to that of like okay i have this giant spreadsheet of data how do i even get that into python so i can eventually get turn it into a graph and so that's what this lesson is talking about of using pandas which is the thing that lets you get all this data into python yeah all right so uh to get started we're going to have to load the pandas library into our workspace um and that's really the purpose of this initial exercise here um we talked about this a little bit the last time we were on um but alex do you want to talk for a second about why we're importing pandas as pd yeah so in python and most programming languages whenever you import a library or a module into the code that you're working with you'll often have to like reference that library whenever you use any of its functionality so for example the pandas library we're going to be using i think the function yeah we can even see over in the right hand side side we're going to be using read csv that function a lot of times and so um we in order to use that we need to say what library is going to come from and it comes from the pandas library so every time we could type uh you know pandas dot read csv basically meaning use the read csv function from the pandas library but because we're gonna have to do that again and again and again it's like typical to abbreviate it as pd or you'll see other libraries do this um uh what is the last time we were loading numpy as np um yeah and matplotlib we usually end up loading it as like plt and so it's just kind of a nice little trick that you can do to avoid having to type out the same long library name every single time yeah exactly so um so we'll just take a look at this first page for a second because i think it's just helpful to see this visual of some data really quickly to get a sense of what pandas is going to allow us to do um and so if you've been following the series you've seen lists you might have also seen dictionaries in python but pandas is really what's going to enable us to load data in a tabular form and this might look really similar to what you have seen if you've ever opened an excel file or a google doc or a google sheet you you'll often see data that's stored in this way and you can see that we have this example has some rows each one references a person and it has some different columns with information it looks like maybe these are sales um so people who made a sale or made a purchase of shoes and that's being collected in this in this data frame and so we're going to walk through these steps in a moment but you can see that pandas allows us to read in this data that's in this new format that we haven't necessarily been able to create with the existing structures we've gone through yeah and furthermore it's like you could do all of this stuff using just kind of base python right you could have like a list of lists that could create this twodimensional spreadsheet like formula but it kind of becomes a huge pain in the butt to like learn how to like navigate that and so one of the strengths of pandas that you'll see is that we can like very easily access stuff by uh column name so we might be able to say like okay get me the give me just the email column that would be way harder to do if we were just using lists for example yeah i actually think in one of the future exercises you're going to see how we can take a list of lists or we can take a dictionary and turn that into a data frame for just that reason there's also some other things that make it really cool and i'll try to demo those as we go yeah we have a good question the chat from quartz three i don't know how to exactly say that but uh yeah so you can import pandas as p and yeah you can totally do that the the thing that comes after as you can kind of think of it as like you're defining a variable name for the library where you can make it whatever you want um so you could do p you could do pd um yeah whatever all right alex we've got a little a slight issue let's see does not seem to be loading let's just give it a refresh see what happens there we go okay when in doubt refresh got it um okay so this first exercise is just kind of walking us through a very basic uh data frame that we can create with just i think this is a dictionary right yes exactly yeah um and so if you look at this example code they've kind of we've kind of walked you through creating this very simple data frame it's got uh three columns name address and age and this structure so if you just look at this piece that's inside kind of the um the parentheses and same thing here if you look at this piece inside the parenthesis this is a python dictionary but we're going to now use a a pandas function to turn it into this new structure which we're calling a data frame so um we can walk through i think this exercise is just asking us to add some more data to this um to this data frame yes this first one is saying okay i can define my columns i can give columns the key name in the dictionary and then the value will be a list of the things that will go in that column these first couple of exercises in this lesson are going to be showing basically how to just create the data frames to begin with and then the rest are showing okay what can we do now that the data frame exists and uh i think that uh this is probably one of the more unusual ways to create a data frame i think probably the most typical one is just loading from a csv file which is a file that you um a file that you might be familiar with if you're if you've worked in excel or spreadsheets um most of the times when i use pandas i'm just loading from a csv file i don't really do this work of like putting all my data in by hand and then turning it into a data frame um but it's good to know that you have the option to do so yeah i think a lot of times one of the things and i should preface this by telling you all that my prefer or my expert languages are and i'm still honestly learning python so this is a learning experience for all of us um but i think one of the things that can happen a lot is sometimes the functions that you want to use can only take certain types of objects so knowing what object type you have and then what you can turn that into in order to get different types of functions from different libraries to work is kind of a useful thing it's always helpful to know what you have and what you can turn it into yeah yeah okay so i think i got this so we added two more columns here where we added a product name column and a color column um little details in here where it's like we're creating a dictionary so you'll notice that um there's a comma after you know after the list of product ids there's a comma and then a comma after the list of product names so kind of this is the way that you create a dictionary in python is that you have the key which is a string and then a colon and then the value which is a list in this case and then that pattern repeated between commas for every item in your dictionary exactly and then you can see i've printed this data frame that i created and so we've got our three uh columns color product id and product name and then you can also see um i didn't actually put this in anywhere but you can see that it's automatically kind of labeled our rows with indices so from zero to three and that's something that i'll talk about a little bit later too or we'll talk about once we get into um some of the indexing stuff in the future exercises but i think it's it's kind of interesting to notice that something is existing here and we didn't even put that in yeah good point yeah another good question in the youtube chat from john david rocha he asks so we mentioned that uh the naming conventions of using pandas as pd is pretty standard and he's wondering how universal is this i would say it's pretty universal john um if you look at like the pandas documentation you'll see that all over the documentation they do the exact same thing where they imported as pd yeah i have taken numerous online classes in pandas and numpy and all of them um have the same convention so i i haven't actually seen it not abbreviated as pd i think yeah me too all right so this next exercise is also creating a data frame so you'll notice we're actually using the exact same function as we were using in the previous exercise so go back for a second so you can see that this pd.data frame x or pd.data frame function is going to do different things i don't know why my my computer is a little slow so this same function can take different inputs depending on what you what you want to turn into a data frame so it can kind of figure out what you want based on what you put in um okay so here we've got a list of lists that we're going to turn into a data frame um and so we've got again uh three columns or sorry three now we've got in each of these lists actually the columns are kind of you can almost see them by looking vertically so uh in each row of our or each list that we're including in here we're actually including um multiple columns of data so this is really our first row of our data frame second row third row etc and then we've got um our column names are another input to this function yeah the syntax is a little bit tricky there where it's like a list of lists and then a comma and then another list so the syntax is a little bit tricky there i think one thing that to highlight here which is another question that john rocca uh said in the chat where he was asking in the last exercise the column or the color column ended up as the first column in the in the data frame even though in our dictionary it maybe wasn't the first and so basically this question is like why did that happen and i think that you'll see um using this method i believe the columns are going to show up um in the order in which we put them in in the columns list here so if the columns are um that go into this list are going to be uh whatever these are store location or store id location and number of employees i think we can kind of force them to be in that order ultimately it doesn't really matter you're never really going to be using these data frames in a way where you're saying i want the second column you're almost always going to be just saying i want the color column so uh you can't you can do things to force the column order but for the most part uh that's kind of unnecessary yeah that was a good catch let's see this works there we go um and it is in store id number employ or location and the number of employees that's the same order as here um that's interesting i wonder if it did it alphabetically for the last year yeah if we go back and look at it hopefully it's up um but yeah good good question john um and yeah uh kurt says because dictionaries don't care about the order so it makes sense that the dictionaries are sorted in alphabetical order right dictionaries don't really have a sense of ordering right in the way that lists do where a list knows what's first second third dictionaries don't really have that structure built into them so you're exactly right uh of course uh it makes sense for them to just kind of default to alpha alphabetical that's really yeah that's good to know and again this is like a a good reason to often to always print your data or take a look at your data and i think in a future exercise we'll see how you can if you have a large data set you can only you can look at a few columns at a time but if you wanted to index the columns based on their index um or if you wanted to pull out a column based on its index then you'd have to know what order they're in so that would be a useful thing to at least be aware of and i didn't notice that the first time i did that so that's great you learn learn something new sophie before we move on actually i want to try something and this is perhaps a tangent but i think one of the reasons why yeah one of the reasons why i like doing these like live shows is because it kind of like shows you if i were taking a codecademy course the kind of stuff that i would be doing and like i really want to encourage people to play around with these workspaces even after they you know pass our checks and so something that i would be interested in is let's say that first list of san diego what if we add a fourth item to the list let's just say like 300 right and so now now we have one row with four columns right we have one san diego 100 300 and then all the other rows only have three columns and i frankly have no idea what's going to happen maybe they'll insert nulls maybe this row won't exist uh so let's see what happens if we try this okay interesting so it just ignored it it looks like in order what if we put a four thing in the column yeah so if we give a fourth column name obviously the 300 should show up and then yeah very nice so if you want to explain what those nands are yeah so nan stands for not a number um and so basically this is missing data actually i'm curious so i usually i work in r where missing data is is identified by like an n a and then usually not a number comes up when let's say you've got two columns and you want to calculate a proportion or something so you divide one by the other and that creates division by zero in some place which you can't do and so usually not a number shows up in r when um when you've got like a a numerical error a numerical error um is nan just like all missing data in python so no i don't think so but again this is something that i would uh so i don't really know the answer to this and so to figure out the answer i would probably experiment with it and i'm guessing that because we put 300 as that value that exists it's like forcing this column to deal with numbers if we change that to a string i bet we get something other than nan yeah oh yeah interesting yeah wow so fun okay uh shall we move on yeah so so that's again that's a good example of one feel free to like play around with these workspaces um it's a really great way to learn what you're dealing with and then two like don't be af like don't be afraid if you don't understand something right it's like more important to know how to deal with it so it's like oh these like mans um popped up and you don't really know why but it's good that you at least know that they're represented as nans rather than nuns um so it's just like the more you experiment the more opportunities you have to like understand what's happening behind the scenes yeah totally and you know after this i probably will go and look up all the different forms of missing data in python to understand them because it's also an important thing to be able to understand like i would also want to know at some point whether this this none if that's being read by python as a string or if like python is or if we're able to recognize that that's really like missing information yeah um we have some yeah so we can go on to the next one sophie but as we as we go on to the next one we have some good questions from siddharth i hope i'm saying that correctly how do we force convert nand values in a data frame to a float or an integer like some columns all at once um i believe we have some exercises later on in codecademy that deal with this concept of like kind of tidying up your data of you have you have a data frame and you have like empty values or you have null values and so there are definitely some functions that you can use to say okay automatically replace all nands with zeros or um i'll replace all nuns with the empty string or something like that obviously there are like consequences for doing that where now you have zeros everywhere and your averages might be all screwed up but like there are ways to to do that sort of thing yeah yeah there's it's a whole separate course on what to do with missing data but um there's definitely functionality you do not know it off the top my head yeah neither do i okay uh so i'm actually going to skip this exercise well okay we'll we'll do it let's talk about the co yeah let's talk about the content and actually sophie i i don't mind so there's a there's an annoying bug in this exercise and i don't mind if you like talk about it and why it's an annoying bug on codecademy right now okay sure um yeah i was bothering alex about this yesterday uh in prepping for this i went through um this exercise so first let me give you the context so this is an exercise about comma separated values or csv files and basically most spreadsheets could be converted to a csv file it's one of the most common data formats that i've seen so if you have like an excel or or a google sheet you can save it as a csv file and then read it into your workspace in python using pandas so this exercise is really just showing you what a csv file looks like and basically you can imagine that this is a data frame we want to create and so if we're going to save this information in a csv file then we need to save it um basically in a file that ends in dot csv and the contents of it is going to be each row will be its own line and all the values in that row will be separated by commas comma separated values and so this exercise is asking you to create a csv file that would have all of this data in it um and so what i did because i was feeling a little bit lazy and i didn't want to type this all out is i copied um i think you guys saw me do that but i'll just do it again so um i i copied this oops um copied that all the contents of that table and pasted it in uh to the uh the csv file and then i went back through and i deleted all the spaces um and replaced them with commas and then and i'll do that really fast and i guess as sophie is doing that i'll say the and watch out i think birthday cake is one entry oh yeah i'll say this exercise is showing what a csv is and then i believe the next exercise is saying like okay let's assume you have your csv file it's ready to go let's show how we load that into python using pandas and create a data frame out of it so this this exercise is really just kind of trying to show what a csv is um and as sophie will show here this is a kind of annoying bug because we i imagine that many people will just copy and paste uh that data in um so it's smelling this um and it turns out that the reason is in this whatever this font is this is like a curly um apostrophe and it's not getting recognized here we want this like straight apostrophe um and so if i delete that and replace it yeah so this is this is like really not important this is just like a nice little like uh how codecademy works for those of you watching this stream where for uh our backend test that is testing to see if you've done this correctly is we are we're checking to see if your text literally matches the text that we want it to match and we are using one type of apostrophe that's not like this curly apostrophe in the test but if you copy over all of the information from the left pane over here it has the wrong kind of apostrophe it's a very easy thing to fix i think after this uh after this lesson sophie i will like go fix it but uh you know those of you that that use codecad me i'm sure you've run into buggy tests um before and uh sophie and i found one and we'll hopefully go and fix it soon we'll fix it um okay so now we get to some of the fun stuff yes this is this is where those first exercises just gotta get our framework together and now we can actually load in some data yeah court says it's an important message the devil's in the details and yeah you're exactly right like this different kind of apostrophe was really screwing it up so funny yeah it's funny i definitely um you know as i'm going through these exercises i'm having i think the same experience that a lot of our learners feel when you know you get somewhere and then it doesn't pass the test and you just really want that green check mark as the self validation that you know you're doing and so when you find silly little things like that it can be frustrating but yeah it's good to it's good to like one of the benefits of doing these courses is that we get to really like user test them even yeah this course came out probably over a year and a half ago and so it's good to get kind of fresh eyes on it yeah totally um okay so now we're gonna get into some functions to read csv files into your workspace and also to write csv files and so that means if you have a data frame that's already created or you've worked on that data frame in some way you've modified the data created new columns you can always create a csv file again on your computer um so alex do you want to maybe talk about like why that's so powerful that you can you can both read and write csv files yeah sure uh oh did you add did you ask me to talk about it yeah i see yeah so um yeah so reading csv files is is really important because a lot of times that's where your data sources will come from if you look for you know data online the i would say the majority of the time or at least the the format that i'm most comfortable with dealing with is data that comes in a csv file um so they're yeah so that's the importance of reading it is that that's kind of the format or one of the formats that real data exists in a lot of times and then yeah uh being able to write to a csv file is really powerful because we'll be able to do something in python and do something like fairly complicated right let's say you're um i don't even have a good example but let's say you do something fairly complicated in python and you end up with this data that you want to show somebody else but not everybody knows how to use python not everybody could take uh you know take your python script and know how to run it and know how to interpret the results and all that sort of stuff and so it's really powerful to be able to then write to a csv file that you can then give to someone and they could open it up in excel and you know if they're trained to use excel properly they'll be able to do whatever they need to do with it so um yeah writing a csv file is really important for basically just sharing your work yeah yeah a lot of times um when you're working maybe you're working with pandas you're trying to clean some data and so you've got this really messy data set that you have to fix the missing data you have to create some new columns maybe delete some columns delete some rows and so you're making all these edits and sometimes also you just don't want to have all that code in the same place where you're making let's say your visualizations or something else so um a lot of times what i'll do is i'll have a script that does all the cleaning and all the data modification and then i'll write the i'll read in the data i'll modify it write it again and then i'll read that new data set into a new script um that actually does like the data visualization piece and i think that can also help um make your files a little bit cleaner and have clear purposes for everything every set of code that you write um yeah which i think is yeah i do this for my job all the time where again i'm a curriculum developer so i'm one of the people that is are making these lessons and so usually i develop my lessons on my own computer using something like python and i kind of need to like then take the output of that like i'll i'll make a csv file that i then need to like move into codecademy um and so i will you know have my local python script on my computer uh export the csv uh file from python to my computer and then upload that csv file to codecademy um yeah um okay so i have while alex is talking um written a line of code so this is just using the p pd dot read underscore csv function um so the read underscore csv function from pandas i'm giving it the name of my file and so codecademy under the hood just has has already given you this csv file in your workspace i think it's here yeah so sample.csv exists in your in your file structure and so pandas can read it in and i think if you're working on your own computer we have some off platform projects that will show you how to get it set up so that um so that you can read a file in from a different location i wonder if alex froze can anyone in the chat just let me know that you can still hear me since i do not see alex i'm gonna keep talking for now but hopefully somebody can let me know that we are still online um okay uh so let's go ahead and look at this uh still haven't seen anyone okay i'm gonna keep going but let me know okay yes you can see me great thank you um all right perfect thanks uh okay so we're gonna take a look at this data frame that we just loaded um so this looks just like what we saw in the other exercises but now we've been able to load the csv file from our workspace into python and we've called it df um short for a data frame i think a lot of times when you're just working with a random data set and you want to save it as something quickly people try to pick like a short name that they can use really really quickly and df is um probably the most common one that people kind of come up with you're back sorry no you're good i was like am i did i internet or did you but it seems like oh yeah yeah john david says sorry the slow chat makes it tough to respond sometimes yeah yeah thank you guys you guys are the best sorry everyone i just moved uh locations and this is the first time testing out one of these streams on uh the the new building that i'm in so internet might be uh might be a tad touchy no worries um so i was just saying we saved this as something called df and then we were able to print it in our workspace and it looks pretty similar to what we saw before we noticed that that same thing is happening here where we've got the numbers um 0 through 4 kind of automatically listed here and i can pretty much guarantee you those are not in the actual csv file i wonder if we can kind of see oh yeah so you can check so those numbers were not in that csv file but just like when we were creating our data frame from a list of lists or a dictionary we're still getting these um indices and so we can come back to that uh when we get a little bit further along but i think it's again useful to know that those are there okay nice um all right let us go to the next one um okay so this is like this this lessons title inspect a data frame really is probably the most important thing that you need to know how to do in order to do data science like looking at your data and ex inspecting it to understand what's going on is by far the most important step before you do any sort of visualization or anything else like any sort of cleaning um that's what you you need to do to get started yeah in most in most of our curriculum this is like kind of the first step that we'll always have you do in a new lesson of like let's just get familiar with the data that we're working with guys my mom is watching this and she just texted me i can still see you thanks for summer um okay so uh let's take a look so we've got a couple of functions that are going to help us take a look at this data set so i think i mentioned this when we first started um this dot head would you call this a method or a function this is a good question i probably against my better judgment use those terms pretty interchangeably technically a method is like belongs to a certain class and so uh i bet you could make the argument that this that head it belongs to the class of data frame meaning you can like call the head method on data frames um so yeah i think method works but uh i know in codecademy at least we might use those somewhat interchangeably when they have strict definitions um but so for me that's kind of something that i shrug shrug my shoulders on where uh it's important to understand like the concept of these things and like these precise language is like not super important um okay especially yeah i never so i think the hardest one of the hardest steps for me and kind of getting used to doing some of the data analysis stuff that we're doing now in python is that um coming from an r background i was not really used to this idea of like objects and methods and uh things like that so that is a little bit new for me i was basically the reverse where i i learned programming in python so i'm super familiar with python and then i recently wrote our courses for codecademy and it was my first time using r and yeah it's definitely very different yeah okay so we're trying to do this the other thing that surprises me sometimes about or that confuses me i think a little bit about methods and maybe you can clarify this maybe other people have the same question is that that sometimes when you use a method it like changes the object directly and then sometimes you have to like resave the object uh in order to keep that change yeah so we'll see that come up and it really happens there's no strict like it can't always do this or this always happens it really depends on the method but yeah i think you'll see us talking about this of like it happens in place versus it like returns a value and i think that this comes up in um like adding to us uh an array where you can do you don't have to do like let's say you have an array named a you don't have to do a equals a dot add you know whatever number you can just do a dot add number and it does it in place it automatically overrides what it used to store there and so there's no strict rule as to like which ones do it in place and which ones don't interesting yeah it's something that like it's a place where i feel like i commonly make mistakes in python where i'm like why isn't my data frame updated and then i realized it's because i didn't resave it and i needed to yeah as as lisa who i know is in chat said earlier just like print is your friend right if you're ever curious about like what you're even working with just just print it out yes okay so i have um loaded this data frame called imdb.csv into a data frame called df using the read underscore csv function and now i guess i'll do that first step and now let's say that we want to see some of the rows of that data that data frame but we're not sure how many rows there are and so you know if there's a million rows we don't want to try to print those all out at once so we can use this dot head method or function or whatever you would like to call it to see the first few rows and so you'll see them over here and that gave us uh five rows um and then you can always i think this was in the explanation or in the narrative as well but you can always change the input to a different number so if we wanted 10 rows we could put a 10 there i think five is just the default so um oh it's yelling at me because i didn't do the next step um so now we've got 10 rows okay and then we can also use uh the info method to get some more info about our data frame and so i'm going to do that down here um you'll notice so when we print the um the first however many rows it prints over here uh alex do you want to explain like what's going on here yeah i was gonna do that in a second uh let's do info first and then we can talk about it nice cool so yeah so down here you can see the output of df.info and so it's telling us a little bit about the columns it tells us what each of the columns are how many values are in there and how many are not null i assume that it tells you if there's a null value in there how many nulls there are interesting um yeah i wish there was an easy way for us to like add a row with the null value i don't know that syntax off the top of my head um yeah but that's something that we could uh get trying to play around with um on thursday for sure yeah and that tells you the type as well yeah um so yeah a couple of questions there are a couple of things to go over one is that lisa in chat is asking about the tail function um so sophie as i talked you want to like experiment with tails see if you can give a tail a number see what that does um yeah and then the distinction between these kind of two panels that are showing different things one is this uh panel on the right hand side that is showing our data frames kind of nicely printed out and then the other is this black panel with white text so the one on the right is kind of our fancy like codecademy rendering of the output where you'll see that at the top of all these files we import codecademy lib again this is like kind of behind the scenes stuff that you don't really have to worry about that much but that is the thing that will take the output and transform it into this like very pretty you know table that you can scroll and spaced out secretly this is like an html file and uh uh yeah it's just an html file um but if you're doing this on your own computer you're not going to have a nice pretty printout like that you're just going to have your terminal which will look something like this um so when you print out a data frame just locally using your terminal that's the kind of thing that you'll see yeah and this is part of the reason why i like um jupiter notebooks so much is that uh jupiter notebooks will do this for you they will make it make these things look nice but also print out um your typical like code results yeah terminal results terminal results yeah so it'll it'll kind of format everything nicely and as somebody with a little bit of ocd that is something that i appreciate yeah um okay so so what did tale do there as a oh yeah yeah so tail gives you the last five rows cool um or however many rows you want yeah yeah that was a good good point with someone with i don't know if it's ocd but i it's someone who likes movies i'm trying to figure out what this list of movies is it might be highest grossing of all time but i don't know maybe we say somewhere in the narrative what you're saying yeah cool yeah oh and then the other thing that i think um i think we mentioned this in our last live stream um but i think it's not covered so much in this lesson but i'm just going to show really fast another thing that's and this is maybe to add on to the point about it's important to know what kind of object you have because it alters the way that you can work with this information is that now that we have this in a data frame uh each of these columns is going to give us some different behavior than what we saw in lists and dictionaries so now for example if i wanted to like add a number to everything in this column i guess i shouldn't do this until after we can pull out a column but um i could simultaneously add a number to every value in this column so all of a sudden these data frames are going to be operating in a different way than our lists and dictionaries were operating and again in a way that's like probably easier if you caught the last session that sophie and i ran we were showing like these really kind of confusing list comprehensions which are trying to add you know five to every item in the list and it looks really ugly and again the point of data frames is that it makes it super easy to do you can essentially just say get your column and plus five and it does it automatically yeah exactly okay let's see what we've got now so this section is now getting into uh selecting columns and i think this is probably again a very very important thing to know how to do and one of the powers like alex mentioned of pandas because now we can kind of pull out rows and columns of our data in a much simpler way than we could have with a list or a dictionary um okay so let's see um we've got this data frame i'm gonna go ahead and um and just print it out um so we can see actually now it looks like we've got a terminal yeah so we can see what this looks like in a terminal we don't need that import codecademy lab at the top of this uh now that's another little thing that we can go back and fix eventually oh yeah i like to i've been working on this on my own and pulling this window really wide so you can see all of this data but now you can see yeah so it's got all the same information it just doesn't look quite as fancy um all right so but it's giving me this thing because it's telling me we didn't do the exercise oh yeah okay so it's asking me to create a variable called clinic underscore north that contains only the data from clinic underscore column clinic underscore north so basically we're going to try to pull this column out of our data frame so again this is really the first opportunity that we've that we're really seeing the like power of uh of these data frames where this is something that would be a real pain in the butt to do in basic python but super easy here yeah so okay so we're gonna just use this syntax so um the name of the of the data frame and then the name of the column that we want in quotes so here we've got clinic underscore north and we're going to save that as what does it want me to save it as clinic underscore north um and run and now it looks good um i think there's a point that gets made earlier in this it says um or maybe it's in the next one about oh it's in the next one but um saying that you can pull out a column using this other syntax as well so like the the name of the data frame dot the column name oh it is here sorry and it says if it um doesn't contain spaces or special characters um which makes some sense so one of the things in the spirit of kind of playing with this workspace that we might want to see is what happens if some of our column names have spaces so i'm going to try that i'm going to put a space in here and then try to so we were able to do this but now i'm going to say like print df dot so let's first print clinic north because we never printed that out to actually like show that it exists and look at that that column on its own that's a good point but then yeah i love this idea of trying to add this space oh yeah and also sorry the second part of this uh exercise also has you print the type of um object that this is which i think is also very valuable um because then we see so oh good question from corey in the chat i see that we'll touch on that as well so here's the um the north column that we pulled out and then you'll see that um that this is now saved as a panda series um and the whole data frame is if we do like print type df that's going to tell us that our data frame is a is a data frame but now that we've pulled out a single column it's become something called a series so we noticed that when we pulled out the column the type of data changed which is relevant to now well yeah and that's relevant because it's like the things that you can do with those different data types are different so like obviously a data frame it understands what this bracket notation is where if you say the data frame name and then with the bracket it's going to try to grab that column if you try to do that with a series i think it will just error i don't i don't know what the expected behavior for that is but basically there are different things that you can do with series different things that you can do with data frames um this is something that i was chatting with john in the chat about where you can kind of think of a series as a vector um sophie that's where you're like yeah vector edition stuff is going to come into play yeah john just said that yeah you can think of a series as a vector in a data frame as a matrix that's exactly right totally and i saw there was this question about the double brackets versus single brackets and i actually think that that changes the type so i think if i put the double brackets and then we print here i'm going to delete this i'm going to delete this to make ourselves a little more space i think that what happens if i run this yeah so now notice that the type of clinic underscore north is a data frame interesting even though it's still only one column it looks like i just read this because i was looking this up the other day as i was going through this x exercise um but yeah so the double brackets keeps it as a data frame um versus the single brackets turns it into a series and so this is relevant at this point we only have eight minutes left so i think we should like kind of abandon the rest of the lesson and just like continue talking about the points um all right anything you want to say about this yeah so this is this is relevant because we hear you alex oh no shoot i'll leave and come back okay all right i'll keep moving hopefully you guys can hear me um okay so i'm gonna go to the next exercise and we'll start selecting now multiple columns so in the last one we only got one column at a time now we're gonna pull multiple columns out of our data frame so and this kind of goes back to this double brackets for single brackets situation so basically if you're going to take multiple columns out of a data frame then we're gonna pass we're gonna have to pass a list of the column names in order to extract those um and just in the same way that we were talking about how the single column became a series it was really because and i know maybe not everyone is familiar with the word vector but a vector you can think of as like a single string of values and so when we pulled out one column we just had one string of values um versus if we have if we're taking multiple columns then we can't really have that turn into a series anyway are you back alex yeah sophie can you hear me oh i can't hear you i think it's on your end is that my problem or you are see people in chat were saying that they could hear me yeah before so maybe uh i'm sorry guys am i muted nope huh you can hear both of me both of us um um we only have like five minutes left and so i'm gonna let sophie just like close out the show and um my mom is also texting me to let me know that you can hear me okay uh i guess i will i don't know sorry everyone um oh that worked oh hey now can you still hear me yeah okay maybe your headphones died i've died okay i'm saying we're basically out of time so i want to plug all of the events that we have going on uh in the future i also want to thank everyone in chat this was a really awesome chat today um john david roca you asked great questions uh courts this is the first time i recognized your name in here so thank you for joining lisa as always you're awesome for checking these out um corey nice to see you i think i've seen you before corey um so thank you all for coming i really really appreciate it honestly it's like these are the like sophie and i love doing these things and chatting with you folks and um we're always hoping to get more and more people watching so i am very appreciative for all of you that you know hang out with us for an hour um i i wanted to plug the thing that we have on thursday so if we um let's see so the thing that we have on thursday if you're a pro member and go to the events page you should see an event on thursday that sophie and i are going to be hosting um it isn't stream to youtube it's just a zoom call that you register for and then you basically can get on the call with us and talk through this stuff um so that's when we'll have more time to do kind of deeper dives into all of this stuff um john if you can make it i would love to talk like more matrix math stuff with you um i think a potential plan for the day might be to tie all of this to data visualization in some way where like this entire session really has had nothing to do with data visualization so taking a little bit of time to tie these data frames to a data visualization um so yeah so if you go to the events page which is that and you're a pro member you should see an event for thursday the 23rd which sophie and i will be running yep cool right here sophie i'm sorry i feel like i just took over uh no that looks great i'm sorry that my uh technology was not fully on my side or either of our sites right now but um but this was really really fun like alex said this is like one of the highlights of my week um i love getting to talk to all of you and it's awesome that people were engaging with us and asking questions in the chat that always is a lot of fun and i definitely learned some things myself in this and i have some things to look into as well um so i'm really excited and i hope people show up on thursday to keep talking about this because it's always more fun if people have more questions and there's more to be learned so yeah um john david you asked will the call be saved for viewing offline i'm gonna be out of town but maybe i can join zoom remotely on my cell phone i can try to set it up so it's um recorded um after the fact um in fact i'll do that i don't know exactly how that works i haven't like dove that deep into the the zoom stuff yet but i can try to set that up and then as always um uh you know feel free to reach out to us i always post my email on this stuff um i'm a koontz at codecademy.com um yeah again feel free to shoot me an email about any of this stuff if you have feedback um we'd love to hear it if you would like other things for us to be doing on these sessions i would love to hear it so um yeah love to it's fun building these kind of shows with you all yeah and feel free to email me as well um mine is sophie academy.com yeah cool great all right i will stop the share and i don't know how to how do i turn it off yeah if you just let me find
