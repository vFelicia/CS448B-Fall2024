With timestamps:

00:00 - hey everyone my name is Carlos I'm a web
00:02 - developer based from Boca New York and
00:04 - today I want to talk a little bit about
00:05 - what bad candies now if you're new to
00:08 - the industry or experienced in the
00:09 - industry you might have heard this term
00:11 - but not a lot along with the front and
00:13 - you might have heard back and being
00:15 - described as what happens under the hood
00:16 - or all the functionality that makes a
00:18 - website work but there's a lot more to
00:21 - it than that
00:22 - so today I want to go a little in-depth
00:23 - into what exactly is back in and what
00:26 - entails making a website work in the web
00:28 - industry a lot of terms can be thrown
00:30 - out of you web developer DevOps UX
00:33 - designer UI designer but two terms that
00:35 - are thrown out on our front end and back
00:37 - in however in order to understand what
00:39 - back-end is we must first have an idea
00:41 - what front-end is and how they
00:42 - communicate with each other
00:43 - now the fronton which is also called the
00:46 - client-side is basically what happens in
00:48 - the browser and this everything the
00:50 - end-user sees and interacts words so
00:51 - this could be a login page a sign-up
00:53 - page a page listing products from a shop
00:55 - or a site for a restaurant or a hair
00:57 - salon now the back end on the other hand
00:59 - this is what happens on the server and
01:01 - the database we also call this
01:02 - server-side programming and there's also
01:04 - the machinery that works behind the
01:06 - scenes it's basically everything the end
01:08 - user doesn't see or directly interact
01:10 - with but that power is what's happening
01:12 - now to actually understand how they
01:13 - interact with each other we can look at
01:15 - an analogy called the restaurant analogy
01:17 - ok so I want you to picture yourself
01:19 - walking into a restaurant you're created
01:21 - by a hostess and then you're sat down on
01:23 - the table and given a menu and the menu
01:25 - itself will have maybe a picture of the
01:27 - dish they have and maybe the title of
01:29 - the restaurant and inside the menu
01:32 - you're gonna have pictures of items and
01:33 - descriptions of what the dishes are
01:34 - maybe also the prices of them so this is
01:37 - basically a static piece of content that
01:39 - should make it easy for customers to
01:40 - understand their options and then from
01:42 - here you can pick and select what you
01:44 - like and request an item with certain
01:46 - specifications and this to be a
01:47 - hamburger with no onions or extra
01:49 - ketchup for example so I want you to
01:51 - picture this as a front end so all the
01:53 - static content that's displayed under
01:55 - website will be made up out of CSS HTML
01:57 - and then some type of JavaScript so now
02:00 - let's look at the backend side of this
02:02 - picture so just like in the front that
02:04 - in back-end the kitchen and chef are in
02:06 - a separate environment and it's hidden
02:08 - from the customers the kitchen and chef
02:10 - can take the order that received from
02:11 - the waiter and then from there he can go
02:13 - into
02:13 - the cooler or the fridge and proceed to
02:16 - create the item that was requested and
02:18 - then cook it up and delivered so you can
02:20 - think of this as the back end but
02:22 - there's one important element to missing
02:24 - from this in order for the kitchen and
02:26 - the front staff to interact with each
02:27 - other there needs to be some sort of
02:28 - medium to communicate so let's go ahead
02:31 - and see how that happens now you can't
02:33 - just shout out the menu and expect
02:35 - something to happen you need a way to
02:36 - communicate that order to the kitchen
02:38 - staff so in order for the front end and
02:40 - the kitchen to communicate the medium
02:42 - will be a waiter or a server that will
02:43 - be in charge of sending information back
02:45 - and forth from the customer and the
02:47 - kitchen staff and waiter and waitress
02:49 - can help undo understand the menu answer
02:51 - any questions and then take your orders
02:53 - to the kitchen step so they're basically
02:54 - experts in interactivity and
02:56 - understanding what you want to do so in
02:59 - the back inside we can consider the
03:00 - waiter as a server so with this analogy
03:03 - in place we have a better understanding
03:05 - of how front-end and back-end works but
03:07 - let's go ahead and take a look at this
03:08 - in a more practical way so just like our
03:11 - restroom we can view the front end as
03:13 - what's displayed in front of the user
03:14 - which is usually composed with HTML CSS
03:17 - and JavaScript and we can view the
03:19 - backend as a combination of a database
03:21 - and a software written in a server-side
03:23 - language which both run on web servers
03:25 - or cloud-based servers or a hybrid
03:28 - combination of both now the server-side
03:30 - application directly interacts with a
03:32 - database via an application programming
03:34 - interface which pulls saves or changes
03:36 - Stata
03:37 - so both the combination of the server
03:39 - and the database can be considered the
03:41 - backend so let's look at that example
03:43 - that you might run into on a daily basis
03:45 - so let's say you're trying to login into
03:47 - codecademy you go ahead and type in your
03:50 - email your password and you click the
03:52 - button login from there the information
03:54 - will be sent to the server-side software
03:56 - and the server-side software might have
03:58 - some data validation to make sure that
04:01 - the password field wasn't empty or maybe
04:03 - up comm was missing from the email and
04:05 - then once everything is in order
04:07 - the server-side software will parse this
04:09 - data and send it to the database so then
04:12 - we can check in the database if the user
04:13 - with that email password combination
04:15 - exists we might just run a query and
04:17 - look for that user and if it finds it
04:19 - then it can grab the information from
04:21 - that user and sent it back to the server
04:23 - now that user information might be a lot
04:25 - of information that we don't need
04:27 - so it might select what we need and then
04:29 - grab the certain information from that
04:31 - and then send it back to the client and
04:33 - then redirect him to his user profile
04:35 - page so using the restaurant analogy
04:38 - again you can think of the server as a
04:39 - waiter who is in charge of sending
04:41 - information back and forth and the
04:43 - database can be the kitchen or the chef
04:45 - that's in charge of making the orders
04:47 - and make you tender correct and then
04:48 - sending him back to the server so it can
04:50 - be delivered to the client so now we
04:53 - have a better understanding of how back
04:54 - and works and what it involves but let's
04:57 - look at examples on what a back-end
04:59 - developer will do on a day to day basis
05:02 - now a back-end developer will have many
05:04 - responsibilities that involve working
05:06 - with databases and server-side software
05:08 - but what are some examples of it well
05:11 - for starters the developer will have to
05:13 - be comfortable working with databases
05:14 - you're gonna be creating them you're
05:16 - gonna be integrating you're gonna be
05:17 - managing them a lot next you're gonna be
05:20 - working with back in frameworks to build
05:22 - a server-side software now I'm gonna
05:24 - touch a little bit more on what back and
05:26 - frameworks aren't in the following
05:27 - slides so don't worry too much about
05:29 - that another example would be data
05:31 - validation so you're gonna make sure
05:33 - that the information that is parsed as a
05:35 - correct format and it's being able to be
05:38 - sent properly to the database last thing
05:42 - you might want to be able to integrate
05:44 - user-facing elements with server-side
05:46 - logic so remember that login page where
05:48 - they had at the code Academy said we
05:50 - want to make sure that when we click the
05:52 - login button that information is being
05:54 - set to the proper route so the server
05:56 - can actually retrieve it and send it on
05:58 - to the proper place correctly so just
06:01 - keep in mind these are just a few
06:03 - examples and the rules of the back-end
06:04 - developer will they will change varying
06:07 - the scalability of the application
06:09 - you're building and what exactly is
06:10 - required so now let's look at some of
06:13 - the actual technologies and software
06:14 - that back-end developers use so in order
06:18 - to look for a dynamic site to work
06:20 - properly it requires a database or you
06:22 - can consider this as like the brains so
06:24 - own information like user profiles or
06:26 - images they've uploaded or blog posts
06:28 - are going to be stored in the database
06:29 - and some examples of the databases that
06:31 - are quite popular on my sequel we got
06:34 - MongoDB there's Oracle which is very
06:36 - popular as well and we have Postgres
06:39 - sequel now
06:40 - each of them have their own Ickx and
06:41 - cracks and advantages and disadvantages
06:43 - so it's up to you to decide which one is
06:45 - best for the application next let's look
06:48 - into the languages now for the languages
06:50 - we actually have quite a few to pick
06:52 - from
06:53 - and they're used to implement logic into
06:54 - web applications so you must be familiar
06:56 - with a server-side scripting language we
06:59 - have Ruby for example which is great for
07:01 - building complicated logic on the
07:02 - database side of a site we have Python
07:05 - which has an emphasis on readability and
07:07 - simplicity so it's great for beginners
07:09 - and it's also very powerful and works
07:11 - well in object oriented designs there's
07:13 - PHP which is one of the most popular
07:15 - server-side languages on the web PHP has
07:18 - designed pull and edit information in
07:20 - the database and it's mostly commonly
07:22 - bundled with databases written in the
07:24 - sequel language then we have node which
07:26 - is a program that allows the front and
07:28 - JavaScript language to be used in
07:30 - server-side applications mostly use with
07:32 - a framework called Express and we also
07:34 - have Java which is an object-oriented
07:36 - language similar to C++ but with
07:39 - advanced and simplified features and
07:41 - Java salsa free to access and can run on
07:43 - all platforms now these are just a few
07:45 - have mentioned there's a quite a few
07:46 - more that you can look into but now
07:48 - let's look into frameworks so what are
07:52 - frameworks frameworks are basically
07:54 - libraries of server-side programming
07:55 - languages that construct the backend
07:58 - structure of a site so it makes it
08:00 - easier to write to maintain and to scale
08:02 - web applications and they provide us
08:04 - tools and libraries that simplify common
08:06 - web development tasks this can be like
08:09 - routing URLs to appropriate handlers
08:11 - interacting with databases supporting
08:14 - sessions and user authorization or just
08:16 - formatting output and improving security
08:19 - against web attacks so a few examples
08:21 - all the frameworks we have are ruby on
08:23 - rails rails being the framework that is
08:25 - used with Ruby we have a few with Python
08:28 - one is Django we have flask as well and
08:30 - we also have Express which is one of the
08:32 - most popular ones that is used with node
08:34 - now if one is interested in learning
08:37 - back in development how do we actually
08:39 - get started well there's many paths to
08:41 - the same destination but I'm going to
08:43 - give you one simple progression you can
08:45 - take to actually start learning how to
08:46 - work with back-end development
08:48 - so first thing you're going to do is
08:50 - choose a language and a framework now I
08:52 - listed a bunch of
08:53 - in the previous slide but there are more
08:55 - options to them if you're familiar with
08:58 - maybe JavaScript in use at a little
08:59 - front and development it might make more
09:01 - sense for you to pick JavaScript and
09:03 - Express to work with if you're
09:05 - unfamiliar with programming it make more
09:07 - sense for you to pick a
09:08 - beginner-friendly language like Ruby or
09:10 - Python now after you've picked a
09:13 - language and a framework and you become
09:14 - a little more familiar with the
09:16 - framework then it's important for you to
09:17 - start learning how to serve simple
09:19 - content to the client and a solid
09:21 - progression here might be learning how
09:22 - to send messages directly from your code
09:25 - to the client or sending contents of
09:27 - files from the server to the client or
09:29 - maybe even creating a template and
09:30 - programmatically filling in the holes
09:32 - with some type of generic data so once
09:35 - you know how to send basic content it's
09:37 - time for you to send content from
09:38 - different locations and you can do this
09:40 - by learning API sand HTTP methods now if
09:44 - you're more curious about api's we
09:46 - provide another course which is listed
09:48 - in the description but the goal of an
09:49 - API here is to create an interface for
09:52 - an application to request some data from
09:54 - you such that it can do meaningful
09:56 - things in response to what it receives
09:58 - once you've learned all this one of the
10:01 - last steps would be actually connecting
10:03 - to the database and being able to make
10:05 - that connection so you can actually
10:06 - retrieve data or update data or maybe
10:09 - create new data like creating a new user
10:11 - for example and the last step would be
10:13 - to build something on your own this is
10:15 - one of the best ways to actually learn
10:17 - back in development or any kind of other
10:19 - development you're interested in just
10:21 - try to have a project in mind where you
10:22 - and you're where you implement both the
10:25 - server and a database and maybe a simple
10:27 - front and logic to actually interact
10:29 - with it now back in development involves
10:31 - a lot of steps and there's a lot of
10:33 - stuff to take in into learning how it
10:34 - back in development works but if you're
10:37 - curious we have some of the courses
10:38 - provided from code Academy listed in the
10:40 - description now with new technologies
10:42 - like react in angular coming up and
10:44 - evolving over time the difference
10:46 - between front and back and kind of blend
10:48 - in a little bit more but it's still
10:50 - important to know how they differ from
10:52 - each other so hopefully this gave you a
10:54 - good idea of what back in is so thanks
10:56 - for watching everyone and join the
10:58 - conversation by subscribing to this
10:59 - channel or dropping a comment below and
11:01 - if you want to take your skills to the
11:02 - next level start learning at code
11:04 - Academy

Cleaned transcript:

hey everyone my name is Carlos I'm a web developer based from Boca New York and today I want to talk a little bit about what bad candies now if you're new to the industry or experienced in the industry you might have heard this term but not a lot along with the front and you might have heard back and being described as what happens under the hood or all the functionality that makes a website work but there's a lot more to it than that so today I want to go a little indepth into what exactly is back in and what entails making a website work in the web industry a lot of terms can be thrown out of you web developer DevOps UX designer UI designer but two terms that are thrown out on our front end and back in however in order to understand what backend is we must first have an idea what frontend is and how they communicate with each other now the fronton which is also called the clientside is basically what happens in the browser and this everything the enduser sees and interacts words so this could be a login page a signup page a page listing products from a shop or a site for a restaurant or a hair salon now the back end on the other hand this is what happens on the server and the database we also call this serverside programming and there's also the machinery that works behind the scenes it's basically everything the end user doesn't see or directly interact with but that power is what's happening now to actually understand how they interact with each other we can look at an analogy called the restaurant analogy ok so I want you to picture yourself walking into a restaurant you're created by a hostess and then you're sat down on the table and given a menu and the menu itself will have maybe a picture of the dish they have and maybe the title of the restaurant and inside the menu you're gonna have pictures of items and descriptions of what the dishes are maybe also the prices of them so this is basically a static piece of content that should make it easy for customers to understand their options and then from here you can pick and select what you like and request an item with certain specifications and this to be a hamburger with no onions or extra ketchup for example so I want you to picture this as a front end so all the static content that's displayed under website will be made up out of CSS HTML and then some type of JavaScript so now let's look at the backend side of this picture so just like in the front that in backend the kitchen and chef are in a separate environment and it's hidden from the customers the kitchen and chef can take the order that received from the waiter and then from there he can go into the cooler or the fridge and proceed to create the item that was requested and then cook it up and delivered so you can think of this as the back end but there's one important element to missing from this in order for the kitchen and the front staff to interact with each other there needs to be some sort of medium to communicate so let's go ahead and see how that happens now you can't just shout out the menu and expect something to happen you need a way to communicate that order to the kitchen staff so in order for the front end and the kitchen to communicate the medium will be a waiter or a server that will be in charge of sending information back and forth from the customer and the kitchen staff and waiter and waitress can help undo understand the menu answer any questions and then take your orders to the kitchen step so they're basically experts in interactivity and understanding what you want to do so in the back inside we can consider the waiter as a server so with this analogy in place we have a better understanding of how frontend and backend works but let's go ahead and take a look at this in a more practical way so just like our restroom we can view the front end as what's displayed in front of the user which is usually composed with HTML CSS and JavaScript and we can view the backend as a combination of a database and a software written in a serverside language which both run on web servers or cloudbased servers or a hybrid combination of both now the serverside application directly interacts with a database via an application programming interface which pulls saves or changes Stata so both the combination of the server and the database can be considered the backend so let's look at that example that you might run into on a daily basis so let's say you're trying to login into codecademy you go ahead and type in your email your password and you click the button login from there the information will be sent to the serverside software and the serverside software might have some data validation to make sure that the password field wasn't empty or maybe up comm was missing from the email and then once everything is in order the serverside software will parse this data and send it to the database so then we can check in the database if the user with that email password combination exists we might just run a query and look for that user and if it finds it then it can grab the information from that user and sent it back to the server now that user information might be a lot of information that we don't need so it might select what we need and then grab the certain information from that and then send it back to the client and then redirect him to his user profile page so using the restaurant analogy again you can think of the server as a waiter who is in charge of sending information back and forth and the database can be the kitchen or the chef that's in charge of making the orders and make you tender correct and then sending him back to the server so it can be delivered to the client so now we have a better understanding of how back and works and what it involves but let's look at examples on what a backend developer will do on a day to day basis now a backend developer will have many responsibilities that involve working with databases and serverside software but what are some examples of it well for starters the developer will have to be comfortable working with databases you're gonna be creating them you're gonna be integrating you're gonna be managing them a lot next you're gonna be working with back in frameworks to build a serverside software now I'm gonna touch a little bit more on what back and frameworks aren't in the following slides so don't worry too much about that another example would be data validation so you're gonna make sure that the information that is parsed as a correct format and it's being able to be sent properly to the database last thing you might want to be able to integrate userfacing elements with serverside logic so remember that login page where they had at the code Academy said we want to make sure that when we click the login button that information is being set to the proper route so the server can actually retrieve it and send it on to the proper place correctly so just keep in mind these are just a few examples and the rules of the backend developer will they will change varying the scalability of the application you're building and what exactly is required so now let's look at some of the actual technologies and software that backend developers use so in order to look for a dynamic site to work properly it requires a database or you can consider this as like the brains so own information like user profiles or images they've uploaded or blog posts are going to be stored in the database and some examples of the databases that are quite popular on my sequel we got MongoDB there's Oracle which is very popular as well and we have Postgres sequel now each of them have their own Ickx and cracks and advantages and disadvantages so it's up to you to decide which one is best for the application next let's look into the languages now for the languages we actually have quite a few to pick from and they're used to implement logic into web applications so you must be familiar with a serverside scripting language we have Ruby for example which is great for building complicated logic on the database side of a site we have Python which has an emphasis on readability and simplicity so it's great for beginners and it's also very powerful and works well in object oriented designs there's PHP which is one of the most popular serverside languages on the web PHP has designed pull and edit information in the database and it's mostly commonly bundled with databases written in the sequel language then we have node which is a program that allows the front and JavaScript language to be used in serverside applications mostly use with a framework called Express and we also have Java which is an objectoriented language similar to C++ but with advanced and simplified features and Java salsa free to access and can run on all platforms now these are just a few have mentioned there's a quite a few more that you can look into but now let's look into frameworks so what are frameworks frameworks are basically libraries of serverside programming languages that construct the backend structure of a site so it makes it easier to write to maintain and to scale web applications and they provide us tools and libraries that simplify common web development tasks this can be like routing URLs to appropriate handlers interacting with databases supporting sessions and user authorization or just formatting output and improving security against web attacks so a few examples all the frameworks we have are ruby on rails rails being the framework that is used with Ruby we have a few with Python one is Django we have flask as well and we also have Express which is one of the most popular ones that is used with node now if one is interested in learning back in development how do we actually get started well there's many paths to the same destination but I'm going to give you one simple progression you can take to actually start learning how to work with backend development so first thing you're going to do is choose a language and a framework now I listed a bunch of in the previous slide but there are more options to them if you're familiar with maybe JavaScript in use at a little front and development it might make more sense for you to pick JavaScript and Express to work with if you're unfamiliar with programming it make more sense for you to pick a beginnerfriendly language like Ruby or Python now after you've picked a language and a framework and you become a little more familiar with the framework then it's important for you to start learning how to serve simple content to the client and a solid progression here might be learning how to send messages directly from your code to the client or sending contents of files from the server to the client or maybe even creating a template and programmatically filling in the holes with some type of generic data so once you know how to send basic content it's time for you to send content from different locations and you can do this by learning API sand HTTP methods now if you're more curious about api's we provide another course which is listed in the description but the goal of an API here is to create an interface for an application to request some data from you such that it can do meaningful things in response to what it receives once you've learned all this one of the last steps would be actually connecting to the database and being able to make that connection so you can actually retrieve data or update data or maybe create new data like creating a new user for example and the last step would be to build something on your own this is one of the best ways to actually learn back in development or any kind of other development you're interested in just try to have a project in mind where you and you're where you implement both the server and a database and maybe a simple front and logic to actually interact with it now back in development involves a lot of steps and there's a lot of stuff to take in into learning how it back in development works but if you're curious we have some of the courses provided from code Academy listed in the description now with new technologies like react in angular coming up and evolving over time the difference between front and back and kind of blend in a little bit more but it's still important to know how they differ from each other so hopefully this gave you a good idea of what back in is so thanks for watching everyone and join the conversation by subscribing to this channel or dropping a comment below and if you want to take your skills to the next level start learning at code Academy
