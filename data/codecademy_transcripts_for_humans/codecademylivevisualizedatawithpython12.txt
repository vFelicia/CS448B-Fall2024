With timestamps:

00:00 - hi everyone how's it going um
00:03 - for all of you watching my name is alex
00:05 - koontz and i'm here with
00:06 - my co-worker sophie hi i'm sophie
00:09 - hi um cool and so we are here today to
00:13 - do another
00:14 - session of codecademy live this is
00:16 - actually our last one i think we ended
00:18 - up doing
00:19 - 13 it took us 13 sessions to get through
00:21 - all of the lessons in this
00:23 - visualized data with python module which
00:25 - i'm excited that we actually
00:26 - made it to the to the very end yeah
00:30 - um you know it's a lucky number yeah
00:32 - that's true um
00:33 - you know we always could have done so so
00:35 - many more there were so many projects
00:36 - that we skipped over and quizzes and
00:37 - capstone projects and all that sort of
00:39 - good stuff
00:40 - so there's definitely more in this
00:42 - module that we didn't get a chance to do
00:43 - but
00:44 - um fun to do all of the lessons so um
00:47 - yeah a little bit of setup so i know
00:49 - that we are live on several different
00:50 - places we're
00:51 - live on facebook youtube i think twitch
00:54 - although
00:54 - uh we don't have a ton of subscribers on
00:56 - twitch so if you're watching and
00:58 - uh are on twitch you can go to subscribe
01:00 - to us there um
01:01 - and then twitter um if you're watching
01:03 - live sophie and i are mostly gonna be
01:05 - looking at the youtube chat
01:06 - so if you want to chat with us live you
01:08 - can go ahead and talk with us there
01:10 - i see a lot of people already that i
01:12 - recognize pro gamer talia
01:14 - um let's see uh oh we got someone new
01:18 - eric
01:19 - hello eric um yeah so if you're watching
01:22 - us live
01:22 - feel free to chat with us on youtube and
01:24 - then if you're watching us in the
01:27 - um the recordings on youtube that are
01:29 - posted afterwards
01:30 - this is a part of a i guess 13 part
01:33 - series where we walk through the
01:34 - entirety of
01:35 - our visualized data with python skill
01:38 - path
01:38 - and so there's a fancy little playlist
01:41 - and you can watch
01:41 - all of that so um we're getting some
01:45 - spam from pro gamer
01:46 - pro gamer it'd be great if you couldn't
01:48 - do that but uh
01:51 - but fun to see everybody in chat um
01:55 - cool so sophie let's jump right into it
01:58 - i'm going to go ahead and share
01:59 - my screen find the right one to share
02:05 - all right all right sophie can you see
02:08 - that
02:09 - i can cool um and in fact i'm gonna back
02:13 - out one just to the the path just to
02:15 - show where we are
02:16 - we are in the very last lesson on this
02:19 - path
02:20 - and so we're in the advanced graphing
02:21 - stage learning
02:23 - seabourn um after kind of experimenting
02:26 - with matplotlib
02:27 - and with pandas um sophie you and i
02:29 - together we went over some of the
02:31 - math.lib stuff
02:32 - or maybe it was the panda stuff but you
02:34 - haven't done any of the
02:35 - seabourn lessons yet with me what are
02:38 - your
02:38 - overall thoughts on seabourn compared to
02:41 - like matplotlib
02:42 - or you know you're our in-house r expert
02:45 - compared to like how r does graphing
02:47 - stuff
02:48 - um well i think you guys discussed this
02:51 - a little bit last week but i think
02:53 - seabourn it makes a lot of things really
02:56 - simple
02:57 - um so there's not a lot of syntax you
03:00 - can kind of just like
03:01 - throw something into the functions and
03:03 - get something out so
03:05 - uh and it also fixes some of the
03:08 - difficulties that we experience with
03:10 - matpotlib so i know you and i went over
03:13 - the bar plots uh in matplotlib
03:16 - and we were kind of complaining a little
03:18 - bit about
03:20 - creating uh the like the x-axis
03:24 - values and all of that is way
03:27 - easier it seems with seaborne which i
03:29 - think both of us didn't realize
03:31 - until we got up to this module
03:34 - um but yeah i think
03:38 - there the flip side to that as you guys
03:40 - were discussing last week is that
03:42 - um you have to be really careful about
03:45 - what you're plotting because sometimes
03:50 - you know the ease means you don't
03:51 - necessarily need to
03:53 - be thinking about it as much in order to
03:55 - get a plot out
03:57 - um but then it is extra important that
04:00 - you then look at the plot
04:01 - make sure you understand what the output
04:03 - is and make sure you understand
04:05 - um what you need to do to change it if
04:08 - you need to change it in any way so like
04:11 - you need to know that you're plotting
04:12 - the mean by default
04:14 - in a bar plot um because you don't
04:17 - necessarily
04:18 - have to say plot the mean here
04:22 - yeah i think we'll let's go ahead and
04:23 - get started but yeah that's the thing
04:24 - that i kind of want to underscore here
04:26 - is that seabourn is it's great that
04:28 - seaborn makes it really easy to do these
04:30 - plots
04:31 - but because it's so easy to do these
04:32 - plots now now we can like really devote
04:34 - time to thinking about the statistics
04:36 - behind these plots and like
04:37 - you know sophie and i have gone through
04:39 - this already and like we have a couple
04:41 - of talking
04:42 - points where you know there's so many
04:44 - different ways to
04:45 - make graphs that look similar but are
04:47 - really just playing very different
04:48 - things and so it's like
04:50 - now that we are working with seaborne
04:52 - it's pretty easy to make any of these
04:54 - graphs
04:54 - we can really think about the
04:56 - differences between them what we
04:57 - actually want to be showing
04:58 - how we um how some graphs might be
05:01 - misrepresenting the data that kind of
05:03 - stuff um
05:05 - so that's what this lesson is really
05:06 - talking about um where
05:08 - it's going to introduce a couple of
05:09 - different new types of graphs and then
05:11 - along the way sophie and i will kind of
05:13 - um throw in some bonus little details
05:15 - here
05:16 - um cool so let's go ahead and get
05:18 - started i'll go back to the introduction
05:20 - here
05:21 - um so this introduction is really just
05:25 - kind of
05:25 - again showing a jupiter notebook here in
05:28 - the learning environment i know that
05:31 - when i'm working on my own computer
05:33 - in um in python i'm always working in
05:36 - jupyter notebook stuff we actually just
05:38 - had an internal codecad me hackathon
05:40 - that
05:41 - dophie and i worked on a project
05:42 - together and uh
05:44 - i i was you know hacking up some some
05:47 - code in python and so it's working in a
05:48 - joke jupiter notebook
05:49 - and sophie i know you were using um r
05:52 - studio and r
05:54 - yeah but i also love jupiter notebooks
05:57 - they just make everything look so nice
05:59 - yeah
06:00 - um yeah so we're kind of so this
06:03 - exercise we're kind of showing the
06:05 - um one the advantages of a jupiter
06:07 - notebook again that's like being able to
06:09 - integrate
06:10 - uh text with code and really kind of
06:12 - being able to write a report up
06:14 - and then furthermore we're kind of
06:16 - showing a preview of what's coming in
06:17 - this lesson
06:18 - so showing how bar plots could
06:21 - potentially be misleading about the data
06:23 - where these three bar plots
06:27 - all look the same right it's all showing
06:30 - the
06:30 - same amount of data in these three
06:32 - categories but then as we look further
06:34 - into different types of plots
06:36 - you can see that the shape of the data
06:37 - is very different and so we're going to
06:39 - look into
06:40 - kde plots which i actually didn't
06:43 - know i'm hoping sophie you can explain a
06:45 - little bit of like the precise
06:46 - definition of kde plots are like the
06:48 - difference between a kde plot and a
06:50 - histogram or a bar chart because i'm not
06:52 - super familiar with with these um we're
06:55 - gonna do kde plots
06:56 - box plots and violin plots
07:00 - so cool let's go ahead and get started
07:04 - um
07:07 - all right so this first exercise is
07:10 - again kind of showing how
07:12 - data can be misleading if you are not
07:15 - using the correct
07:16 - graph and so in this exercise you'll see
07:19 - that
07:19 - we're going to just make a bar plot
07:21 - using these three data sets
07:24 - and again it's kind of showing uh
07:26 - seaborne's very quick
07:28 - syntax where you just need to pass in
07:30 - the data that you're using
07:32 - and then the values that you want on the
07:34 - x and y
07:35 - um labels and specifically these are
07:37 - like the columns from a
07:38 - pandas data frame so let's
07:42 - see it says compare you're interested in
07:45 - comparing data collect
07:46 - from different locations you've imported
07:48 - four different data sets using numpy and
07:49 - have combined them into one data frame
07:51 - use sms dot bar plot to graph the data
07:54 - set
07:55 - in one plot with label on the x value
07:58 - or on the x axis and value on the y axis
08:01 - so this is just going to be
08:02 - s s dot bar plot
08:05 - and now let's see let me go back up to
08:07 - my
08:09 - example code here so i'm passing data
08:12 - frames
08:14 - which you can tell we've given four data
08:16 - frames
08:17 - i think or no we we're gonna be just
08:20 - using df as our
08:22 - data frame and we have four different
08:24 - labels
08:25 - so alex it might be helpful i know it's
08:28 - gonna flag an error but
08:30 - do you wanna uh do you wanna just print
08:33 - with
08:33 - the data frame or print like df.head
08:37 - really quickly so that everyone can see
08:40 - what we're looking at
08:41 - sure that's a good idea yeah and so you
08:44 - can actually see that
08:45 - the way that this data is organized this
08:47 - actually is not showing a
08:48 - ton but or it's not showing the
08:50 - different labels it's
08:52 - showing only ones from set one but this
08:54 - is a big data frame i think it's
08:56 - two thousand rows and every data point
08:59 - is labeled either in
09:00 - set one set two set three or seven four
09:02 - and has a value associated with it
09:04 - yeah and that's what all the code above
09:06 - here is doing
09:08 - um and that's why we're using the words
09:11 - label and value so those are referencing
09:13 - those columns of that data frame right
09:16 - you could even see here i could change
09:17 - this to be like
09:19 - my label and then if i do that
09:23 - you'll see that the name of this data
09:24 - frame has now changed to my label
09:27 - and change it back to label for now just
09:28 - because i don't know what our test
09:30 - behind the scenes is actually looking
09:31 - for
09:32 - but cool let's now do
09:35 - sns dot bar plot is it bar plot
09:39 - what is it yes and then the data frame
09:42 - that i'm using
09:43 - is going to be or is it data it's data
09:47 - the data that i'm using is stored in our
09:49 - data frame name df
09:51 - i'm going to set x equal to label
09:54 - i'm going to set y equal to value
10:01 - cool
10:07 - last thing is that i have to do plt.show
10:10 - um what's up
10:19 - a little bit confusing that we use
10:21 - seaborne to actually do the plotting and
10:23 - then we have to come back to matplotlib
10:25 - to actually call the show function
10:27 - um actually might want to experiment
10:30 - with like if there is an s
10:31 - if there's a seaborn show function that
10:33 - would work um
10:34 - i think um my understanding and i don't
10:37 - know if this is correct but my
10:39 - understanding is that seabourn is built
10:40 - on top of matplotlib
10:42 - so it uses some of the matplotlib
10:45 - functions
10:46 - um within seaborne yeah so i imagine you
10:49 - could probably change that and it would
10:51 - still
10:51 - exist yeah i'm gonna actually get rid of
10:54 - this to get rid of our
10:55 - plot now let's see what happens if we
10:57 - just do
10:58 - sns.show
11:01 - yeah it doesn't oh it didn't work it
11:03 - doesn't plod i'm actually surprised by
11:05 - that
11:05 - i'm also surprised that we need to be
11:07 - importing matplotlib i kind of would
11:09 - have figured that because seaborn runs
11:11 - on matplotlib
11:12 - if we imported seaborne it would have
11:14 - also grabbed matplotlib
11:16 - but i suppose that's uh that's not how
11:18 - it works
11:21 - um cool yeah so i want to emphasize that
11:25 - there's you know there's a lot of stuff
11:26 - going up here on the top a lot of stuff
11:28 - about
11:28 - pandas and data frames um we covered
11:31 - that earlier in this
11:33 - um in the visualized data with python
11:36 - um skill path that's definitely uh you
11:40 - know you could devote so much time to
11:41 - just learning about
11:42 - data frames and really how to manipulate
11:44 - all that stuff so i'm gonna we're gonna
11:46 - kind of fly through all of this data
11:48 - frame stuff
11:48 - for now but definitely a good tool to
11:52 - learn how to use i would say like almost
11:54 - more important than making the graph
11:56 - itself is like learning how to like work
11:58 - with your data
11:59 - is at least the part that i find
12:00 - satisfying um
12:02 - and sometimes i find graphing frustrated
12:04 - frustrating
12:06 - yeah no that's the part that always
12:09 - takes the longest
12:10 - is getting your data into the format you
12:12 - need in order to
12:13 - actually make a plot yeah cool
12:17 - all right so the point of all of this
12:18 - was to show that
12:20 - um what was this this was plt.show the
12:22 - point of all this was to show that
12:24 - if we just use bar plots these look
12:26 - absolutely identical which really
12:28 - tells us nothing um right we we really
12:32 - don't know a whole lot about this data
12:33 - other than there seem to be equal number
12:35 - of data points
12:36 - in all these cells you're saying equal
12:39 - number of data points but
12:41 - sure these are not
12:44 - uh i think these are not counts these
12:46 - are actually
12:48 - means i believe so um
12:52 - so there's an equal number of data
12:54 - points in each of the groups
12:56 - uh but that's not what this is showing i
12:59 - think it's actually showing
13:00 - that the means of the groups are pretty
13:02 - similar totally and
13:04 - you know what as i was saying i realized
13:06 - like these error bars
13:07 - would be really mean if this it would be
13:09 - really weird if this was just
13:11 - the count um right bar plot by default
13:14 - shows the mean of each group and sophia
13:17 - i know you have
13:20 - yeah i was telling alex before we got on
13:22 - that
13:23 - one of the things and i'm not i'm not
13:26 - quite sure where i developed this
13:27 - opinion but
13:29 - um i think it's kind of interesting to
13:32 - me
13:32 - that matt potlib and seabourn are
13:36 - using the mean to by default
13:39 - to plot these bar plots because usually
13:42 - if i was designing
13:43 - a plot for something if i wanted to
13:47 - show a mean comparison with some sort of
13:50 - error i probably would not use a bar
13:53 - plot and one of the reasons
13:56 - for that is that the bar plot um
13:59 - if you kind of look at this so if you
14:00 - see that the blue bar for example
14:03 - um the only data that's actually being
14:06 - plotted here
14:07 - is that top line right the only thing
14:10 - that
14:11 - is actually being communicated by that
14:13 - whole
14:14 - space of bar is what the mean is and
14:18 - then i guess with the error bar there's
14:20 - some like error around the mean
14:21 - but all of the stuff that's shaded in
14:23 - below the bar actually
14:25 - doesn't really mean anything it's not
14:26 - reflecting anything about the data
14:29 - and if i pass in a different data set
14:31 - with the same mean but completely
14:34 - different data um i would not be
14:37 - communicating anything or this plot
14:40 - would not look any different
14:42 - and i think by shading in all the space
14:44 - below the mean but not
14:45 - shading any of the space above the mean
14:47 - you're actually kind of like
14:49 - misrepresenting the data in a way
14:50 - because you're kind of making it seem
14:52 - like there's
14:53 - data below the mean or something but not
14:56 - above the mean which is not
14:57 - really accurate um and so normally i
15:00 - would use a bar plot
15:03 - if i was trying to show comparative
15:06 - frequencies of something
15:08 - across categories that did not have any
15:12 - sort of inherent order so um
15:15 - you know like i gave the example this
15:17 - morning of
15:18 - uh my boyfriend's aunt has a lot of
15:20 - animals and so maybe i want to make a
15:22 - bar plot of how many of each animal type
15:24 - she has and so
15:26 - maybe there's like three dogs and two
15:29 - cats
15:29 - and um and so those bars could represent
15:32 - the number of each type of animal and
15:34 - then
15:35 - and then those shaded regions kind of
15:37 - communicate something about
15:39 - the number right the area would be
15:42 - directly proportional to the number of
15:46 - each
15:47 - thing in each category
15:50 - but as as a demonstration of comparing
15:54 - means
15:54 - um i find this a little misleading
15:58 - yeah however that is a
16:01 - long way of saying very little
16:04 - well and it's interesting to note that
16:06 - like seaborne does it by default right
16:08 - where it's doing it it's showing the
16:09 - mean by default this was actually
16:11 - something that we
16:12 - went over in the last lesson but i
16:14 - forget the exact syntax and so i want to
16:16 - look up
16:16 - um how to change the function that
16:20 - it's applying so let me look at
16:24 - this um yeah so you can see here in the
16:27 - seaborne
16:28 - documentation that it's using
16:31 - some mean function as the estimator and
16:34 - so i think i can change that
16:36 - and i hope this works i did not practice
16:38 - this beforehand but i think i can change
16:40 - that by saying okay rather than using
16:41 - mean
16:42 - let's change estimator to something like
16:44 - length
16:45 - uh we'll see if this works
16:49 - yeah there we go and you can see now our
16:52 - y-axis has totally changed where
16:54 - it's no longer representing mean because
16:56 - um the mean was at like something like
16:58 - 80.
16:58 - now it's representing length meaning the
17:01 - length of these data sets
17:02 - meaning essentially the count or the
17:04 - frequency so there's 500 things in set
17:06 - one there's 500 things in set two
17:08 - all that sort of stuff um
17:11 - so yeah so you can also do like
17:13 - np.median
17:15 - right you want to see the median value
17:18 - oh those are actually like slightly
17:20 - different now right
17:22 - yeah although i think that this this
17:24 - median value would
17:25 - have the same problem that you were
17:26 - describing before sophie where it's like
17:28 - having a bar underneath that's shaded
17:31 - doesn't make a ton of sense for median
17:32 - because there's like points above the
17:33 - bar and below the bar
17:34 - and all that sort of stuff yeah all
17:36 - those central tendency things
17:39 - um but it's still it still is important
17:42 - to communicate that information
17:44 - about your data i just think with box
17:48 - plots or something along those lines
17:50 - which we're going to get to yeah and
17:51 - then last thing we
17:53 - our problem here so because we can just
17:54 - like go on a million tangents so we will
17:56 - try to get through this lesson
17:57 - but the last thing is that the error
18:00 - bars here
18:01 - like are nonsense right can you have an
18:04 - error on count or frequency
18:08 - uh you could it depends on
18:12 - what your data looked like uh
18:16 - i could imagine a situation where
18:19 - you're where you're doing something like
18:23 - uh like
18:26 - repeating the same experiment multiple
18:28 - times to see
18:29 - interesting how many of a particular
18:33 - thing show up in a sample um
18:37 - over a bunch of repeated experiments and
18:40 - then
18:40 - you would have some error around the
18:43 - number of people in that experiment
18:45 - yeah interesting okay cool well
18:48 - for now yeah these error bars uh don't
18:50 - make sense and so i guess that it kind
18:52 - of shows that there's no error there
18:55 - okay cool so let's move on so we're
18:57 - gonna instead of showing those
18:59 - bar plots to show the median of um
19:03 - of these valley uh of these different
19:05 - data sets or even the count of these
19:06 - data sets
19:07 - instead we're going to look at a kde
19:08 - plot so sophie can you kind of describe
19:10 - what a
19:11 - kde plot is and how it's different than
19:14 - either a bar plot or a histogram
19:16 - sure um i think well
19:20 - there's two different angles that i'm
19:23 - going to come at this so
19:25 - the first thing i'll say is that a lot
19:27 - of
19:28 - times if you are doing any sort of
19:31 - statistical analysis
19:32 - you're trying to think about the
19:34 - distribution
19:36 - that your data is coming from and you're
19:38 - trying to estimate something about the
19:40 - distribution that your data is coming
19:42 - from
19:43 - um and so uh something that people have
19:46 - spent a lot of time
19:47 - kind of thinking about uh
19:50 - is probability distributions and there
19:53 - are many different types of probability
19:55 - distributions
19:56 - and so um and basically what a
19:59 - probability distribution
20:00 - is is it's some it's you can think of it
20:04 - like this curve that we're looking at in
20:06 - this in this picture where
20:08 - there's some area under the curve and
20:11 - um and that area should theoretically
20:15 - in a true probability distribution it
20:17 - should sum to one
20:19 - um and it gives you some sense of how
20:22 - likely different values in if you were
20:25 - to like randomly sample from your data
20:28 - it gives you a sense of how likely
20:30 - certain values would be to show up
20:32 - um and so using kind of like the area
20:35 - under the curve
20:36 - right if you look at the area under the
20:37 - curve between zero and one
20:39 - that would be estimating the probability
20:41 - that if you randomly chose
20:43 - um a value from your data set that that
20:46 - value would be between zero and one
20:49 - and so histogram so coming at it from a
20:52 - different angle
20:53 - histograms are usually used to show
20:56 - like a distribution so and usually
21:00 - um you're plotting like a frequency so
21:02 - you're saying there's this many numbers
21:04 - in my data set
21:05 - uh that are between zero and one and so
21:08 - on your y-axis you might have values
21:10 - like
21:10 - in my actual data i have 100 values and
21:14 - 25 of them are between zero and one and
21:16 - so you would have
21:18 - like a rectangle that has a height of 25
21:21 - um and a width of one between zero and
21:24 - one
21:25 - um and that would that would represent
21:27 - something about the number of values in
21:29 - your data that are in that range
21:31 - but you might also care about what's the
21:34 - probability
21:35 - that if i randomly chose a data point
21:38 - from my data set that it would be in
21:40 - that range
21:41 - and the reason that you might care about
21:42 - that is one if you're thinking about
21:45 - um error so if you're trying to estimate
21:48 - error
21:49 - statisticians a lot of the time are
21:51 - trying to estimate okay what's the
21:53 - probability that something is between
21:55 - two values based on the the data that i
21:59 - have
21:59 - but um but also because
22:03 - and now i lost my train of thought
22:06 - um oh but also because uh
22:09 - if you're trying to compare two
22:11 - distributions um
22:12 - so like for example um let's say you're
22:16 - running an
22:16 - experiment and you have
22:20 - a um you're taking like the temperature
22:22 - of people
22:24 - who took ibuprofen
22:27 - and versus people who didn't take
22:28 - ibuprofen and let's say
22:30 - that you didn't want to expose too many
22:32 - people to ibuprofen so you had a small
22:34 - group of people
22:35 - a much smaller group of people whose
22:36 - temperatures you had
22:38 - who um were taking ibuprofen compared to
22:41 - the ones that didn't
22:43 - then um then you might be trying to
22:45 - compare the
22:46 - distribution of temperatures in those
22:48 - two groups and you
22:49 - but you might have very different uh
22:52 - size
22:52 - sample sizes for your control versus
22:55 - your treatment group
22:56 - and if you're just looking at
22:58 - frequencies like there's
23:00 - 25 people in one group whose temperature
23:03 - is between
23:04 - 96 and 98 degrees or whatever it is
23:08 - and there's also 25 in the other group
23:11 - that could mean very different things if
23:12 - the sizes are different like 25 out of
23:14 - 50 people is a very different thing than
23:16 - 25 out of 1000 people um
23:20 - so if you're trying to compare those
23:22 - distributions
23:23 - it would be better to have something
23:25 - that is comparable like a probability
23:28 - of choosing a random person and a range
23:30 - compared to
23:31 - an actual count of the number of people
23:33 - in that range
23:34 - yeah cool so i think we can like play
23:37 - around with this in a little bit where
23:39 - uh in the next exercise we're going to
23:40 - be making some of these kde plots
23:42 - and we can um play around with the size
23:45 - of our data set where
23:46 - i think the data sets that we give you
23:48 - are all of equal size it was the data
23:49 - sets from previous where there were 500
23:51 - but we can look at it of say like okay
23:53 - let's cut this data
23:54 - into you know 50 data points rather than
23:56 - 500
23:57 - and now if we plot um histograms rather
24:00 - than
24:02 - um uh what is it kde like percentage
24:06 - um or probability percentage um the two
24:09 - graphs are going to look very different
24:10 - um
24:11 - and somewhat misleading in some ways and
24:13 - i should also say
24:14 - i'm i'm still talking about like kind of
24:18 - the middle ground between histograms and
24:20 - kde plots which is to say that like
24:22 - you can still plot a normalized
24:24 - histogram where
24:25 - you're plotting probabilities instead of
24:27 - counts um but then
24:29 - one step further is to try to smooth
24:32 - that histogram in a way
24:33 - to get back to what would be like a
24:36 - probability a continuous probability
24:38 - distribution
24:40 - um and so kde stands for kernel density
24:43 - estimation
24:44 - um and it's basically a way sorry i have
24:48 - a dog trying to get into
24:50 - um it's a way of uh
24:53 - smoothing a smoothing a histogram
24:56 - basically
24:57 - so that it resembles a probability
24:59 - distribution
25:00 - um or estimates the probability
25:02 - distribution yeah and we can look into
25:04 - that too where
25:05 - we will be plotting we can plot some
25:07 - histograms and show like okay our bin
25:09 - our bin width here is like you know 10
25:12 - where this is the number of things that
25:13 - follow from fall from 0 to 10 in our
25:15 - data set
25:16 - and then we can think about how kde like
25:18 - smooths that by saying
25:19 - like okay but that's not you know that's
25:22 - not fine grain enough where a kde will
25:24 - show like okay if i had you know exactly
25:26 - if i had a debt or what's the
25:27 - probability of having
25:29 - you know for uh a data point with value
25:31 - of four
25:32 - or something like that rather than this
25:34 - like zero to ten bar
25:36 - yes okay cool so
25:39 - let's do the instructions first so we're
25:41 - working with that same data set
25:43 - so kde plot um so
25:46 - the data again is still df and
25:49 - now we are oh and actually i think that
25:52 - this is
25:53 - let me actually go back up here cool so
25:57 - right so the we're actually going to
25:59 - make four different columns to
26:02 - sn.kde plot because we're going to plot
26:04 - them on top of each other
26:05 - so unlike bar plot where the bar plot
26:08 - just took one data set and said
26:10 - make you know x number of bars depending
26:12 - on how many categories there are
26:14 - here we're actually going to make four
26:17 - different
26:17 - kde plots so i think what this is going
26:21 - to be
26:22 - is going and let me even like look at
26:24 - the hint
26:25 - um bought all the data sets at once
26:29 - instead pass
26:30 - a column of sn s dot kde plot for each
26:32 - data set
26:34 - so let's see so data set one here
26:38 - is going to be i believe just set one
26:43 - and then before i add the others let's
26:45 - see if that works so
26:51 - cool yeah so there's our kde plot for
26:53 - just data set one
26:55 - i'll do the same for data sets
26:58 - two through four one thing that i
27:01 - suppose is a little bit confusing about
27:02 - this one
27:03 - is that um
27:07 - that we make that we make this data
27:08 - frame for you
27:10 - yes but then we still are just using the
27:13 - individual
27:14 - um i do think it's worth maybe pointing
27:17 - out
27:18 - and maybe this goes to your point
27:20 - earlier about the work that you have to
27:22 - do to kind of set up
27:23 - your data which is to say that you know
27:26 - you might in a different setting be
27:29 - importing a csv that has all the data in
27:33 - a single
27:34 - uh a single column with a label like we
27:37 - created here in df
27:39 - and you might have to extract you know
27:42 - all the values
27:43 - that correspond to label one all the
27:45 - values that correspond to label two um
27:48 - in order to plot them on top of each
27:50 - other like this so
27:51 - knowing the format that your data needs
27:54 - to be in
27:54 - in order to plot it using the function
27:56 - you want is also
27:58 - kind of a relevant thing and you might
27:59 - have to work in both directions
28:02 - yeah exactly and again that's kind of
28:03 - like gaining familiarity and con
28:05 - and you know a comfort with just dealing
28:08 - with these pandas data frames where it's
28:09 - like you might not have
28:11 - these data sets readily available for
28:13 - you and so you might have to start
28:14 - parsing through this data frame
28:16 - and again we can print it out here you
28:18 - might have to do things
28:19 - saying um like okay i want the rows
28:22 - where
28:22 - the label is set one i think i can do
28:24 - that fairly quickly let me do
28:27 - i mean this is like df of
28:32 - um where df of label
28:36 - is equal to set one
28:40 - yeah and let me actually do set three
28:43 - just because if i print off the head
28:44 - it's going to be the exact same rows
28:48 - so that so while you're doing that i
28:52 - we have a question that says what is the
28:54 - data frame
28:55 - pre-created in this example being used
28:58 - for
28:58 - um and so uh basically the data frame
29:02 - that we're creating here
29:04 - is actually not getting used in this
29:06 - exercise at all
29:08 - so this same setup is being
29:12 - used for all of the exercises in this
29:14 - lesson
29:15 - and so some of the some of the functions
29:18 - require
29:18 - the data to be in a data frame like the
29:21 - bar plot function
29:22 - um and some of them require separate uh
29:26 - separate vectors basically of with each
29:29 - of the
29:30 - sets of values that you want to plot so
29:34 - we had to have both of them for
29:36 - different exercises
29:37 - um and so they're actually
29:41 - just being recreated here even though
29:44 - yeah in this one we could probably get
29:45 - rid of
29:46 - this this whole thing and it would uh it
29:48 - would work totally fine
29:49 - and maybe it's worth even showing
29:52 - delete this for now if i just print
29:56 - set one this might be a gross printout
29:59 - or it might not even print because it's
30:00 - not a
30:02 - yeah it doesn't even print because uh we
30:03 - haven't configured our kind of like
30:05 - output here to
30:06 - to know how to print just these numpy
30:08 - arrays
30:09 - but if we throw it into a data frame you
30:11 - can we can print it out
30:13 - yeah yeah so so again kind of showing
30:17 - that
30:18 - you could being comfortable with this
30:21 - data manipulation
30:22 - stuff is huge because it's like if you
30:24 - were only given the data frame
30:25 - and like this work that we did uh
30:29 - you know if you were just given this
30:30 - data frame and you had no idea that this
30:32 - set one existed you would have to do
30:35 - something
30:36 - like this where you extract only the
30:40 - um only the rows where label is set
30:43 - three which you can see our rows a
30:44 - thousand through
30:45 - um probably fifteen hundred and so
30:48 - instead of
30:49 - using set one i can just use exactly
30:52 - this guy well i think you need to then
30:55 - pull out the value
30:57 - oh sure yes good call um so
31:00 - i have this and now i want the value
31:02 - from that
31:04 - so that should be the exact same thing
31:08 - and if i scroll down yeah you can see
31:10 - that you know i get the exact same graph
31:13 - so again this this looks ugly this isn't
31:15 - really the point of the lesson but like
31:17 - being being familiar enough to with data
31:20 - frames and how you manipulate the data
31:21 - is probably important once you are
31:23 - working with like real data out in the
31:24 - real world where it's not coming to you
31:26 - in kind of like this
31:27 - nice pre-packaged way yeah
31:31 - cool um sophie should we mess around
31:34 - with
31:35 - um turning this into a histogram for now
31:37 - or do you want to
31:38 - move on again yeah i think it's useful
31:40 - to just show quickly
31:42 - um if you instead of using the kde plot
31:45 - if you use
31:46 - um uh what was it
31:50 - plot or dist plot i think um
31:53 - yeah i think it's dist plot and you can
31:56 - just plot
31:56 - the first one for now step one
32:00 - um and if you run that
32:04 - you'll see let me get rid of these
32:06 - principles
32:09 - um you'll see that this is kind of
32:12 - uh a way oops is it
32:16 - a way of uh i think you need yeah
32:19 - um a way of getting a histogram
32:22 - using seaborne and you'll see that by
32:26 - default it's plotting that kde
32:29 - the kernel destiny the sorry the kernel
32:32 - death
32:33 - density estimator of this probability
32:38 - distribution so you can kind of get a
32:39 - sense of how those things are related
32:41 - right though where where the bars are
32:44 - higher on the histogram you're getting
32:46 - um these kind of like little peaks and
32:49 - then where they're lower
32:50 - uh you're getting um like the
32:53 - curve comes a little bit lower and
32:55 - actually just like you can change bin
32:57 - width
32:58 - um you can also change like a bandwidth
33:01 - parameter
33:01 - on um the kernel density
33:05 - estimator um which changes how sensitive
33:09 - it is
33:10 - to the individual to the like small
33:12 - scale variation
33:14 - um and so if you had a really small
33:17 - bandwidth
33:18 - this might like basically kind of trace
33:21 - a histogram with really small bins um
33:24 - and then if you have a larger bandwidth
33:27 - it might just be a very
33:28 - very smooth curve you could try it i
33:30 - think it's like i think it's bw
33:33 - and then it's just like an integer yeah
33:36 - let's try it
33:38 - see that seemed to not let me do like
33:40 - set
33:42 - it's okay we can we can let go
33:46 - look it up later yeah but but basically
33:49 - sophie what you were talking about
33:50 - earlier with like
33:51 - smoothing is this idea of like there are
33:53 - you know you can see that this is a
33:55 - jagged histogram and so the smoothing
33:57 - process
33:57 - is to make this smooth curve that's like
34:00 - continuous as
34:01 - opposed to um non-continuous like the
34:04 - um the histogram and there's a setting
34:07 - that you can tune to say
34:08 - how much is this divot how much is that
34:11 - going to affect this line basically
34:13 - right yeah exactly um so
34:17 - the one other thing i'll i'll
34:19 - demonstrate so you'll see on these
34:21 - on the y-axis here that we have
34:24 - decimal values that represent
34:27 - probabilities so
34:29 - before when we use plt.hist
34:32 - we were getting frequencies and i'll we
34:34 - can demo that in a second
34:36 - but you'll see that now when we're using
34:38 - this dist plot version
34:40 - um that's plotting that same that kde
34:43 - curve on top of it
34:45 - you're now seeing that even the
34:47 - histogram itself is being
34:50 - normalized to be a probability like a
34:53 - set of probabilities
34:55 - rather than um rather than frequencies
34:59 - and so um i don't know if you want to
35:01 - quickly
35:02 - just in there put um
35:05 - kde equals false and by using
35:08 - that we can switch it back to
35:10 - frequencies um
35:11 - and so now you'll see it's the same
35:14 - shape of a histogram
35:16 - the scale is a little bit different but
35:20 - for the x-axis scale but you'll see that
35:23 - on the y-axis now we've got numbers so
35:26 - it goes from 0 to 70.
35:28 - so even though the shape is the same um
35:31 - the scale is different because we're
35:33 - talking about
35:34 - counts instead of probabilities yeah and
35:36 - i wanted to demo one thing that we were
35:38 - talking about earlier with kind of like
35:39 - the where the size of your data set
35:41 - might be relevant
35:42 - so if we plot these two data sets now
35:45 - again with kde equals false
35:47 - so you can see we're just using counts
35:48 - here it's just kind of a normal
35:50 - histogram it doesn't have anything to do
35:51 - with the like probability percentage
35:52 - stuff
35:53 - um if we just take let's say the first
35:57 - 50 lines from the first data set
36:00 - you'll see that you know this is telling
36:03 - a
36:05 - this this might be this might be a real
36:07 - situation like sophie was said
36:08 - it was saying like okay you might have a
36:09 - group that you have just fewer number of
36:12 - data points from and so this graph and i
36:15 - could like change the alpha here to make
36:17 - it a little bit more visible but
36:18 - that blue in the background right it
36:20 - looks like totally dwarfed compared to
36:22 - this other
36:23 - um this other data set and so
36:26 - setting kde back to true or using the
36:29 - kde function the sns.kbe plot
36:32 - back to true this is going to set it
36:34 - back to
36:35 - um the
36:39 - uh popular uh what is it it's the uh
36:43 - probability distribution right um where
36:46 - now you can see okay
36:48 - these um these 50 data points from set
36:51 - one
36:51 - are all really you know they're all
36:53 - between 60 and 80 for the most part or
36:55 - you know there's a there is a high
36:56 - probability of finding something between
36:58 - 60 and 80
36:59 - whereas the data points for the green
37:01 - set are distributed differently
37:04 - right yeah and this is something
37:08 - even when you're thinking about what
37:10 - kind of plot you need to make
37:12 - i think it's something that is easily
37:15 - coming back to the same point about
37:17 - seabourn being really easy to use
37:19 - um it can be difficult sometimes
37:22 - if you don't look really carefully at
37:24 - the y-axis
37:25 - to know what you're plotting to make
37:28 - sure that you know whether you're
37:29 - plotting frequencies
37:30 - or probabilities because um it make
37:34 - it can make in certain situations a big
37:36 - difference
37:37 - but in other situations they might look
37:39 - exactly the same
37:41 - in the two versions so unless you're
37:42 - paying really close attention you might
37:44 - not
37:45 - notice uh those differences
37:48 - as you're trying to set up your um your
37:51 - code
37:52 - so yeah sophie i think one one question
37:54 - that folks might have is like how do we
37:57 - know how to do this right like uh so in
38:00 - prepping for this
38:01 - you came to me and was like oh hey we
38:02 - should like show this dist plot function
38:05 - instead of the kde plot function and we
38:07 - should be playing around with this kde
38:09 - parameter setting it to true and false
38:10 - to see the difference how do
38:12 - you know how to do that stuff like right
38:15 - like how do you learn how to
38:17 - experiment with all of these different
38:18 - kind of functions
38:20 - um i google everything
38:24 - uh i so i
38:27 - some of it comes from kind of like
38:29 - understanding what's going on
38:31 - from taking classes like it's something
38:34 - that i
38:35 - naturally think about so it's not
38:37 - necessarily something that
38:39 - you might have thought about when you
38:40 - were going through this path
38:42 - um the first time but i basically
38:46 - just googled how to make a histogram
38:49 - to see if there is a different function
38:52 - for a histogram
38:53 - in seaborne um so i tried i googled like
38:57 - seaborne histogram function and then
39:01 - basically saw that they there's a
39:04 - function within
39:05 - seaborn that allows you to make all
39:08 - different types of distribution plots
39:10 - which is disk plot and so this allows
39:13 - you
39:14 - a lot of flexibility and then yeah i
39:16 - read this exact
39:18 - um document which is the function
39:20 - documentation
39:21 - um super super helpful and the first
39:24 - thing i usually look at when i look at
39:26 - these is
39:27 - at the top it gives you the usage and it
39:30 - tells you
39:31 - in that usage what the uh what the
39:34 - default values are
39:35 - and then if you kind of look through
39:38 - what the different parameters are
39:39 - you might be able to kind of guess which
39:42 - things
39:43 - are useful to you to get the type of
39:45 - plot you want and then you can read a
39:47 - little bit further
39:49 - thanks yeah in general i think like kind
39:51 - of one of the uses of co academy is to
39:53 - get
39:54 - comfortable enough with whatever
39:55 - technology you're using to
39:57 - like get off the ground right where it's
39:59 - like okay if you've never used seaborne
40:01 - before it's probably helpful to like run
40:04 - through a very beginning example
40:05 - of using this kde plot function to
40:09 - graph a data set that we've given you
40:11 - but then as
40:12 - as you get more comfortable and as you
40:14 - like start to understand how all these
40:15 - systems work together
40:17 - i think doing exactly what sophie and i
40:19 - are doing and you can clearly even do it
40:21 - in codecademy still where
40:22 - you can you know play around with these
40:24 - data sets and experiment with
40:25 - to see how they change if you only take
40:27 - the 50 first 50 elements from the data
40:29 - set or if you turn kde to false like
40:32 - as soon as as soon as you get
40:33 - comfortable with whatever technology
40:36 - you're using
40:36 - i think it's really important to like
40:38 - start asking questions that you're
40:39 - actually interested in so like sophie's
40:41 - question
40:42 - was how do you do a histogram in um
40:45 - in seabourn and so then you can start
40:47 - being empowered to like
40:49 - look through the documentation and play
40:50 - around with it and
40:52 - um yeah i mean that that's what i do as
40:55 - well for any
40:56 - any question that i have where it's like
40:57 - you googled the answer and then you'll
40:58 - be led to the documentation with
41:00 - examples and
41:01 - hopefully you are familiar enough with
41:03 - the the tool to not be completely
41:05 - overwhelmed by the documentation and
41:07 - enough to like
41:08 - start to play around with it yeah
41:10 - another thing i'll say is that
41:12 - um once you figure out how to do all
41:15 - this stuff in one language
41:17 - once you figure out all the the
41:19 - functionality that you have in python
41:21 - if you then needed to make something in
41:23 - r or vice versa
41:25 - then at least you know what's possible
41:27 - and like a
41:28 - a language that a lot of people are
41:30 - using and then that can help
41:32 - um figure out what to look for so a lot
41:35 - of these skills are transferable it's
41:37 - not just about
41:38 - python and seaborn because there's going
41:40 - to be a new plotting library and
41:42 - python i'm sure very soon right right
41:45 - you like never
41:46 - you know these things change so quickly
41:47 - that it's like you know in
41:49 - in 15 years who knows what the state of
41:51 - matplotlib is like
41:52 - you know hopefully it'll be similar and
41:55 - better and greater but it could be an
41:56 - entirely different tool um i want to
41:59 - briefly answer questions from the chat
42:02 - so admin says uh can you import the csv
42:05 - files into a database and still run the
42:07 - histogram on the database
42:09 - um so i i
42:12 - don't know what you exactly mean by
42:14 - database whether that means like
42:16 - sql stuff um like that kind of like
42:19 - official database or just bringing it
42:21 - into
42:22 - a data frame in python which kind of
42:24 - serves as a data
42:25 - database in in some ways um but yeah you
42:28 - can see that um
42:31 - we are demoing bringing a csv file into
42:34 - python
42:34 - and then graphing on it but you can do
42:37 - this in any language or with
42:39 - with databases where you could turn this
42:40 - csv file into
42:42 - a database that you can run sql queries
42:44 - on and then
42:45 - from those sql queries make you know
42:47 - make any visualizations using a variety
42:49 - of tools
42:50 - um and then
42:54 - sorry i don't know how to pronounce your
42:55 - name on your rokt um
42:58 - is asking uh basically
43:02 - where is all this visualization uh
43:04 - visualizing data stuff
43:05 - how does this relate to everything else
43:07 - in the world of coding like
43:08 - is it a part of computer science is it
43:10 - part of data science
43:12 - what is computer science good for
43:15 - i think that this particular set
43:18 - of visualization tools is really useful
43:22 - for
43:23 - data science in particular in that data
43:25 - science often works with
43:27 - big databases or data sets um and
43:30 - you know you have to you have to clean
43:32 - that data you have to
43:33 - um you know visualize the data you have
43:35 - to do statistics on that data that's
43:37 - kind of like the world of data science
43:39 - as opposed to computer science i think
43:41 - is the way that i view computer science
43:43 - is a little bit more
43:44 - um like programming slash
43:49 - algorithms heavy where it's like more
43:52 - traditional computer science in the
43:53 - academic sense of just like learning to
43:55 - think like a programmer learning to
43:57 - [Music]
43:58 - really hone the like fundamental
44:00 - programming topics that you'll see in
44:01 - any language
44:02 - um so i don't know that's kind of my
44:06 - take on the differences between the two
44:07 - of course both are really wide
44:10 - topics where data data science isn't
44:13 - just in python you can do it in r
44:15 - you can do it in sql or like like
44:17 - admin is saying
44:19 - just in the same way that computer
44:20 - science you can learn all those computer
44:22 - science topics in python or java or c
44:24 - sharp or c plus plus or like any of
44:26 - these uh
44:28 - any of these topics um both kind of both
44:30 - domains are really wide
44:32 - yeah i for me like my interest
44:36 - in understanding data is what kind of
44:39 - brought me into the fold with computer
44:41 - science like
44:42 - i never i took you know an intro to
44:45 - computer science class in high school
44:47 - and i took one over the summer in
44:48 - college
44:49 - but um but it wasn't until i got really
44:53 - interested
44:54 - in learning how to visualize and and
44:57 - summarize data that i actually like
45:00 - learned a lot
45:01 - of um the kind of more traditional
45:05 - computer science curriculum because
45:09 - a lot of times when you're trying to
45:11 - accomplish something like clean a data
45:13 - set or something
45:14 - you need to utilize tools that
45:19 - people have figured out better
45:21 - algorithms for
45:22 - um through like computer science
45:26 - like searching for something in a data
45:28 - set
45:29 - yeah yeah for example like the you know
45:32 - the stuff that i was doing in the last
45:34 - exercise to like
45:35 - check for a quality of like oh was this
45:37 - row in the data set
45:38 - equal to um you know whatever the
45:42 - whatever the word was set one like that
45:44 - checking for equality i would typically
45:45 - think of that's like more of a computer
45:47 - science
45:48 - programming type operation that we're
45:50 - using in a data science context
45:52 - um but it's like you know that's
45:53 - something that you might learn
45:55 - really early on in a intro computer
45:57 - science course
45:58 - yeah um let me take like two more
46:00 - minutes to touch on the like discussion
46:03 - about
46:03 - sql that's happening in the chat um
46:06 - admin
46:06 - is is asking like yeah so can i bring a
46:08 - csv file into sql
46:10 - and then visualize it and so
46:13 - it's funny because it's the way that i'm
46:16 - not a
46:17 - sequel pro i don't i haven't used it a
46:19 - ton
46:20 - um but the way that i if i were to use
46:24 - sql probably what i would do is i have a
46:25 - sql database
46:27 - that i need to get stuff out of and i
46:28 - would probably use python
46:30 - to pull the stuff out of the sql
46:32 - database and into python and then use my
46:34 - python skills in order to visualize it
46:36 - i'm sure that there are other ways to
46:38 - just like skip that middle step
46:40 - of um bring it into python i'm sure that
46:43 - there are ways to
46:44 - just straight up visualize it from sql
46:46 - there are a lot of like business tools
46:48 - like looker or tableau
46:50 - or things like that that will do it for
46:51 - you or
46:53 - yeah jan recommended sql sql alchemy
46:57 - um that will then load the data into
46:59 - pandas um
47:01 - but yeah in general admin i would say
47:04 - like
47:05 - if you have a csv file i would
47:08 - if it were me because i'm not super
47:09 - proficient in sql i would try to skip
47:11 - that step of throwing it into a sql
47:12 - database if you have the csv file you
47:14 - can just load it straight into pandas
47:16 - using
47:16 - you know the various pandas functions um
47:20 - like i suppose this is a numpy function
47:22 - but you know
47:23 - python can load a csv file into pandas
47:26 - for you
47:27 - yeah basically you can either
47:30 - use sql to extract what you want save it
47:32 - as a csv and then load it
47:34 - into python or it sounds like there are
47:37 - or i'm sure
47:38 - i know there are python packages that
47:40 - allow you to connect to a database
47:42 - and just pull what you want directly in
47:44 - and save it
47:45 - as a data frame skipping the step of
47:47 - like doing the sql separately saving it
47:50 - as a csv and then pulling it in
47:52 - yeah but sql in general is a great skill
47:54 - to have for
47:55 - data scientists and something that
47:56 - sophie and i have been been we've been
47:58 - writing curriculum about postgres
48:00 - recently
48:00 - so more sql and database stuff
48:04 - on the way from codecademy um
48:08 - okay cool so if we have like 10 more
48:10 - minutes so maybe we can kind of like
48:12 - uh i don't know we'll see how far we get
48:14 - i think that we can just talk about box
48:15 - plots and then maybe we won't get to
48:17 - violin plots um but maybe we will uh
48:21 - these are pretty quick yeah
48:24 - this type of plot right here that those
48:26 - three block box plots
48:28 - that's what i would do in place of bar
48:31 - plots right as
48:34 - sophie was saying earlier like the bar
48:36 - plot for the mean
48:37 - really doesn't represent the fact that
48:39 - there's data above and below
48:41 - and so that's exactly what a box plot is
48:44 - doing where we can pass in our data
48:46 - frame
48:47 - um give it labels so again x
48:50 - the x values that i want are the label
48:53 - column
48:53 - from my data frame and the y value is
48:56 - the value column
48:57 - for my data frame and then let me do
49:01 - show to display this
49:06 - cool and so again this is like kind of
49:08 - showing
49:10 - this is showing it in a different way
49:11 - right because if you remember back to
49:13 - the
49:13 - last exercise the um the green one
49:17 - was the one that had it was what is it
49:19 - bimodal is that the
49:20 - uh stats term of it had two columns oh
49:24 - yeah
49:28 - so it's interesting where box plots are
49:30 - kind of falling short in representing
49:32 - that right where it's showing that the
49:34 - the mean or is the the middle line is
49:36 - the median correct
49:38 - um yeah it's the median and then the
49:40 - inner quartile range
49:42 - are the edges of the block of the boxes
49:45 - yeah so the box plot you can show is
49:48 - kind of showing the distribution for
49:49 - this green
49:50 - set is definitely wider than the blue
49:52 - set but it's really not displaying the
49:54 - bimodal property of it in a way that the
49:57 - that the previous
49:58 - graph was and i think that's that's
50:00 - really where the violin
50:02 - plots come in super handy where it's
50:05 - kind of
50:05 - combining uh the best of both worlds and
50:08 - that
50:10 - yeah we have specific exercises on co
50:12 - academy like really diving into what a
50:14 - box plot is showing talking about the
50:16 - interquartile range talking about what
50:18 - the whiskers are what the outliers are
50:20 - are talking about so um yeah
50:24 - all of that stuff can be found in the
50:25 - data science path if you want like a
50:27 - deeper dive into
50:28 - box plots i think it's in here too um
50:32 - but yeah the the i think the lines are
50:34 - just nice showing you the
50:36 - 95 of the data so it's like 95
50:40 - of the data is in between the two lines
50:43 - and then any outliers are shown as
50:45 - i think those are diamonds yeah and then
50:48 - yeah um i see
50:52 - a question asking should we focus more
50:55 - on
50:55 - using libraries or focus on
50:59 - um how libraries work and i think
51:03 - i'm just going to answer that super
51:05 - quickly by saying that
51:06 - i think just playing around with
51:10 - any existing library is really how you
51:12 - learn the fundamentals so
51:14 - i think like understanding the
51:17 - fundamentals of
51:18 - what is a box plot is you know super
51:21 - important but one of the best ways to
51:23 - learn
51:24 - what a box plot looks like with
51:25 - different data sets is to like actually
51:27 - load some data and play around with the
51:29 - library and
51:30 - once you learn one library you can
51:33 - always
51:34 - learn another one so yeah i would agree
51:37 - with that i think
51:38 - um learning like how libraries work
51:42 - on a on a broad scale is potentially
51:46 - confusing for a
51:47 - brand new learner of like learning how
51:49 - like the the file system works and like
51:51 - okay how is python like actually loading
51:53 - this library
51:54 - and i would yeah i would echo what
51:56 - sophie is saying of like
51:58 - um play around with some libraries um
52:01 - get an understanding of how those
52:03 - specific libraries work and the more
52:04 - that you do that you'll
52:05 - get a better understanding of um how
52:08 - like the
52:09 - importing library system actually works
52:11 - where as you can see there are
52:13 - many different ways to import them um
52:16 - and you'll start to kind of see the
52:18 - patterns that emerge um
52:20 - we also have a question from sami about
52:23 - what the heck is this library
52:24 - this is an unfortunate thing that we
52:26 - need to show in this uh
52:28 - in this python file in order for us to
52:31 - render your
52:32 - uh your drawing on the website if you
52:35 - were doing this on your own computer you
52:36 - wouldn't need this
52:37 - and every time you hit you run plot.show
52:40 - it will just like pop up a window on
52:42 - your machine um
52:44 - with the graph there but uh yeah this is
52:46 - how we get around that
52:49 - um okay seven minutes left
52:53 - violin plots uh so sophie you want to
52:55 - talk about violin plots as i
52:57 - copy yours so just like we saw in the
53:01 - last
53:02 - uh the last section on
53:06 - box plots they give you a little bit
53:09 - more information
53:10 - than just plotting means or medians or
53:13 - something like that plotting the central
53:15 - tendency
53:16 - um and showing whoops
53:19 - i think alex might have dropped out um
53:23 - temporarily but yeah so uh so they show
53:27 - you a little bit
53:28 - more than just the the mean or the
53:30 - median but they don't give you a lot of
53:33 - detail
53:33 - about the distribution that you might
53:36 - get from
53:37 - a histogram and so now we can kind of
53:41 - combine all
53:42 - of that information into a single plot
53:45 - and um so these violin plots are kind of
53:48 - it's almost like the histogram that you
53:50 - would or the
53:51 - the kde estimation of the histogram
53:55 - um is getting kind of uh
53:58 - like cement it's happening on both sides
54:02 - of
54:03 - what is essentially a box plot in the
54:05 - middle so
54:06 - now we're in that green the second data
54:09 - set
54:10 - um we couldn't see the bimodality in the
54:13 - box plot
54:14 - now when we plot this violin plot we can
54:17 - see that by modality
54:19 - yeah my internet blocked out so i
54:26 - oh no he might be gone again
54:30 - um hopefully he'll come back
54:34 - uh but yeah so i think this is another
54:36 - example
54:38 - um where knowing that you have different
54:42 - types of visualizations at your
54:43 - fingertips i hope it holds for six more
54:45 - minutes here
54:47 - i think i'm back am i back yeah you're
54:49 - back i was talking over you potentially
54:51 - because you're out for
54:52 - another second at least on my computer
54:59 - oh no okay
55:03 - um i am going to wrap things up
55:06 - because i think that alex's internet is
55:10 - um is a little bit spotty so
55:15 - this is basically the end of this lesson
55:17 - oh no
55:18 - you're back
55:21 - no um and there are a couple more
55:25 - articles in here
55:26 - in the in that same path about different
55:30 - types of uh visualizations you can make
55:32 - ways that you can customize
55:34 - the coloring um ways that you can
55:36 - customize the themes
55:37 - of the plots and um and so those are
55:40 - really kind of fun to take a look at
55:42 - and play around with if you get some
55:44 - more time and then there's also some
55:46 - on platform and off platform projects
55:49 - that are really worth taking a look at
55:51 - um i think there were a lot of questions
55:53 - about
55:54 - csv files and um
55:57 - and how you can like load data and
55:59 - actually
56:01 - deal with the different types of data
56:03 - sets that you might
56:04 - see in a real world context so um
56:08 - so i think that it
56:11 - it is really helpful to work on some of
56:13 - those off platform projects so you can
56:15 - really get a sense of that
56:17 - um i'll just continue answering
56:19 - questions for the last couple of minutes
56:21 - i see is computer science career path
56:25 - good for a math student um i was
56:28 - a math major in college i studied i
56:31 - studied math before i studied
56:33 - computer science really and um and i
56:36 - think that like
56:37 - thinking about things from a mathematics
56:40 - perspective can really help
56:42 - um if you are trying to then code
56:44 - something it uses a lot of the same
56:47 - types of skills and um and types of
56:50 - thinking
56:51 - and uh
56:54 - to learn how pro so um so the
56:58 - question is does uh
57:02 - does i'm a little confused by the
57:05 - question but i think
57:06 - as you're asking whether computer
57:09 - science
57:10 - and math can combine to
57:13 - um to
57:17 - teach you how to how programming a
57:19 - language actually works
57:22 - i'm not i'm gonna defer to alex maybe on
57:26 - thursday to answer that question
57:28 - um alex says plug the show on thursday
57:32 - so
57:32 - that's a good segue um on thursday alex
57:35 - and i will be back
57:36 - uh we will be uh doing a pro
57:40 - only event um where we're going to be
57:42 - kind of holding office hours so
57:44 - if you have any questions you can come
57:46 - and ask us usually we prepare
57:48 - a demo so we will probably pick some
57:51 - data sets that we could take a look at
57:54 - and demo how you can use some of these
57:56 - plotting functions on your own computer
57:58 - um and then if anybody has additional
58:00 - questions you can come
58:02 - to that event and come ask us
58:05 - those questions and we'd be happy happy
58:07 - to
58:08 - uh take a look at your code even if
58:11 - there's not too many people usually
58:12 - they're really small so
58:14 - we would love to see you there those are
58:15 - really really fun
58:17 - um i'm gonna sign off
58:21 - but it was great to be here and i hope
58:24 - some of you come on
58:25 - on thursday and happy end of the skill
58:30 - path
58:30 - i hope that you guys learned a lot and i
58:33 - hope that
58:34 - uh this was a useful
58:37 - set of events alex are you back and do
58:40 - you want to say anything or
58:42 - good you're muted if you're
58:48 - okay goodbye
59:22 - you

Cleaned transcript:

hi everyone how's it going um for all of you watching my name is alex koontz and i'm here with my coworker sophie hi i'm sophie hi um cool and so we are here today to do another session of codecademy live this is actually our last one i think we ended up doing 13 it took us 13 sessions to get through all of the lessons in this visualized data with python module which i'm excited that we actually made it to the to the very end yeah um you know it's a lucky number yeah that's true um you know we always could have done so so many more there were so many projects that we skipped over and quizzes and capstone projects and all that sort of good stuff so there's definitely more in this module that we didn't get a chance to do but um fun to do all of the lessons so um yeah a little bit of setup so i know that we are live on several different places we're live on facebook youtube i think twitch although uh we don't have a ton of subscribers on twitch so if you're watching and uh are on twitch you can go to subscribe to us there um and then twitter um if you're watching live sophie and i are mostly gonna be looking at the youtube chat so if you want to chat with us live you can go ahead and talk with us there i see a lot of people already that i recognize pro gamer talia um let's see uh oh we got someone new eric hello eric um yeah so if you're watching us live feel free to chat with us on youtube and then if you're watching us in the um the recordings on youtube that are posted afterwards this is a part of a i guess 13 part series where we walk through the entirety of our visualized data with python skill path and so there's a fancy little playlist and you can watch all of that so um we're getting some spam from pro gamer pro gamer it'd be great if you couldn't do that but uh but fun to see everybody in chat um cool so sophie let's jump right into it i'm going to go ahead and share my screen find the right one to share all right all right sophie can you see that i can cool um and in fact i'm gonna back out one just to the the path just to show where we are we are in the very last lesson on this path and so we're in the advanced graphing stage learning seabourn um after kind of experimenting with matplotlib and with pandas um sophie you and i together we went over some of the math.lib stuff or maybe it was the panda stuff but you haven't done any of the seabourn lessons yet with me what are your overall thoughts on seabourn compared to like matplotlib or you know you're our inhouse r expert compared to like how r does graphing stuff um well i think you guys discussed this a little bit last week but i think seabourn it makes a lot of things really simple um so there's not a lot of syntax you can kind of just like throw something into the functions and get something out so uh and it also fixes some of the difficulties that we experience with matpotlib so i know you and i went over the bar plots uh in matplotlib and we were kind of complaining a little bit about creating uh the like the xaxis values and all of that is way easier it seems with seaborne which i think both of us didn't realize until we got up to this module um but yeah i think there the flip side to that as you guys were discussing last week is that um you have to be really careful about what you're plotting because sometimes you know the ease means you don't necessarily need to be thinking about it as much in order to get a plot out um but then it is extra important that you then look at the plot make sure you understand what the output is and make sure you understand um what you need to do to change it if you need to change it in any way so like you need to know that you're plotting the mean by default in a bar plot um because you don't necessarily have to say plot the mean here yeah i think we'll let's go ahead and get started but yeah that's the thing that i kind of want to underscore here is that seabourn is it's great that seaborn makes it really easy to do these plots but because it's so easy to do these plots now now we can like really devote time to thinking about the statistics behind these plots and like you know sophie and i have gone through this already and like we have a couple of talking points where you know there's so many different ways to make graphs that look similar but are really just playing very different things and so it's like now that we are working with seaborne it's pretty easy to make any of these graphs we can really think about the differences between them what we actually want to be showing how we um how some graphs might be misrepresenting the data that kind of stuff um so that's what this lesson is really talking about um where it's going to introduce a couple of different new types of graphs and then along the way sophie and i will kind of um throw in some bonus little details here um cool so let's go ahead and get started i'll go back to the introduction here um so this introduction is really just kind of again showing a jupiter notebook here in the learning environment i know that when i'm working on my own computer in um in python i'm always working in jupyter notebook stuff we actually just had an internal codecad me hackathon that dophie and i worked on a project together and uh i i was you know hacking up some some code in python and so it's working in a joke jupiter notebook and sophie i know you were using um r studio and r yeah but i also love jupiter notebooks they just make everything look so nice yeah um yeah so we're kind of so this exercise we're kind of showing the um one the advantages of a jupiter notebook again that's like being able to integrate uh text with code and really kind of being able to write a report up and then furthermore we're kind of showing a preview of what's coming in this lesson so showing how bar plots could potentially be misleading about the data where these three bar plots all look the same right it's all showing the same amount of data in these three categories but then as we look further into different types of plots you can see that the shape of the data is very different and so we're going to look into kde plots which i actually didn't know i'm hoping sophie you can explain a little bit of like the precise definition of kde plots are like the difference between a kde plot and a histogram or a bar chart because i'm not super familiar with with these um we're gonna do kde plots box plots and violin plots so cool let's go ahead and get started um all right so this first exercise is again kind of showing how data can be misleading if you are not using the correct graph and so in this exercise you'll see that we're going to just make a bar plot using these three data sets and again it's kind of showing uh seaborne's very quick syntax where you just need to pass in the data that you're using and then the values that you want on the x and y um labels and specifically these are like the columns from a pandas data frame so let's see it says compare you're interested in comparing data collect from different locations you've imported four different data sets using numpy and have combined them into one data frame use sms dot bar plot to graph the data set in one plot with label on the x value or on the x axis and value on the y axis so this is just going to be s s dot bar plot and now let's see let me go back up to my example code here so i'm passing data frames which you can tell we've given four data frames i think or no we we're gonna be just using df as our data frame and we have four different labels so alex it might be helpful i know it's gonna flag an error but do you wanna uh do you wanna just print with the data frame or print like df.head really quickly so that everyone can see what we're looking at sure that's a good idea yeah and so you can actually see that the way that this data is organized this actually is not showing a ton but or it's not showing the different labels it's showing only ones from set one but this is a big data frame i think it's two thousand rows and every data point is labeled either in set one set two set three or seven four and has a value associated with it yeah and that's what all the code above here is doing um and that's why we're using the words label and value so those are referencing those columns of that data frame right you could even see here i could change this to be like my label and then if i do that you'll see that the name of this data frame has now changed to my label and change it back to label for now just because i don't know what our test behind the scenes is actually looking for but cool let's now do sns dot bar plot is it bar plot what is it yes and then the data frame that i'm using is going to be or is it data it's data the data that i'm using is stored in our data frame name df i'm going to set x equal to label i'm going to set y equal to value cool last thing is that i have to do plt.show um what's up a little bit confusing that we use seaborne to actually do the plotting and then we have to come back to matplotlib to actually call the show function um actually might want to experiment with like if there is an s if there's a seaborn show function that would work um i think um my understanding and i don't know if this is correct but my understanding is that seabourn is built on top of matplotlib so it uses some of the matplotlib functions um within seaborne yeah so i imagine you could probably change that and it would still exist yeah i'm gonna actually get rid of this to get rid of our plot now let's see what happens if we just do sns.show yeah it doesn't oh it didn't work it doesn't plod i'm actually surprised by that i'm also surprised that we need to be importing matplotlib i kind of would have figured that because seaborn runs on matplotlib if we imported seaborne it would have also grabbed matplotlib but i suppose that's uh that's not how it works um cool yeah so i want to emphasize that there's you know there's a lot of stuff going up here on the top a lot of stuff about pandas and data frames um we covered that earlier in this um in the visualized data with python um skill path that's definitely uh you know you could devote so much time to just learning about data frames and really how to manipulate all that stuff so i'm gonna we're gonna kind of fly through all of this data frame stuff for now but definitely a good tool to learn how to use i would say like almost more important than making the graph itself is like learning how to like work with your data is at least the part that i find satisfying um and sometimes i find graphing frustrated frustrating yeah no that's the part that always takes the longest is getting your data into the format you need in order to actually make a plot yeah cool all right so the point of all of this was to show that um what was this this was plt.show the point of all this was to show that if we just use bar plots these look absolutely identical which really tells us nothing um right we we really don't know a whole lot about this data other than there seem to be equal number of data points in all these cells you're saying equal number of data points but sure these are not uh i think these are not counts these are actually means i believe so um so there's an equal number of data points in each of the groups uh but that's not what this is showing i think it's actually showing that the means of the groups are pretty similar totally and you know what as i was saying i realized like these error bars would be really mean if this it would be really weird if this was just the count um right bar plot by default shows the mean of each group and sophia i know you have yeah i was telling alex before we got on that one of the things and i'm not i'm not quite sure where i developed this opinion but um i think it's kind of interesting to me that matt potlib and seabourn are using the mean to by default to plot these bar plots because usually if i was designing a plot for something if i wanted to show a mean comparison with some sort of error i probably would not use a bar plot and one of the reasons for that is that the bar plot um if you kind of look at this so if you see that the blue bar for example um the only data that's actually being plotted here is that top line right the only thing that is actually being communicated by that whole space of bar is what the mean is and then i guess with the error bar there's some like error around the mean but all of the stuff that's shaded in below the bar actually doesn't really mean anything it's not reflecting anything about the data and if i pass in a different data set with the same mean but completely different data um i would not be communicating anything or this plot would not look any different and i think by shading in all the space below the mean but not shading any of the space above the mean you're actually kind of like misrepresenting the data in a way because you're kind of making it seem like there's data below the mean or something but not above the mean which is not really accurate um and so normally i would use a bar plot if i was trying to show comparative frequencies of something across categories that did not have any sort of inherent order so um you know like i gave the example this morning of uh my boyfriend's aunt has a lot of animals and so maybe i want to make a bar plot of how many of each animal type she has and so maybe there's like three dogs and two cats and um and so those bars could represent the number of each type of animal and then and then those shaded regions kind of communicate something about the number right the area would be directly proportional to the number of each thing in each category but as as a demonstration of comparing means um i find this a little misleading yeah however that is a long way of saying very little well and it's interesting to note that like seaborne does it by default right where it's doing it it's showing the mean by default this was actually something that we went over in the last lesson but i forget the exact syntax and so i want to look up um how to change the function that it's applying so let me look at this um yeah so you can see here in the seaborne documentation that it's using some mean function as the estimator and so i think i can change that and i hope this works i did not practice this beforehand but i think i can change that by saying okay rather than using mean let's change estimator to something like length uh we'll see if this works yeah there we go and you can see now our yaxis has totally changed where it's no longer representing mean because um the mean was at like something like 80. now it's representing length meaning the length of these data sets meaning essentially the count or the frequency so there's 500 things in set one there's 500 things in set two all that sort of stuff um so yeah so you can also do like np.median right you want to see the median value oh those are actually like slightly different now right yeah although i think that this this median value would have the same problem that you were describing before sophie where it's like having a bar underneath that's shaded doesn't make a ton of sense for median because there's like points above the bar and below the bar and all that sort of stuff yeah all those central tendency things um but it's still it still is important to communicate that information about your data i just think with box plots or something along those lines which we're going to get to yeah and then last thing we our problem here so because we can just like go on a million tangents so we will try to get through this lesson but the last thing is that the error bars here like are nonsense right can you have an error on count or frequency uh you could it depends on what your data looked like uh i could imagine a situation where you're where you're doing something like uh like repeating the same experiment multiple times to see interesting how many of a particular thing show up in a sample um over a bunch of repeated experiments and then you would have some error around the number of people in that experiment yeah interesting okay cool well for now yeah these error bars uh don't make sense and so i guess that it kind of shows that there's no error there okay cool so let's move on so we're gonna instead of showing those bar plots to show the median of um of these valley uh of these different data sets or even the count of these data sets instead we're going to look at a kde plot so sophie can you kind of describe what a kde plot is and how it's different than either a bar plot or a histogram sure um i think well there's two different angles that i'm going to come at this so the first thing i'll say is that a lot of times if you are doing any sort of statistical analysis you're trying to think about the distribution that your data is coming from and you're trying to estimate something about the distribution that your data is coming from um and so uh something that people have spent a lot of time kind of thinking about uh is probability distributions and there are many different types of probability distributions and so um and basically what a probability distribution is is it's some it's you can think of it like this curve that we're looking at in this in this picture where there's some area under the curve and um and that area should theoretically in a true probability distribution it should sum to one um and it gives you some sense of how likely different values in if you were to like randomly sample from your data it gives you a sense of how likely certain values would be to show up um and so using kind of like the area under the curve right if you look at the area under the curve between zero and one that would be estimating the probability that if you randomly chose um a value from your data set that that value would be between zero and one and so histogram so coming at it from a different angle histograms are usually used to show like a distribution so and usually um you're plotting like a frequency so you're saying there's this many numbers in my data set uh that are between zero and one and so on your yaxis you might have values like in my actual data i have 100 values and 25 of them are between zero and one and so you would have like a rectangle that has a height of 25 um and a width of one between zero and one um and that would that would represent something about the number of values in your data that are in that range but you might also care about what's the probability that if i randomly chose a data point from my data set that it would be in that range and the reason that you might care about that is one if you're thinking about um error so if you're trying to estimate error statisticians a lot of the time are trying to estimate okay what's the probability that something is between two values based on the the data that i have but um but also because and now i lost my train of thought um oh but also because uh if you're trying to compare two distributions um so like for example um let's say you're running an experiment and you have a um you're taking like the temperature of people who took ibuprofen and versus people who didn't take ibuprofen and let's say that you didn't want to expose too many people to ibuprofen so you had a small group of people a much smaller group of people whose temperatures you had who um were taking ibuprofen compared to the ones that didn't then um then you might be trying to compare the distribution of temperatures in those two groups and you but you might have very different uh size sample sizes for your control versus your treatment group and if you're just looking at frequencies like there's 25 people in one group whose temperature is between 96 and 98 degrees or whatever it is and there's also 25 in the other group that could mean very different things if the sizes are different like 25 out of 50 people is a very different thing than 25 out of 1000 people um so if you're trying to compare those distributions it would be better to have something that is comparable like a probability of choosing a random person and a range compared to an actual count of the number of people in that range yeah cool so i think we can like play around with this in a little bit where uh in the next exercise we're going to be making some of these kde plots and we can um play around with the size of our data set where i think the data sets that we give you are all of equal size it was the data sets from previous where there were 500 but we can look at it of say like okay let's cut this data into you know 50 data points rather than 500 and now if we plot um histograms rather than um uh what is it kde like percentage um or probability percentage um the two graphs are going to look very different um and somewhat misleading in some ways and i should also say i'm i'm still talking about like kind of the middle ground between histograms and kde plots which is to say that like you can still plot a normalized histogram where you're plotting probabilities instead of counts um but then one step further is to try to smooth that histogram in a way to get back to what would be like a probability a continuous probability distribution um and so kde stands for kernel density estimation um and it's basically a way sorry i have a dog trying to get into um it's a way of uh smoothing a smoothing a histogram basically so that it resembles a probability distribution um or estimates the probability distribution yeah and we can look into that too where we will be plotting we can plot some histograms and show like okay our bin our bin width here is like you know 10 where this is the number of things that follow from fall from 0 to 10 in our data set and then we can think about how kde like smooths that by saying like okay but that's not you know that's not fine grain enough where a kde will show like okay if i had you know exactly if i had a debt or what's the probability of having you know for uh a data point with value of four or something like that rather than this like zero to ten bar yes okay cool so let's do the instructions first so we're working with that same data set so kde plot um so the data again is still df and now we are oh and actually i think that this is let me actually go back up here cool so right so the we're actually going to make four different columns to sn.kde plot because we're going to plot them on top of each other so unlike bar plot where the bar plot just took one data set and said make you know x number of bars depending on how many categories there are here we're actually going to make four different kde plots so i think what this is going to be is going and let me even like look at the hint um bought all the data sets at once instead pass a column of sn s dot kde plot for each data set so let's see so data set one here is going to be i believe just set one and then before i add the others let's see if that works so cool yeah so there's our kde plot for just data set one i'll do the same for data sets two through four one thing that i suppose is a little bit confusing about this one is that um that we make that we make this data frame for you yes but then we still are just using the individual um i do think it's worth maybe pointing out and maybe this goes to your point earlier about the work that you have to do to kind of set up your data which is to say that you know you might in a different setting be importing a csv that has all the data in a single uh a single column with a label like we created here in df and you might have to extract you know all the values that correspond to label one all the values that correspond to label two um in order to plot them on top of each other like this so knowing the format that your data needs to be in in order to plot it using the function you want is also kind of a relevant thing and you might have to work in both directions yeah exactly and again that's kind of like gaining familiarity and con and you know a comfort with just dealing with these pandas data frames where it's like you might not have these data sets readily available for you and so you might have to start parsing through this data frame and again we can print it out here you might have to do things saying um like okay i want the rows where the label is set one i think i can do that fairly quickly let me do i mean this is like df of um where df of label is equal to set one yeah and let me actually do set three just because if i print off the head it's going to be the exact same rows so that so while you're doing that i we have a question that says what is the data frame precreated in this example being used for um and so uh basically the data frame that we're creating here is actually not getting used in this exercise at all so this same setup is being used for all of the exercises in this lesson and so some of the some of the functions require the data to be in a data frame like the bar plot function um and some of them require separate uh separate vectors basically of with each of the sets of values that you want to plot so we had to have both of them for different exercises um and so they're actually just being recreated here even though yeah in this one we could probably get rid of this this whole thing and it would uh it would work totally fine and maybe it's worth even showing delete this for now if i just print set one this might be a gross printout or it might not even print because it's not a yeah it doesn't even print because uh we haven't configured our kind of like output here to to know how to print just these numpy arrays but if we throw it into a data frame you can we can print it out yeah yeah so so again kind of showing that you could being comfortable with this data manipulation stuff is huge because it's like if you were only given the data frame and like this work that we did uh you know if you were just given this data frame and you had no idea that this set one existed you would have to do something like this where you extract only the um only the rows where label is set three which you can see our rows a thousand through um probably fifteen hundred and so instead of using set one i can just use exactly this guy well i think you need to then pull out the value oh sure yes good call um so i have this and now i want the value from that so that should be the exact same thing and if i scroll down yeah you can see that you know i get the exact same graph so again this this looks ugly this isn't really the point of the lesson but like being being familiar enough to with data frames and how you manipulate the data is probably important once you are working with like real data out in the real world where it's not coming to you in kind of like this nice prepackaged way yeah cool um sophie should we mess around with um turning this into a histogram for now or do you want to move on again yeah i think it's useful to just show quickly um if you instead of using the kde plot if you use um uh what was it plot or dist plot i think um yeah i think it's dist plot and you can just plot the first one for now step one um and if you run that you'll see let me get rid of these principles um you'll see that this is kind of uh a way oops is it a way of uh i think you need yeah um a way of getting a histogram using seaborne and you'll see that by default it's plotting that kde the kernel destiny the sorry the kernel death density estimator of this probability distribution so you can kind of get a sense of how those things are related right though where where the bars are higher on the histogram you're getting um these kind of like little peaks and then where they're lower uh you're getting um like the curve comes a little bit lower and actually just like you can change bin width um you can also change like a bandwidth parameter on um the kernel density estimator um which changes how sensitive it is to the individual to the like small scale variation um and so if you had a really small bandwidth this might like basically kind of trace a histogram with really small bins um and then if you have a larger bandwidth it might just be a very very smooth curve you could try it i think it's like i think it's bw and then it's just like an integer yeah let's try it see that seemed to not let me do like set it's okay we can we can let go look it up later yeah but but basically sophie what you were talking about earlier with like smoothing is this idea of like there are you know you can see that this is a jagged histogram and so the smoothing process is to make this smooth curve that's like continuous as opposed to um noncontinuous like the um the histogram and there's a setting that you can tune to say how much is this divot how much is that going to affect this line basically right yeah exactly um so the one other thing i'll i'll demonstrate so you'll see on these on the yaxis here that we have decimal values that represent probabilities so before when we use plt.hist we were getting frequencies and i'll we can demo that in a second but you'll see that now when we're using this dist plot version um that's plotting that same that kde curve on top of it you're now seeing that even the histogram itself is being normalized to be a probability like a set of probabilities rather than um rather than frequencies and so um i don't know if you want to quickly just in there put um kde equals false and by using that we can switch it back to frequencies um and so now you'll see it's the same shape of a histogram the scale is a little bit different but for the xaxis scale but you'll see that on the yaxis now we've got numbers so it goes from 0 to 70. so even though the shape is the same um the scale is different because we're talking about counts instead of probabilities yeah and i wanted to demo one thing that we were talking about earlier with kind of like the where the size of your data set might be relevant so if we plot these two data sets now again with kde equals false so you can see we're just using counts here it's just kind of a normal histogram it doesn't have anything to do with the like probability percentage stuff um if we just take let's say the first 50 lines from the first data set you'll see that you know this is telling a this this might be this might be a real situation like sophie was said it was saying like okay you might have a group that you have just fewer number of data points from and so this graph and i could like change the alpha here to make it a little bit more visible but that blue in the background right it looks like totally dwarfed compared to this other um this other data set and so setting kde back to true or using the kde function the sns.kbe plot back to true this is going to set it back to um the uh popular uh what is it it's the uh probability distribution right um where now you can see okay these um these 50 data points from set one are all really you know they're all between 60 and 80 for the most part or you know there's a there is a high probability of finding something between 60 and 80 whereas the data points for the green set are distributed differently right yeah and this is something even when you're thinking about what kind of plot you need to make i think it's something that is easily coming back to the same point about seabourn being really easy to use um it can be difficult sometimes if you don't look really carefully at the yaxis to know what you're plotting to make sure that you know whether you're plotting frequencies or probabilities because um it make it can make in certain situations a big difference but in other situations they might look exactly the same in the two versions so unless you're paying really close attention you might not notice uh those differences as you're trying to set up your um your code so yeah sophie i think one one question that folks might have is like how do we know how to do this right like uh so in prepping for this you came to me and was like oh hey we should like show this dist plot function instead of the kde plot function and we should be playing around with this kde parameter setting it to true and false to see the difference how do you know how to do that stuff like right like how do you learn how to experiment with all of these different kind of functions um i google everything uh i so i some of it comes from kind of like understanding what's going on from taking classes like it's something that i naturally think about so it's not necessarily something that you might have thought about when you were going through this path um the first time but i basically just googled how to make a histogram to see if there is a different function for a histogram in seaborne um so i tried i googled like seaborne histogram function and then basically saw that they there's a function within seaborn that allows you to make all different types of distribution plots which is disk plot and so this allows you a lot of flexibility and then yeah i read this exact um document which is the function documentation um super super helpful and the first thing i usually look at when i look at these is at the top it gives you the usage and it tells you in that usage what the uh what the default values are and then if you kind of look through what the different parameters are you might be able to kind of guess which things are useful to you to get the type of plot you want and then you can read a little bit further thanks yeah in general i think like kind of one of the uses of co academy is to get comfortable enough with whatever technology you're using to like get off the ground right where it's like okay if you've never used seaborne before it's probably helpful to like run through a very beginning example of using this kde plot function to graph a data set that we've given you but then as as you get more comfortable and as you like start to understand how all these systems work together i think doing exactly what sophie and i are doing and you can clearly even do it in codecademy still where you can you know play around with these data sets and experiment with to see how they change if you only take the 50 first 50 elements from the data set or if you turn kde to false like as soon as as soon as you get comfortable with whatever technology you're using i think it's really important to like start asking questions that you're actually interested in so like sophie's question was how do you do a histogram in um in seabourn and so then you can start being empowered to like look through the documentation and play around with it and um yeah i mean that that's what i do as well for any any question that i have where it's like you googled the answer and then you'll be led to the documentation with examples and hopefully you are familiar enough with the the tool to not be completely overwhelmed by the documentation and enough to like start to play around with it yeah another thing i'll say is that um once you figure out how to do all this stuff in one language once you figure out all the the functionality that you have in python if you then needed to make something in r or vice versa then at least you know what's possible and like a a language that a lot of people are using and then that can help um figure out what to look for so a lot of these skills are transferable it's not just about python and seaborn because there's going to be a new plotting library and python i'm sure very soon right right you like never you know these things change so quickly that it's like you know in in 15 years who knows what the state of matplotlib is like you know hopefully it'll be similar and better and greater but it could be an entirely different tool um i want to briefly answer questions from the chat so admin says uh can you import the csv files into a database and still run the histogram on the database um so i i don't know what you exactly mean by database whether that means like sql stuff um like that kind of like official database or just bringing it into a data frame in python which kind of serves as a data database in in some ways um but yeah you can see that um we are demoing bringing a csv file into python and then graphing on it but you can do this in any language or with with databases where you could turn this csv file into a database that you can run sql queries on and then from those sql queries make you know make any visualizations using a variety of tools um and then sorry i don't know how to pronounce your name on your rokt um is asking uh basically where is all this visualization uh visualizing data stuff how does this relate to everything else in the world of coding like is it a part of computer science is it part of data science what is computer science good for i think that this particular set of visualization tools is really useful for data science in particular in that data science often works with big databases or data sets um and you know you have to you have to clean that data you have to um you know visualize the data you have to do statistics on that data that's kind of like the world of data science as opposed to computer science i think is the way that i view computer science is a little bit more um like programming slash algorithms heavy where it's like more traditional computer science in the academic sense of just like learning to think like a programmer learning to really hone the like fundamental programming topics that you'll see in any language um so i don't know that's kind of my take on the differences between the two of course both are really wide topics where data data science isn't just in python you can do it in r you can do it in sql or like like admin is saying just in the same way that computer science you can learn all those computer science topics in python or java or c sharp or c plus plus or like any of these uh any of these topics um both kind of both domains are really wide yeah i for me like my interest in understanding data is what kind of brought me into the fold with computer science like i never i took you know an intro to computer science class in high school and i took one over the summer in college but um but it wasn't until i got really interested in learning how to visualize and and summarize data that i actually like learned a lot of um the kind of more traditional computer science curriculum because a lot of times when you're trying to accomplish something like clean a data set or something you need to utilize tools that people have figured out better algorithms for um through like computer science like searching for something in a data set yeah yeah for example like the you know the stuff that i was doing in the last exercise to like check for a quality of like oh was this row in the data set equal to um you know whatever the whatever the word was set one like that checking for equality i would typically think of that's like more of a computer science programming type operation that we're using in a data science context um but it's like you know that's something that you might learn really early on in a intro computer science course yeah um let me take like two more minutes to touch on the like discussion about sql that's happening in the chat um admin is is asking like yeah so can i bring a csv file into sql and then visualize it and so it's funny because it's the way that i'm not a sequel pro i don't i haven't used it a ton um but the way that i if i were to use sql probably what i would do is i have a sql database that i need to get stuff out of and i would probably use python to pull the stuff out of the sql database and into python and then use my python skills in order to visualize it i'm sure that there are other ways to just like skip that middle step of um bring it into python i'm sure that there are ways to just straight up visualize it from sql there are a lot of like business tools like looker or tableau or things like that that will do it for you or yeah jan recommended sql sql alchemy um that will then load the data into pandas um but yeah in general admin i would say like if you have a csv file i would if it were me because i'm not super proficient in sql i would try to skip that step of throwing it into a sql database if you have the csv file you can just load it straight into pandas using you know the various pandas functions um like i suppose this is a numpy function but you know python can load a csv file into pandas for you yeah basically you can either use sql to extract what you want save it as a csv and then load it into python or it sounds like there are or i'm sure i know there are python packages that allow you to connect to a database and just pull what you want directly in and save it as a data frame skipping the step of like doing the sql separately saving it as a csv and then pulling it in yeah but sql in general is a great skill to have for data scientists and something that sophie and i have been been we've been writing curriculum about postgres recently so more sql and database stuff on the way from codecademy um okay cool so if we have like 10 more minutes so maybe we can kind of like uh i don't know we'll see how far we get i think that we can just talk about box plots and then maybe we won't get to violin plots um but maybe we will uh these are pretty quick yeah this type of plot right here that those three block box plots that's what i would do in place of bar plots right as sophie was saying earlier like the bar plot for the mean really doesn't represent the fact that there's data above and below and so that's exactly what a box plot is doing where we can pass in our data frame um give it labels so again x the x values that i want are the label column from my data frame and the y value is the value column for my data frame and then let me do show to display this cool and so again this is like kind of showing this is showing it in a different way right because if you remember back to the last exercise the um the green one was the one that had it was what is it bimodal is that the uh stats term of it had two columns oh yeah so it's interesting where box plots are kind of falling short in representing that right where it's showing that the the mean or is the the middle line is the median correct um yeah it's the median and then the inner quartile range are the edges of the block of the boxes yeah so the box plot you can show is kind of showing the distribution for this green set is definitely wider than the blue set but it's really not displaying the bimodal property of it in a way that the that the previous graph was and i think that's that's really where the violin plots come in super handy where it's kind of combining uh the best of both worlds and that yeah we have specific exercises on co academy like really diving into what a box plot is showing talking about the interquartile range talking about what the whiskers are what the outliers are are talking about so um yeah all of that stuff can be found in the data science path if you want like a deeper dive into box plots i think it's in here too um but yeah the the i think the lines are just nice showing you the 95 of the data so it's like 95 of the data is in between the two lines and then any outliers are shown as i think those are diamonds yeah and then yeah um i see a question asking should we focus more on using libraries or focus on um how libraries work and i think i'm just going to answer that super quickly by saying that i think just playing around with any existing library is really how you learn the fundamentals so i think like understanding the fundamentals of what is a box plot is you know super important but one of the best ways to learn what a box plot looks like with different data sets is to like actually load some data and play around with the library and once you learn one library you can always learn another one so yeah i would agree with that i think um learning like how libraries work on a on a broad scale is potentially confusing for a brand new learner of like learning how like the the file system works and like okay how is python like actually loading this library and i would yeah i would echo what sophie is saying of like um play around with some libraries um get an understanding of how those specific libraries work and the more that you do that you'll get a better understanding of um how like the importing library system actually works where as you can see there are many different ways to import them um and you'll start to kind of see the patterns that emerge um we also have a question from sami about what the heck is this library this is an unfortunate thing that we need to show in this uh in this python file in order for us to render your uh your drawing on the website if you were doing this on your own computer you wouldn't need this and every time you hit you run plot.show it will just like pop up a window on your machine um with the graph there but uh yeah this is how we get around that um okay seven minutes left violin plots uh so sophie you want to talk about violin plots as i copy yours so just like we saw in the last uh the last section on box plots they give you a little bit more information than just plotting means or medians or something like that plotting the central tendency um and showing whoops i think alex might have dropped out um temporarily but yeah so uh so they show you a little bit more than just the the mean or the median but they don't give you a lot of detail about the distribution that you might get from a histogram and so now we can kind of combine all of that information into a single plot and um so these violin plots are kind of it's almost like the histogram that you would or the the kde estimation of the histogram um is getting kind of uh like cement it's happening on both sides of what is essentially a box plot in the middle so now we're in that green the second data set um we couldn't see the bimodality in the box plot now when we plot this violin plot we can see that by modality yeah my internet blocked out so i oh no he might be gone again um hopefully he'll come back uh but yeah so i think this is another example um where knowing that you have different types of visualizations at your fingertips i hope it holds for six more minutes here i think i'm back am i back yeah you're back i was talking over you potentially because you're out for another second at least on my computer oh no okay um i am going to wrap things up because i think that alex's internet is um is a little bit spotty so this is basically the end of this lesson oh no you're back no um and there are a couple more articles in here in the in that same path about different types of uh visualizations you can make ways that you can customize the coloring um ways that you can customize the themes of the plots and um and so those are really kind of fun to take a look at and play around with if you get some more time and then there's also some on platform and off platform projects that are really worth taking a look at um i think there were a lot of questions about csv files and um and how you can like load data and actually deal with the different types of data sets that you might see in a real world context so um so i think that it it is really helpful to work on some of those off platform projects so you can really get a sense of that um i'll just continue answering questions for the last couple of minutes i see is computer science career path good for a math student um i was a math major in college i studied i studied math before i studied computer science really and um and i think that like thinking about things from a mathematics perspective can really help um if you are trying to then code something it uses a lot of the same types of skills and um and types of thinking and uh to learn how pro so um so the question is does uh does i'm a little confused by the question but i think as you're asking whether computer science and math can combine to um to teach you how to how programming a language actually works i'm not i'm gonna defer to alex maybe on thursday to answer that question um alex says plug the show on thursday so that's a good segue um on thursday alex and i will be back uh we will be uh doing a pro only event um where we're going to be kind of holding office hours so if you have any questions you can come and ask us usually we prepare a demo so we will probably pick some data sets that we could take a look at and demo how you can use some of these plotting functions on your own computer um and then if anybody has additional questions you can come to that event and come ask us those questions and we'd be happy happy to uh take a look at your code even if there's not too many people usually they're really small so we would love to see you there those are really really fun um i'm gonna sign off but it was great to be here and i hope some of you come on on thursday and happy end of the skill path i hope that you guys learned a lot and i hope that uh this was a useful set of events alex are you back and do you want to say anything or good you're muted if you're okay goodbye you
