With timestamps:

00:00 - hi this is Pat two-point with code
00:01 - Academy I am a Washington dc-based web
00:04 - developer if you're teaching yourself to
00:06 - code it can feel daunting and it's
00:09 - normal to feel a little bit confused I
00:11 - would know that was me 10 years ago so
00:13 - in this video we're gonna talk about
00:15 - what kind of time commitment we're
00:17 - looking at if you're trying to teach
00:18 - yourself to code what are some of those
00:20 - milestones you can expect as you're
00:22 - learning and what are the real-world
00:23 - applications of what you're trying to
00:25 - learn hopefully by the end of this
00:27 - you'll have a much more realistic
00:28 - expectation for what you're getting
00:30 - yourself into and should feel a little
00:31 - bit more at ease let's get started so to
00:34 - start are we there yet only kidding but
00:36 - learning to program is mammoth and one
00:39 - of the most helpful pieces of advice on
00:41 - how to tackle this came from my mom the
00:43 - only way to eat an elephant is one bite
00:45 - at a time thanks mom learning to program
00:48 - isn't too much different from any large
00:50 - challenging task there might be more
00:52 - bite she needs to take depending on
00:54 - where you start but there's no magic to
00:56 - it there is no shortcut hacker trick
00:58 - it's just one bite at a time well let's
01:00 - get after it how long will it take
01:02 - I find learners tend to fall into three
01:05 - buckets and the time commit for each is
01:07 - different
01:07 - casual learners want to pick up skills
01:09 - one at a time no rush and might not be
01:11 - sure what to learn so they're just
01:13 - trying new things I'd budget a decent
01:15 - runway for this if you don't have any
01:16 - where you need to be the career
01:19 - advancement learners who recognize that
01:20 - coding skills can help them do their job
01:22 - better they have a place in mind where
01:24 - they want to start which is helpful to
01:26 - narrow down how much time it will take I
01:28 - don't want to give any hard and fast
01:29 - times but for career advances a year ish
01:32 - seems to be what many learners settle in
01:34 - on last there are career changers who
01:36 - want to code all day every day at a pro
01:38 - level these learners tend to be more
01:40 - driven and focused on being a programmer
01:42 - so it's like a gym the more consistently
01:44 - work on your skills and the more
01:46 - intensity brings the best results as a
01:49 - rule of thumb I'd recommend a realistic
01:51 - time commitment you would probably see
01:53 - between five to fifteen hours per week
01:54 - give or take it's tough for me to put
01:57 - hard hours on something as complex as
01:59 - learning to program when everyone's
02:00 - situation is different but I also know
02:03 - some learners just need a number to know
02:04 - if they're even at a place where they
02:06 - can do it realistically I'd say
02:07 - something is better than nothing and if
02:09 - you can devote more than that all the
02:11 - better if your goal is to launch a new
02:13 - career
02:13 - and you're doing this part-time give
02:15 - yourself at least a year to get to a
02:16 - place we were competitive in interviews
02:18 - a big factor though in how long learning
02:21 - its program is going to take is what
02:23 - intention you start with what I mean is
02:25 - it could be a frustrating place to start
02:27 - with I want to learn how to program why
02:30 - can that be frustrating well that's like
02:32 - saying you want to run a race do you
02:33 - want to run a 5k a half marathon full
02:36 - marathon the urgency length and
02:39 - intensity of each of these goals will
02:40 - necessitate a different approach
02:42 - strategy and timeline so what's a more
02:44 - helpful starting question let's try what
02:47 - type of work do I want to be doing then
02:49 - we can pick technologies that will help
02:51 - us accomplish that see one of the most
02:53 - overlooked yet obvious facts about
02:55 - programming in my opinion is that that
02:57 - all this tech that we're trying to learn
02:58 - was created because someone somewhere
03:00 - said this sucks there's got to be an
03:02 - easier way and if you look at it that
03:03 - way technology really is just an easy
03:05 - way of accomplishing specific goals so
03:08 - it can be a tricky way to begin your
03:09 - path if you're doing what's hot and
03:11 - popular right now if you're just trying
03:13 - to learn stuff like I had with that
03:14 - Factory and what you want it to be doing
03:16 - you'll feel like you'll never apply it
03:17 - we're still you might not and then
03:20 - you'll forget it having wasted that time
03:22 - as well so when will you use the skills
03:24 - you learn on code CAD mean this is the
03:27 - million dollar question I get from
03:28 - learners and it's one of my favorites to
03:29 - answer my answer though is a bit chicken
03:32 - or the egg so let's explore I always
03:35 - tell my learners to work on stuff
03:36 - they're interested in and move away from
03:38 - tutorials as soon as they're feeling
03:39 - comfortable it's true you do need a
03:41 - basic understanding of how things work
03:43 - but there's no substitute for just
03:45 - building stuff in the real world
03:46 - programming solves problems but if you
03:49 - don't know what problems you're trying
03:50 - to solve that everything you're doing is
03:52 - technically theoretical the only way to
03:54 - get practical and apply what you learn
03:56 - is to get practical and apply what you
03:58 - learn for yourself in the real world but
04:00 - how do you program what you don't really
04:01 - know how well fun fact being a good
04:04 - programmer is not about how much you
04:05 - know it's about how well you learn
04:07 - really good developers often don't know
04:09 - what the challenges are demands of their
04:11 - next task will be we don't really
04:13 - memorize really good at looking stuff
04:15 - off and being curious we often joke
04:17 - amongst ourselves that our job is
04:19 - sometimes professional Googlers in fact
04:21 - that's why programmers are hired they're
04:24 - hired figure it out not to already know
04:25 - it it
04:26 - true that we leverage our education and
04:28 - trainings but most of the time were
04:30 - having to solve issues that are unique
04:31 - enough to our situations that we rely on
04:34 - looking stuff up and making adjustments
04:36 - based on our familiarity with the
04:38 - technology in fact I can't remember the
04:40 - last time I was fully prepared for my
04:42 - next task today is the question when
04:44 - will all this be practical well as soon
04:47 - as you want it to be I found there are
04:49 - some milestones you can look forward to
04:50 - during this learning process your first
04:53 - aha moment where something clicks that
04:55 - you've been struggling with the first
04:57 - time your code runs without any bugs or
04:58 - errors the first time you know what's
05:00 - wrong and why the first time you're not
05:03 - afraid of working in the terminal you
05:05 - may or may not hit any of these and
05:07 - that's okay either way as an example of
05:09 - some other concrete milestones for web
05:11 - developers they might be the first hello
05:14 - world or equivalent app submitting the
05:16 - code in the terminal and it runs
05:17 - properly learning the basics of HTML
05:20 - locally hosting the HTML in your
05:23 - terminal or on the code cavity platform
05:25 - learning some CSS and linking it in your
05:27 - code learning command-line and pushing
05:30 - it to github building a website from
05:33 - scratch from beginning to end using a
05:35 - framework like react angular review
05:36 - using an API doing some backend work of
05:39 - your own some real-world milestones some
05:43 - learners imagined are making a website
05:44 - for a friend organizing your personal
05:47 - file system and desktop without ever
05:48 - touching your mouse crafting an email
05:50 - campaign in HTML and CSS at work
05:52 - updating the styling of your company's
05:55 - homepage being able to use the dev tools
05:57 - in chrome to inspect how website works
05:59 - and debugging your code or praising your
06:02 - site's performance this is Pat with code
06:05 - Academy thanks so much for watching did
06:07 - I answer all your questions do you have
06:08 - any others leave a comment below and
06:11 - subscribe to this channel I love
06:12 - responding to learners comments and if
06:14 - you want to get started in programming
06:15 - come on over to code Academy and we'll
06:17 - help you get started I promise your
06:19 - friends will be asking you how you did
06:20 - it in no time

Cleaned transcript:

hi this is Pat twopoint with code Academy I am a Washington dcbased web developer if you're teaching yourself to code it can feel daunting and it's normal to feel a little bit confused I would know that was me 10 years ago so in this video we're gonna talk about what kind of time commitment we're looking at if you're trying to teach yourself to code what are some of those milestones you can expect as you're learning and what are the realworld applications of what you're trying to learn hopefully by the end of this you'll have a much more realistic expectation for what you're getting yourself into and should feel a little bit more at ease let's get started so to start are we there yet only kidding but learning to program is mammoth and one of the most helpful pieces of advice on how to tackle this came from my mom the only way to eat an elephant is one bite at a time thanks mom learning to program isn't too much different from any large challenging task there might be more bite she needs to take depending on where you start but there's no magic to it there is no shortcut hacker trick it's just one bite at a time well let's get after it how long will it take I find learners tend to fall into three buckets and the time commit for each is different casual learners want to pick up skills one at a time no rush and might not be sure what to learn so they're just trying new things I'd budget a decent runway for this if you don't have any where you need to be the career advancement learners who recognize that coding skills can help them do their job better they have a place in mind where they want to start which is helpful to narrow down how much time it will take I don't want to give any hard and fast times but for career advances a year ish seems to be what many learners settle in on last there are career changers who want to code all day every day at a pro level these learners tend to be more driven and focused on being a programmer so it's like a gym the more consistently work on your skills and the more intensity brings the best results as a rule of thumb I'd recommend a realistic time commitment you would probably see between five to fifteen hours per week give or take it's tough for me to put hard hours on something as complex as learning to program when everyone's situation is different but I also know some learners just need a number to know if they're even at a place where they can do it realistically I'd say something is better than nothing and if you can devote more than that all the better if your goal is to launch a new career and you're doing this parttime give yourself at least a year to get to a place we were competitive in interviews a big factor though in how long learning its program is going to take is what intention you start with what I mean is it could be a frustrating place to start with I want to learn how to program why can that be frustrating well that's like saying you want to run a race do you want to run a 5k a half marathon full marathon the urgency length and intensity of each of these goals will necessitate a different approach strategy and timeline so what's a more helpful starting question let's try what type of work do I want to be doing then we can pick technologies that will help us accomplish that see one of the most overlooked yet obvious facts about programming in my opinion is that that all this tech that we're trying to learn was created because someone somewhere said this sucks there's got to be an easier way and if you look at it that way technology really is just an easy way of accomplishing specific goals so it can be a tricky way to begin your path if you're doing what's hot and popular right now if you're just trying to learn stuff like I had with that Factory and what you want it to be doing you'll feel like you'll never apply it we're still you might not and then you'll forget it having wasted that time as well so when will you use the skills you learn on code CAD mean this is the million dollar question I get from learners and it's one of my favorites to answer my answer though is a bit chicken or the egg so let's explore I always tell my learners to work on stuff they're interested in and move away from tutorials as soon as they're feeling comfortable it's true you do need a basic understanding of how things work but there's no substitute for just building stuff in the real world programming solves problems but if you don't know what problems you're trying to solve that everything you're doing is technically theoretical the only way to get practical and apply what you learn is to get practical and apply what you learn for yourself in the real world but how do you program what you don't really know how well fun fact being a good programmer is not about how much you know it's about how well you learn really good developers often don't know what the challenges are demands of their next task will be we don't really memorize really good at looking stuff off and being curious we often joke amongst ourselves that our job is sometimes professional Googlers in fact that's why programmers are hired they're hired figure it out not to already know it it true that we leverage our education and trainings but most of the time were having to solve issues that are unique enough to our situations that we rely on looking stuff up and making adjustments based on our familiarity with the technology in fact I can't remember the last time I was fully prepared for my next task today is the question when will all this be practical well as soon as you want it to be I found there are some milestones you can look forward to during this learning process your first aha moment where something clicks that you've been struggling with the first time your code runs without any bugs or errors the first time you know what's wrong and why the first time you're not afraid of working in the terminal you may or may not hit any of these and that's okay either way as an example of some other concrete milestones for web developers they might be the first hello world or equivalent app submitting the code in the terminal and it runs properly learning the basics of HTML locally hosting the HTML in your terminal or on the code cavity platform learning some CSS and linking it in your code learning commandline and pushing it to github building a website from scratch from beginning to end using a framework like react angular review using an API doing some backend work of your own some realworld milestones some learners imagined are making a website for a friend organizing your personal file system and desktop without ever touching your mouse crafting an email campaign in HTML and CSS at work updating the styling of your company's homepage being able to use the dev tools in chrome to inspect how website works and debugging your code or praising your site's performance this is Pat with code Academy thanks so much for watching did I answer all your questions do you have any others leave a comment below and subscribe to this channel I love responding to learners comments and if you want to get started in programming come on over to code Academy and we'll help you get started I promise your friends will be asking you how you did it in no time
