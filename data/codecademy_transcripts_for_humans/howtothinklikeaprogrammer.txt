With timestamps:

00:00 - hi my name is Stephanie I'm a software
00:02 - developer based in Baltimore and in this
00:04 - video we're going to tackle what it
00:05 - means to think like a programmer one of
00:08 - the common misconceptions that people
00:09 - have about programmers is that they know
00:12 - everything and while I'd be flattered if
00:14 - anyone thought that of me it's not
00:16 - really quite the case what we do have
00:19 - though is a mindset that each person has
00:21 - uniquely developed over time and we use
00:24 - this approach to solve problems in this
00:27 - video we're going to take a look at what
00:29 - the programmer mentality is like as well
00:31 - as some tips you can use to help you get
00:33 - there
00:35 - I like to equate programming to speaking
00:37 - when you speak your goal is to
00:39 - communicate with the people around you
00:41 - now with programming the goal is to
00:43 - communicate with your machine and both
00:47 - of these scenarios your goal isn't to
00:48 - memorize the entire dictionary but to
00:51 - learn how to convey ideas in a way that
00:53 - is meaningful to your listener this is
00:56 - where the fundamentals come into play
00:57 - because these are the ideas that your
00:59 - machine can understand programming is
01:02 - less about regurgitating code snippets
01:04 - and more about building a solution by
01:06 - using the fundamentals to break a
01:08 - problem down this approach is the core
01:10 - of quote thinking like a programmer and
01:13 - quote let's run through our sample
01:15 - problem where I can illustrate the
01:16 - programming mentality say my goal is to
01:19 - tell someone how to open a jar now if I
01:22 - were to write this in a program I can't
01:24 - just say open the jar because the
01:27 - machine wouldn't know where to begin
01:29 - but I can break the problem down into
01:32 - pieces and write the instructions for
01:34 - each of those actions this ability to
01:37 - break a problem down is something that
01:39 - every programmer needs in order to
01:41 - communicate with their machine
01:44 - that was just one way of breaking the
01:45 - problem down and not everyone has the
01:48 - same approach to solving problems as me
01:50 - everyone's quote programmer perspective
01:53 - and quote is different but over time and
01:55 - with practice you start to shape your
01:57 - own perspective so in the meantime what
02:02 - can we do to build this mentality
02:04 - remember when I said we're writing code
02:06 - to communicate with machines one tip is
02:09 - to do just that
02:11 - try talking through the problem out loud
02:12 - I mean you can talk to anyone a friend a
02:16 - rubber duck a wall anything works
02:19 - programmers also work together when
02:22 - they're solving really difficult
02:23 - problems you can try that for yourself
02:25 - with some pair of programming it'll help
02:27 - give you more exposure to different
02:29 - perspectives and help you build out more
02:31 - innovative solutions big challenges are
02:34 - really intimidating but they become so
02:36 - much more manageable if you take a step
02:38 - back and think about the problem from a
02:40 - high level from there break it down into
02:43 - chunks and use your foundations to
02:45 - address each chunk one at a time it may
02:48 - be difficult to jump into the deep end
02:50 - right away so if you're stuck one way to
02:52 - get unstuck is to think about how you'd
02:55 - solve a similar simpler problem then
02:58 - build your solution from there to make
02:59 - it a little more complex and more
03:02 - closely resemble the problem at hand now
03:05 - don't bother memorizing everything that
03:07 - comes with practice instead focus on
03:10 - learning the foundations and applying
03:11 - them actually I have a small confession
03:14 - to make
03:15 - even some of the best programmers I know
03:17 - still refer to the docs to find the
03:19 - right syntax it's their unique and
03:20 - innovative ideas that set them apart one
03:23 - of the cofounders of react wrote a
03:25 - humbling blog post about this I
03:26 - recommend checking it out if you get the
03:28 - chance I'll provide a link in the
03:30 - description below also shortcuts tend to
03:33 - hurt the learning process more than help
03:35 - think of practicing solving problems
03:38 - like running test drills you could
03:40 - probably take steroids as a shortcut but
03:43 - that's not gonna get you the
03:44 - foundational skills you need to be
03:46 - better at tennis when you get stuck on
03:49 - something it can be really tempting just
03:51 - to run a quick search on the coke atom
03:52 - II forums or a Stack Overflow but
03:54 - immediately looking for answers will
03:56 - only make you reliant on solutions that
03:58 - other people have come up with it won't
04:00 - get you the practice you need to solve
04:02 - problems and it also won't help you
04:04 - shape your programmer perspective maybe
04:07 - just try getting help after you've
04:09 - exhausted all your options so you don't
04:11 - Rob yourself of a learning opportunity
04:13 - and documentation is to programming as
04:16 - recipes are to cooking it's the source
04:18 - of truth that will tell you all about
04:20 - the nuances of how a language will
04:22 - behave debugging is also a great
04:25 - opportunity for introspection I used to
04:28 - have a really bad habit of blaming the
04:29 - Machine every time something went wrong
04:31 - and I would spend hours trapped in my
04:34 - own hubris but over time I analyzed how
04:37 - I was approaching the problem and made
04:39 - adjustments so that I'd be able to
04:40 - pinpoint where I was going wrong more
04:42 - quickly test cases also ensure you have
04:45 - a clear idea of what needs to be
04:46 - accomplished from the users perspective
04:48 - believe it or not they can also help you
04:51 - break a problem down depending on how
04:53 - they're written you could go through
04:54 - each case one by one and write the code
04:57 - needed to make each one pass then move
04:59 - on to the next so get acquainted to
05:01 - reading documentation and applying it to
05:03 - your code this will help steer you from
05:06 - looking for the answer right away it'll
05:09 - also help you gain more experience with
05:10 - the language I've talked a lot about
05:13 - getting practice but Coke ad amis
05:15 - optional problems and projects are a
05:17 - good place to start they're more
05:19 - open-ended and give you a chance to
05:21 - explore and tinker around without a
05:23 - direct solution we also have some
05:25 - resources that can help point you in the
05:26 - right direction for more practice I'll
05:28 - link them below and if you're itching to
05:31 - program beyond the coke atom e
05:33 - environment you can always tackle a
05:35 - personal project on your own local
05:36 - machine we also have some resources you
05:39 - can use to help you set up your own
05:41 - environment they can help you install
05:42 - your language of choice figure out what
05:44 - editor works best for you
05:45 - and walk you through some terminal
05:47 - basics and finally get used to venturing
05:51 - outside of your comfort zone and just
05:52 - try something to see what will happen
05:54 - rather than approach your solutions
05:57 - thinking is this correct you should aim
05:59 - to answer how does it solve the problem
06:01 - I really hope you enjoy this video and
06:03 - thank you so much for watching please
06:05 - join the conversation by dropping a
06:07 - comment below or subscribing to this
06:09 - channel and if you're ready to take your
06:11 - skills to the next level you can start
06:13 - learning on coke atom II today

Cleaned transcript:

hi my name is Stephanie I'm a software developer based in Baltimore and in this video we're going to tackle what it means to think like a programmer one of the common misconceptions that people have about programmers is that they know everything and while I'd be flattered if anyone thought that of me it's not really quite the case what we do have though is a mindset that each person has uniquely developed over time and we use this approach to solve problems in this video we're going to take a look at what the programmer mentality is like as well as some tips you can use to help you get there I like to equate programming to speaking when you speak your goal is to communicate with the people around you now with programming the goal is to communicate with your machine and both of these scenarios your goal isn't to memorize the entire dictionary but to learn how to convey ideas in a way that is meaningful to your listener this is where the fundamentals come into play because these are the ideas that your machine can understand programming is less about regurgitating code snippets and more about building a solution by using the fundamentals to break a problem down this approach is the core of quote thinking like a programmer and quote let's run through our sample problem where I can illustrate the programming mentality say my goal is to tell someone how to open a jar now if I were to write this in a program I can't just say open the jar because the machine wouldn't know where to begin but I can break the problem down into pieces and write the instructions for each of those actions this ability to break a problem down is something that every programmer needs in order to communicate with their machine that was just one way of breaking the problem down and not everyone has the same approach to solving problems as me everyone's quote programmer perspective and quote is different but over time and with practice you start to shape your own perspective so in the meantime what can we do to build this mentality remember when I said we're writing code to communicate with machines one tip is to do just that try talking through the problem out loud I mean you can talk to anyone a friend a rubber duck a wall anything works programmers also work together when they're solving really difficult problems you can try that for yourself with some pair of programming it'll help give you more exposure to different perspectives and help you build out more innovative solutions big challenges are really intimidating but they become so much more manageable if you take a step back and think about the problem from a high level from there break it down into chunks and use your foundations to address each chunk one at a time it may be difficult to jump into the deep end right away so if you're stuck one way to get unstuck is to think about how you'd solve a similar simpler problem then build your solution from there to make it a little more complex and more closely resemble the problem at hand now don't bother memorizing everything that comes with practice instead focus on learning the foundations and applying them actually I have a small confession to make even some of the best programmers I know still refer to the docs to find the right syntax it's their unique and innovative ideas that set them apart one of the cofounders of react wrote a humbling blog post about this I recommend checking it out if you get the chance I'll provide a link in the description below also shortcuts tend to hurt the learning process more than help think of practicing solving problems like running test drills you could probably take steroids as a shortcut but that's not gonna get you the foundational skills you need to be better at tennis when you get stuck on something it can be really tempting just to run a quick search on the coke atom II forums or a Stack Overflow but immediately looking for answers will only make you reliant on solutions that other people have come up with it won't get you the practice you need to solve problems and it also won't help you shape your programmer perspective maybe just try getting help after you've exhausted all your options so you don't Rob yourself of a learning opportunity and documentation is to programming as recipes are to cooking it's the source of truth that will tell you all about the nuances of how a language will behave debugging is also a great opportunity for introspection I used to have a really bad habit of blaming the Machine every time something went wrong and I would spend hours trapped in my own hubris but over time I analyzed how I was approaching the problem and made adjustments so that I'd be able to pinpoint where I was going wrong more quickly test cases also ensure you have a clear idea of what needs to be accomplished from the users perspective believe it or not they can also help you break a problem down depending on how they're written you could go through each case one by one and write the code needed to make each one pass then move on to the next so get acquainted to reading documentation and applying it to your code this will help steer you from looking for the answer right away it'll also help you gain more experience with the language I've talked a lot about getting practice but Coke ad amis optional problems and projects are a good place to start they're more openended and give you a chance to explore and tinker around without a direct solution we also have some resources that can help point you in the right direction for more practice I'll link them below and if you're itching to program beyond the coke atom e environment you can always tackle a personal project on your own local machine we also have some resources you can use to help you set up your own environment they can help you install your language of choice figure out what editor works best for you and walk you through some terminal basics and finally get used to venturing outside of your comfort zone and just try something to see what will happen rather than approach your solutions thinking is this correct you should aim to answer how does it solve the problem I really hope you enjoy this video and thank you so much for watching please join the conversation by dropping a comment below or subscribing to this channel and if you're ready to take your skills to the next level you can start learning on coke atom II today
