With timestamps:

00:00 - hi my name is Daphne I'm a software
00:02 - developer based in Baltimore and in this
00:04 - video we're going to go over what
00:06 - exactly is Kanban how it's used on teams
00:09 - and what makes it effective Kanban is a
00:13 - framework that teams follow to organize
00:15 - their work
00:15 - it's an agile process that teams follow
00:18 - to make sure that work can be completed
00:19 - smoothly so this means removing any
00:22 - blockers or places that could
00:24 - potentially slow down a members ability
00:26 - to complete the task in doing so this
00:29 - sets a team up to be agile to learn more
00:31 - about agile we've got a nifty video that
00:33 - covers the principle linked in the
00:35 - description below so Kanban is pretty
00:37 - much a framework that teams follow and
00:39 - the core focus is a visual
00:41 - representation that contains all the
00:43 - work to be done now before we go any
00:45 - further I want to quickly go over a few
00:47 - roles you'll commonly see on a basic
00:49 - development team if you already know the
00:52 - different roles feel free to skip ahead
00:53 - first up is the product owner who
00:56 - determines the products direction this
00:58 - person identifies what features should
01:00 - be prioritized and how the product
01:02 - should grow based on the business needs
01:04 - the products should address so things
01:06 - like feedback from the clients or
01:08 - revenue growth next up is the developer
01:12 - developers make the magic happen and
01:14 - write the code to build out the features
01:16 - they'll work with a product owner to
01:18 - determine if the business requirements
01:19 - are realistic and about how long they
01:22 - would take to complete alrighty so we've
01:25 - covered the main roles and in Kanban
01:27 - there's a board that's used to visualize
01:29 - the work that needs to be completed this
01:31 - is what makes transparency possible
01:33 - since any team member at any given time
01:35 - can look at the board and understand the
01:38 - priorities and where the team stands in
01:40 - achieving its goals
01:41 - now these columns represent the status
01:44 - of the work to be completed the most
01:47 - basic implementation of the board will
01:49 - have columns to track work that needs to
01:50 - be done worth that is actively being
01:52 - worked on and worth that already is done
01:55 - there are also other boards that can be
01:57 - more granular with the columns to show
01:59 - things like work that is blocked or work
02:02 - that is no longer relevant it's really
02:04 - up to the team to decide what works best
02:06 - for them each item of work is
02:08 - represented by a card that contains
02:10 - details of the work that is assigned
02:11 - to it so it'll have information like
02:14 - who's responsible for completing the
02:16 - card how long it's gonna take and
02:17 - exactly what work is required for the
02:20 - card should be complete as the project
02:22 - progresses you'll see each card move
02:24 - between the columns to reflect its
02:26 - updated status we've gone over how
02:29 - Kanban works and now we'll dive into the
02:31 - specifics of what makes it effective so
02:33 - that teams can get their work done
02:34 - efficiently your team will want to limit
02:37 - the work in progress to avoid biting off
02:39 - more than you can chew
02:40 - otherwise you'll spread yourself thin if
02:43 - you have too many tasks being worked on
02:45 - at a given time then they'll move along
02:47 - more slowly than if you were to take
02:49 - them on in smaller chunks when tasks
02:52 - progressed to the board you'll have a
02:53 - visual representation of their journey
02:55 - through the board this allows the team
02:57 - to analyze the stages where the tasks
02:59 - are being held the longest and
03:01 - understand what causes them from
03:03 - progressing to the next stage ideally
03:05 - you'll want to refine the process so
03:07 - that the tasks evenly flow from start to
03:09 - finish this will allow the team to be
03:11 - able to accurately estimate how long
03:13 - tasks will take and communicate to
03:16 - stakeholders when to expect a feature to
03:18 - be ready the columns on the board also
03:20 - help to unify the flow for the tasks
03:23 - life cycles since every task goes in the
03:25 - same cycle
03:26 - this helps to align team members
03:28 - expectations for each stage since the
03:31 - tasks must meet a certain set of
03:32 - requirements in order to progress into
03:34 - the next stage
03:36 - Kanban also encourages feedback at any
03:38 - given moment so when team finds places
03:41 - where the process can be tweaked for
03:42 - improvement they can implement those
03:44 - changes immediately from there the team
03:47 - will use the board to analyze the tasks
03:49 - new life cycle and determine if the new
03:51 - flow is better or worse than the
03:53 - original flow but generally the changes
03:56 - are introduced in small increments so
03:58 - that it's easier to pinpoint what effect
04:00 - the changes have on the flow there are a
04:02 - lot of great benefits that make Kanban
04:03 - effective and help improve a team's
04:06 - workflow but there are also some traps
04:08 - that can make it ineffective and lead to
04:10 - team instability Kanban mainly affects
04:13 - how your work is organized so it can be
04:15 - pretty seamless to integrate with any
04:17 - existing team setting like if you have a
04:19 - team lead or a senior developer Kanban
04:22 - won't affect their roles are responsible
04:23 - please if anything it actually
04:25 - encourages every team member to be
04:27 - proactive and take initiative to remove
04:29 - blockers to keep the workflow continuous
04:31 - there's also a lot of flexibility but
04:34 - task management this is incredibly
04:36 - helpful when the product owner needs to
04:38 - reprioritize the work or introduce new
04:40 - work onto the board any new changes
04:43 - shouldn't have any effect on the
04:44 - progress of existing tasks combats focus
04:48 - on the process no not that process this
04:51 - process brings to focus on identifying
04:54 - and removing blockers it helps to move
04:56 - tasks along so that no team member is
04:58 - sitting idle one downside is that the
05:00 - backlog must always be up to date this
05:03 - means that the tasks must be prioritized
05:04 - and accurate so that when the team
05:07 - members pick up tasks from the top of
05:09 - the backlog they're always working on
05:10 - tasks that will be the most valuable to
05:12 - the product knowing exactly when a task
05:15 - will be complete can also be kind of
05:17 - difficult to predict
05:18 - since the workflow is more fluid and
05:20 - there's no clear deadline for the tasks
05:22 - on the board each task has its own
05:24 - beginning and ending point there's also
05:27 - the temptation to expand the scope of
05:28 - tasks beyond what it should be so you
05:31 - may have a tasks that is created to
05:33 - tackle problem a but your team might
05:35 - think well we might as well throw in a
05:37 - quick fix for problem B since they're
05:38 - related now this ties problem B together
05:41 - with problem a so if you encountered a
05:44 - roadblock those only related to problem
05:46 - a then problem B is also blocked you'll
05:49 - often see Kanban compared to scrum which
05:52 - is another agile methodology if you're
05:54 - unfamiliar with scrum you should check
05:56 - out our video linked in the description
05:57 - below now scrum has a lot of ceremonies
06:00 - and structure built in that makes it a
06:02 - bit more rigid to follow there's also a
06:04 - time restricted sprint in which a set
06:06 - amount of work must be completed in a
06:08 - set amount of time however this means
06:10 - that during the sprint there are
06:12 - restrictions on the work to be scheduled
06:13 - and the product progresses in increments
06:16 - whereas in combine the work flow is
06:18 - continuous so the product continuously
06:21 - evolves scrum also makes the assumption
06:23 - that all the work a team has should be
06:25 - completed by members within the team
06:27 - whereas the work on a Kanban board can
06:30 - be completed by anyone from any team
06:32 - combat also differs from scrum in that
06:34 - there's more emphasis
06:35 - is on the board and the team's workflow
06:37 - there's also much less structured than
06:39 - scrum so there aren't as many roles and
06:41 - ceremonies that the team needs to follow
06:43 - to get everyone aligned on the same page
06:45 - it also puts more focus on moving the
06:47 - tasks along in a workflow rather than
06:49 - having a deadline to complete a set
06:51 - amount of tasks you'll also see this
06:53 - process accommodate small incremental
06:55 - changes more easily and quickly than
06:57 - scrum does particularly since it's
06:59 - easier to analyze the impact it has on
07:01 - the tasks life cycle through the
07:03 - workflow all in all I wouldn't say that
07:05 - one way is better than the other every
07:07 - team has a unique dynamic and the nature
07:09 - of the project may also vary so things
07:11 - that work well and one team might not
07:13 - work as well for another that doesn't
07:15 - necessarily mean that a team must pick
07:17 - one over the other but rather teams can
07:19 - merge the two together and use parts
07:21 - that will work best for their situation
07:23 - you can also get a variation of the two
07:25 - where you merge together the structure
07:27 - from scrum and retain the visualization
07:29 - of Kanban also known as scrum ban scrum
07:32 - bond scrum bun I don't know pronounce it
07:36 - however you want I've been on a team
07:37 - where we started out using scrum but
07:39 - scrum had a lot more structure than we
07:42 - really needed so we stripped out a bunch
07:44 - of the unnecessary ceremonies and
07:45 - integrated Kanban principles so that we
07:48 - could put more focus on the work but
07:51 - it's largely dependent on your team's
07:52 - dynamics and project if I were on a
07:55 - different team of the same size a
07:56 - completely different approach might be
07:58 - necessary instead I really hope you
08:00 - found this video helpful and thank you
08:02 - so much for watching please join the
08:04 - conversation by dropping your comment
08:06 - below and subscribe to this channel and
08:08 - if you're ready to take your skills to
08:09 - the next level you can start learning
08:11 - and Codecademy today

Cleaned transcript:

hi my name is Daphne I'm a software developer based in Baltimore and in this video we're going to go over what exactly is Kanban how it's used on teams and what makes it effective Kanban is a framework that teams follow to organize their work it's an agile process that teams follow to make sure that work can be completed smoothly so this means removing any blockers or places that could potentially slow down a members ability to complete the task in doing so this sets a team up to be agile to learn more about agile we've got a nifty video that covers the principle linked in the description below so Kanban is pretty much a framework that teams follow and the core focus is a visual representation that contains all the work to be done now before we go any further I want to quickly go over a few roles you'll commonly see on a basic development team if you already know the different roles feel free to skip ahead first up is the product owner who determines the products direction this person identifies what features should be prioritized and how the product should grow based on the business needs the products should address so things like feedback from the clients or revenue growth next up is the developer developers make the magic happen and write the code to build out the features they'll work with a product owner to determine if the business requirements are realistic and about how long they would take to complete alrighty so we've covered the main roles and in Kanban there's a board that's used to visualize the work that needs to be completed this is what makes transparency possible since any team member at any given time can look at the board and understand the priorities and where the team stands in achieving its goals now these columns represent the status of the work to be completed the most basic implementation of the board will have columns to track work that needs to be done worth that is actively being worked on and worth that already is done there are also other boards that can be more granular with the columns to show things like work that is blocked or work that is no longer relevant it's really up to the team to decide what works best for them each item of work is represented by a card that contains details of the work that is assigned to it so it'll have information like who's responsible for completing the card how long it's gonna take and exactly what work is required for the card should be complete as the project progresses you'll see each card move between the columns to reflect its updated status we've gone over how Kanban works and now we'll dive into the specifics of what makes it effective so that teams can get their work done efficiently your team will want to limit the work in progress to avoid biting off more than you can chew otherwise you'll spread yourself thin if you have too many tasks being worked on at a given time then they'll move along more slowly than if you were to take them on in smaller chunks when tasks progressed to the board you'll have a visual representation of their journey through the board this allows the team to analyze the stages where the tasks are being held the longest and understand what causes them from progressing to the next stage ideally you'll want to refine the process so that the tasks evenly flow from start to finish this will allow the team to be able to accurately estimate how long tasks will take and communicate to stakeholders when to expect a feature to be ready the columns on the board also help to unify the flow for the tasks life cycles since every task goes in the same cycle this helps to align team members expectations for each stage since the tasks must meet a certain set of requirements in order to progress into the next stage Kanban also encourages feedback at any given moment so when team finds places where the process can be tweaked for improvement they can implement those changes immediately from there the team will use the board to analyze the tasks new life cycle and determine if the new flow is better or worse than the original flow but generally the changes are introduced in small increments so that it's easier to pinpoint what effect the changes have on the flow there are a lot of great benefits that make Kanban effective and help improve a team's workflow but there are also some traps that can make it ineffective and lead to team instability Kanban mainly affects how your work is organized so it can be pretty seamless to integrate with any existing team setting like if you have a team lead or a senior developer Kanban won't affect their roles are responsible please if anything it actually encourages every team member to be proactive and take initiative to remove blockers to keep the workflow continuous there's also a lot of flexibility but task management this is incredibly helpful when the product owner needs to reprioritize the work or introduce new work onto the board any new changes shouldn't have any effect on the progress of existing tasks combats focus on the process no not that process this process brings to focus on identifying and removing blockers it helps to move tasks along so that no team member is sitting idle one downside is that the backlog must always be up to date this means that the tasks must be prioritized and accurate so that when the team members pick up tasks from the top of the backlog they're always working on tasks that will be the most valuable to the product knowing exactly when a task will be complete can also be kind of difficult to predict since the workflow is more fluid and there's no clear deadline for the tasks on the board each task has its own beginning and ending point there's also the temptation to expand the scope of tasks beyond what it should be so you may have a tasks that is created to tackle problem a but your team might think well we might as well throw in a quick fix for problem B since they're related now this ties problem B together with problem a so if you encountered a roadblock those only related to problem a then problem B is also blocked you'll often see Kanban compared to scrum which is another agile methodology if you're unfamiliar with scrum you should check out our video linked in the description below now scrum has a lot of ceremonies and structure built in that makes it a bit more rigid to follow there's also a time restricted sprint in which a set amount of work must be completed in a set amount of time however this means that during the sprint there are restrictions on the work to be scheduled and the product progresses in increments whereas in combine the work flow is continuous so the product continuously evolves scrum also makes the assumption that all the work a team has should be completed by members within the team whereas the work on a Kanban board can be completed by anyone from any team combat also differs from scrum in that there's more emphasis is on the board and the team's workflow there's also much less structured than scrum so there aren't as many roles and ceremonies that the team needs to follow to get everyone aligned on the same page it also puts more focus on moving the tasks along in a workflow rather than having a deadline to complete a set amount of tasks you'll also see this process accommodate small incremental changes more easily and quickly than scrum does particularly since it's easier to analyze the impact it has on the tasks life cycle through the workflow all in all I wouldn't say that one way is better than the other every team has a unique dynamic and the nature of the project may also vary so things that work well and one team might not work as well for another that doesn't necessarily mean that a team must pick one over the other but rather teams can merge the two together and use parts that will work best for their situation you can also get a variation of the two where you merge together the structure from scrum and retain the visualization of Kanban also known as scrum ban scrum bond scrum bun I don't know pronounce it however you want I've been on a team where we started out using scrum but scrum had a lot more structure than we really needed so we stripped out a bunch of the unnecessary ceremonies and integrated Kanban principles so that we could put more focus on the work but it's largely dependent on your team's dynamics and project if I were on a different team of the same size a completely different approach might be necessary instead I really hope you found this video helpful and thank you so much for watching please join the conversation by dropping your comment below and subscribe to this channel and if you're ready to take your skills to the next level you can start learning and Codecademy today
