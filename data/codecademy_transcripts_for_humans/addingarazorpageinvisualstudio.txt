With timestamps:

00:00 - how's everyone doing um Carlos here with
00:02 - Codecademy and in this video we'll learn
00:04 - how to use visual studio in order to add
00:06 - a razor page to an existing application
00:08 - will you use visual Studios features to
00:10 - create a view page which will include
00:12 - the code-behind file and then run the
00:14 - application to see it in action
00:15 - also look into how layouts are utilized
00:17 - by updating the main layout with links
00:19 - to newly created pages and see how they
00:21 - make use of the view data property now
00:24 - this video assumes that you're already
00:26 - familiar with visual studio and that you
00:28 - have it installed and that you also have
00:30 - either a basic razor pages application
00:32 - or know how to build a template you
00:34 - should also have an understanding of
00:35 - what a page model is and how they
00:37 - interact with their corresponding view
00:39 - pages so without further ado let's go
00:41 - ahead and get started okay so I have a
00:44 - basic application here called test app
00:46 - that was built using visual Studios
00:48 - template and we can open it up to see
00:50 - all the folders that it created for us
00:52 - now we can add new project items to your
00:55 - pages folder by right click on the pages
00:57 - snowed on the solution pet then going to
00:59 - add and then selecting new file if
01:02 - you're on Windows it would be add and
01:04 - then new item so let's go ahead and add
01:06 - a new file here now we'll be provided
01:09 - with numerous options for what kind of
01:10 - file we want to create from a razor
01:12 - layout page to a middleware class and
01:14 - our kids you want to create both a view
01:16 - page and its corresponding page model so
01:18 - under asp.net core select braiser page
01:21 - with model let's go ahead and name it
01:25 - about an explore how our solution pad is
01:27 - updated now we consume you file was
01:33 - created it under the pages folder there
01:35 - should be a file called about dot CSS
01:37 - HTML with a drop-down that contains the
01:39 - page model about dot CSS HTML dot CSS if
01:43 - we take a look in about dot CS HTML will
01:46 - see that the generated view page will
01:48 - contain an add page directive the app
01:50 - model directive specifying the
01:52 - corresponding model with the complete
01:54 - namespace and an empty code block below
01:56 - if we open up the drop down will see our
01:59 - about CS HTML dot CS which is a code
02:02 - behind file now the page model will
02:04 - contain a few necessary using statements
02:07 - and a class for the same name as our
02:08 - view page where the keyword model added
02:11 - to it we'll also see that it's using the
02:13 - same
02:13 - namespaces or other view pages and that
02:15 - it's inheriting from the page model
02:17 - class by the use of the :
02:19 - now before we navigate to the view page
02:21 - let's go ahead and fill it out a little
02:23 - bit let's navigate to about CS HTML and
02:26 - let's add a header indicating what page
02:29 - we've landed on below our code block
02:31 - let's add an h1 header and let's simply
02:33 - say this is the about page we can then
02:39 - run our application by clicking on the
02:40 - play button on the upper left hand side
02:43 - if it builds successfully it should
02:45 - launch a Google Chrome tab with our
02:47 - application running so we can directly
02:50 - navigate to our newly created page by
02:53 - typing in slash about so let's add that
02:56 - to their URL and hit enter it should now
03:00 - direct us to the about page and render
03:02 - its contents so now let's go ahead and
03:05 - take a look at routing now with the
03:08 - fault raiser pages applications each
03:10 - pages URL matches it's finally so if we
03:13 - go to slash about razor pages is smart
03:16 - enough to go ahead and look for that
03:17 - file in the pages folder now it would be
03:21 - very useful if we had an accessible link
03:23 - to direct us to this new page instead of
03:25 - having it to type it in the URL every
03:27 - time we can do this by updating the
03:29 - navigation bar in the header which is
03:31 - found in the layout page so back in
03:34 - visual studio let's go ahead and stop
03:35 - the application and in our solution pad
03:38 - let's go ahead and open up the layout
03:40 - file which is found under the shared
03:42 - folder I'm gonna go ahead and resize our
03:46 - solution pad just a little bit there we
03:49 - go and I'll zoom out as well so we can
03:51 - see a little bit more of the code so the
03:55 - coding here acts as a template for all
03:56 - the pages that reference it our content
03:59 - pages like about dot CSS HTML will be
04:02 - rendered through the call to render body
04:03 - which is found here on line 34 as you
04:07 - can see here we have a header that's
04:08 - being rendered for all content pages and
04:11 - we can simply add a new link for a newly
04:14 - created page in here this header a new
04:16 - link will be populated in all other
04:18 - content pages as well so on line 20 we
04:21 - have an unordered list containing all
04:23 - the navigation links for our header so
04:26 - let's go
04:27 - ahead and open up a new list tag will be
04:30 - using we'll add an anchor tag within it
04:34 - and we'll be adding the same plans we
04:38 - have for the other linked pages so I'm
04:39 - going to go ahead and copy this will
04:43 - paste it in here we can omit the ASP
04:46 - area and we'll add an attack helper
04:48 - called ASP page and we'll link it
04:51 - directly to our about page so ASP page
04:54 - is equal to we can simply add slash
04:59 - about here and the text would be about
05:02 - so now let's go ahead and run our
05:04 - application again taken to Google Chrome
05:11 - here and you'll see that our header has
05:14 - been updated with a new navigational
05:15 - link for about so if you click on the
05:18 - about page it will directly navigates us
05:21 - to that content page with this we'll
05:23 - have the link in the header no matter
05:25 - where or at lastly let's take a look at
05:31 - how our layout makes use of the view
05:33 - data title property so back in our
05:35 - layout page I'm gonna go ahead and stop
05:37 - the application from running and we can
05:40 - see here at the top how it's being used
05:41 - within the title tags now the tunnel
05:45 - defines a document title that is shown
05:47 - in a browsers title bar or pages tab and
05:50 - if we look at index dot C as HTML we can
05:56 - see how each content page has set a
05:58 - specific value unique to that view page
06:01 - the laya would make use of this value
06:04 - and inserted in the browser's title bar
06:06 - and it would change depending on what
06:08 - page for a currently at now we can take
06:10 - a closer look at this using chrome
06:12 - developer tools if you haven't used
06:14 - developer tools before well there's
06:16 - simply a set of developer tools built
06:18 - directly into the browser that can help
06:20 - you edit pages on the fly debug or view
06:22 - how pages are structured now before we
06:25 - move on if we look in the upper left
06:27 - hand corner will find the browser tab
06:29 - which is rendering the text that was
06:31 - found in the title tags okay so in order
06:34 - to work with developer tools within
06:36 - Chrome we can open up developer tools by
06:39 - right clicking and selecting inspect
06:45 - so I'll zoom in a little bit more here
06:48 - and expand the inspector here we'll make
06:53 - sure that we're in the elements tag and
06:55 - in here we can actually open up our head
06:58 - tag within the head tag will notice our
07:01 - title tag here rendering the exact value
07:04 - that was said inside the index.html page
07:07 - once again within our index es HTML
07:10 - we'll see that the value said for view
07:12 - data title property is set to home page
07:14 - and if we look at the layout and we look
07:17 - at the view data title property razor
07:19 - pages will actually read out the value
07:21 - and render it on the browser depending
07:23 - on the content page it is so with index
07:26 - page since the value of this property is
07:28 - set to home page it will render that
07:30 - value inside our browser so its value
07:34 - it's being rendered right here and if we
07:36 - navigate to privacy page and do the same
07:40 - we'll see that the actual value from
07:42 - that view data title property is being
07:44 - rendered for that page since we haven't
07:46 - set any values for the about page it
07:48 - should render any text so as you can see
07:51 - here it's completely blank we could
07:53 - change this by stopping the application
07:55 - going to about dot CSS HTML and in here
07:59 - we can simply add a new view data
08:01 - property so let's go ahead and add the
08:03 - new data property it's called u data
08:05 - I'll set the title to be equal to about
08:09 - and go ahead and run our application
08:11 - again and now our title tag should hold
08:15 - the actual text about
08:19 - so we go ahead and inspect once again
08:22 - and we navigate to the about page we'll
08:27 - expand our head here and look into the
08:29 - attack will see that the about text has
08:31 - been rendered so to review we first saw
08:33 - how to create a new razor page using
08:35 - visual studio we saw how it created a
08:37 - basic skeleton which we can add on to it
08:39 - we also saw how to work with the layout
08:42 - which provides the user with a
08:43 - consistent experience as they navigate
08:45 - from page to page and lastly we'll work
08:48 - with the view data property which is a
08:49 - container for data to be passed from the
08:51 - page model to the content page the more
08:54 - we use visual studio the more we'll be
08:56 - able to make use of the features
08:57 - provided hopefully this video gave you a
08:59 - good foundation on how to navigate the
09:01 - IDE and get comfortable exploring its
09:03 - uses thank y'all for watching and I'll
09:06 - see you all next time

Cleaned transcript:

how's everyone doing um Carlos here with Codecademy and in this video we'll learn how to use visual studio in order to add a razor page to an existing application will you use visual Studios features to create a view page which will include the codebehind file and then run the application to see it in action also look into how layouts are utilized by updating the main layout with links to newly created pages and see how they make use of the view data property now this video assumes that you're already familiar with visual studio and that you have it installed and that you also have either a basic razor pages application or know how to build a template you should also have an understanding of what a page model is and how they interact with their corresponding view pages so without further ado let's go ahead and get started okay so I have a basic application here called test app that was built using visual Studios template and we can open it up to see all the folders that it created for us now we can add new project items to your pages folder by right click on the pages snowed on the solution pet then going to add and then selecting new file if you're on Windows it would be add and then new item so let's go ahead and add a new file here now we'll be provided with numerous options for what kind of file we want to create from a razor layout page to a middleware class and our kids you want to create both a view page and its corresponding page model so under asp.net core select braiser page with model let's go ahead and name it about an explore how our solution pad is updated now we consume you file was created it under the pages folder there should be a file called about dot CSS HTML with a dropdown that contains the page model about dot CSS HTML dot CSS if we take a look in about dot CS HTML will see that the generated view page will contain an add page directive the app model directive specifying the corresponding model with the complete namespace and an empty code block below if we open up the drop down will see our about CS HTML dot CS which is a code behind file now the page model will contain a few necessary using statements and a class for the same name as our view page where the keyword model added to it we'll also see that it's using the same namespaces or other view pages and that it's inheriting from the page model class by the use of the now before we navigate to the view page let's go ahead and fill it out a little bit let's navigate to about CS HTML and let's add a header indicating what page we've landed on below our code block let's add an h1 header and let's simply say this is the about page we can then run our application by clicking on the play button on the upper left hand side if it builds successfully it should launch a Google Chrome tab with our application running so we can directly navigate to our newly created page by typing in slash about so let's add that to their URL and hit enter it should now direct us to the about page and render its contents so now let's go ahead and take a look at routing now with the fault raiser pages applications each pages URL matches it's finally so if we go to slash about razor pages is smart enough to go ahead and look for that file in the pages folder now it would be very useful if we had an accessible link to direct us to this new page instead of having it to type it in the URL every time we can do this by updating the navigation bar in the header which is found in the layout page so back in visual studio let's go ahead and stop the application and in our solution pad let's go ahead and open up the layout file which is found under the shared folder I'm gonna go ahead and resize our solution pad just a little bit there we go and I'll zoom out as well so we can see a little bit more of the code so the coding here acts as a template for all the pages that reference it our content pages like about dot CSS HTML will be rendered through the call to render body which is found here on line 34 as you can see here we have a header that's being rendered for all content pages and we can simply add a new link for a newly created page in here this header a new link will be populated in all other content pages as well so on line 20 we have an unordered list containing all the navigation links for our header so let's go ahead and open up a new list tag will be using we'll add an anchor tag within it and we'll be adding the same plans we have for the other linked pages so I'm going to go ahead and copy this will paste it in here we can omit the ASP area and we'll add an attack helper called ASP page and we'll link it directly to our about page so ASP page is equal to we can simply add slash about here and the text would be about so now let's go ahead and run our application again taken to Google Chrome here and you'll see that our header has been updated with a new navigational link for about so if you click on the about page it will directly navigates us to that content page with this we'll have the link in the header no matter where or at lastly let's take a look at how our layout makes use of the view data title property so back in our layout page I'm gonna go ahead and stop the application from running and we can see here at the top how it's being used within the title tags now the tunnel defines a document title that is shown in a browsers title bar or pages tab and if we look at index dot C as HTML we can see how each content page has set a specific value unique to that view page the laya would make use of this value and inserted in the browser's title bar and it would change depending on what page for a currently at now we can take a closer look at this using chrome developer tools if you haven't used developer tools before well there's simply a set of developer tools built directly into the browser that can help you edit pages on the fly debug or view how pages are structured now before we move on if we look in the upper left hand corner will find the browser tab which is rendering the text that was found in the title tags okay so in order to work with developer tools within Chrome we can open up developer tools by right clicking and selecting inspect so I'll zoom in a little bit more here and expand the inspector here we'll make sure that we're in the elements tag and in here we can actually open up our head tag within the head tag will notice our title tag here rendering the exact value that was said inside the index.html page once again within our index es HTML we'll see that the value said for view data title property is set to home page and if we look at the layout and we look at the view data title property razor pages will actually read out the value and render it on the browser depending on the content page it is so with index page since the value of this property is set to home page it will render that value inside our browser so its value it's being rendered right here and if we navigate to privacy page and do the same we'll see that the actual value from that view data title property is being rendered for that page since we haven't set any values for the about page it should render any text so as you can see here it's completely blank we could change this by stopping the application going to about dot CSS HTML and in here we can simply add a new view data property so let's go ahead and add the new data property it's called u data I'll set the title to be equal to about and go ahead and run our application again and now our title tag should hold the actual text about so we go ahead and inspect once again and we navigate to the about page we'll expand our head here and look into the attack will see that the about text has been rendered so to review we first saw how to create a new razor page using visual studio we saw how it created a basic skeleton which we can add on to it we also saw how to work with the layout which provides the user with a consistent experience as they navigate from page to page and lastly we'll work with the view data property which is a container for data to be passed from the page model to the content page the more we use visual studio the more we'll be able to make use of the features provided hopefully this video gave you a good foundation on how to navigate the IDE and get comfortable exploring its uses thank y'all for watching and I'll see you all next time
