With timestamps:

00:00 -  Hi, I'm Rob with Codecademy, in this video we're going to explore logcat.
00:04 - Logcat is a tool that allows access to messages from applications and services running on an Android device.
00:10 - Most Android developers depend heavily on Logcat during 
development to debug their applications.
00:15 - In a moment, we'll see that to display information of interest, we can create filters, modify how much information is displayed in messages,
00:23 - determine the priority levels, display messages produced by app code only,
and search the log.
00:29 - By default, logcat shows the log output related to the most recently run app only.
00:34 - If we want to display the log messages for an app, we need to 
first build and run our app on a device.
00:40 - To view logcat we will click view, tool windows, logcat, or we can 
simply click logcat in the tool window bar.
00:49 - When we do, we will see the logcat window, which shows the log 
messages for the selected app.
00:53 - The selected app can be chosen by this dropdown menu in our logcat window. We see a number of icons that allow us to filter through the information being displayed.
01:03 - The clear logcat icon allows us to clear the visible log, the scroll to the end icon will allow us to click to jump to the bottom of a log and see the latest log messages.
01:13 - If you then click a line in the logview, the view pauses scrolling at that point.
01:18 - We have up the stack trace icon and down the stack trace icon. We can click these to navigate up and down the stack traces in the log,
01:25 - selecting the subsequent filenames, and viewing the corresponding line numbers in the editor that appear in the printed exceptions.
01:31 - This is the same behavior as when we click on a filename in the log. The use soft-wraps icon allows us to enable line wrapping and prevent horizontal scrolling.
01:40 - Though, any unbreakable strings will require horizontal scrolling. The print icon will allow us to print the logcat messages.
01:47 - After selecting our print preferences in the dialogue that appears,
we can also choose to save to a PDF.
01:52 - The restart icon allows us to clear the log and restart logcat.
01:56 - Unlike the clear logcat button, this recovers and displays previous log messages so it's most useful if the logcat becomes unresponsive
02:03 - and we don't want to lose our log messages.
02:05 - The logcat header icon will allow us to open the configure logcat header dialogue, where we can customize the appearance of each logcat message,
02:12 - such as whether to show the date and time.
02:15 - The screen capture icon allows us to capture a screenshot, and the screen record icon allows us to record a video of the device for a maximum of 3 minutes.
02:24 - Now, as we can see, this is a lot of information to sift through. Let's take a look at how to log messages and filter the content in our logcat.
02:31 - We can control how many messages and the type of messages that appear in logcat by setting the log level. We can display all messages
02:38 - or just the messages indicating the most severe conditions. Remember, logcat continues to collect all messages regardless of the log level setting.
02:45 - The setting just determines what logcat displays. In the log level menu, we can select one of the following values.
02:51 - Verbose, this is the default value. This will show all log messages. Debug will show debug log messages that are useful during development only.
03:01 - Info will show expected log messages for regular usage. Warn. Warn will show possible issues that are not yet errors.
03:09 - Error will show issues that have caused errors. Assert will show issues that the developer expects should never happen.
03:17 - We can create logs, as well. It's the Log class that allows us to create log messages that appear in logcat.
03:24 - Generally, we would use the following log methods listed in order 
from the highest to lowest priority.
03:29 - Log.e for errors, Log.w for warning, Log.i for information, Log.d 
for debug, Log.v for verbose.
03:38 - For each log method, the first parameter should be unique tag and the second parameter is the message.
03:44 - The tag of a system log message is a short string indicating the system component from which the message originates. Our tag can be any string that we find helpful,
03:53 - such as the name of the current class. A good convention is to declare a tag constant in our class to be used in the first parameter.
04:02 - For example, we might create an information log message as follows.
04:06 - private static final string TAG equals MainActivity.
04:13 - Next, start typing in log and we will get an autocomplete option 
for the log method we want to use.
04:20 - This will also import log into our file. Our second value is what we're going to log. In this case, because of the simplicity of our app, let's just log the message, MainActivity.
04:31 - Now, let's go ahead and run our app, again, with the log that we just created. Currently, if we switch from the default verbose to info in the dropdown menu,
04:40 - we will see quite a bit less in our log.
04:42 - If we look line by line, we can actually see our tag and our message. However, there's still quite a bit of clutter. To reduce that, we can use the search bar.
04:53 - To search the messages currently displayed in logcat, we can optionally select regex, if we want to use a regular expression search pattern,
05:00 - we can type a character sequence in the search field, which will cause the logcat output display to change accordingly.
05:07 - So when we start to type the name of our tag, we have quickly filtered everything and can now see the log we created.
05:13 - Let's take a closer look at the log format. We have date, time,
p id, t id, package priority tag, and message.
05:23 - First, we see the date and time, p id stands for the process identifier, and i id is thread identifier, they can be the same if there's only one thread.
05:33 - Next, we have our package listed, followed by the priority of i, and a tag of MainActivity, followed by the message, MainActivity.
05:42 - Logcat is a great tool that allows access to messages from applications and services running on an Android device.
05:49 - Logcat is a valuable tool that allows us to debug applications 
while they're being developed.

Cleaned transcript:

Hi, I'm Rob with Codecademy, in this video we're going to explore logcat. Logcat is a tool that allows access to messages from applications and services running on an Android device. Most Android developers depend heavily on Logcat during development to debug their applications. In a moment, we'll see that to display information of interest, we can create filters, modify how much information is displayed in messages, determine the priority levels, display messages produced by app code only, and search the log. By default, logcat shows the log output related to the most recently run app only. If we want to display the log messages for an app, we need to first build and run our app on a device. To view logcat we will click view, tool windows, logcat, or we can simply click logcat in the tool window bar. When we do, we will see the logcat window, which shows the log messages for the selected app. The selected app can be chosen by this dropdown menu in our logcat window. We see a number of icons that allow us to filter through the information being displayed. The clear logcat icon allows us to clear the visible log, the scroll to the end icon will allow us to click to jump to the bottom of a log and see the latest log messages. If you then click a line in the logview, the view pauses scrolling at that point. We have up the stack trace icon and down the stack trace icon. We can click these to navigate up and down the stack traces in the log, selecting the subsequent filenames, and viewing the corresponding line numbers in the editor that appear in the printed exceptions. This is the same behavior as when we click on a filename in the log. The use softwraps icon allows us to enable line wrapping and prevent horizontal scrolling. Though, any unbreakable strings will require horizontal scrolling. The print icon will allow us to print the logcat messages. After selecting our print preferences in the dialogue that appears, we can also choose to save to a PDF. The restart icon allows us to clear the log and restart logcat. Unlike the clear logcat button, this recovers and displays previous log messages so it's most useful if the logcat becomes unresponsive and we don't want to lose our log messages. The logcat header icon will allow us to open the configure logcat header dialogue, where we can customize the appearance of each logcat message, such as whether to show the date and time. The screen capture icon allows us to capture a screenshot, and the screen record icon allows us to record a video of the device for a maximum of 3 minutes. Now, as we can see, this is a lot of information to sift through. Let's take a look at how to log messages and filter the content in our logcat. We can control how many messages and the type of messages that appear in logcat by setting the log level. We can display all messages or just the messages indicating the most severe conditions. Remember, logcat continues to collect all messages regardless of the log level setting. The setting just determines what logcat displays. In the log level menu, we can select one of the following values. Verbose, this is the default value. This will show all log messages. Debug will show debug log messages that are useful during development only. Info will show expected log messages for regular usage. Warn. Warn will show possible issues that are not yet errors. Error will show issues that have caused errors. Assert will show issues that the developer expects should never happen. We can create logs, as well. It's the Log class that allows us to create log messages that appear in logcat. Generally, we would use the following log methods listed in order from the highest to lowest priority. Log.e for errors, Log.w for warning, Log.i for information, Log.d for debug, Log.v for verbose. For each log method, the first parameter should be unique tag and the second parameter is the message. The tag of a system log message is a short string indicating the system component from which the message originates. Our tag can be any string that we find helpful, such as the name of the current class. A good convention is to declare a tag constant in our class to be used in the first parameter. For example, we might create an information log message as follows. private static final string TAG equals MainActivity. Next, start typing in log and we will get an autocomplete option for the log method we want to use. This will also import log into our file. Our second value is what we're going to log. In this case, because of the simplicity of our app, let's just log the message, MainActivity. Now, let's go ahead and run our app, again, with the log that we just created. Currently, if we switch from the default verbose to info in the dropdown menu, we will see quite a bit less in our log. If we look line by line, we can actually see our tag and our message. However, there's still quite a bit of clutter. To reduce that, we can use the search bar. To search the messages currently displayed in logcat, we can optionally select regex, if we want to use a regular expression search pattern, we can type a character sequence in the search field, which will cause the logcat output display to change accordingly. So when we start to type the name of our tag, we have quickly filtered everything and can now see the log we created. Let's take a closer look at the log format. We have date, time, p id, t id, package priority tag, and message. First, we see the date and time, p id stands for the process identifier, and i id is thread identifier, they can be the same if there's only one thread. Next, we have our package listed, followed by the priority of i, and a tag of MainActivity, followed by the message, MainActivity. Logcat is a great tool that allows access to messages from applications and services running on an Android device. Logcat is a valuable tool that allows us to debug applications while they're being developed.
