With timestamps:

00:00 - hi this is Pat with code Academy I'm a
00:02 - developer based in Washington DC if
00:04 - you're looking to get a job full time as
00:06 - a developer this is for you in this
00:08 - video we're gonna cover how to form a
00:10 - plan how to learn what technologies to
00:12 - study and what the hiring cycle looks
00:13 - like now while I've interviewed plenty
00:15 - of my developer friends as well as given
00:17 - my own advice here it should be stated
00:19 - that this is the billion dollar question
00:21 - and no one can really answer it in a
00:22 - short YouTube video see everyone's
00:25 - circumstances history and current
00:27 - situation is different
00:28 - all of which influence what your chances
00:30 - are of landing your first job as a
00:31 - developer I want you to succeed but
00:33 - we're not doing anyone any favors by
00:35 - suggesting a one-size-fits-all approach
00:36 - that will work for everyone I was
00:39 - self-taught but I've worked with people
00:40 - who studied computer science in college
00:42 - went to boot camps and though these
00:44 - paths are quite different there are some
00:46 - habits of highly successful web
00:48 - developers that we can all learn from
00:49 - first it's helpful to begin with the end
00:51 - in mind there are three things I want
00:54 - you to keep in mind when considering
00:55 - what you should be working on when you
00:56 - want to start interviewing where do you
00:58 - want to work where are your technical
01:00 - skills currently where do you see
01:02 - yourself as a culture fit see companies
01:05 - typically screen for two major things
01:07 - one technical ability and two culture
01:10 - fit I found that even if a company
01:12 - thinks you're a good fit they might not
01:14 - be a good fit for you let's focus on
01:17 - what I mean a web developer can be doing
01:20 - vastly different work at a start-up
01:21 - where they get to do all kinds of tasks
01:23 - a midsize company where they will have
01:26 - more defined role and likely not stray
01:28 - from that too much to a large company
01:30 - where they get to focus on a narrow
01:32 - specialty so knowing what type of
01:34 - company that aligns with where you want
01:36 - to work can both increase your chances
01:38 - of getting the job and being happy there
01:40 - knowing where you want to work can also
01:43 - have a super helpful benefit which I'll
01:44 - discuss in just a second but before we
01:47 - leave this point it's important to point
01:48 - out that you're interviewing the company
01:50 - as much as they're interviewing you be
01:53 - sure to ask the kinds of questions that
01:54 - can help you clarify it of the work that
01:56 - you're actually going to be doing there
01:58 - and what's expected of you be sure to
02:00 - take a look at the company values and if
02:01 - you can talk with someone who works
02:03 - there or is familiar with that company
02:04 - be sure this is the kind of place you
02:06 - want to spend your time at it is
02:08 - possible to be a developer at the wrong
02:10 - company for you next and probably most
02:13 - pressing
02:13 - you're mine are your technical skills
02:15 - this is a super tricky one to answer
02:17 - because while I've been a front-end
02:18 - developer all my coding career the tech
02:21 - stack hasn't been the same for any of my
02:22 - companies but depending on what your
02:24 - timeline is for when you want to
02:26 - interview for a job you'll need to start
02:28 - a road map and get all the technical
02:30 - skills that you need there are some
02:31 - Universal technologies you should have
02:33 - under your belt for your first job as a
02:35 - developer command line nearly all web
02:38 - developers tools don't come with a sleek
02:39 - interface with fancy buttons local
02:42 - environments deployments gets even
02:44 - installations are all run using command
02:45 - line it's the ABCs of programming
02:47 - literacy get this is what web developer
02:51 - is used to work on the same codebase the
02:53 - same file even the same line without
02:55 - erasing each other's contribution it's
02:57 - powerful stuff you should be familiar if
02:59 - not worked with application programming
03:01 - interfaces or api's which is how
03:03 - different applications talk to each
03:05 - other basic web programming patterns
03:08 - we've been building the web for a while
03:10 - and we've learned some lessons so we try
03:12 - to apply them in a pattern where we can
03:13 - programming patterns like
03:14 - object-oriented programming or
03:16 - functional programming these two schools
03:18 - of thought of the primary ways that we
03:19 - build applications they're about as
03:22 - different as soccer and football even
03:23 - though they share a lot of similarities
03:24 - if this all sounds like gobbledygook to
03:27 - you don't worry you'll have plenty of
03:28 - time to learn and there are links in the
03:31 - description to a ton of free or cheap
03:32 - resources that will help you get all
03:34 - these under your belt some general
03:35 - advice would be things like being
03:37 - comfortable with a text editor or IDE an
03:40 - integrated development environment
03:41 - knowing the strengths and disadvantages
03:44 - of your chosen language or framework dry
03:46 - coding meaning don't repeat yourself and
03:49 - why that's important to the health of a
03:50 - codebase some are just best practices
03:53 - like linting the programming equivalent
03:55 - of spellcheck for your code formatting
03:57 - code conventions of a language and
03:59 - project structures now there are many
04:01 - different kinds of developers so it's
04:03 - hard to narrow down a good list for
04:05 - everyone but there are some general
04:06 - guidelines knowing what kind of
04:08 - technologies go into your chosen text
04:10 - deck and why they're there what I mean
04:12 - is what advantages do they bring to the
04:15 - application for example you'll likely be
04:17 - asked why you were working with the
04:18 - technologies that you did and it looks
04:20 - better if you can speak to the benefits
04:22 - and limitations of those technologies if
04:24 - you want to know what technologies you
04:25 - want to start learning
04:27 - but not sure where to start let's circle
04:29 - back to that original point a beginning
04:30 - with the end in mind where do you want
04:32 - to work a great way to get a list of
04:34 - things to learn is to go to the job
04:36 - board so companies you'd like to work
04:38 - for they'll likely have job postings and
04:40 - quite literally list out all the skills
04:42 - you'll be expected to know why is this
04:44 - important for context a full-stack
04:47 - developer might be expected to know HTML
04:49 - CSS in a JavaScript library like react
04:52 - angular or view for the front end and
04:54 - some server-side scripting languages
04:56 - like note or Python with a database like
04:58 -  or my sequel for the back end
05:00 - however this could vary wildly from
05:03 - company to company so you may end up
05:05 - learning the wrong tech stack depending
05:06 - on where you hope to end up you won't
05:08 - necessarily go wrong by picking some of
05:10 - these languages but you'll make yourself
05:12 - more attractive to the types of
05:14 - companies you hope to work for if you
05:15 - have what they're looking for
05:17 - lastly what does the hiring process look
05:19 - like don't worry if you've been on job
05:21 - interviews it's not soo different but
05:23 - there are some unique characteristics
05:24 - the typical interview will start with a
05:26 - phone screen either with a hiring
05:28 - manager or a person most likely to have
05:30 - you on their team the phone screen is a
05:32 - ballpark for how good of a fit you are
05:34 - for the role next if you pass the phone
05:37 - screen you'll likely be interviewed for
05:38 - a first round depending on how senior of
05:41 - the position you're going for it this
05:42 - could take a couple of hours or all day
05:44 - in some interviews I've met with as few
05:46 - as one person and as many as thirty
05:48 - people all for a single role next most
05:50 - developer jobs involve a text screen
05:52 - sometimes this is a whiteboard exercise
05:55 - where you can have two broad strokes
05:57 - solving a technical problem or you'll be
05:58 - sent a code challenge which can be asked
06:01 - for submission before your in-person
06:02 - interview or after sometimes before you
06:05 - can advance to a subsequent round of
06:06 - interviewing you'll have to pass the
06:08 - tech challenge first the text screen can
06:10 - sometimes even come before the phone
06:11 - screen it's usually designed to be
06:13 - harder than a position you're applying
06:15 - for if you nail it that can be a good
06:17 - sign but often the company wants to see
06:19 - how you solve the problem more than they
06:21 - want the answer companies know that
06:22 - things rarely go according to plan and
06:24 - they want developers who can think their
06:26 - way through problems rather than having
06:27 - all the answers hi this is Pat with code
06:30 - Academy I really hope that this video
06:32 - was helpful for you but did I answer all
06:34 - your questions do you have any more
06:36 - leave a comment or subscribe to this
06:38 - channel because I love responding to
06:39 - learners calm
06:40 - it's also I'll link all the stuff that I
06:43 - mentioned up in the show description
06:44 - here so that you can reference that for
06:45 - the future and if you want to get
06:47 - started in programming come on over to
06:48 - Co Academy and we'll help you get
06:50 - started I promise your friends will be
06:51 - asking you how you did it in no time

Cleaned transcript:

hi this is Pat with code Academy I'm a developer based in Washington DC if you're looking to get a job full time as a developer this is for you in this video we're gonna cover how to form a plan how to learn what technologies to study and what the hiring cycle looks like now while I've interviewed plenty of my developer friends as well as given my own advice here it should be stated that this is the billion dollar question and no one can really answer it in a short YouTube video see everyone's circumstances history and current situation is different all of which influence what your chances are of landing your first job as a developer I want you to succeed but we're not doing anyone any favors by suggesting a onesizefitsall approach that will work for everyone I was selftaught but I've worked with people who studied computer science in college went to boot camps and though these paths are quite different there are some habits of highly successful web developers that we can all learn from first it's helpful to begin with the end in mind there are three things I want you to keep in mind when considering what you should be working on when you want to start interviewing where do you want to work where are your technical skills currently where do you see yourself as a culture fit see companies typically screen for two major things one technical ability and two culture fit I found that even if a company thinks you're a good fit they might not be a good fit for you let's focus on what I mean a web developer can be doing vastly different work at a startup where they get to do all kinds of tasks a midsize company where they will have more defined role and likely not stray from that too much to a large company where they get to focus on a narrow specialty so knowing what type of company that aligns with where you want to work can both increase your chances of getting the job and being happy there knowing where you want to work can also have a super helpful benefit which I'll discuss in just a second but before we leave this point it's important to point out that you're interviewing the company as much as they're interviewing you be sure to ask the kinds of questions that can help you clarify it of the work that you're actually going to be doing there and what's expected of you be sure to take a look at the company values and if you can talk with someone who works there or is familiar with that company be sure this is the kind of place you want to spend your time at it is possible to be a developer at the wrong company for you next and probably most pressing you're mine are your technical skills this is a super tricky one to answer because while I've been a frontend developer all my coding career the tech stack hasn't been the same for any of my companies but depending on what your timeline is for when you want to interview for a job you'll need to start a road map and get all the technical skills that you need there are some Universal technologies you should have under your belt for your first job as a developer command line nearly all web developers tools don't come with a sleek interface with fancy buttons local environments deployments gets even installations are all run using command line it's the ABCs of programming literacy get this is what web developer is used to work on the same codebase the same file even the same line without erasing each other's contribution it's powerful stuff you should be familiar if not worked with application programming interfaces or api's which is how different applications talk to each other basic web programming patterns we've been building the web for a while and we've learned some lessons so we try to apply them in a pattern where we can programming patterns like objectoriented programming or functional programming these two schools of thought of the primary ways that we build applications they're about as different as soccer and football even though they share a lot of similarities if this all sounds like gobbledygook to you don't worry you'll have plenty of time to learn and there are links in the description to a ton of free or cheap resources that will help you get all these under your belt some general advice would be things like being comfortable with a text editor or IDE an integrated development environment knowing the strengths and disadvantages of your chosen language or framework dry coding meaning don't repeat yourself and why that's important to the health of a codebase some are just best practices like linting the programming equivalent of spellcheck for your code formatting code conventions of a language and project structures now there are many different kinds of developers so it's hard to narrow down a good list for everyone but there are some general guidelines knowing what kind of technologies go into your chosen text deck and why they're there what I mean is what advantages do they bring to the application for example you'll likely be asked why you were working with the technologies that you did and it looks better if you can speak to the benefits and limitations of those technologies if you want to know what technologies you want to start learning but not sure where to start let's circle back to that original point a beginning with the end in mind where do you want to work a great way to get a list of things to learn is to go to the job board so companies you'd like to work for they'll likely have job postings and quite literally list out all the skills you'll be expected to know why is this important for context a fullstack developer might be expected to know HTML CSS in a JavaScript library like react angular or view for the front end and some serverside scripting languages like note or Python with a database like or my sequel for the back end however this could vary wildly from company to company so you may end up learning the wrong tech stack depending on where you hope to end up you won't necessarily go wrong by picking some of these languages but you'll make yourself more attractive to the types of companies you hope to work for if you have what they're looking for lastly what does the hiring process look like don't worry if you've been on job interviews it's not soo different but there are some unique characteristics the typical interview will start with a phone screen either with a hiring manager or a person most likely to have you on their team the phone screen is a ballpark for how good of a fit you are for the role next if you pass the phone screen you'll likely be interviewed for a first round depending on how senior of the position you're going for it this could take a couple of hours or all day in some interviews I've met with as few as one person and as many as thirty people all for a single role next most developer jobs involve a text screen sometimes this is a whiteboard exercise where you can have two broad strokes solving a technical problem or you'll be sent a code challenge which can be asked for submission before your inperson interview or after sometimes before you can advance to a subsequent round of interviewing you'll have to pass the tech challenge first the text screen can sometimes even come before the phone screen it's usually designed to be harder than a position you're applying for if you nail it that can be a good sign but often the company wants to see how you solve the problem more than they want the answer companies know that things rarely go according to plan and they want developers who can think their way through problems rather than having all the answers hi this is Pat with code Academy I really hope that this video was helpful for you but did I answer all your questions do you have any more leave a comment or subscribe to this channel because I love responding to learners calm it's also I'll link all the stuff that I mentioned up in the show description here so that you can reference that for the future and if you want to get started in programming come on over to Co Academy and we'll help you get started I promise your friends will be asking you how you did it in no time
