With timestamps:

00:00 - go live
00:06 - okay and we're live today thank you
00:08 - everybody for joining us today we have
00:10 - amazing guests
00:12 - that is gonna are gonna be talking about
00:14 - code academy dogs and what they are what
00:17 - they do why you should be excited about
00:19 - this why you should be contributing for
00:20 - this you'll be learning all the
00:22 - intricacies behind the scenes so without
00:24 - further ado you want to go introduce
00:26 - yourselves please
00:28 - yeah what's up everybody uh my name is
00:30 - sunny i'm a senior
00:31 - curriculum developer here at code county
00:33 - and i currently manage the curriculum
00:35 - free team
00:36 - i'm calling in from brooklyn new york
00:37 - today and i'm super excited to have two
00:39 - people on my team christine and brandon
00:42 - um here with me so i want to introduce
00:44 - yourself
00:46 - sure um hi everybody my name is brandon
00:49 - and i'm a content contributor here on
00:51 - the free team at code academy and i'm
00:53 - calling in from massachusetts um it's
00:55 - great to be here thanks everybody
00:59 - hi i'm christine and like brandon i'm
01:02 - also part of the content curriculum free
01:04 - team
01:05 - and i'm calling in from philadelphia
01:07 - today
01:10 - cool yeah welcome everybody um and for
01:12 - those of you watching
01:14 - um type in the chat let us know where
01:15 - you're calling from
01:17 - um if you have any east coasters east
01:20 - coast people here um we're super pumped
01:22 - for today's live stream we got a pretty
01:24 - good crew here i think they're going to
01:26 - be a lot of great takeaways for
01:27 - contributors and learners
01:29 - um
01:30 - you know watching right now
01:34 - so we got mariana eugene nice alex
01:38 - lillian let us know where you're where
01:41 - you let us know in the chat
01:44 - and to catch you up on what we're up to
01:47 - so last week fed and i did a live stream
01:48 - together where he interviewed me on
01:51 - some high level
01:52 - aspects of kokami docs our brand new
01:55 - product feature so take a look if you
01:57 - missed it
01:58 - for today we're going to do more of a
02:01 - deep deeper dive
02:03 - where we will first do a demo of kokami
02:06 - docs then we're going to do some
02:08 - walkthroughs so first we're going to
02:09 - walk through github repo where all the
02:12 - content is stored we're going to do a
02:14 - walkthrough of the contribution guide
02:16 - basically the quality standards for
02:18 - creating new entries
02:20 - and then also github issues basically a
02:22 - bulletin board where you will um you can
02:26 - request new entries
02:28 - in the second half of this live stream
02:29 - we'll do a live review of some of the
02:31 - recent pull requests so taking a look at
02:34 - the recent entries created by the
02:36 - community we've never done something
02:38 - like this before so i think it's gonna
02:40 - be pretty fun
02:42 - and at the very end if we do have time
02:44 - we can have some q a session at the very
02:46 - end so feel free to let us know what you
02:48 - think in the chat throughout the live
02:50 - stream if you have some you know burning
02:52 - questions that you want to ask um
02:54 - feel free to
02:55 - ask it at the end
02:57 - cool we got a lot of people from all
02:59 - over the world it looks like philippines
03:01 - canada bermuda eugene oregon nice
03:04 - oh that's mikey one of the photographs
03:06 - we're gonna review
03:07 - pennsylvania colorado
03:10 - cool
03:11 - all right um
03:18 - should we get started
03:20 - i think so you guys are ready i'm ready
03:22 - i'll be watching the back
03:24 - so first things first um codecammy.demo
03:27 - so i'm going to be sharing my screen for
03:29 - the for the rest of the the live stream
03:32 - for those for those of you that are new
03:35 - um cocamy docs is an open contribution
03:37 - coding documentation for popular
03:39 - programming languages and frameworks
03:41 - it's built by the community and
03:43 - maintained by codecademy so similar to
03:46 - wikipedia
03:48 - anyone in the world can add or edit an
03:50 - entry
03:51 - we're hoping to build
03:53 - the perfect companion the perfect coding
03:55 - documentation site for you when you're
03:57 - working on a project
03:58 - when you are stuck when you want to look
04:00 - up a definition a function name a method
04:03 - name a method or whatever concept okay
04:07 - i'm going to drop the link in the
04:08 - youtube chat right now for you to take a
04:10 - look
04:13 - so we have 18 topics here on the left
04:17 - anywhere from c to c plus plus python to
04:19 - javascript
04:20 - okay we also recently launched our v2
04:24 - uh feature
04:25 - which basically encourages uh we're
04:28 - trying to focus on encouraging
04:29 - contributors
04:31 - um the contribution side of things so
04:33 - here is a community uh leaderboard um to
04:37 - highlight and also celebrate some of our
04:39 - uh most active contributors
04:43 - so if you want to
04:44 - say
04:45 - look up
04:46 - javascript array what you can do is very
04:49 - simple
04:50 - click
04:51 - into the javascript topic
04:53 - and then navigate to the arrays
04:58 - concept
04:59 - for each concept
05:01 - so this is an entry by the way this is a
05:03 - code county docs engine so for every
05:05 - entry usually there is an explanation
05:08 - some code blocks for this one in
05:10 - particular
05:11 - you can find out how to create an array
05:13 - how to access an element of an array
05:16 - using an index
05:18 - and check this out
05:20 - if you know
05:21 - for example you want to learn how to
05:22 - merge two arrays or how to connect to
05:24 - arrays the first thing they can do
05:27 - well actually check this out you have uh
05:29 - you have here we have a um
05:31 - a terms table okay where you can find
05:33 - all the arrays methods methods for
05:36 - javascript
05:38 - and you can also click into these
05:44 - um
05:44 - [Music]
05:46 - here's a concatenation string method
05:49 - again
05:51 - an explanation
05:52 - a basic syntax a few examples and here's
05:55 - something pretty neat a codebody example
05:57 - a basically interactive
05:59 - um a code block where you can actually
06:02 - run the code and see the output
06:05 - pretty cool
06:09 - so
06:10 - we currently have about 714 entries 90
06:13 - of which are created by the community
06:16 - um this morning as of this morning we
06:17 - have 98 661 distinct users which means
06:21 - that we're going to actually hit surpass
06:23 - 100k distinct users probably this
06:26 - weekend or next week
06:29 - and that's pretty much
06:30 - kokami docs
06:33 - any questions before we move on to
06:35 - the github repo
06:48 - so brandon actually have something
06:49 - pretty good so does is anybody familiar
06:51 - with using github
06:52 - um
06:54 - should we do a um a session right now on
06:58 - what is github
07:01 - type in the chat let's know
07:05 - okay we got one eugene
07:10 - all right i think one is
07:12 - one is enough brandon do you want to
07:14 - take it away
07:15 - yeah um hi everybody so for those of you
07:19 - who aren't familiar with github github
07:21 - is a source code service that hosts over
07:24 - 200 million remote repositories
07:27 - for developers to commit and push their
07:29 - changes from their projects
07:32 - it uses git which is which is a
07:34 - distributed version control language
07:37 - for
07:38 - collaborating on projects both
07:40 - individual and uh group both personal
07:43 - and professional and github is where
07:46 - codecademydocs hosts all of its source
07:49 - code and um to talk a little bit more
07:52 - about uh
07:54 - the repository for docs i'll pass things
07:56 - off to christine
07:58 - yeah so this is our main branch for
08:01 - codecademydocs and we can see a few
08:04 - folders here as well as some extra files
08:06 - we don't need to be
08:08 - too knowledgeable about like what's
08:10 - going on in the files to contribute to
08:12 - docs but just know that like these hold
08:14 - our extra
08:15 - configurations
08:17 - um as well as like some tests and
08:19 - dependencies
08:20 - so
08:21 - if we actually scroll down
08:24 - sonny if we could scroll down onto the
08:26 - page and take a look at our readme
08:30 - um yeah the readme just kind of goes
08:32 - over like what exactly docs is what
08:35 - stage of development that we're on as
08:37 - well as people who are contributing
08:39 - right now our content team our amazing
08:41 - engineering team who put docs together
08:44 - and um
08:45 - if we scroll down a little bit more it
08:47 - kind of gives us how we can contribute
08:50 - so we can click on that link that brings
08:52 - us to our contribution guide
08:57 - we'll head over there
08:58 - yep and here is
09:01 - a little closer look at
09:03 - how we can contribute a pull request so
09:06 - this starts with forking from our
09:08 - project repository and you can find that
09:11 - button
09:12 - all the way at the top
09:14 - of our repo it's just like a button
09:16 - click away and then you'll be able to
09:18 - fork our repo onto
09:20 - your own um
09:23 - it also goes over like a little bit more
09:25 - details
09:26 - of
09:27 - after you submit a pull request what you
09:29 - can do from there
09:31 - and if we actually go back to our main
09:34 - repo and take a look at some of the
09:36 - folders there
09:38 - so we'll mainly be working out of the
09:41 - content folder which holds a list of all
09:44 - the topics that we have
09:46 - on docs
09:47 - such as c c plus plus css and other
09:50 - frameworks
09:52 - if you're not too sure of um
09:54 - where you should place your content
09:57 - definitely just take a look at the docs
09:59 - website and see where
10:01 - the information that you may want to add
10:03 - will fit into
10:06 - if we even want to maybe click on one of
10:09 - these topics
10:11 - have a look-see into
10:13 - kind of an example of one of our entries
10:18 - yeah so we'll click on the arrays and
10:20 - click on the arrays markdown
10:22 - so we can see here this is like the
10:24 - structure
10:25 - or
10:26 - the template in a way we could refer
10:29 - to when we're trying to create our
10:32 - entries and if you want to
10:35 - take a closer look into some of the
10:37 - entry templates that we have
10:40 - we can go back into our
10:43 - main repository
10:46 - and
10:48 - if we actually scroll
10:50 - up into one of our folders there
10:54 - into the documentation folder
10:58 - we have
10:59 - the different
11:01 - templates that we can use such as our
11:03 - entry template
11:04 - or if we want to create a term
11:07 - entry we have templates for that as well
11:11 - we also have
11:13 - if you look at the top of our file we
11:15 - have some metadata
11:17 - and for that you can find it inside of
11:21 - the content
11:22 - catalog markdown
11:24 - as well as the subjects and tags
11:26 - markdown so
11:28 - there's a lot of information on here i
11:30 - strongly encourage you to take a look
11:32 - and like parse through
11:34 - to figure out how you can start off with
11:36 - your first entry
11:42 - and maybe we can then dive into
11:46 - the issues tab and the pull requests tab
11:48 - from here
11:51 - sure i'll um i can take the issues one
11:53 - um so at the top of the docs repository
11:57 - you'll see the
11:59 - issues tab
12:00 - uh click on issues
12:02 - and that'll show you all of the current
12:04 - um issues for like new entries that we'd
12:07 - like to add to docs what existing
12:09 - entries we'd like to make changes to to
12:10 - improve the quality and here and there
12:13 - like a bug fix or two but that's
12:14 - extremely rare
12:16 - um this is where you would go if you
12:18 - want to
12:19 - propose an idea for how to make dogs
12:21 - better or grow it more to do that you'll
12:23 - want to click on the green button that
12:25 - says new issue
12:28 - by clicking on that button
12:30 - it'll bring up three options for
12:32 - creating three different kinds of issues
12:34 - using github's new issue templates so
12:37 - the first is bug report again that's a
12:38 - very rare occurrence um then there's
12:41 - entry edit which is a request to edit an
12:44 - existing entry
12:45 - and then there's entry requests which is
12:47 - probably the most common one uh you're
12:49 - going to want to use that if you want to
12:50 - propose a brand new entry for the docs
12:52 - repository
12:54 - so this is where all of the issues are
12:56 - handled
12:58 - the maintainers including myself and
13:00 - christine and sunny normally use these
13:02 - when we want to grow the the collection
13:04 - a little bit more and give opportunities
13:06 - to people to contribute but you're more
13:08 - than welcome to file an issue yourself
13:11 - my only recommendation though is if
13:12 - you're using ios um and you're using the
13:15 - github app it's not going to work
13:17 - unfortunately they don't have
13:19 - configuration for uh for yaml templates
13:22 - yet so if you want to make an issue do
13:24 - it on the web on the desktop site for
13:27 - github
13:29 - cool
13:30 - thank you for seeing brandon that was a
13:31 - great overview of our repo um
13:36 - make sure to start this right so that
13:38 - you can find it easily next time kokami
13:40 - dox repo and also one more thing is that
13:42 - kokami dox repo kokemi docks actually is
13:45 - probably the perfect open source project
13:49 - for open contribution project for new
13:51 - developers for learners who want to dip
13:53 - their feet into the world of
13:55 - open source or github or ugc and things
13:59 - like that so please take a look um you
14:02 - know read through this read through as
14:04 - much as you can and also another thing
14:05 - that i think christine pointed out
14:07 - that's really cool is that um when you
14:09 - first start out doing this you can just
14:11 - literally
14:13 - compare a particular
14:15 - entry for example like the c plus plus
14:17 - entry
14:18 - um in github
14:19 - to
14:20 - uh what it looks like
14:22 - on our site
14:24 - right if you go to c plus arrays so
14:26 - basically this entry right here
14:29 - right like a vector and arrays the data
14:30 - structure using c plus plus
14:32 - like a vector an array boom so basically
14:35 - this turns into renders into
14:38 - this
14:40 - all right let me see if there's any
14:42 - questions in the chat um
14:44 - [Music]
14:47 - before we
14:48 - i think let's take let's take a moment
14:50 - here and answer some questions because
14:51 - we're about to do some live reviews of
14:54 - pr's so let's knock out the questions
14:56 - about github a little bit um just right
14:58 - now
14:59 - so
15:01 - um question from alex
15:03 - is there a discord for just the people
15:04 - who are contributing to kogami docs
15:06 - invite please
15:07 - there is a discord um for the community
15:10 - um so feel free to find us there uh and
15:13 - if you make a bunch of entries and we
15:15 - think you know it's really high quality
15:16 - entries we'll invite you to our code
15:18 - cami
15:19 - docs community slack
15:21 - okay the channel in our in our
15:24 - headquarters um fact channel
15:28 - another question um can we make direct
15:30 - prs
15:32 - um yes so from
15:35 - for example if you want if you see a
15:36 - typo
15:37 - or an error feel free to click on on
15:40 - every single entry you can click on this
15:41 - link right here edit this page on github
15:44 - um it's a very easy way to you know get
15:46 - you directly to github fix the typo
15:48 - let's say a raise is misspelled you know
15:51 - boom and then commit the changes here if
15:53 - you have some description
15:56 - very low effort low lift way of editing
15:59 - entry and that's the cool thing about
16:01 - code camera docs too is that not only
16:03 - there are so many ways to contribute to
16:04 - it like christine was saying you can
16:05 - find typos bugs formatting issues
16:08 - inaccuracies missing info and existing
16:10 - entries you can create an entry make a
16:13 - pr and create a new entry you could
16:16 - submit a submit a entry request in
16:18 - github issues
16:20 - for things that you think are missing on
16:22 - github uh on cocamy docs like a new
16:24 - language a new library a new
16:26 - particular function
16:28 - another thing too you can
16:30 - give us product feedback um using the
16:32 - google form and the home page or
16:34 - actually at the very bottom of every
16:36 - single entry right here
16:38 - right a product feedback and lastly can
16:40 - also help us promote it on social
16:44 - cool
16:46 - all right let's get to the second part
16:48 - portion of this live stream which is
16:50 - we're going to do some live reviews
16:53 - so i'm going to navigate to
16:55 - the poll request sections so here are
16:58 - some of the pull requests
17:00 - from the oh check this out there's one
17:02 - from 30 minutes ago nice
17:04 - um but here are all the pull requests
17:08 - in the last nine days
17:10 - and we're gonna take a look at a few of
17:12 - these live together as a team
17:14 - okay so the first pr that we're gonna
17:16 - take a look at is pr number 455.
17:22 - this is a very small one and this one is
17:24 - from mikey
17:26 - from eugene oregon
17:29 - or mickey
17:30 - mckiff
17:32 - the the username on github
17:35 - so i'm going to send out this github
17:36 - link in the chat so this one in
17:39 - particular
17:40 - is
17:41 - an edit of an entry
17:44 - i think it's a css animation one
17:48 - okay
17:49 - so anytime
17:50 - um
17:51 - [Music]
17:54 - anytime we see something like this
17:56 - which is a edit of an existing entry the
17:59 - first thing that we like to do is
18:00 - actually just take a look at
18:02 - what this entry looks like already
18:04 - right so it's a css animations so i'm
18:07 - going to navigate to css animations
18:15 - cool
18:17 - and it made a very small change right if
18:19 - you can take a look it's actually just
18:21 - um adding
18:23 - um
18:24 - a few lines
18:26 - to an explanation on line 23.
18:30 - brandon christine you want to take a
18:31 - look and let me know what do you think
18:37 - yeah yeah i think um it's a pretty
18:40 - straightforward change it's only
18:42 - technically one line on the file um with
18:45 - added text on that line
18:47 - um
18:48 - what i would what i would change about
18:50 - this though is i would surround
18:52 - animation dash duration with backticks
18:56 - and
18:58 - um
19:01 - i would actually they didn't make this
19:03 - change in the original file but i'm
19:05 - noticing in the paragraph above it it's
19:07 - using a u pronoun we want our docs
19:09 - entries to be more manual like in tone
19:11 - and voice
19:12 - so um that's something that i caught
19:17 - looking at this just now was
19:20 - on line 21
19:23 - the second sentence when you specify
19:24 - styles that needs to be
19:26 - re-redone
19:28 - cool so first thing first let's go in
19:30 - here
19:31 - and add single ticks around animation
19:34 - duration
19:35 - okay
19:36 - to get animation to work the animation
19:38 - must be bound to an element that's
19:39 - original piece and it's basically this
19:41 - line is basically describing the code
19:42 - block right here
19:44 - and mickey uh mikey actually add another
19:47 - line here which is to get animation to
19:49 - work the animation must be bound to
19:50 - element and the animation duration
19:53 - [Music]
19:54 - field must be defined
19:56 - in this example code the h1 element will
19:59 - load as yellow and gradually change to
20:00 - orange of the course of five seconds
20:06 - and because i have grammarly extension
20:08 - on i'm going to add a comma right here
20:12 - right and also there's a slight type
20:14 - typo
20:16 - h1 element
20:18 - the start review
20:21 - very nice
20:23 - finish my review
20:26 - with um
20:27 - one comment saying
20:29 - uh one little
20:37 - so they review and then we're done
20:39 - for this one
20:40 - and then later down the road if we want
20:41 - to we can go in and make a change to
20:44 - um the from the u to
20:46 - um to be less uh
20:50 - do something else
20:51 - what brandon was saying earlier with
20:53 - right here live 21.
20:55 - cool
20:56 - i think that's pretty good for this
20:57 - piece right
20:59 - um and after we're done with that what
21:02 - we like to do is go back to conversation
21:05 - uh we add a label so
21:09 - this is um
21:12 - css
21:14 - css uh enhancement right
21:18 - enhancement
21:19 - and also waiting for author
21:23 - so three different labels
21:25 - so now when we go back to the pull
21:26 - request we'll see that for this
21:28 - particular pr there are three labels css
21:31 - enhancement meaning it's not a new entry
21:33 - it's edit of the existing entry and it's
21:36 - also we're waiting for the author to
21:38 - make the changes
21:39 - and once the author makes a change
21:41 - we can merge
21:43 - cool
21:44 - and then before we dive into the next
21:46 - pull request i do want to share
21:48 - something i think is pretty pretty nice
21:50 - um what do we look for when we uh review
21:53 - a pull request okay
21:55 - um when it's in when it's the existing
21:57 - entry existing entry like what we just
22:00 - reviewed i think it's pretty simple
22:02 - right we take a look it's not a huge
22:04 - change but once a new entry this is sort
22:06 - of the things that we actually do take a
22:08 - look at
22:09 - we take a look at plagiarism
22:11 - we take a look at the content and
22:13 - structure
22:14 - right file names uh the files the the
22:17 - file system
22:18 - we look at the style editorial
22:21 - right the formatting of the piece
22:23 - the technical accuracy
22:24 - and also some of the guidelines that we
22:28 - that we suggest in our contribution
22:30 - guide
22:33 - cool
22:36 - let's dive into the next vr
22:38 - so the next pr that we have
22:40 - is pr number 456
22:43 - okay
22:46 - this one is created by
22:48 - um
22:49 - keenan aka revert
22:52 - and it's actually a new entry
22:55 - okay i had an explanation of the tag in
22:57 - the folder content html tag under the
22:59 - folder embed
23:02 - and check this out this entry right here
23:05 - is at actually
23:06 - king
23:08 - came about
23:09 - from an issue so somebody actually
23:12 - requested an issue here actually oh wow
23:13 - christine uh requested an entry uh
23:15 - requested a github issue
23:17 - um and this uh revert kenan um basically
23:22 - made the made the entry so let's take a
23:24 - look
23:28 - okay so this is a pretty short piece
23:30 - it's 24 lines long as you can see
23:32 - there's a metadata at the very top and
23:34 - also the content at the very bottom
23:38 - christine you want to walk us through
23:40 - this one
23:41 - yeah so typically i don't know if we
23:44 - mentioned that like we do two rounds of
23:46 - reviews for
23:47 - entries that
23:49 - have like a have have like a decent
23:51 - amount of information in there unless
23:53 - like it's a typo in which case we just
23:55 - do a single review and usually merge
23:57 - that
23:58 - um
23:59 - for this one
24:01 - it was like it was a really decent
24:04 - review it's um
24:06 - pretty bite-sized i would say
24:09 - there were
24:10 - some
24:12 - certain things like
24:14 - if we have the syntax down here on line
24:17 - 23 that maybe there could be like an
24:19 - explanation on the attributes that we
24:22 - included
24:24 - so i probably just put a comment onto
24:27 - that line and say
24:30 - like
24:30 - if we can include
24:32 - some explanation as to
24:34 - the syntax that's listed here
24:37 - um
24:38 - in addition on like line
24:40 - 16
24:43 - if we can add a suggestion there and
24:46 - also it's really helpful to have the
24:48 - grammarly extension installed on your
24:49 - computer like how you do sunny
24:51 - so that you can catch things that maybe
24:54 - your eyes wouldn't be able to catch all
24:56 - the time
24:58 - all right
24:59 - um okay and another thing yeah like uh
25:02 - this one's missing like a period right
25:04 - here right yeah
25:06 - um
25:07 - another thing is just
25:09 - i like to add like little notes
25:11 - inside of certain entries if there's
25:14 - like some things that maybe a reader
25:16 - could
25:17 - take extra note of so like embed for
25:20 - example is
25:21 - a deprecated tag
25:25 - so it's good that they mention there
25:27 - that there's like other tags that you
25:28 - can use but we just included it here for
25:31 - like legacy purposes
25:34 - yeah that's definitely a node that we
25:35 - want to add like maybe right here
25:37 - yeah
25:38 - that's definitely here's some other ones
25:39 - that you can use also i just noticed
25:41 - line 18 i think this is a common that's
25:43 - not necessary right
25:45 - yeah that's not necessary there but
25:47 - that's all structural and
25:50 - we're like happy to
25:52 - help guide the entry to
25:54 - the state that it needs to get into
25:57 - cool
25:58 - um christine are you going to make the
26:00 - the comments
26:02 - yes so i'm just going to add like a
26:04 - quick period there
26:07 - um
26:09 - remove that extra comment
26:13 - and then
26:15 - include a quick comment here that
26:17 - maybe
26:21 - maybe we can explain the attributes
26:29 - in further detail here
26:32 - let me know when you're done and i can
26:33 - refresh the page
26:35 - okay
26:37 - hit the refresh button
26:44 - cool
26:46 - um
26:46 - [Music]
26:47 - very nice added a comma here um that
26:50 - appear right there
26:52 - deleted the line 18 that's not necessary
26:55 - and then a feedback back there
26:58 - okay um let me take it so i would also
27:00 - add another note though for line three
27:02 - under the description um
27:05 - i don't know if it makes sense to have
27:07 - embed in quotes to define embed it seems
27:09 - a bit recursive
27:11 - um
27:12 - i wouldn't just say like allows you to
27:15 - allows one to insert
27:17 - content like videos and images so you
27:20 - don't want to be
27:21 - what's it called
27:22 - um
27:23 - a recursive definition or whatever it's
27:25 - called yeah like gnu or something yeah
27:27 - like it it doesn't really unpack it any
27:30 - further
27:31 - and also i would going back to my
27:33 - earlier point about the last pr lines
27:35 - three and um
27:37 - i think it was 21 uh have you in your
27:40 - respectively so i would switch those out
27:42 - with the manual tone invoice
27:45 - wait where is this line three
27:46 - lines three and twenty one
27:48 - three and twenty one cool
27:51 - um
27:52 - or no the 16 sorry
27:56 - cool so this is something to swap out uh
28:00 - okay one more thing that i just noticed
28:02 - so this is kind of um so i'm gonna go to
28:04 - cogami
28:05 - docs
28:06 - um so this one in particular is actually
28:08 - not a regular entry right it's a term
28:09 - entry
28:11 - you can tell because there's a terms
28:12 - table
28:13 - and so if we navigate to it css
28:16 - tags
28:18 - wait html yeah html works
28:21 - html
28:22 - and let's go into the tags concept
28:26 - so this particular terms entry
28:29 - embedded
28:30 - will actually go in here
28:32 - but check this out one thing that we try
28:35 - to do for all of our terms entries
28:37 - is for the description we don't start we
28:40 - start with the verb
28:42 - okay
28:44 - so let's make the changes here as you
28:46 - can see
28:47 - creates the link
28:50 - represents a section of the document so
28:52 - here let's do
28:55 - what brand is saying inserts a video
28:59 - image
29:00 - page
29:03 - that oscar comma right here
29:06 - and usually for these sort of things i
29:08 - kind of want to explain it um
29:12 - for all the term entries
29:14 - term centuries
29:18 - the description
29:23 - in the metadata
29:25 - should start
29:26 - with the verb
29:31 - also added
29:33 - password
29:36 - done
29:39 - at a single comment are we good
29:42 - um
29:44 - one more thing i usually like to check
29:45 - for
29:47 - oh by the way this person did a great
29:48 - job on the catalog content metadata
29:51 - right perfect we got a free course and
29:54 - then we have a
29:55 - front-end engineer career path
29:57 - one thing i also like to check for is
29:59 - these tags okay so i actually have this
30:01 - bookmarked
30:03 - um this is a system that we're going to
30:04 - use down the road hopefully to
30:07 - sort
30:08 - our
30:09 - filter
30:11 - for specific entries so we want to
30:13 - double check images video and html
30:16 - i can already see a prompt so images
30:20 - boom
30:23 - video
30:24 - boom
30:25 - i'll check this out html oh wait h5 is
30:28 - in here okay i need to actually take
30:29 - this out whoops
30:31 - um
30:34 - oh yeah python's not here so
30:37 - um
30:37 - [Music]
30:39 - because
30:40 - hm this is already under the html folder
30:44 - we actually don't need to um
30:48 - we actually don't need the language name
30:49 - here
30:50 - so i'll say take out
30:52 - my text
31:02 - oh
31:05 - all right
31:06 - um
31:07 - one more thing
31:08 - similar to what christine was saying i
31:10 - think it's a great that there's an
31:12 - example of this what the syntax of the
31:15 - embed element looks like
31:17 - and yes there should definitely be an
31:18 - explanation but one more thing that we
31:20 - can do to expand this further is to add
31:23 - um
31:24 - a use case for this or an example of
31:26 - this within a whole html file
31:29 - so
31:31 - potentially right here i'm going to add
31:32 - [Music]
31:35 - optional
31:38 - add-in
31:42 - whole html
31:43 - [Music]
31:45 - file
31:47 - that uses
31:55 - okay so it's basically explanation
31:58 - syntax and then example
32:02 - hopefully more than one example but um
32:05 - get something
32:08 - cool
32:10 - all right let's take it let's refresh
32:12 - and take a look uh all the changes that
32:14 - we made
32:17 - perfect
32:18 - perfect oh wait is is
32:21 - revert in here
32:25 - pull requests
32:33 - oh nice
32:35 - um they're already making their changes
32:36 - right now as we're doing this cool
32:39 - i was like i don't remember
32:43 - committing that cool perfect
32:46 - um
32:47 - and that's it i think this one after
32:49 - this one round of review i mean actually
32:51 - what we just did was almost like three
32:52 - rounds of reviews but um but after this
32:55 - i think um we're gonna take a look again
32:58 - if it's good we're gonna merge it in
33:01 - that's basically the whole process
33:09 - cool should we move on to our third pr
33:11 - since we still have a lot of time
33:15 - um
33:17 - something
33:18 - that our contributors allowed to make
33:20 - comments and reviews of prs or does only
33:24 - the team do that yeah absolutely uh
33:26 - there's a great question we actually had
33:28 - a history of a lot of um community
33:31 - members
33:32 - uh making
33:33 - comments and reviews of prs
33:36 - throughout um this is the whole
33:39 - inception of uh
33:40 - of docs right so for docs we have about
33:43 - i mean now we're talking about 458
33:47 - eighth
33:47 - pull request
33:49 - um we have tons of volunteers who've
33:51 - been helping us including eugene who i
33:53 - saw in the chat um
33:55 - [Music]
33:57 - just plenty of people plenty of people
33:58 - who have helped with review so yes feel
34:00 - free to jump in with a review
34:03 - we still want somebody within the team
34:05 - to
34:07 - we every single entry
34:11 - that's been created
34:13 - requires two rounds of reviews
34:16 - at least one round of review needs to
34:17 - come somebody within cook county
34:20 - right just to ensure
34:22 - somebody was saying in the last live
34:24 - stream the first 100 the first 1000
34:27 - the quality of the first 1000 entries
34:29 - sets the tone for the next 10 000
34:32 - right so we really want to make sure
34:33 - these are
34:34 - super solid
34:36 - but yes alex feel free to jump in
34:38 - um if you see something that needs help
34:43 - cool
34:44 - let's get started on our very last
34:45 - actually let's should we check out this
34:47 - one
34:47 - somebody made a entry so this is this is
34:49 - something we haven't seen before this
34:51 - came in an hour ago added insulin apis
34:53 - let's just take a look that's kind of
34:55 - cool yeah
34:57 - um so hot 82 let us know how it's it's
35:01 - if you're in the if you're actually
35:03 - watching this live stream that's why you
35:04 - made the entry
35:06 - um
35:07 - cool let's see what this person did
35:10 - so this is the
35:11 - edit of an existing
35:14 - entry oh ashley
35:18 - before we do that totally forgot
35:22 - let's go back into the bed
35:24 - and add in the labels
35:27 - html
35:27 - [Music]
35:33 - [Music]
35:37 - let's go back to this this one's done
35:40 - all right now let's come back to this
35:44 - pawn 82
35:45 - oh very nice so this person
35:48 - um
35:49 - add a whole new section to an existing
35:51 - entry
35:52 - so for these existing entries remember
35:54 - we'd like to take a look at what it
35:57 - currently looks like so api right here
36:00 - that stands for boom
36:02 - categories
36:04 - groups public apis private apis partner
36:06 - apis
36:07 - cool
36:08 - this person added
36:11 - benefits and risk of using apis
36:14 - the main benefits of easy apis are
36:17 - one two three
36:20 - okay so for this
36:22 - let's do
36:24 - q5
36:28 - so this is the section this person
36:29 - created the main benefits of using apis
36:32 - are three bullet points cost saving
36:34 - through the elevation elimination of the
36:36 - need to build and maintain local
36:37 - physical infrastructure and services
36:42 - cost effective
36:45 - [Music]
36:47 - and
36:48 - you know using an external resource
36:50 - instead of building it in-house i like
36:52 - that
36:53 - opportunity to leverage expertise of
36:55 - different vendors
36:56 - instead of having to reinvent from
36:58 - scratch things like authentication
36:59 - payment processing and maps so this one
37:02 - i think and this one are kind of similar
37:04 - if i'm
37:05 - i'm reading it correctly
37:08 - oh actually never mind this is slightly
37:09 - different
37:13 - [Music]
37:16 - okay possibility to build new businesses
37:18 - based on the exchange of data between
37:20 - users and various online services
37:22 - through api access to independent
37:24 - developers
37:30 - i kind of get that
37:32 - yeah saying it makes me think of like uh
37:35 - kaplan they use a lot of um like public
37:38 - web apis for their video editing
37:41 - softwares and stuff
37:44 - totally
37:46 - um
37:46 - [Music]
37:48 - okay i think this is pretty solid
37:50 - right
37:52 - uh it's cost effective
37:56 - because you don't have to build it
37:57 - in-house
37:59 - you can leverage
38:01 - different
38:02 - vendors
38:03 - it's the spotify api the google maps api
38:06 - so instead of right or or stripe payment
38:09 - processing right stripe
38:11 - map or or gumroad or whatever
38:14 - authentication you know google login
38:16 - facebook login
38:18 - google right magic link
38:20 - maps google maps i think the what's it
38:23 - called the
38:25 - forgot the name of the
38:27 - map grid or whatever api
38:30 - um okay
38:33 - um i would say some of these do overlap
38:35 - slightly so i'll play around with this a
38:37 - little bit um
38:39 - what do you think should we is it say
38:41 - yes
38:43 - it looks good to me i mean the ideas
38:45 - expressed in each of the points i think
38:47 - they do overlap but they're also kind of
38:49 - like
38:50 - free free falling in a way or like they
38:53 - stand on their own in a way i would just
38:55 - put a dash in between cost and saving on
38:58 - the first point i think that that's the
38:59 - uh the idea that like cost saving
39:01 - right here okay
39:03 - yeah
39:05 - the main risks associated with using
39:07 - apis are
39:09 - having no control over vendors
39:10 - infrastructure or how the vendor allows
39:12 - developers to access it through the api
39:16 - true it's basically saying
39:18 - you can't really
39:19 - [Music]
39:20 - it's not really flexible right you don't
39:22 - really have the the power to
39:24 - sort of
39:26 - update the spotify api or you know
39:28 - similar to what the chat is saying uh
39:29 - alex on the shopify
39:32 - um api right
39:34 - i think that's pretty that's a very
39:36 - that's a i like that unpredictability of
39:38 - the vendors internal decision making
39:40 - they have a very adverse effect on
39:42 - business businesses relying on the apa
39:44 - so this is a great one i think this
39:46 - happened recently when facebook took
39:48 - away some of the
39:49 - um
39:53 - this is on techcrunch i think i read it
39:55 - it was like facebook
39:56 - updated one of their apis and it had a
39:58 - huge impact on some of the smaller
40:00 - business smaller startups using it
40:03 - having little or no control over exactly
40:05 - what data the api collects and how it
40:07 - ends up being used by the api's provider
40:09 - true
40:11 - apis are get weight gateways and are
40:14 - often subject to hacker attacks once the
40:16 - api is compromised other system becomes
40:18 - vulnerable it is commonly predicted that
40:20 - api abuses will become the most frequent
40:22 - vendor of attacks in the coming years
40:26 - um christine or brandon can you can you
40:28 - copy and paste this um
40:32 - yeah we actually you know what let's we
40:34 - can check check for uh
40:37 - so one of the first things
40:38 - what we usually try to do
40:40 - is the first thing actually we usually
40:42 - check for plagiarism and things like
40:43 - that and i feel like um
40:46 - we probably should have done this early
40:47 - on but it's fine
40:49 - we'll take a look after this live stream
40:50 - offline api providers run the risk of
40:52 - legitimate business business partners
40:54 - abusing apaches to their own needs
40:58 - okay
40:59 - um
41:00 - [Music]
41:01 - i think this is pretty solid
41:04 - i want to see
41:09 - yeah i feel like some points do overlap
41:12 - and can be placed into like the first
41:15 - and second and third yeah those bullet
41:17 - points
41:18 - and then maybe we could just like
41:22 - have one overarching theme which is just
41:24 - like little control or unpredictability
41:27 - and then
41:28 - list the reasons for that
41:30 - i agree
41:31 - um
41:33 - yeah combine these three
41:35 - into
41:36 - even into one
41:38 - [Music]
41:40 - okay alex actually have some thoughts
41:42 - api allows you to keep the structure of
41:43 - your database hidden and secure
41:46 - does the user interfaces with the app
41:49 - instead of with the database directly
41:50 - you don't need to expose the url
41:53 - of your database i like that
41:57 - is the apis
41:59 - that's a great um benefit
42:01 - it's basically saying
42:03 - um
42:04 - instead of storing everything so i
42:06 - actually did this recently with here can
42:07 - i build a whole json file of all the
42:09 - songs instead of using spotify api
42:12 - but because
42:14 - now this json file is available in
42:16 - discovery but in the public repo anybody
42:19 - can
42:19 - sort of know what it looks like and want
42:21 - to
42:23 - it can't be compromised right
42:27 - cool
42:29 - um
42:30 - all right i think that's a great
42:32 - i think we can
42:34 - go through this
42:35 - and make some changes offline
42:39 - thank you let us know if you're in the
42:40 - chat pawn 28 or
42:43 - pawn 82.
42:47 - nice sounds like this
42:53 - all right um
42:56 - so we have 15 minutes left
42:59 - i think that was a great session we we
43:02 - we walked we did a demo we walked
43:04 - through the gap repo and the different
43:06 - aspects of the different aspects of the
43:08 - repo and also
43:10 - live review three different pr's
43:12 - um we do have some time left
43:15 - so let us know in the chat if you have
43:16 - any questions about kokami docs about
43:19 - our team
43:20 - um about creating entries please let us
43:23 - know oh nice hon is right here cool very
43:26 - nice great job han that was that was a
43:29 - great um
43:30 - addition to the
43:32 - to
43:33 - the um to the entry i think that's the
43:36 - the beautiful part about cocamy docks is
43:38 - that it's forever evolving and if it is
43:40 - missing something anybody can go in and
43:44 - make the change
43:45 - so hopefully after this you know right
43:47 - after this live stream we'll we'll make
43:49 - some suggestions
43:50 - and after you make the changes we're
43:51 - going to merge it
44:05 - screen
44:06 - yeah
44:09 - well that was pretty informative thank
44:11 - you everybody for uh
44:13 - all that i actually had a few final
44:15 - remarks since we have some time left uh
44:17 - maybe give you some time people to ask
44:19 - questions in the chat
44:20 - um do you maybe i'm curious brandon
44:23 - christine and sonny you come across any
44:25 - common mistakes or things that are like
44:27 - easily fixable avoidable when you're
44:29 - seeing these pr's is there anything that
44:31 - you would like to share with everybody
44:32 - watching this little tweaks of things
44:35 - that you know can save everybody time
44:40 - um i guess like structural
44:43 - issues is a big thing but like we can
44:45 - always assist you with that if we don't
44:47 - want that to be like a daunting factor
44:50 - as to why you may
44:52 - not want to approach making those
44:54 - entries
44:55 - but um
44:57 - i think as long as like you have
44:59 - a strong technical
45:01 - content in there
45:03 - like will pretty much accept
45:06 - most of your entries
45:09 - nice
45:12 - um i would say
45:14 - some of the common mistakes have already
45:16 - been addressed in recent weeks um
45:18 - formatting and spacing is already kind
45:21 - of getting addressed and um
45:24 - uh like like to the point sunny made
45:26 - earlier about the content catalog
45:29 - metadata point uh that was a common um
45:32 - pain point for a lot of our contributors
45:34 - uh myself included figuring out which
45:36 - links which slugs to use and so
45:39 - christine graciously made us a um a
45:41 - guide for all the different kinds of
45:43 - subjects and languages and frameworks of
45:46 - of the different like free and paid
45:47 - course pairs to use
45:51 - cool
45:54 - have you seen anything sunny that you
45:55 - want to share maybe uh any pro tips one
45:57 - two three
45:59 - yeah i'll say definitely take a look at
46:01 - the existing entries um something that
46:04 - will be great is just literally
46:07 - copy and pasting an existing entry over
46:09 - and then editing editing the file from
46:11 - there
46:12 - just so you already have the you already
46:14 - have the um the structure now
46:18 - saves you a lot of time
46:20 - ready may i make one more point actually
46:22 - um something just came to mind uh for
46:24 - contr for new contributors uh the first
46:26 - time you make a contribution to docs
46:28 - make sure to sign the contributors
46:30 - license agreement or the cla
46:32 - because otherwise our um
46:35 - our ci cd tooling won't work right our
46:38 - checks won't pass and we won't be able
46:39 - to proceed with merging your work into
46:42 - docs so um very important to make sure
46:44 - you sign that document
46:50 - awesome
46:51 - yeah i guess it's something that is very
46:53 - easy to you know you just get so excited
46:55 - and caught up uh contributing they're
46:56 - just gonna like
46:58 - totally forget about that
47:00 - well um
47:01 - unless you have any final thoughts on
47:03 - this or anything uh maybe some wish list
47:05 - i don't know if um when you're reading
47:07 - through content so much is there any
47:08 - specific kind of content that you hope
47:11 - that you're gonna see people
47:12 - contributing in the future maybe there's
47:15 - some areas that you're like oh you know
47:16 - it's really nice if we have this or that
47:19 - do you have a wishlist
47:25 - yeah i think everybody here got plenty
47:27 - of things that would love to see in docs
47:29 - um
47:30 - for me especially i think the the breath
47:32 - and the depth is um both something we
47:35 - you know we're looking for um whether
47:38 - it's um just
47:41 - whether it's machine learning content
47:43 - different libraries and frameworks for
47:45 - different web web dev tools um and even
47:49 - um
47:50 - [Music]
47:51 - really um
47:53 - polishing up the existing entries right
47:55 - like for example we just saw one from
47:56 - pawnee to two that just made the whole
47:58 - entry a lot more uh full um
48:01 - and more very informative right by
48:03 - adding the risk and
48:05 - the benefits of using api so now the
48:07 - person who's reading it now will know
48:09 - okay why am i using the api
48:11 - why should i use why should i not use it
48:14 - to make the to make the trade-offs
48:22 - but other languages like r
48:24 - um i think we have one and go
48:27 - um
48:30 - yeah i know i was just kind of these
48:33 - awkward live streaming moments waiting
48:35 - to see if anybody else might say it's
48:36 - too on mute to jump in
48:39 - um i would say probably
48:42 - like what sunny said breath and death is
48:44 - super super important i'd like to make
48:46 - sure that as we're growing the the
48:48 - collection that the collection maintains
48:50 - quality the quality keeps up with the
48:52 - with the growth
48:53 - um what i'd like to see more of is
48:56 - probably graphql
48:57 - or gatsby
48:59 - other like jam stacky kind of tools um
49:02 - because they're like front end tooling
49:05 - is only becoming more popular every year
49:08 - and more and more people are gonna be
49:09 - interested in and gatsby especially like
49:11 - comes out with like a new version every
49:13 - two weeks that has some kind of a
49:15 - breaking change
49:16 - it seems
49:18 - that that seems like a nightmare to my
49:19 - day okay
49:22 - what do you want to see
49:24 - um i think the other day friend and i
49:26 - were talking about react
49:29 - and
49:30 - on the routing
49:32 - topic
49:33 - um we'd like to see more terms on there
49:39 - cool especially because there's a newer
49:40 - version out with many breaking changes
49:46 - all right yeah i was just wondering if
49:48 - uh you know how sometimes you have these
49:49 - obscure languages or very specific uh
49:52 - parts of coding that uh it's really hard
49:54 - to get help for uh you start googling it
49:56 - and there's like a blog post from 2005
49:59 - that is that is like answering sort of
50:01 - answering your question and you're
50:02 - hoping you know that they that they have
50:04 - the same problem that you did so
50:05 - um i think uh sometimes even if people
50:08 - are contributing knowledge that they
50:10 - might think that it's not very popular
50:11 - it's not very useful i can guarantee
50:13 - that there's someone out there that is
50:15 - going to be super useful for so like
50:18 - sonny said you know any content you
50:20 - wanna contribute like you know don't
50:21 - make it stop you thinking that you don't
50:23 - know enough or that you know that's not
50:25 - popular enough or it's not interesting
50:26 - enough because there's always somebody
50:28 - out there on the internet that is
50:29 - looking for the help and he's looking
50:31 - for that information so
50:33 - uh off it would be awesome to see code
50:35 - academy docs having all the one stock
50:38 - for everything called implementation
50:40 - related
50:41 - well thank you everybody for stopping by
50:43 - today it was pretty informative it was
50:45 - pretty awesome and useful and
50:47 - i think uh hopefully we can have you
50:49 - online in a few weeks or maybe you know
50:51 - we can make this on our cards keep going
50:53 - with photo family docs keep it updated
50:55 - thank you for stopping by
51:00 - thank you everybody for joining thank
51:02 - you everyone thank you
51:08 - and stopped

Cleaned transcript:

go live okay and we're live today thank you everybody for joining us today we have amazing guests that is gonna are gonna be talking about code academy dogs and what they are what they do why you should be excited about this why you should be contributing for this you'll be learning all the intricacies behind the scenes so without further ado you want to go introduce yourselves please yeah what's up everybody uh my name is sunny i'm a senior curriculum developer here at code county and i currently manage the curriculum free team i'm calling in from brooklyn new york today and i'm super excited to have two people on my team christine and brandon um here with me so i want to introduce yourself sure um hi everybody my name is brandon and i'm a content contributor here on the free team at code academy and i'm calling in from massachusetts um it's great to be here thanks everybody hi i'm christine and like brandon i'm also part of the content curriculum free team and i'm calling in from philadelphia today cool yeah welcome everybody um and for those of you watching um type in the chat let us know where you're calling from um if you have any east coasters east coast people here um we're super pumped for today's live stream we got a pretty good crew here i think they're going to be a lot of great takeaways for contributors and learners um you know watching right now so we got mariana eugene nice alex lillian let us know where you're where you let us know in the chat and to catch you up on what we're up to so last week fed and i did a live stream together where he interviewed me on some high level aspects of kokami docs our brand new product feature so take a look if you missed it for today we're going to do more of a deep deeper dive where we will first do a demo of kokami docs then we're going to do some walkthroughs so first we're going to walk through github repo where all the content is stored we're going to do a walkthrough of the contribution guide basically the quality standards for creating new entries and then also github issues basically a bulletin board where you will um you can request new entries in the second half of this live stream we'll do a live review of some of the recent pull requests so taking a look at the recent entries created by the community we've never done something like this before so i think it's gonna be pretty fun and at the very end if we do have time we can have some q a session at the very end so feel free to let us know what you think in the chat throughout the live stream if you have some you know burning questions that you want to ask um feel free to ask it at the end cool we got a lot of people from all over the world it looks like philippines canada bermuda eugene oregon nice oh that's mikey one of the photographs we're gonna review pennsylvania colorado cool all right um should we get started i think so you guys are ready i'm ready i'll be watching the back so first things first um codecammy.demo so i'm going to be sharing my screen for the for the rest of the the live stream for those for those of you that are new um cocamy docs is an open contribution coding documentation for popular programming languages and frameworks it's built by the community and maintained by codecademy so similar to wikipedia anyone in the world can add or edit an entry we're hoping to build the perfect companion the perfect coding documentation site for you when you're working on a project when you are stuck when you want to look up a definition a function name a method name a method or whatever concept okay i'm going to drop the link in the youtube chat right now for you to take a look so we have 18 topics here on the left anywhere from c to c plus plus python to javascript okay we also recently launched our v2 uh feature which basically encourages uh we're trying to focus on encouraging contributors um the contribution side of things so here is a community uh leaderboard um to highlight and also celebrate some of our uh most active contributors so if you want to say look up javascript array what you can do is very simple click into the javascript topic and then navigate to the arrays concept for each concept so this is an entry by the way this is a code county docs engine so for every entry usually there is an explanation some code blocks for this one in particular you can find out how to create an array how to access an element of an array using an index and check this out if you know for example you want to learn how to merge two arrays or how to connect to arrays the first thing they can do well actually check this out you have uh you have here we have a um a terms table okay where you can find all the arrays methods methods for javascript and you can also click into these um here's a concatenation string method again an explanation a basic syntax a few examples and here's something pretty neat a codebody example a basically interactive um a code block where you can actually run the code and see the output pretty cool so we currently have about 714 entries 90 of which are created by the community um this morning as of this morning we have 98 661 distinct users which means that we're going to actually hit surpass 100k distinct users probably this weekend or next week and that's pretty much kokami docs any questions before we move on to the github repo so brandon actually have something pretty good so does is anybody familiar with using github um should we do a um a session right now on what is github type in the chat let's know okay we got one eugene all right i think one is one is enough brandon do you want to take it away yeah um hi everybody so for those of you who aren't familiar with github github is a source code service that hosts over 200 million remote repositories for developers to commit and push their changes from their projects it uses git which is which is a distributed version control language for collaborating on projects both individual and uh group both personal and professional and github is where codecademydocs hosts all of its source code and um to talk a little bit more about uh the repository for docs i'll pass things off to christine yeah so this is our main branch for codecademydocs and we can see a few folders here as well as some extra files we don't need to be too knowledgeable about like what's going on in the files to contribute to docs but just know that like these hold our extra configurations um as well as like some tests and dependencies so if we actually scroll down sonny if we could scroll down onto the page and take a look at our readme um yeah the readme just kind of goes over like what exactly docs is what stage of development that we're on as well as people who are contributing right now our content team our amazing engineering team who put docs together and um if we scroll down a little bit more it kind of gives us how we can contribute so we can click on that link that brings us to our contribution guide we'll head over there yep and here is a little closer look at how we can contribute a pull request so this starts with forking from our project repository and you can find that button all the way at the top of our repo it's just like a button click away and then you'll be able to fork our repo onto your own um it also goes over like a little bit more details of after you submit a pull request what you can do from there and if we actually go back to our main repo and take a look at some of the folders there so we'll mainly be working out of the content folder which holds a list of all the topics that we have on docs such as c c plus plus css and other frameworks if you're not too sure of um where you should place your content definitely just take a look at the docs website and see where the information that you may want to add will fit into if we even want to maybe click on one of these topics have a looksee into kind of an example of one of our entries yeah so we'll click on the arrays and click on the arrays markdown so we can see here this is like the structure or the template in a way we could refer to when we're trying to create our entries and if you want to take a closer look into some of the entry templates that we have we can go back into our main repository and if we actually scroll up into one of our folders there into the documentation folder we have the different templates that we can use such as our entry template or if we want to create a term entry we have templates for that as well we also have if you look at the top of our file we have some metadata and for that you can find it inside of the content catalog markdown as well as the subjects and tags markdown so there's a lot of information on here i strongly encourage you to take a look and like parse through to figure out how you can start off with your first entry and maybe we can then dive into the issues tab and the pull requests tab from here sure i'll um i can take the issues one um so at the top of the docs repository you'll see the issues tab uh click on issues and that'll show you all of the current um issues for like new entries that we'd like to add to docs what existing entries we'd like to make changes to to improve the quality and here and there like a bug fix or two but that's extremely rare um this is where you would go if you want to propose an idea for how to make dogs better or grow it more to do that you'll want to click on the green button that says new issue by clicking on that button it'll bring up three options for creating three different kinds of issues using github's new issue templates so the first is bug report again that's a very rare occurrence um then there's entry edit which is a request to edit an existing entry and then there's entry requests which is probably the most common one uh you're going to want to use that if you want to propose a brand new entry for the docs repository so this is where all of the issues are handled the maintainers including myself and christine and sunny normally use these when we want to grow the the collection a little bit more and give opportunities to people to contribute but you're more than welcome to file an issue yourself my only recommendation though is if you're using ios um and you're using the github app it's not going to work unfortunately they don't have configuration for uh for yaml templates yet so if you want to make an issue do it on the web on the desktop site for github cool thank you for seeing brandon that was a great overview of our repo um make sure to start this right so that you can find it easily next time kokami dox repo and also one more thing is that kokami dox repo kokemi docks actually is probably the perfect open source project for open contribution project for new developers for learners who want to dip their feet into the world of open source or github or ugc and things like that so please take a look um you know read through this read through as much as you can and also another thing that i think christine pointed out that's really cool is that um when you first start out doing this you can just literally compare a particular entry for example like the c plus plus entry um in github to uh what it looks like on our site right if you go to c plus arrays so basically this entry right here right like a vector and arrays the data structure using c plus plus like a vector an array boom so basically this turns into renders into this all right let me see if there's any questions in the chat um before we i think let's take let's take a moment here and answer some questions because we're about to do some live reviews of pr's so let's knock out the questions about github a little bit um just right now so um question from alex is there a discord for just the people who are contributing to kogami docs invite please there is a discord um for the community um so feel free to find us there uh and if you make a bunch of entries and we think you know it's really high quality entries we'll invite you to our code cami docs community slack okay the channel in our in our headquarters um fact channel another question um can we make direct prs um yes so from for example if you want if you see a typo or an error feel free to click on on every single entry you can click on this link right here edit this page on github um it's a very easy way to you know get you directly to github fix the typo let's say a raise is misspelled you know boom and then commit the changes here if you have some description very low effort low lift way of editing entry and that's the cool thing about code camera docs too is that not only there are so many ways to contribute to it like christine was saying you can find typos bugs formatting issues inaccuracies missing info and existing entries you can create an entry make a pr and create a new entry you could submit a submit a entry request in github issues for things that you think are missing on github uh on cocamy docs like a new language a new library a new particular function another thing too you can give us product feedback um using the google form and the home page or actually at the very bottom of every single entry right here right a product feedback and lastly can also help us promote it on social cool all right let's get to the second part portion of this live stream which is we're going to do some live reviews so i'm going to navigate to the poll request sections so here are some of the pull requests from the oh check this out there's one from 30 minutes ago nice um but here are all the pull requests in the last nine days and we're gonna take a look at a few of these live together as a team okay so the first pr that we're gonna take a look at is pr number 455. this is a very small one and this one is from mikey from eugene oregon or mickey mckiff the the username on github so i'm going to send out this github link in the chat so this one in particular is an edit of an entry i think it's a css animation one okay so anytime um anytime we see something like this which is a edit of an existing entry the first thing that we like to do is actually just take a look at what this entry looks like already right so it's a css animations so i'm going to navigate to css animations cool and it made a very small change right if you can take a look it's actually just um adding um a few lines to an explanation on line 23. brandon christine you want to take a look and let me know what do you think yeah yeah i think um it's a pretty straightforward change it's only technically one line on the file um with added text on that line um what i would what i would change about this though is i would surround animation dash duration with backticks and um i would actually they didn't make this change in the original file but i'm noticing in the paragraph above it it's using a u pronoun we want our docs entries to be more manual like in tone and voice so um that's something that i caught looking at this just now was on line 21 the second sentence when you specify styles that needs to be reredone cool so first thing first let's go in here and add single ticks around animation duration okay to get animation to work the animation must be bound to an element that's original piece and it's basically this line is basically describing the code block right here and mickey uh mikey actually add another line here which is to get animation to work the animation must be bound to element and the animation duration field must be defined in this example code the h1 element will load as yellow and gradually change to orange of the course of five seconds and because i have grammarly extension on i'm going to add a comma right here right and also there's a slight type typo h1 element the start review very nice finish my review with um one comment saying uh one little so they review and then we're done for this one and then later down the road if we want to we can go in and make a change to um the from the u to um to be less uh do something else what brandon was saying earlier with right here live 21. cool i think that's pretty good for this piece right um and after we're done with that what we like to do is go back to conversation uh we add a label so this is um css css uh enhancement right enhancement and also waiting for author so three different labels so now when we go back to the pull request we'll see that for this particular pr there are three labels css enhancement meaning it's not a new entry it's edit of the existing entry and it's also we're waiting for the author to make the changes and once the author makes a change we can merge cool and then before we dive into the next pull request i do want to share something i think is pretty pretty nice um what do we look for when we uh review a pull request okay um when it's in when it's the existing entry existing entry like what we just reviewed i think it's pretty simple right we take a look it's not a huge change but once a new entry this is sort of the things that we actually do take a look at we take a look at plagiarism we take a look at the content and structure right file names uh the files the the file system we look at the style editorial right the formatting of the piece the technical accuracy and also some of the guidelines that we that we suggest in our contribution guide cool let's dive into the next vr so the next pr that we have is pr number 456 okay this one is created by um keenan aka revert and it's actually a new entry okay i had an explanation of the tag in the folder content html tag under the folder embed and check this out this entry right here is at actually king came about from an issue so somebody actually requested an issue here actually oh wow christine uh requested an entry uh requested a github issue um and this uh revert kenan um basically made the made the entry so let's take a look okay so this is a pretty short piece it's 24 lines long as you can see there's a metadata at the very top and also the content at the very bottom christine you want to walk us through this one yeah so typically i don't know if we mentioned that like we do two rounds of reviews for entries that have like a have have like a decent amount of information in there unless like it's a typo in which case we just do a single review and usually merge that um for this one it was like it was a really decent review it's um pretty bitesized i would say there were some certain things like if we have the syntax down here on line 23 that maybe there could be like an explanation on the attributes that we included so i probably just put a comment onto that line and say like if we can include some explanation as to the syntax that's listed here um in addition on like line 16 if we can add a suggestion there and also it's really helpful to have the grammarly extension installed on your computer like how you do sunny so that you can catch things that maybe your eyes wouldn't be able to catch all the time all right um okay and another thing yeah like uh this one's missing like a period right here right yeah um another thing is just i like to add like little notes inside of certain entries if there's like some things that maybe a reader could take extra note of so like embed for example is a deprecated tag so it's good that they mention there that there's like other tags that you can use but we just included it here for like legacy purposes yeah that's definitely a node that we want to add like maybe right here yeah that's definitely here's some other ones that you can use also i just noticed line 18 i think this is a common that's not necessary right yeah that's not necessary there but that's all structural and we're like happy to help guide the entry to the state that it needs to get into cool um christine are you going to make the the comments yes so i'm just going to add like a quick period there um remove that extra comment and then include a quick comment here that maybe maybe we can explain the attributes in further detail here let me know when you're done and i can refresh the page okay hit the refresh button cool um very nice added a comma here um that appear right there deleted the line 18 that's not necessary and then a feedback back there okay um let me take it so i would also add another note though for line three under the description um i don't know if it makes sense to have embed in quotes to define embed it seems a bit recursive um i wouldn't just say like allows you to allows one to insert content like videos and images so you don't want to be what's it called um a recursive definition or whatever it's called yeah like gnu or something yeah like it it doesn't really unpack it any further and also i would going back to my earlier point about the last pr lines three and um i think it was 21 uh have you in your respectively so i would switch those out with the manual tone invoice wait where is this line three lines three and twenty one three and twenty one cool um or no the 16 sorry cool so this is something to swap out uh okay one more thing that i just noticed so this is kind of um so i'm gonna go to cogami docs um so this one in particular is actually not a regular entry right it's a term entry you can tell because there's a terms table and so if we navigate to it css tags wait html yeah html works html and let's go into the tags concept so this particular terms entry embedded will actually go in here but check this out one thing that we try to do for all of our terms entries is for the description we don't start we start with the verb okay so let's make the changes here as you can see creates the link represents a section of the document so here let's do what brand is saying inserts a video image page that oscar comma right here and usually for these sort of things i kind of want to explain it um for all the term entries term centuries the description in the metadata should start with the verb also added password done at a single comment are we good um one more thing i usually like to check for oh by the way this person did a great job on the catalog content metadata right perfect we got a free course and then we have a frontend engineer career path one thing i also like to check for is these tags okay so i actually have this bookmarked um this is a system that we're going to use down the road hopefully to sort our filter for specific entries so we want to double check images video and html i can already see a prompt so images boom video boom i'll check this out html oh wait h5 is in here okay i need to actually take this out whoops um oh yeah python's not here so um because hm this is already under the html folder we actually don't need to um we actually don't need the language name here so i'll say take out my text oh all right um one more thing similar to what christine was saying i think it's a great that there's an example of this what the syntax of the embed element looks like and yes there should definitely be an explanation but one more thing that we can do to expand this further is to add um a use case for this or an example of this within a whole html file so potentially right here i'm going to add optional addin whole html file that uses okay so it's basically explanation syntax and then example hopefully more than one example but um get something cool all right let's take it let's refresh and take a look uh all the changes that we made perfect perfect oh wait is is revert in here pull requests oh nice um they're already making their changes right now as we're doing this cool i was like i don't remember committing that cool perfect um and that's it i think this one after this one round of review i mean actually what we just did was almost like three rounds of reviews but um but after this i think um we're gonna take a look again if it's good we're gonna merge it in that's basically the whole process cool should we move on to our third pr since we still have a lot of time um something that our contributors allowed to make comments and reviews of prs or does only the team do that yeah absolutely uh there's a great question we actually had a history of a lot of um community members uh making comments and reviews of prs throughout um this is the whole inception of uh of docs right so for docs we have about i mean now we're talking about 458 eighth pull request um we have tons of volunteers who've been helping us including eugene who i saw in the chat um just plenty of people plenty of people who have helped with review so yes feel free to jump in with a review we still want somebody within the team to we every single entry that's been created requires two rounds of reviews at least one round of review needs to come somebody within cook county right just to ensure somebody was saying in the last live stream the first 100 the first 1000 the quality of the first 1000 entries sets the tone for the next 10 000 right so we really want to make sure these are super solid but yes alex feel free to jump in um if you see something that needs help cool let's get started on our very last actually let's should we check out this one somebody made a entry so this is this is something we haven't seen before this came in an hour ago added insulin apis let's just take a look that's kind of cool yeah um so hot 82 let us know how it's it's if you're in the if you're actually watching this live stream that's why you made the entry um cool let's see what this person did so this is the edit of an existing entry oh ashley before we do that totally forgot let's go back into the bed and add in the labels html let's go back to this this one's done all right now let's come back to this pawn 82 oh very nice so this person um add a whole new section to an existing entry so for these existing entries remember we'd like to take a look at what it currently looks like so api right here that stands for boom categories groups public apis private apis partner apis cool this person added benefits and risk of using apis the main benefits of easy apis are one two three okay so for this let's do q5 so this is the section this person created the main benefits of using apis are three bullet points cost saving through the elevation elimination of the need to build and maintain local physical infrastructure and services cost effective and you know using an external resource instead of building it inhouse i like that opportunity to leverage expertise of different vendors instead of having to reinvent from scratch things like authentication payment processing and maps so this one i think and this one are kind of similar if i'm i'm reading it correctly oh actually never mind this is slightly different okay possibility to build new businesses based on the exchange of data between users and various online services through api access to independent developers i kind of get that yeah saying it makes me think of like uh kaplan they use a lot of um like public web apis for their video editing softwares and stuff totally um okay i think this is pretty solid right uh it's cost effective because you don't have to build it inhouse you can leverage different vendors it's the spotify api the google maps api so instead of right or or stripe payment processing right stripe map or or gumroad or whatever authentication you know google login facebook login google right magic link maps google maps i think the what's it called the forgot the name of the map grid or whatever api um okay um i would say some of these do overlap slightly so i'll play around with this a little bit um what do you think should we is it say yes it looks good to me i mean the ideas expressed in each of the points i think they do overlap but they're also kind of like free free falling in a way or like they stand on their own in a way i would just put a dash in between cost and saving on the first point i think that that's the uh the idea that like cost saving right here okay yeah the main risks associated with using apis are having no control over vendors infrastructure or how the vendor allows developers to access it through the api true it's basically saying you can't really it's not really flexible right you don't really have the the power to sort of update the spotify api or you know similar to what the chat is saying uh alex on the shopify um api right i think that's pretty that's a very that's a i like that unpredictability of the vendors internal decision making they have a very adverse effect on business businesses relying on the apa so this is a great one i think this happened recently when facebook took away some of the um this is on techcrunch i think i read it it was like facebook updated one of their apis and it had a huge impact on some of the smaller business smaller startups using it having little or no control over exactly what data the api collects and how it ends up being used by the api's provider true apis are get weight gateways and are often subject to hacker attacks once the api is compromised other system becomes vulnerable it is commonly predicted that api abuses will become the most frequent vendor of attacks in the coming years um christine or brandon can you can you copy and paste this um yeah we actually you know what let's we can check check for uh so one of the first things what we usually try to do is the first thing actually we usually check for plagiarism and things like that and i feel like um we probably should have done this early on but it's fine we'll take a look after this live stream offline api providers run the risk of legitimate business business partners abusing apaches to their own needs okay um i think this is pretty solid i want to see yeah i feel like some points do overlap and can be placed into like the first and second and third yeah those bullet points and then maybe we could just like have one overarching theme which is just like little control or unpredictability and then list the reasons for that i agree um yeah combine these three into even into one okay alex actually have some thoughts api allows you to keep the structure of your database hidden and secure does the user interfaces with the app instead of with the database directly you don't need to expose the url of your database i like that is the apis that's a great um benefit it's basically saying um instead of storing everything so i actually did this recently with here can i build a whole json file of all the songs instead of using spotify api but because now this json file is available in discovery but in the public repo anybody can sort of know what it looks like and want to it can't be compromised right cool um all right i think that's a great i think we can go through this and make some changes offline thank you let us know if you're in the chat pawn 28 or pawn 82. nice sounds like this all right um so we have 15 minutes left i think that was a great session we we we walked we did a demo we walked through the gap repo and the different aspects of the different aspects of the repo and also live review three different pr's um we do have some time left so let us know in the chat if you have any questions about kokami docs about our team um about creating entries please let us know oh nice hon is right here cool very nice great job han that was that was a great um addition to the to the um to the entry i think that's the the beautiful part about cocamy docks is that it's forever evolving and if it is missing something anybody can go in and make the change so hopefully after this you know right after this live stream we'll we'll make some suggestions and after you make the changes we're going to merge it screen yeah well that was pretty informative thank you everybody for uh all that i actually had a few final remarks since we have some time left uh maybe give you some time people to ask questions in the chat um do you maybe i'm curious brandon christine and sonny you come across any common mistakes or things that are like easily fixable avoidable when you're seeing these pr's is there anything that you would like to share with everybody watching this little tweaks of things that you know can save everybody time um i guess like structural issues is a big thing but like we can always assist you with that if we don't want that to be like a daunting factor as to why you may not want to approach making those entries but um i think as long as like you have a strong technical content in there like will pretty much accept most of your entries nice um i would say some of the common mistakes have already been addressed in recent weeks um formatting and spacing is already kind of getting addressed and um uh like like to the point sunny made earlier about the content catalog metadata point uh that was a common um pain point for a lot of our contributors uh myself included figuring out which links which slugs to use and so christine graciously made us a um a guide for all the different kinds of subjects and languages and frameworks of of the different like free and paid course pairs to use cool have you seen anything sunny that you want to share maybe uh any pro tips one two three yeah i'll say definitely take a look at the existing entries um something that will be great is just literally copy and pasting an existing entry over and then editing editing the file from there just so you already have the you already have the um the structure now saves you a lot of time ready may i make one more point actually um something just came to mind uh for contr for new contributors uh the first time you make a contribution to docs make sure to sign the contributors license agreement or the cla because otherwise our um our ci cd tooling won't work right our checks won't pass and we won't be able to proceed with merging your work into docs so um very important to make sure you sign that document awesome yeah i guess it's something that is very easy to you know you just get so excited and caught up uh contributing they're just gonna like totally forget about that well um unless you have any final thoughts on this or anything uh maybe some wish list i don't know if um when you're reading through content so much is there any specific kind of content that you hope that you're gonna see people contributing in the future maybe there's some areas that you're like oh you know it's really nice if we have this or that do you have a wishlist yeah i think everybody here got plenty of things that would love to see in docs um for me especially i think the the breath and the depth is um both something we you know we're looking for um whether it's um just whether it's machine learning content different libraries and frameworks for different web web dev tools um and even um really um polishing up the existing entries right like for example we just saw one from pawnee to two that just made the whole entry a lot more uh full um and more very informative right by adding the risk and the benefits of using api so now the person who's reading it now will know okay why am i using the api why should i use why should i not use it to make the to make the tradeoffs but other languages like r um i think we have one and go um yeah i know i was just kind of these awkward live streaming moments waiting to see if anybody else might say it's too on mute to jump in um i would say probably like what sunny said breath and death is super super important i'd like to make sure that as we're growing the the collection that the collection maintains quality the quality keeps up with the with the growth um what i'd like to see more of is probably graphql or gatsby other like jam stacky kind of tools um because they're like front end tooling is only becoming more popular every year and more and more people are gonna be interested in and gatsby especially like comes out with like a new version every two weeks that has some kind of a breaking change it seems that that seems like a nightmare to my day okay what do you want to see um i think the other day friend and i were talking about react and on the routing topic um we'd like to see more terms on there cool especially because there's a newer version out with many breaking changes all right yeah i was just wondering if uh you know how sometimes you have these obscure languages or very specific uh parts of coding that uh it's really hard to get help for uh you start googling it and there's like a blog post from 2005 that is that is like answering sort of answering your question and you're hoping you know that they that they have the same problem that you did so um i think uh sometimes even if people are contributing knowledge that they might think that it's not very popular it's not very useful i can guarantee that there's someone out there that is going to be super useful for so like sonny said you know any content you wanna contribute like you know don't make it stop you thinking that you don't know enough or that you know that's not popular enough or it's not interesting enough because there's always somebody out there on the internet that is looking for the help and he's looking for that information so uh off it would be awesome to see code academy docs having all the one stock for everything called implementation related well thank you everybody for stopping by today it was pretty informative it was pretty awesome and useful and i think uh hopefully we can have you online in a few weeks or maybe you know we can make this on our cards keep going with photo family docs keep it updated thank you for stopping by thank you everybody for joining thank you everyone thank you and stopped
