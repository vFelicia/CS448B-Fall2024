With timestamps:

00:00 - what to do um
00:02 - all right let's go live
00:04 - three two one
00:08 - all right and we are live thank you
00:11 - everybody for joining us today on
00:13 - another community live event
00:15 - today we have three guests with us
00:18 - and we're going to be talking about
00:19 - technical interviews so do you mind
00:21 - going around the room introducing
00:22 - yourselves
00:25 - sure i guess i'm alphabetically first
00:27 - everyone i'm josh goldberg i work as a
00:30 - front-end developer at codecademy i've
00:32 - also helped forum and take part in a lot
00:34 - of our hiring practices particularly
00:36 - around apprentices so i'm excited to
00:38 - hang out and chat today
00:44 - can go next i am rebecca uh i'm an
00:46 - engineering manager at code county and
00:49 - used to be an ic so i can kind of speak
00:51 - to both sides of the hiring process
00:53 - there
00:56 - and uh my name is will rudy i'm a senior
00:58 - technical recruiter here at codecademy
01:00 - um so looking forward to some fruitful
01:03 - discussion about the interview process
01:05 - from all sides so looking forward to it
01:09 - awesome
01:10 - so
01:11 - i think the very
01:13 - best the very first question that we
01:15 - should cover is what is a technical
01:16 - interview because even though it seems
01:18 - self-explanatory to us that doesn't mean
01:20 - that everybody actually understands what
01:21 - it means so
01:23 - could would you mind going around the
01:25 - room again just answering maybe in a few
01:27 - sentences what you think a technical
01:29 - interview is and see if everybody's
01:30 - version of technical interview matches
01:32 - i'm curious
01:36 - sure uh for me there are uh
01:39 - generally two areas of technical
01:41 - interviews there's the type where we
01:42 - talk through a problem and at the high
01:45 - level architect how we might come to a
01:47 - solution like if you're trying to build
01:48 - a page where does the data come from how
01:50 - does it get arranged and then there's
01:52 - the live coding or whiteboard kind where
01:55 - you have a whiteboard or a laptop
01:57 - computer or something
01:59 - some sandbox in front of you and in real
02:01 - time you're creating something either in
02:03 - actual code or on the written form
02:10 - uh yeah i think technical interviews can
02:12 - take a lot of different forms so it kind
02:14 - of depends on the company
02:16 - um but
02:17 - anything to gauge the candidate's level
02:20 - of technical expertise um so
02:22 - non-behavioral questions it could be
02:25 - whiteboarding pairing
02:27 - throwing random trivia questions at the
02:29 - candidate if that's what you enjoy doing
02:32 - or
02:33 - talking through high-level architecture
02:37 - yeah yeah i don't have a lot to add
02:39 - there i think josh and rebecca both kind
02:41 - of covered it from both sides you know
02:42 - sometimes it's going to be more of a you
02:44 - know practical you know hands on the
02:46 - keyboard type of uh um you know problem
02:49 - or sometimes it might be a little more
02:51 - algorithmic um trying to figure out
02:52 - decision-making um sort of thought
02:55 - processes so um from my side it's you
02:58 - know always been a little bit of a
02:59 - combination between not only you know
03:01 - what you can actually produce you know
03:03 - when it comes to you know the technical
03:05 - interview or the actual coding but also
03:07 - how you got there and kind of being able
03:08 - to talk about um just the why not only
03:11 - just kind of the what so
03:14 - that's what i would say
03:17 - okay so it's it's more like so we're
03:19 - trying to assess obviously but there's
03:21 - different ways to assess right and
03:22 - different ways to measure performance or
03:24 - like the you know how well somebody is
03:26 - personal different topics so i guess
03:28 - there's different approaches you can
03:29 - take i hear that depending on the
03:31 - company they might use a different
03:32 - technique than other companies it's not
03:34 - very standardized it sounds like
03:36 - so um how does people prepare for this
03:39 - kind of technical interviews like if you
03:41 - would you say it's a fair game to reach
03:43 - out to a company and like maybe their
03:45 - linkedin or their twitter find out who
03:47 - works there and start peppering them
03:49 - with questions like have you ever been
03:51 - approached by anybody that might be
03:52 - applying for a company you work at and
03:54 - asking you hey what's the typical
03:56 - interview what's what's the etiquette so
03:58 - to speak because how people feel like
03:59 - it's not adequate to ask these questions
04:01 - about people feel like it's fair game
04:02 - because they're trying to you know just
04:04 - uh be the one candidate that gets
04:06 - through so what do you think do you
04:08 - think that people can
04:09 - ask these questions and how far can you
04:11 - push it when it comes to preparing for
04:13 - this
04:16 - uh i mean i guess
04:18 - the surest thing to do is if you have a
04:20 - recruiter screen to ask them they should
04:23 - hopefully have more information and
04:24 - that's their job to
04:25 - you know guide you through the process
04:26 - and let you know what to expect
04:28 - and ideally the company is giving you
04:31 - like some larger companies like google
04:33 - will give you like full-blown
04:35 - pdfs on like what to expect and how to
04:37 - prepare some of the smaller companies
04:39 - obviously don't have that
04:40 - available but the recruiter should
04:42 - always be able to explain what to expect
04:45 - um in terms of reaching out colds
04:47 - messaging people i get those a bunch uh
04:50 - it's kind of hit or miss if the person's
04:52 - gonna respond or not depending on like
04:55 - how nice you are and how much time you
04:57 - have uh
04:59 - i don't think it can hurt to reach out
05:01 - to someone who works at the company um
05:02 - but i would phrase it more as like
05:05 - hey like i'm super interested in your
05:07 - the company you're at do you mind like
05:09 - answering a few questions i have do you
05:11 - mind
05:11 - uh going out to coffee if you're in the
05:13 - same area as um
05:15 - um
05:16 - and making it a more like i would love
05:17 - to learn about this company and through
05:19 - that you can ask more about the process
05:20 - itself
05:23 - yeah for sure i would just add you know
05:24 - from the recruiting perspective like
05:26 - rebecca mentioned yo it's definitely you
05:28 - know best case you know to go through
05:30 - the recruiting department um you know
05:31 - applying through a careers page or if
05:33 - you find a job posting that you like on
05:35 - linkedin indeed one of those kind of um
05:37 - job board type websites um because yeah
05:40 - it's you know my job as a recruiter to
05:42 - explain kind of hey this is what we're
05:43 - looking for get to know you a little bit
05:45 - and sort of see if there could be some
05:47 - good overlap there um and yeah it
05:50 - definitely doesn't hurt to send messages
05:52 - um cold i think what i would definitely
05:54 - recommend is try to find people that
05:55 - have something in common either you know
05:57 - maybe you went to the same boot camp or
05:59 - the same school or you're in the same
06:01 - city or if you can find something in
06:04 - common with the person you're reaching
06:05 - out too cold um as well as being humble
06:08 - and appreciative like rebecca mentioned
06:10 - um that's where i found you could
06:12 - probably have the most success um so
06:14 - always good to build that network and
06:15 - you always start somewhere so that's uh
06:18 - yeah
06:22 - okay
06:23 - um
06:24 - so
06:25 - the reason i'm asking this question is
06:27 - i'm trying to think uh like somebody
06:29 - that might be applying for their first
06:30 - job we have a lot of users at code
06:31 - academy that are trying to land their
06:32 - first job in tech and a lot of times you
06:35 - it feels like
06:37 - you know you're just trying to get a job
06:38 - and there's not a lot of leverage that
06:40 - you have and you feel like one misstep
06:42 - and everything is over right uh there's
06:44 - this conception of i can't ask two hard
06:47 - questions you know like i can't ask
06:48 - really the questions i mean to in my
06:50 - interview or i shouldn't really talk to
06:52 - anyone or bother anyone so
06:54 - it's kind of interesting to to hear you
06:56 - talk about no yeah it's totally fine to
06:58 - reach out you know just be uh mindful of
07:00 - their time be mindful of like you know
07:02 - then they
07:03 - you know their time constraints and just
07:05 - try to say
07:06 - uh you need help or you're very
07:08 - interested in the position and see how
07:09 - they react to that i guess
07:12 - you also might not get a response but if
07:14 - the company uses that against you i
07:16 - would say that's probably a red flag
07:18 - and maybe best like you're better off
07:21 - better off not working there
07:23 - if you're going to hold you asking
07:24 - questions against you that that doesn't
07:27 - seem great
07:29 - oh yeah i like it when candidates ask
07:31 - the harder the question the better like
07:33 - it shows that they're thinking
07:34 - critically and they're not just applying
07:36 - for the sake of i want to work anywhere
07:38 - and this seems like a good match which
07:40 - for the record you totally should uh
07:41 - definitely apply to as many places as do
07:44 - seem vaguely potentially relevant but i
07:46 - really like it when candidates ask like
07:48 - not just the good questions like what is
07:50 - your day or what do you do here but why
07:52 - is this that way or can you tell me
07:54 - about how this came to be like things it
07:56 - was uh every every candidate who applies
07:59 - and can pass the early screens of can
08:01 - you code can generally code but people
08:03 - who can think critically and work well
08:05 - with others and communicate well that's
08:07 - that's beautiful
08:10 - all right that's the winning sauce all
08:11 - right yeah got it so uh you heard it
08:14 - here first i mean obviously again the
08:16 - caveat that it changes from company to
08:18 - company but for we i'm hearing today you
08:21 - know asking questions is always good and
08:23 - as long as they're respectful and
08:24 - they're within you know reason it seems
08:26 - like it's gonna be more good than bad so
08:28 - you shouldn't really be scared of asking
08:29 - these questions um it just comes down to
08:32 - that sense of you don't want to screw up
08:34 - but at the same time you know you are
08:36 - trying to stand out and if most people
08:39 - are not asking questions and you are
08:40 - then you are standing up so that's a
08:42 - positive uh let's move on to technical
08:45 - interviews themselves and what they mean
08:47 - of what they represent what
08:48 - i think there's a few types of technical
08:51 - interviews you've talked about them
08:52 - earlier
08:53 - there is take home interviews there is
08:55 - white boarding interviews and there is
08:58 - like a mix match of both between trivia
09:00 - and like pair programming like walking
09:02 - through problems that you might have
09:04 - worked on before and you can like bring
09:06 - with you to the interview so can you
09:08 - speak a little bit about the kinds of
09:11 - technical interviews that a candidate
09:12 - will find in the while
09:15 - um yeah i could hop in real quick talk
09:17 - some high level stuff and i'm sure that
09:18 - um josh rebecca could add some examples
09:20 - but but yeah in my experience usually
09:23 - companies are are going to employ a few
09:26 - different types of exercises to get a
09:28 - more well-rounded perspective on a
09:30 - candidate's strengths and weaknesses and
09:32 - whether they would be a good fit for
09:34 - that organization and so usually that
09:36 - will entail you know when it comes to it
09:38 - you know usually some sort of either
09:40 - take-home exercise or i've seen some
09:42 - timed quizzes um that companies will
09:44 - take in terms of here's a specific
09:46 - language we have literally 12 multiple
09:49 - choice questions here's 10 minutes and
09:52 - you know they're looking for a certain
09:53 - score and it could be as um you know
09:56 - automatic and rudimentary something like
09:58 - that um two being able to you know
10:01 - complete a brand new github assignment
10:03 - that would be able to showcase kind of
10:05 - the full coding potential um but usually
10:08 - they're trying to assess a few different
10:10 - types of skill sets and so you'll
10:12 - usually see a combination of both the
10:14 - whiteboarding as well as some more
10:16 - programming type stuff um so it's it i
10:20 - would be definitely prepared for a
10:21 - little bit of everything because it's
10:22 - rare that you'll only find um one type
10:25 - of interview
10:26 - it's usually they have a couple
10:27 - different rounds
10:28 - to assess those different types of
10:30 - skills
10:35 - more thoughts on uh the types of
10:37 - technical interviews so what's your
10:39 - favorite i want to hear josh andrew
10:41 - what's what's your favorite
10:45 - i really like the technical take-homes
10:47 - um
10:48 - i personally don't mind coding in front
10:50 - of other people uh but i used to and i
10:53 - think many people do so i enjoy being
10:55 - able to to do something on my own and
10:57 - like really
10:59 - process it without the pressure of
11:00 - someone staring at me and offering
11:02 - helpfulish suggestions every two minutes
11:04 - um and those for those who haven't taken
11:06 - on a technical tape home is often times
11:08 - at least the way we tend to do it like
11:09 - we give you a problem and maybe a bit of
11:11 - starting code and ask you to go through
11:13 - a set of features maybe give you some
11:14 - screenshots of how it should generally
11:16 - look if it's a visual thing
11:17 - um so
11:19 - like
11:20 - oftentimes it'll it'll be some basic
11:22 - assignment like build this type of page
11:23 - that gives these types of buttons and
11:25 - actions and it should take you
11:26 - generally around four to six hours maybe
11:28 - more so that that for me is more fun
11:31 - than like live pressured coding
11:35 - okay what about you rebecca what's your
11:36 - favorite kind of uh technical interview
11:40 - uh so i actually really enjoy the pair
11:42 - programming kind of technical interviews
11:45 - um and in the true sense of pair
11:47 - programming not where like
11:49 - people are staring at you silently and
11:50 - you're expected to code while they watch
11:52 - you um but in the sense where you're
11:54 - literally working together with people
11:56 - to see because it a gives the company a
11:59 - better idea of how you would work in a
12:00 - real life scenario
12:02 - and b gives the candidate a better
12:04 - experience of what it would be like to
12:05 - work at this company
12:07 - um
12:08 - and i think it's more close to
12:11 - uh the day-to-day life of an actual
12:13 - engineer who's on a team of engineers uh
12:16 - not working necessarily in silo on some
12:18 - small project but
12:19 - um getting in there and and
12:22 - really working on a specific
12:25 - pr that that person is putting together
12:27 - a specific ticket
12:30 - yeah i guess um
12:32 - being on your own like josh said it kind
12:35 - of removes the pressure of somebody
12:37 - staring at you but at the same time you
12:40 - do have to have the ability to work with
12:41 - other people sooner or later right so i
12:44 - guess they serve like a happy medium
12:46 - like and that probably comes down to the
12:48 - person interviewing the candidate right
12:50 - and how comfortable they are like how
12:52 - experienced they are now
12:54 - in conducting interviews right uh i'm
12:56 - sure that there's different styles more
12:57 - aggressive or they're like asking
12:58 - questions all the time and other people
13:00 - that kind of like lay back and let you
13:01 - let the candy take the lead a little bit
13:03 - more i would imagine that there's kind
13:04 - of like a spectrum of what you expect
13:06 - when you're doing this kind of
13:07 - collaboration interviews uh will do you
13:10 - know
13:10 - um
13:11 - do you know if if you've ever come
13:13 - across you come across a lot of
13:14 - candidates
13:15 - do they have expressed in the past like
13:17 - hey i'm not comfortable with this kind
13:19 - of interview or like is it possible to
13:21 - modify the process for me because i
13:23 - prefer this kind
13:25 - yeah so it's definitely something that
13:28 - i'm noticing more and more um the
13:30 - candidates do tend to have a preference
13:32 - but usually the company is going to be
13:34 - pretty rigid in terms of this is our
13:36 - process we're sticking to you know these
13:39 - steps in this order um and so usually
13:41 - you kind of have to you know dance with
13:43 - the music they're playing yet a little
13:45 - bit in that regard um obviously if
13:47 - there's special circumstances if someone
13:48 - has a disability and would need some
13:50 - kind of you know um situation where um
13:54 - they needed more time or some type of um
13:57 - you know automated uh you know one thing
13:59 - i've had in the past as a candidate who
14:01 - was hard of eyesight and so they had a
14:03 - program that they would use to help kind
14:05 - of like um like hear different commands
14:08 - and help them you know work through the
14:10 - exercise like that and so companies will
14:12 - always try to be as accommodating as
14:13 - possible um in that regard but usually
14:17 - um the recruiter should do a good job
14:18 - about laying it out you know in that
14:20 - first intro call about what to expect um
14:23 - and so
14:24 - you could always have a preference but
14:26 - um and you can always kind of you know
14:28 - as rebecca mentioned you don't have to
14:30 - you know work at every company you apply
14:31 - to if you realize that
14:33 - you know if the interview process isn't
14:35 - a great fit the uh working environment
14:37 - might not also be a good fit because
14:39 - there's usually at least a little
14:40 - correlation there so uh so yeah it's
14:43 - definitely you know fair to have that um
14:45 - opinion and you know preference but uh
14:47 - you're gonna have to you know work with
14:49 - what is sort of in place at those
14:51 - companies you're chatting with
14:53 - i feel like it's one of those tough
14:55 - situations where has the junior
14:56 - developer uh yes you want to have a
14:59 - voice and who is hiring you but at the
15:01 - same time you're thinking i just need
15:03 - experience wherever i can get it and you
15:05 - might be willing to put up with some
15:06 - reflexes because you think it can't be
15:08 - that bad or maybe it's it will get
15:10 - better right with time i don't know but
15:12 - um but it's a fair point that sometimes
15:14 - you just have to walk away if it's not
15:16 - the right fit for you
15:17 - um
15:18 - do you
15:20 - let's go over uh the different types of
15:22 - technical interviews one by one and kind
15:24 - of like take a little bit more of a deep
15:27 - approach to
15:28 - learning what they are and what they
15:30 - mean or like how to prepare for them so
15:32 - the first one is to take home let's
15:33 - think about
15:35 - i want to hear about how take-homes are
15:37 - usually formed and i want to know
15:40 - usually how do they gauge at the company
15:42 - level what a take home is fair or is not
15:44 - unfair has a burden to the candidates
15:46 - because i'm sure that sometimes you will
15:48 - apply for companies where the take home
15:49 - takes you a weekend and other companies
15:51 - give you a take home that takes four
15:53 - hours and you might be thinking as a
15:55 - candidate this was too fast did i made a
15:57 - mistake am i missing something right
16:00 - because you're just getting all these
16:01 - levels of difficulty across companies so
16:04 - what are take-homes and how do companies
16:06 - generally or at least here at kodakami
16:08 - do we go about forming them in a way
16:10 - that makes sense
16:15 - i guess i'll go um
16:17 - yeah a take-home is is kind of hard on
16:19 - our end the company to get
16:21 - uh you want to balance that it should be
16:23 - complex enough of a challenge that not
16:25 - every candidate's submission looks the
16:26 - exact same but if it takes a full
16:29 - weekend two days 48 hours for a
16:31 - candidate to do then
16:33 - you're you're not being respectful to
16:35 - the candidates time
16:36 - who who has the time to do a take-home
16:38 - that
16:39 - takes a whole weekend for every company
16:41 - that they'd apply to
16:43 - um
16:44 - so typically what we try to do is figure
16:46 - out the list of things we want to assess
16:47 - on the candidate which is normally can
16:49 - they write clean code does it is it
16:52 - something that we as a reviewer can read
16:53 - through and understand does
16:55 - their stuff actually work and work well
16:57 - without bugs and can they display
17:00 - somewhat
17:01 - intermediate-ish comprehension of
17:04 - whatever languages or frameworks they're
17:05 - working in for example our front-end
17:08 - take-home would be in react and you'd
17:09 - write a page and react and we test that
17:11 - you're able to
17:12 - make react components and manage page
17:14 - state which is like the core
17:16 - fundamentals of react um
17:19 - i think ours typically what does it take
17:20 - like four to six hours recommended but
17:22 - it's totally fine to take yay it's
17:24 - totally fine to take more uh we we we
17:27 - want to give candidates a time
17:28 - recommendation so they don't feel like
17:31 - it's going to take them 20 hours but if
17:32 - it takes you longer that's fine too we
17:34 - don't want to rush you
17:35 - um and then lastly i'd say we we
17:38 - codecademy actually publish what we
17:40 - grade on online it's open source like
17:42 - you can read it but in general it's what
17:44 - i mentioned before of like code clarity
17:46 - does it work well
17:47 - um and
17:49 - what was the last one uh does it
17:51 - demonstrate good usage of the the
17:53 - foundation framework and language
17:56 - did i cover everything you were looking
17:57 - for there
18:00 - yeah i think so i mean if i were a
18:02 - candidate applying for a code academy i
18:03 - think uh i might kind of understand that
18:06 - you know my code has to be readable
18:08 - usable and it has to show that i know
18:11 - what i'm writing the id and copy and
18:12 - paste it from somewhere else right so
18:14 - that seems to be pretty straightforward
18:16 - when it comes to state homes um i always
18:19 - wonder if take homes you know i talked
18:20 - to professors in university where they
18:22 - would say
18:23 - i write an exam that takes me 10 minutes
18:26 - and that's an hour exam for you guys so
18:28 - there's like a like that's one to six
18:30 - ratio or something in minutes uh of what
18:33 - me knowing the material takes to solve
18:35 - versus you is that is that something
18:37 - that happens i gotta get like when you
18:38 - put it together do you think well this
18:41 - would have probably taken me like an
18:42 - hour solid work so that's like a fair
18:44 - assessment for somebody that is applying
18:46 - for this role
18:50 - um we do take the take home
18:52 - like it's not like we just write
18:54 - something we think is fun and then throw
18:55 - it out so that unsuspecting candidates
18:57 - have to suffer like we have an actual
18:59 - process internally of we figure out what
19:01 - we want we make some hypotheses of like
19:03 - we think these would be good sample
19:04 - challenges uh and then like we have
19:07 - especially a range not just the senior
19:09 - or just the junior engineers take the
19:11 - take home to make sure it's like a
19:12 - reasonable problem
19:13 - um but yeah i do want to defer now to
19:16 - rebecca as the author of how to ace our
19:18 - apprenticeship take home most
19:22 - uh yeah i don't know how to get
19:24 - something to the actual viewers
19:26 - i don't know if they'll share it
19:28 - yeah
19:28 - uh i put together a post
19:31 - um
19:32 - that compiles a lot of advice from our
19:34 - former apprentices
19:36 - um tips for using our apprenticeship
19:38 - take them so not necessarily like
19:41 - fully applicable to all of our take
19:42 - homes at different levels but um for
19:44 - your first job i would say there's some
19:46 - pretty good tips and advice there on how
19:48 - to
19:49 - how to make sure that you're submitting
19:50 - a quality take-home assignment um
19:54 - and yeah ideally the company shares what
19:56 - they're looking for
19:57 - uh but i would say
19:59 - like
20:00 - for most companies you'll want to make
20:02 - sure that you're submitting clean code
20:04 - taking a look at what you're submitting
20:05 - beforehand to make sure you don't leave
20:07 - in any like console logs or
20:09 - um you know make sure you're running it
20:11 - one last time before you submit it
20:14 - to make sure you didn't like
20:15 - introduce a bug right before you
20:17 - submitted it
20:19 - and there's there's some some more
20:20 - advice in that in that post
20:23 - i love console logs what's wrong with
20:24 - console logs oh no
20:26 - okay everybody uh watching the stream
20:28 - now or in the future console logs
20:30 - apparently are not pretty in your code
20:32 - if you're submitted for an application
20:34 - um
20:36 - so
20:36 - i think one question that a lot of
20:38 - people might be having right now when
20:39 - they hear about take homes is well but
20:41 - is that sufficient like are people
20:42 - cheating how does the company know that
20:44 - take home is good um and i think it's
20:46 - important to clarify that take homes
20:48 - usually are not the only way that a
20:51 - company is assessing you through the
20:52 - interview process correct there's
20:54 - several steps and take home might be one
20:57 - of them but it's not usually the only
20:59 - step
21:00 - right
21:01 - no you're very you're you're correct
21:03 - there fede but it is a little correlated
21:06 - in the sense that you must you usually
21:08 - have to get through that take-home
21:10 - exercise to get to the final rounds um
21:12 - where you'll kind of do the other types
21:14 - of technical exercises um
21:17 - and so yeah it's
21:19 - it's not the be all end-all but um it
21:22 - usually is quite an important um
21:25 - just
21:26 - component of the process um that you
21:28 - need to ace or you need to you know get
21:30 - to an adequate position based on the
21:32 - level and the expectation um to make it
21:34 - to those next levels um
21:36 - and so one other thing is you know take
21:38 - homes are always evolving too like we
21:40 - usually are
21:42 - uh you know they exist for a while but
21:44 - then um you know it's something that's
21:46 - constantly being um updated um or at
21:48 - least looked at um you know from a
21:51 - company's perspective and so um trying
21:53 - to maintain and make sure it's as
21:55 - accurate to reflect the types of you
21:56 - know
21:57 - day-to-day challenges so just one other
22:00 - little tidbit to add there
22:02 - okay
22:03 - and okay last question about take homes
22:05 - uh rebecca how far can a candida do with
22:08 - a take-home before you say this is way
22:10 - over-engineered
22:11 - we asked two questions and they answered
22:13 - ten is that is there a point where it
22:15 - becomes a flag of red flag for the
22:18 - reviewers
22:19 - of like too much submission like you
22:21 - went too far
22:23 - i don't think that would be a flag like
22:26 - i don't think we would say you cannot
22:28 - move on to the next stage but i do think
22:31 - uh it's up to us to be clear in our like
22:35 - our grading rubrics to make sure we
22:36 - don't
22:37 - judge them more favorably because we're
22:39 - giving you an assignment for a reason we
22:40 - think it's you know
22:42 - a good amount of time um
22:45 - fair for you and for us to be able to
22:47 - grade so i would
22:49 - uh
22:50 - suggest not going above and beyond to
22:53 - you know
22:54 - it'll be annoying for the greater
22:56 - honestly it'll take them more time to
22:57 - look through what you did
22:59 - um
23:00 - so i would try to make sure you're like
23:02 - taking the boxes of what's required
23:04 - there may be some delighters or bonuses
23:06 - that you could add on as well but
23:08 - yeah i i don't think it would be a red
23:10 - flag i just would
23:12 - suggest you don't do it
23:14 - do you know if that's a common practice
23:15 - maybe during the prompt like the
23:17 - take-home prompt there might be like a
23:18 - line at the bottom but that says bonus
23:21 - like this or whatever like
23:22 - okay we have that in ours um i think
23:26 - most companies have something like that
23:28 - where it's like
23:29 - if you have time you can do this
23:30 - delighter or whatever
23:32 - um also some people will want to make it
23:34 - look nice but like some people will
23:36 - focus less on the css
23:38 - styles um
23:40 - those kinds of things i think are nice
23:41 - but again i wouldn't go like
23:44 - you don't need like a whole design
23:45 - system that we're not asking for like
23:48 - a production ready app
23:52 - okay yeah no that makes sense i was just
23:54 - wondering uh you know like uh when
23:55 - you're doing running for example if
23:57 - you're doing a race that will always
23:58 - tell you run a little bit more than the
24:00 - tracker says just to make sure right
24:01 - that you cross the finish line if you're
24:03 - doing a virtual race so uh it's sort of
24:05 - the idea of like i checked the boxes but
24:06 - did i really so maybe you want to like
24:09 - do a bit more just for flair i guess
24:12 - okay so you finish you take home let's
24:14 - say that you're okay we are candid go
24:16 - and then we hear back from code academy
24:18 - says you know what you're thinking
24:18 - what's great we would love to talk to
24:20 - you a bit more what's usually the next
24:22 - step that i can get encounters after i
24:24 - take phone
24:29 - yeah so just in terms of process after a
24:31 - successful take home the recruiter will
24:33 - send that over to one of our engineering
24:36 - um members uh we usually have a couple
24:38 - folks take a look at it um and then they
24:40 - evaluate it based on a rubric um and if
24:44 - we get thumbs up we would then sort of
24:45 - move forward to schedule you for that
24:48 - final round of interviews which uh
24:50 - usually takes about half a day for us
24:52 - and every company is a little bit
24:54 - different um you know these days from
24:56 - what i hear you know i think very you
24:58 - know remote interview practices are very
25:00 - common still and seem to be um quite
25:02 - heavily utilized across the board so um
25:05 - but usually in that final round is when
25:07 - you'd be um you know meeting with more
25:09 - members of the team potentially some
25:11 - folks outside the direct team and uh you
25:14 - know running through some more of those
25:15 - exercises like the whiteboard or some of
25:17 - the pair programming that we discussed
25:19 - earlier and stuff like that
25:21 - okay
25:22 - so because rebecca said that she likes
25:24 - pair programming and just as he likes to
25:26 - take home i'm going to start with
25:26 - rebecca this time around
25:29 - let's say that the next step in the
25:31 - process of the company imaginary company
25:33 - applying for is a pair programming
25:36 - challenge they say you're going to be
25:37 - paired with an engineer you're going to
25:38 - work through something
25:40 - what is the typical programming
25:42 - experience for a candidate like what do
25:44 - you usually expect every company more or
25:47 - less will throw your way and how do you
25:49 - prepare for that
25:51 - yeah so i would say there's probably
25:53 - three different options you could have
25:55 - for that and we use two out of those
25:57 - three
25:58 - so the first one we do for apprentices
26:00 - is we extend the take home together um
26:03 - so in that case you'll want to review
26:04 - your take home and again hopefully
26:07 - you'll be have like been given this
26:09 - information from the recruiter ahead of
26:10 - time or you can ask um but in that case
26:13 - you'll want to review your code to make
26:14 - sure you know what's going on yourself
26:16 - so that it's easier to extend it with
26:18 - whatever features we throw at you um
26:21 - so that's one type the second type would
26:23 - be uh
26:24 - here is a new
26:26 - small app we want to build together um
26:28 - and that we do for like non-apprentices
26:30 - we'll say
26:31 - uh build this view and we give you like
26:34 - a design to mock it off of
26:36 - um and work on like kind of related but
26:38 - arbitrary and not not really guitar uh
26:41 - not like from our code base but
26:43 - um like related to something we would do
26:45 - on a day-to-day job the third one which
26:47 - i don't think we've we've done but i
26:49 - know other companies do uh is they'll
26:52 - say like
26:53 - uh
26:54 - i'm working on this task
26:56 - that my product manager
26:58 - assigned our team um and this candidate
27:01 - will work with me
27:02 - as i move through that that ticket um
27:05 - and so it'll be actually like working on
27:07 - code that might end up in production um
27:10 - but it'll be more uh
27:13 - more true to like what a pair
27:14 - programming experience would be like if
27:16 - you did get a job
27:23 - so one thing that i hear a lot from from
27:26 - candidates that are going or preparing
27:27 - for these kind of interviews is that you
27:30 - need to be able to really
27:32 - talk through your code
27:34 - a lot like because usually if you're on
27:36 - your own and your computer just you know
27:38 - listen to music or something just
27:39 - working on your code and it doesn't come
27:41 - naturally that every time you write
27:43 - three lines of code or every time you're
27:44 - gonna define something new that you have
27:46 - to out loud say why you're doing what
27:48 - you're doing uh josh do you come across
27:50 - anyone that that is kind of like super
27:52 - quiet or super verbose or like something
27:55 - how how do you
27:56 - what is your experience with these kind
27:58 - of interviews
28:00 - yeah most candidates um
28:02 - don't have problems discussing their
28:04 - code but very few of them are extremely
28:07 - quiet or extremely verbose the reason
28:08 - why people often say you should talk to
28:10 - your code a lot or it'll be asked to is
28:12 - because as the
28:14 - reviewer or the interviewer we're trying
28:16 - to figure out what's going through your
28:17 - mind what do you think and how well do
28:19 - you understand the code
28:21 - so um candidates who can explain that
28:23 - are great if they don't explain it we'll
28:25 - ask if if we ask someone repeatedly to
28:28 - explain them themselves or their code
28:30 - and they can't give us information
28:31 - that's kind of a
28:33 - like a little bit of a red flag like i'm
28:35 - trying to understand your thing and
28:37 - you're not giving me the information i
28:39 - need
28:40 - uh similarly if a candidate won't stop
28:41 - talking which does happen uh that's also
28:44 - a red flag because i'm trying to
28:45 - communicate effectively and i can't if
28:46 - you won't stop talking
28:48 - uh but again most people aren't in those
28:50 - extremes most people it's it's fine
28:54 - okay and i mean i would imagine that you
28:56 - know we're all human beings so um a fear
28:59 - that candidates have is that this is
29:01 - gonna be this antagonistic figure
29:04 - interviewer that is like coming to get
29:06 - you or like they want you to fail right
29:08 - um
29:09 - do you do you think that i mean i'm
29:11 - assuming that that's not true and that
29:13 - in most cases if you're being too
29:14 - verbose or if you are being too quiet
29:16 - the interviewer will just like try to
29:18 - you know engage with you tries to get
29:21 - you in the right direction right like if
29:22 - you are at that point where you already
29:23 - went through the screening through the
29:25 - take home you're in the in this round of
29:27 - interviewing they've obviously seen
29:29 - something interesting you has a
29:30 - candidate and i'm assuming that the
29:32 - person interviewing you wants you to
29:34 - succeed in general right so
29:36 - so you also can take these cues and not
29:39 - immediately think oh my gosh they said
29:41 - this thing that this is done like you
29:42 - finish the interview you go home you
29:43 - know you turn off your cameras like oh
29:45 - that i blew it i'm assuming that there's
29:47 - there's a bit of
29:49 - give and a bit of back and forth
29:53 - this goes back to the conversation of if
29:55 - there isn't that's a red flag again not
29:57 - everyone has the
29:58 - the you know privilege to be able to
30:01 - be as choosy with their interviews but
30:03 - if you show up in an interview
30:05 - and you're not given any information
30:08 - from
30:09 - the interviewer as to like what you
30:11 - should be doing and they're not helping
30:12 - you at all
30:14 - i prop probably would not want to work
30:15 - with them i know i i was one time at a
30:18 - company
30:19 - this is a while ago i was interviewing
30:20 - and the i had like a mental block and i
30:23 - couldn't remember the difference between
30:26 - um 4-h and
30:28 - uh map or something something like i
30:31 - couldn't figure out why my app wasn't
30:32 - running and they were all just staring
30:33 - at me while i was struggling uh and at
30:36 - that point like
30:39 - i personally if i were on the other side
30:41 - i probably would have just helped out
30:42 - and said like you know
30:44 - maybe try this instead
30:46 - um and after the fact you can decide if
30:48 - that's
30:49 - you know enough to not hire them or not
30:51 - but i think in the moment
30:53 - most interviewers who are kind and
30:56 - people that you would hopefully want to
30:57 - work with would help you out if you were
30:59 - struggling or not speaking enough
31:00 - speaking too much i would hope they
31:02 - would give you feedback
31:05 - yeah for sure
31:07 - oh well go ahead yeah just just to add a
31:09 - little bit there yeah i can definitely
31:11 - vouch for the fact that uh you know 10
31:13 - times out of 10 if you're meeting
31:14 - someone in the room they definitely want
31:16 - to hire you if it's possible but they
31:18 - also are going to be very you know um
31:20 - have a certain standard that they're
31:21 - adhering to in terms of what we're
31:23 - evaluating what we're looking for and so
31:25 - um back to the communication josh said
31:27 - it you know specifically effective
31:29 - communication and so when you're you
31:31 - know either talking through your code or
31:32 - being asked to explain something it's
31:34 - it's usually you know a way for us to
31:35 - get a sense as to that communication
31:37 - because you know whether it's codecademy
31:39 - or whether it's another you know you
31:41 - know startup late stage startup we're
31:43 - building stuff and so the ability to
31:45 - communicate effectively and work
31:47 - together is something that's you know a
31:48 - lot more important at a you know
31:51 - growing organization that's not just
31:52 - working on huge legacy code bases all
31:54 - the time and so what i hear in huddle
31:56 - sometimes um you know how some of these
31:59 - exercises have gone um communication is
32:02 - always something that's mentioned and so
32:04 - um josh is correct in the sense there's
32:06 - no one right way to do it and usually
32:08 - people are somewhere in the middle um
32:10 - but being prepared that you know to talk
32:12 - through it or to be ready to you know
32:14 - answer some of those questions because
32:16 - they will come up especially you know if
32:18 - you're interviewing at companies um
32:20 - like a codecademy or like you know late
32:22 - stage startups and stuff like that
32:25 - okay
32:26 - um so
32:28 - if you get
32:30 - let's say that you're you're going
32:31 - through this interview and like the
32:32 - person is like hey maybe this way maybe
32:34 - that way um and you're starting to feel
32:36 - a little nervous you're starting to feel
32:38 - a little like uh you don't know this is
32:40 - that
32:41 - is it fair for a candidate to ask for a
32:43 - pause or to ask for a moment to to
32:45 - collect their thoughts and like i feel
32:47 - like sometimes you are in this interview
32:49 - and you feel like it's an exam like it
32:51 - has a time a time it's like we got 30
32:53 - minutes and this has to be done in 30
32:55 - minutes if you don't finish building
32:57 - this thing or if you don't deliver on
32:58 - this it's done it's over um have you
33:00 - ever come across any candidates that
33:01 - might be like you know can you like give
33:03 - me a second to collect my thoughts or
33:05 - like you look at them and you realize
33:06 - they're going through a lot of stress
33:08 - but they're getting very stressed out
33:09 - like
33:10 - is that is that common
33:16 - i don't know how common but you can
33:17 - totally do it that's great and it shows
33:19 - that you're thoughtful and you recognize
33:21 - it like you're you know you need a
33:23 - second to
33:24 - regroup i think that's totally
33:26 - reasonable
33:29 - okay
33:31 - um i'm asking these questions because
33:32 - i'm trying to imagine that you know a
33:33 - lot of you a lot of our users especially
33:35 - when they're new they have a huge you
33:38 - know weight on the shoulders of impostor
33:40 - syndrome or like i don't even know why
33:41 - they call me back i'm a i'm a fluke you
33:44 - know i don't really know react i don't
33:45 - really know any of this oh my gosh like
33:47 - you know i my abs barely run and so i'm
33:50 - trying to ask all these questions
33:51 - because i imagine that it's a lot of
33:52 - questions that people go through
33:54 - through when they're applying for this
33:55 - like oh can i can i ask for a pause
33:58 - how antagonistic are my interviews going
34:00 - to be do they want me to succeed is it
34:01 - fair to ask questions so and i would
34:04 - imagine that has a general practice to
34:06 - practice for this for this uh interviews
34:08 - you can just
34:10 - explain it to anyone like just get a
34:11 - friend and say like here's the code i
34:13 - wrote and i'm gonna explain it to you
34:14 - for 10 minutes like is that is that how
34:16 - people practice for these kind of
34:17 - interviews
34:20 - our our code also barely runs just
34:22 - kidding
34:23 - yeah uh
34:26 - is nerve wracking for many like it's an
34:28 - important thing this is your career your
34:29 - future like it would be weird if you
34:31 - didn't feel any nervousness when you're
34:33 - getting started interviewing um so yes
34:36 - as rebecca was saying plus one the the
34:39 - reviewer interviewer should be
34:41 - compassionate and help you through um we
34:43 - generally at codecademy try to make sure
34:45 - that all of our interviewers are kind
34:47 - compassionate collaborators not angry
34:49 - antagonizers that would be bad
34:52 - and yeah having a friend look at your
34:53 - code is always a good idea explaining to
34:56 - the friend the code i recommend people
34:58 - first of all try to get as realistic if
35:00 - a simulation as possible like actually
35:02 - tell a friend hey give me this problem
35:04 - or some problem like it and work with me
35:07 - to solve it in an hour or whatever time
35:09 - period
35:09 - and then i'd also recommend people keep
35:11 - track of the questions you get whether
35:13 - it's a simulation from a friend or
35:15 - actually from take homes and interviews
35:17 - and then go over them later to see if
35:19 - there are any common threads of things
35:20 - you do really well or not so well at
35:22 - like when i was interviewing i always
35:24 - messed up hashmaps or
35:26 - maps or sets or whatever your language
35:28 - calls them at the beginning so i got
35:29 - real good at those just by rehearsing
35:31 - them over and over again because i was
35:32 - really annoyed at not doing them well
35:36 - okay
35:37 - yeah i guess practice
35:40 - oh i also just shared i don't know if
35:41 - we're allowed to like promote different
35:43 - websites but uh pramp lets you do
35:46 - these practices for free um
35:49 - so if you don't have someone around to
35:50 - do
35:51 - to run through a practice
35:53 - um
35:55 - check them out
35:57 - that's awesome thank you so much
35:59 - i shared it in the youtube chat
36:02 - okay so final type of interview so we've
36:04 - talked about take homes pair programming
36:06 - code challenges there is the infamous
36:09 - most famous type of coding interview
36:11 - question and it is the algorithmic
36:13 - whiteboard questions the ones that you
36:15 - see in the movies the ones that you see
36:17 - at places like facebook or google where
36:19 - it's like here's this very abstract
36:21 - obscure coding problem i want you to do
36:24 - it in you know a big old notation and
36:26 - like i want you to optimize it in front
36:27 - of me um
36:29 - these kind of whiteboarding exercises in
36:32 - your experience is this something that's
36:33 - still a common practice are they going
36:35 - away getting replaced by pair
36:36 - programming questions are they still
36:38 - very much part of the of the you know a
36:41 - candidate's repertoire when they're
36:42 - applying for jobs
36:44 - how come on how come on how likely are
36:46 - you to run into these kind of questions
36:47 - when you're applying for tech companies
36:54 - they're still somewhat common
36:55 - unfortunately i think they're slowly
36:58 - becoming less common
37:00 - um the reason why companies
37:02 - often uh gave or give the kind of
37:05 - algorithmic high-level mathy problems
37:07 - because they wanted to see how people
37:09 - think about tough challenges which is a
37:11 - good idea something you should try to
37:13 - quiz on
37:14 - the problem is that these most of the
37:16 - time most of the work people do in most
37:18 - software development roles has nothing
37:20 - to do with really advanced algorithms
37:22 - beyond things like uh of one versus of n
37:26 - lookups like hash tables stuff like that
37:27 - like there's very very little
37:30 - so the things are unrelated to
37:32 - not all but most jobs and are slowly
37:34 - being phased out for example most of
37:36 - codecademy at least i can vouch for our
37:38 - front-end areas we don't ask for
37:40 - anything around like binary search trees
37:43 - or linked list shenanigans like i would
37:46 - never ask a candidate to reverse a
37:47 - singly linked list like notorious
37:50 - pinnacle of roots
37:52 - we just revamped our back end interview
37:53 - to not do that so i think we're good
37:55 - there too
37:56 - how about that
37:59 - you just heard it i mean um are does it
38:02 - fit in the definition of white boarding
38:04 - exercises this kind of the ones that
38:06 - don't even have coding in them you know
38:08 - like you could ask questions like you
38:09 - have three people on one side of the
38:11 - river and one boat that only fits two
38:12 - people how do you get this many people
38:14 - to those other like these kind of
38:16 - questions that are sort of algorithmic
38:17 - but they are not even code
38:19 - um i think even google
38:23 - i don't think people do those anymore i
38:25 - think like google even stopped doing
38:27 - those ones but
38:28 - uh like you're saying like the random
38:30 - like
38:31 - how many people are in a taxi cab in new
38:32 - york right now
38:34 - yeah
38:35 - yeah like hey if you toss a you toss an
38:37 - ant on a blender you know how do you
38:38 - escape before the i don't think anyone
38:41 - should move anymore
38:42 - i actually
38:43 - my most recent round of hiring where i
38:45 - ended up at codecademy whoop uh i got a
38:48 - question from a major tech company i'd
38:50 - feel bad naming where was uh you have
38:52 - two robots that land on mars really and
38:55 - they can only go in circles and they
38:57 - have the same programming and all they
38:59 - know is each other like they can tell
39:00 - when they bump into each other and they
39:01 - can tell when they bump into like this
39:03 - one
39:04 - uh
39:05 - crash site from the other like how do
39:07 - you get the pro like this weird
39:10 - question that makes me not want to work
39:11 - there again as we were saying red flag
39:14 - yeah um
39:17 - i thought so too
39:19 - uh-huh yes some companies will give you
39:21 - these still and
39:22 - again the goal is to make you think so
39:25 - get get the person to explain to you in
39:27 - detail what is what are the inputs and
39:28 - what are the expected outputs and then
39:30 - you're going to have to work with them
39:31 - to figure out how to map from input to
39:33 - output
39:35 - okay and figuring out what the outputs
39:37 - are is hard like what the expectations
39:39 - what you're given what they want you to
39:40 - do that that's a big part of working
39:42 - with an interviewer
39:45 - am i asking because
39:47 - oh i was going to say like i'm asking
39:48 - because uh you know when when you're a
39:50 - candidate applying for jobs uh you might
39:52 - be time constrained too like let's say
39:54 - that you go through code academy you
39:55 - finish one of the career paths you build
39:56 - a couple portfolio projects and say you
39:58 - know what i want to get a job before you
40:00 - know spring break okay uh you really
40:03 - don't have all the time in the world to
40:05 - prepare for every sort of possibility
40:07 - every sort of a scenario and it sounds
40:09 - to me like
40:10 - being solid and clean with your work
40:13 - which for take-home exercises and being
40:15 - able to explain your code for peer
40:17 - programming exercises seems to be a
40:19 - better use of your time has a candidate
40:21 - has going through
40:22 - a thousand katas of like algorithmic
40:25 - problems or things like that because
40:26 - they have their place
40:28 - but
40:30 - like the proportionality of what kind of
40:31 - problems you're gonna come across is
40:33 - more likely that you're gonna come
40:34 - across the other kind a problem is that
40:36 - is that fair
40:37 - i think it depends on where you want to
40:38 - work
40:39 - if you want to work at a fan company you
40:42 - might have to do more of that
40:43 - um also probably if you want to work in
40:45 - fintech they might ask more like matthew
40:47 - questions
40:48 - um
40:50 - so yeah i think it's it's back to your
40:51 - like first question
40:53 - uh what company you're interested in
40:56 - talking reaching out to people who work
40:57 - there to figure out what might be
40:58 - expected of you
41:01 - will you want to say
41:05 - oh um i was just gonna touch on the uh
41:08 - algorithmic piece just a little bit in
41:10 - the sense of uh what josh was mentioning
41:12 - usually it's really hard because they
41:13 - want to see the kind of questions you're
41:14 - gonna ask so half the battle is asking
41:16 - those questions and so usually just keep
41:18 - asking questions in those situations but
41:20 - uh yeah no i think
41:22 - rebecca you know said it all right there
41:24 - um you know you definitely can use the
41:27 - hiring process that you experience is a
41:29 - good gauge a little bit or some insight
41:31 - into the company and so um obviously
41:34 - there's you know the perception outside
41:37 - um in terms of if they have a product or
41:39 - service that you really like or can
41:40 - empathize with but uh when you actually
41:42 - start to chat with people get to know
41:44 - them learn how they assess folks you can
41:46 - start to get a better idea as to what
41:48 - you know working that might look like
41:49 - and whether that would be a good fit for
41:51 - you
41:53 - okay cool well i mean we've got a lot of
41:55 - interview stuff so i want to give the
41:57 - audience a chance to ask questions and
41:59 - do some a little q a i'm going to go
42:01 - through the chat and start answering
42:03 - questions from the back to the front
42:05 - and
42:06 - one of the questions that came through
42:07 - while we were discussing this was
42:11 - would this advice apply equally to all
42:13 - levels of developers are there things
42:15 - that are more important for a junior
42:17 - developer that wouldn't apply to a more
42:19 - senior position
42:21 - obviously in the context of you know
42:23 - applying for a job we're talking here
42:27 - i think one of the things that you will
42:29 - probably encounter more the more senior
42:31 - you are
42:32 - are systems design architectural
42:35 - questions
42:36 - explain a project to us that you've
42:38 - worked on
42:39 - um when you're a junior engineer i think
42:43 - it's unlikely to get those kinds of
42:45 - questions and if you do
42:46 - the expectations aren't as
42:49 - stringent um but the more senior you get
42:51 - yeah like you'll be asked
42:53 - to present a project you've worked on
42:55 - and walk through the architecture of
42:57 - what you built or
42:59 - you know diagram an architectural
43:02 - like go through a system design for a
43:04 - new feature
43:09 - anything to add josh
43:13 - plus one all right plus one all right so
43:15 - uh junior developers more coding senior
43:18 - developers more about why you coded that
43:20 - way or like architectural like the kind
43:22 - of decisions behind of like why it was
43:24 - built that way i guess of the more
43:26 - project stuff
43:27 - okay um
43:29 - is it okay to reach out to the recruiter
43:32 - and ask questions in case the problem
43:33 - statement seems not a hundred percent
43:35 - precise once you start working i'm
43:38 - assuming started working in the problem
43:40 - for the take home i'm assuming
43:42 - yeah yeah no for sure for sure and
43:44 - usually um there should be a disclaimer
43:47 - or a little you know
43:49 - um if you have questions please contact
43:51 - so and so um because usually the
43:53 - recruiter's probably not going to be
43:54 - able to help you troubleshoot a
43:56 - technical question but they'll obviously
43:58 - be able to get your question in the
43:59 - hands of the right person so absolutely
44:02 - if something doesn't make sense um it's
44:04 - always good to ask questions rather than
44:06 - you know do the work that could
44:07 - potentially be just in the wrong
44:09 - direction so always feel free to be able
44:11 - to reach out to the recruiter and get
44:13 - some clarification
44:17 - all right fair enough
44:18 - uh another question
44:21 - yeah
44:22 - if you all have a res word more like a
44:24 - request if you all have a resource of
44:26 - common technical interview scenarios
44:28 - that will be helpful to me
44:31 - um
44:33 - do you have any preferred places will
44:35 - you go
44:39 - practice this
44:41 - okay rebecca just share a link
44:43 - i'll take that
44:49 - okay i'm sharing the links that one link
44:53 - two links
44:54 - all right chat so you got two links
44:56 - there for preparing for your interviews
44:58 - scenarios and i'm assuming that i mean
45:01 - there's probably like a lot out there
45:02 - but uh here's a couple of them uh i
45:05 - don't know if rebecca or josh you have
45:06 - like any preferred places or things that
45:09 - you know that they're like pretty good
45:10 - or they usually get it right when it
45:12 - comes to preparing for interviews
45:17 - rebecca's firing away some great
45:18 - resources in the chat um
45:20 - plus one also just generally working on
45:23 - your own projects is
45:25 - my personal favorite way uh codecademy
45:27 - recently showed off some code challenges
45:30 - features where we have challenges you
45:32 - can work with on platform and then also
45:34 - even better doing like fully fledged
45:36 - projects on your own off platform and
45:38 - whatever editor you use is always a good
45:40 - idea
45:43 - okay cool
45:46 - is there something i can start doing
45:49 - while i'm a beginner to prepare me for
45:51 - future interviews
45:53 - so i'm assuming they mean as a beginner
45:55 - like they're learning to code
45:57 - is there something they should be doing
45:58 - along
45:59 - learning code
46:05 - well i can't speak to the coding side of
46:08 - things but in terms of keeping your
46:10 - interview chops um you know
46:13 - up to par and being ready to go for
46:15 - things like that it never hurts to have
46:17 - conversations you know throughout the
46:18 - year or um even if maybe a job
46:21 - opportunity or um
46:23 - something comes across your desk that
46:24 - maybe isn't exactly what you're
46:25 - interested in doing but um having a
46:27 - conversation doesn't ever doesn't ever
46:29 - hurt it also helps you practice um
46:32 - presenting yourself talking through your
46:33 - experience so then when you do get um
46:36 - you know into the interview that you're
46:39 - really excited about uh you're a little
46:41 - bit more prepared so um
46:43 - and that's just definitely wouldn't hurt
46:45 - to have some interview practice so take
46:46 - some of those calls even if the job
46:48 - doesn't exactly align with what you're
46:49 - looking to do
46:53 - okay anything to add
46:58 - nope all right good uh let's see if any
47:01 - other questions come through i'm looking
47:03 - through the chat
47:10 - i actually do have something i wanted to
47:11 - bring up someone asked earlier in the
47:13 - commented earlier in the chat that they
47:14 - think some companies trying to find it
47:17 - uh prefer not to do
47:19 - uh take homes because they're worried
47:20 - about candidates cheating uh that is an
47:22 - unfortunate that is correct some some
47:25 - companies don't like uh take homes i
47:28 - would say it's real obvious when someone
47:30 - cheats either in a malicious way like
47:32 - copy and pasting or if they kind of
47:34 - don't understand what's going on and
47:35 - have kind of thrown stuff together from
47:36 - stack overflow so we're not worried
47:38 - about that and i don't think other
47:39 - companies generally should be because
47:41 - even though they might unfairly get
47:42 - ahead in one part of the
47:45 - process it gives them a disadvantage
47:47 - when they inevitably have to explain
47:49 - their code to someone and don't
47:50 - understand how it works
47:52 - so not a problem
47:54 - okay i mean it's interesting i guess um
47:57 - yeah
47:59 - go ahead
48:00 - i'm just gonna say it's an annoying
48:01 - waste of everyone's time but it's not
48:03 - like you figure it out eventually
48:06 - yeah i think it goes back to what we're
48:08 - saying right it's just one step in the
48:10 - process like yeah okay let's say that
48:12 - you cheated your way through the take
48:13 - home guess what's going to happen in the
48:14 - next step of the interview
48:17 - you're not going to cheat through the
48:18 - programming pre-order
48:20 - um i mean have you had that in the past
48:22 - like have you had people like try to
48:23 - like have like a second screen like copy
48:25 - and paste
48:26 - or have something like that like it just
48:28 - seems a little silly almost
48:30 - but but it's a high stakes like if you
48:32 - really want the job you might get pushed
48:34 - to those limits
48:42 - [Music]
48:44 - anything in the chair
48:47 - is there better to be is it better to be
48:49 - best at one language to have more under
48:51 - your belt
48:52 - lots of entry levels say that
48:53 - requirements you need to know yeah so i
48:56 - think this goes into um you know you're
48:58 - looking for junior level roles where
49:00 - they ask you for this crazy amount of
49:02 - requirements like lots of framework lots
49:04 - of languages lots of technical stuff uh
49:06 - and i think this person is just asking
49:08 - like you know is it better to know a
49:09 - little bit of everything or is it better
49:10 - that i'm good at one thing and just say
49:12 - like i don't know the others
49:21 - sorry for full disclosure someone said i
49:23 - looked like the ceo of mint mobile and
49:24 - now we're giggling about this in slack
49:26 - but uh
49:29 - all right first of all if a job
49:31 - requirement says you need like multiple
49:34 - multiple languages that is a like like
49:36 - more than four like that's a little bit
49:38 - of a red flag for a junior position uh
49:40 - do you i don't think juniors should be
49:42 - expected to know like front end and back
49:44 - end and full stack like that's weird um
49:47 - second of all a lot of job requirements
49:49 - will say recommended you you
49:52 - know
49:53 - what some of all of these things but
49:55 - then the actual requirements are a
49:56 - subset of that or they will say you need
49:59 - to know one or two of all these but it
50:00 - doesn't matter which
50:02 - i say that for junior developers it's i
50:04 - think less about what language
50:06 - like number counts you know and more of
50:09 - like you know how to do a general
50:10 - classification of task like if you're a
50:12 - web developer and you're doing front-end
50:14 - work you should know three languages
50:16 - html css javascript if you're like a
50:19 - python data analyst i'm not super
50:21 - familiar but i'm guessing it's like you
50:22 - need to know
50:23 - one of like python or r and then
50:25 - probably also sql depending on the type
50:27 - of work you do
50:29 - um someone should correct me if i'm
50:31 - wrong there but uh wait did you
50:33 - just call did you just call html a
50:35 - language
50:36 - did you say they need to know three
50:37 - languages html css and javascript
50:40 - we're not going to get to this we're not
50:41 - doing this is it all right
50:44 - here folks codecademy's official company
50:46 - position
50:48 - um
50:50 - whatever
50:52 - i
50:53 - i'd say that um finally lastly three or
50:56 - three um a lot of people feel nervous
50:58 - applying to jobs that they don't meet
50:59 - every single criteria for or feel
51:01 - nervous if they only meet the core and
51:03 - not all of the like optional this will
51:05 - make you stand out i'd say if you meet
51:07 - most of the criteria you should apply if
51:09 - you meet some of the criteria you should
51:10 - probably still apply like don't don't
51:13 - feel like you're wasting anyone's time
51:14 - by applying to a job that you aren't
51:16 - quite qualified for um you never know
51:20 - i think that kind of answers the a
51:22 - question that somebody just posted about
51:24 - when you're ready to start applying for
51:26 - jobs which is a pretty common question
51:27 - that we get in accord academy is like
51:30 - you know do i need to finish three
51:31 - courses five courses three career paths
51:33 - like you know when am i ready for for a
51:35 - job right so i think you kind of just
51:37 - touch on that uh if you know
51:40 - i mean will you deal with candidates all
51:42 - the time um
51:44 - do you get candidates that know like
51:46 - what is the ratio like 50 of the
51:47 - requirements is that good enough that
51:49 - you you might get through is it
51:51 - you know you asked for five languages
51:52 - they know three of the five
51:54 - yeah
51:55 - so
51:56 - yeah yeah so it's it's interesting
51:57 - because and again i don't mean to keep
51:58 - kicking this back to every company is
52:00 - different but at the end of the day
52:01 - every company is different and i've
52:03 - worked at places that um you know were
52:05 - java shops and every part of the
52:08 - interview process was java centric and
52:10 - you could have java ruby um and python
52:14 - and be experts in all three of them they
52:16 - would only be assessing like one-third
52:18 - of what you'd be bringing to the table
52:20 - and then there's other companies that
52:21 - are a little bit more you know language
52:23 - agnostic maybe they want to see your
52:25 - ability to have um you know a little bit
52:28 - of experience with a lot of languages i
52:29 - think it depends on the type of company
52:31 - what they're building you know if they
52:33 - are super early on having more of that
52:36 - jack-of-all-trades background might be
52:38 - super valuable because you can help out
52:39 - with some infrastructure stuff or you
52:40 - could do some database work but
52:42 - as you start applying to more mature
52:44 - companies that are going to have more
52:45 - segmented teams i find that being
52:48 - specialized and being an expert in like
52:50 - what you love doing um is usually kind
52:54 - of in a perfect world what the hiring
52:55 - teams are looking for and so um
52:58 - having an ability to specialize you know
53:00 - for what it's worth in my opinion i
53:02 - think um would be helpful um and then
53:05 - really trying to target jobs that align
53:07 - with you know really where you signed up
53:09 - excel the most at is it's kind of how i
53:11 - would handle it
53:13 - okay that's fair well we are that time
53:15 - we've been here for about an hour
53:17 - answering questions and uh i mean i'm
53:18 - going through questions the identical
53:19 - interview i want to give everyone here
53:22 - in the room one last chance to share
53:24 - maybe your one or two
53:26 - generic
53:27 - approaches and tips for success in the
53:30 - technical interviews and then we'll
53:31 - close it off
53:33 - josh you want to go first
53:36 - yeah i'll give two tips because i'm
53:37 - reading the chat one don't believe
53:39 - anything you read on reddit people are
53:41 - weird on the internet i don't know if
53:43 - that's a known fact but more importantly
53:45 - know your fundamentals if you're working
53:47 - in a language know how to use that
53:48 - language you don't have to be like a
53:49 - compiler expert but you should really
53:51 - understand how loops functions closures
53:53 - classes if they have it whatever work in
53:55 - that language
53:57 - it makes it so much easier to build
53:58 - things and explain your code
54:03 - rebecca
54:06 - don't apply to your dream job first find
54:08 - some companies that you're like lukewarm
54:10 - about use them as practice if it doesn't
54:12 - go well you'll learn from it and then
54:14 - when you do get to your dream job
54:16 - interview you'll have more practice and
54:17 - be more comfortable
54:20 - and will
54:22 - yeah i would just say you know ask
54:24 - questions you know throughout the entire
54:26 - process um it's good to be informed from
54:28 - your end and it shows initiative and
54:30 - curiosity on the company's end um you
54:33 - know whether it's process question
54:35 - whether it's about a piece of a
54:37 - technical interview um
54:39 - there are no stupid questions so feel
54:41 - free to ask whatever you need to feel
54:43 - confident and you know ready to do your
54:46 - best
54:48 - all right and my pro tip for everybody
54:50 - is don't code alone you hear it here
54:52 - again and again in the past hour you
54:54 - need to be able to explain your code you
54:56 - need to be able to
54:57 - share your code and to showcase your
54:59 - code so don't code along if you come to
55:01 - code academy for example out of all the
55:03 - platforms out there you should
55:04 - codeacademy.com uh
55:06 - when you're learning don't forget to
55:08 - step by step back for a second and go
55:11 - talk to your community engage in the
55:12 - forums engage in the discord server
55:14 - engage on your chapters program on a
55:15 - facebook group go talk to people see
55:17 - what they're building see get proficient
55:20 - at looking at other people's code you
55:22 - know if you can troubleshoot somebody's
55:23 - code you're getting better as well when
55:24 - you're trying to explain code right so
55:27 - go explore the community go get better
55:29 - talking to other people and building
55:30 - that network that is so important to get
55:32 - your first job in tech if that's what
55:34 - you're trying to do
55:35 - and thank you everybody josh rebecca
55:37 - will for stopping by today and we'll
55:40 - catch you on the next live stream
55:41 - goodbye everybody have a good weekend
55:49 - that's it

Cleaned transcript:

what to do um all right let's go live three two one all right and we are live thank you everybody for joining us today on another community live event today we have three guests with us and we're going to be talking about technical interviews so do you mind going around the room introducing yourselves sure i guess i'm alphabetically first everyone i'm josh goldberg i work as a frontend developer at codecademy i've also helped forum and take part in a lot of our hiring practices particularly around apprentices so i'm excited to hang out and chat today can go next i am rebecca uh i'm an engineering manager at code county and used to be an ic so i can kind of speak to both sides of the hiring process there and uh my name is will rudy i'm a senior technical recruiter here at codecademy um so looking forward to some fruitful discussion about the interview process from all sides so looking forward to it awesome so i think the very best the very first question that we should cover is what is a technical interview because even though it seems selfexplanatory to us that doesn't mean that everybody actually understands what it means so could would you mind going around the room again just answering maybe in a few sentences what you think a technical interview is and see if everybody's version of technical interview matches i'm curious sure uh for me there are uh generally two areas of technical interviews there's the type where we talk through a problem and at the high level architect how we might come to a solution like if you're trying to build a page where does the data come from how does it get arranged and then there's the live coding or whiteboard kind where you have a whiteboard or a laptop computer or something some sandbox in front of you and in real time you're creating something either in actual code or on the written form uh yeah i think technical interviews can take a lot of different forms so it kind of depends on the company um but anything to gauge the candidate's level of technical expertise um so nonbehavioral questions it could be whiteboarding pairing throwing random trivia questions at the candidate if that's what you enjoy doing or talking through highlevel architecture yeah yeah i don't have a lot to add there i think josh and rebecca both kind of covered it from both sides you know sometimes it's going to be more of a you know practical you know hands on the keyboard type of uh um you know problem or sometimes it might be a little more algorithmic um trying to figure out decisionmaking um sort of thought processes so um from my side it's you know always been a little bit of a combination between not only you know what you can actually produce you know when it comes to you know the technical interview or the actual coding but also how you got there and kind of being able to talk about um just the why not only just kind of the what so that's what i would say okay so it's it's more like so we're trying to assess obviously but there's different ways to assess right and different ways to measure performance or like the you know how well somebody is personal different topics so i guess there's different approaches you can take i hear that depending on the company they might use a different technique than other companies it's not very standardized it sounds like so um how does people prepare for this kind of technical interviews like if you would you say it's a fair game to reach out to a company and like maybe their linkedin or their twitter find out who works there and start peppering them with questions like have you ever been approached by anybody that might be applying for a company you work at and asking you hey what's the typical interview what's what's the etiquette so to speak because how people feel like it's not adequate to ask these questions about people feel like it's fair game because they're trying to you know just uh be the one candidate that gets through so what do you think do you think that people can ask these questions and how far can you push it when it comes to preparing for this uh i mean i guess the surest thing to do is if you have a recruiter screen to ask them they should hopefully have more information and that's their job to you know guide you through the process and let you know what to expect and ideally the company is giving you like some larger companies like google will give you like fullblown pdfs on like what to expect and how to prepare some of the smaller companies obviously don't have that available but the recruiter should always be able to explain what to expect um in terms of reaching out colds messaging people i get those a bunch uh it's kind of hit or miss if the person's gonna respond or not depending on like how nice you are and how much time you have uh i don't think it can hurt to reach out to someone who works at the company um but i would phrase it more as like hey like i'm super interested in your the company you're at do you mind like answering a few questions i have do you mind uh going out to coffee if you're in the same area as um um and making it a more like i would love to learn about this company and through that you can ask more about the process itself yeah for sure i would just add you know from the recruiting perspective like rebecca mentioned yo it's definitely you know best case you know to go through the recruiting department um you know applying through a careers page or if you find a job posting that you like on linkedin indeed one of those kind of um job board type websites um because yeah it's you know my job as a recruiter to explain kind of hey this is what we're looking for get to know you a little bit and sort of see if there could be some good overlap there um and yeah it definitely doesn't hurt to send messages um cold i think what i would definitely recommend is try to find people that have something in common either you know maybe you went to the same boot camp or the same school or you're in the same city or if you can find something in common with the person you're reaching out too cold um as well as being humble and appreciative like rebecca mentioned um that's where i found you could probably have the most success um so always good to build that network and you always start somewhere so that's uh yeah okay um so the reason i'm asking this question is i'm trying to think uh like somebody that might be applying for their first job we have a lot of users at code academy that are trying to land their first job in tech and a lot of times you it feels like you know you're just trying to get a job and there's not a lot of leverage that you have and you feel like one misstep and everything is over right uh there's this conception of i can't ask two hard questions you know like i can't ask really the questions i mean to in my interview or i shouldn't really talk to anyone or bother anyone so it's kind of interesting to to hear you talk about no yeah it's totally fine to reach out you know just be uh mindful of their time be mindful of like you know then they you know their time constraints and just try to say uh you need help or you're very interested in the position and see how they react to that i guess you also might not get a response but if the company uses that against you i would say that's probably a red flag and maybe best like you're better off better off not working there if you're going to hold you asking questions against you that that doesn't seem great oh yeah i like it when candidates ask the harder the question the better like it shows that they're thinking critically and they're not just applying for the sake of i want to work anywhere and this seems like a good match which for the record you totally should uh definitely apply to as many places as do seem vaguely potentially relevant but i really like it when candidates ask like not just the good questions like what is your day or what do you do here but why is this that way or can you tell me about how this came to be like things it was uh every every candidate who applies and can pass the early screens of can you code can generally code but people who can think critically and work well with others and communicate well that's that's beautiful all right that's the winning sauce all right yeah got it so uh you heard it here first i mean obviously again the caveat that it changes from company to company but for we i'm hearing today you know asking questions is always good and as long as they're respectful and they're within you know reason it seems like it's gonna be more good than bad so you shouldn't really be scared of asking these questions um it just comes down to that sense of you don't want to screw up but at the same time you know you are trying to stand out and if most people are not asking questions and you are then you are standing up so that's a positive uh let's move on to technical interviews themselves and what they mean of what they represent what i think there's a few types of technical interviews you've talked about them earlier there is take home interviews there is white boarding interviews and there is like a mix match of both between trivia and like pair programming like walking through problems that you might have worked on before and you can like bring with you to the interview so can you speak a little bit about the kinds of technical interviews that a candidate will find in the while um yeah i could hop in real quick talk some high level stuff and i'm sure that um josh rebecca could add some examples but but yeah in my experience usually companies are are going to employ a few different types of exercises to get a more wellrounded perspective on a candidate's strengths and weaknesses and whether they would be a good fit for that organization and so usually that will entail you know when it comes to it you know usually some sort of either takehome exercise or i've seen some timed quizzes um that companies will take in terms of here's a specific language we have literally 12 multiple choice questions here's 10 minutes and you know they're looking for a certain score and it could be as um you know automatic and rudimentary something like that um two being able to you know complete a brand new github assignment that would be able to showcase kind of the full coding potential um but usually they're trying to assess a few different types of skill sets and so you'll usually see a combination of both the whiteboarding as well as some more programming type stuff um so it's it i would be definitely prepared for a little bit of everything because it's rare that you'll only find um one type of interview it's usually they have a couple different rounds to assess those different types of skills more thoughts on uh the types of technical interviews so what's your favorite i want to hear josh andrew what's what's your favorite i really like the technical takehomes um i personally don't mind coding in front of other people uh but i used to and i think many people do so i enjoy being able to to do something on my own and like really process it without the pressure of someone staring at me and offering helpfulish suggestions every two minutes um and those for those who haven't taken on a technical tape home is often times at least the way we tend to do it like we give you a problem and maybe a bit of starting code and ask you to go through a set of features maybe give you some screenshots of how it should generally look if it's a visual thing um so like oftentimes it'll it'll be some basic assignment like build this type of page that gives these types of buttons and actions and it should take you generally around four to six hours maybe more so that that for me is more fun than like live pressured coding okay what about you rebecca what's your favorite kind of uh technical interview uh so i actually really enjoy the pair programming kind of technical interviews um and in the true sense of pair programming not where like people are staring at you silently and you're expected to code while they watch you um but in the sense where you're literally working together with people to see because it a gives the company a better idea of how you would work in a real life scenario and b gives the candidate a better experience of what it would be like to work at this company um and i think it's more close to uh the daytoday life of an actual engineer who's on a team of engineers uh not working necessarily in silo on some small project but um getting in there and and really working on a specific pr that that person is putting together a specific ticket yeah i guess um being on your own like josh said it kind of removes the pressure of somebody staring at you but at the same time you do have to have the ability to work with other people sooner or later right so i guess they serve like a happy medium like and that probably comes down to the person interviewing the candidate right and how comfortable they are like how experienced they are now in conducting interviews right uh i'm sure that there's different styles more aggressive or they're like asking questions all the time and other people that kind of like lay back and let you let the candy take the lead a little bit more i would imagine that there's kind of like a spectrum of what you expect when you're doing this kind of collaboration interviews uh will do you know um do you know if if you've ever come across you come across a lot of candidates do they have expressed in the past like hey i'm not comfortable with this kind of interview or like is it possible to modify the process for me because i prefer this kind yeah so it's definitely something that i'm noticing more and more um the candidates do tend to have a preference but usually the company is going to be pretty rigid in terms of this is our process we're sticking to you know these steps in this order um and so usually you kind of have to you know dance with the music they're playing yet a little bit in that regard um obviously if there's special circumstances if someone has a disability and would need some kind of you know um situation where um they needed more time or some type of um you know automated uh you know one thing i've had in the past as a candidate who was hard of eyesight and so they had a program that they would use to help kind of like um like hear different commands and help them you know work through the exercise like that and so companies will always try to be as accommodating as possible um in that regard but usually um the recruiter should do a good job about laying it out you know in that first intro call about what to expect um and so you could always have a preference but um and you can always kind of you know as rebecca mentioned you don't have to you know work at every company you apply to if you realize that you know if the interview process isn't a great fit the uh working environment might not also be a good fit because there's usually at least a little correlation there so uh so yeah it's definitely you know fair to have that um opinion and you know preference but uh you're gonna have to you know work with what is sort of in place at those companies you're chatting with i feel like it's one of those tough situations where has the junior developer uh yes you want to have a voice and who is hiring you but at the same time you're thinking i just need experience wherever i can get it and you might be willing to put up with some reflexes because you think it can't be that bad or maybe it's it will get better right with time i don't know but um but it's a fair point that sometimes you just have to walk away if it's not the right fit for you um do you let's go over uh the different types of technical interviews one by one and kind of like take a little bit more of a deep approach to learning what they are and what they mean or like how to prepare for them so the first one is to take home let's think about i want to hear about how takehomes are usually formed and i want to know usually how do they gauge at the company level what a take home is fair or is not unfair has a burden to the candidates because i'm sure that sometimes you will apply for companies where the take home takes you a weekend and other companies give you a take home that takes four hours and you might be thinking as a candidate this was too fast did i made a mistake am i missing something right because you're just getting all these levels of difficulty across companies so what are takehomes and how do companies generally or at least here at kodakami do we go about forming them in a way that makes sense i guess i'll go um yeah a takehome is is kind of hard on our end the company to get uh you want to balance that it should be complex enough of a challenge that not every candidate's submission looks the exact same but if it takes a full weekend two days 48 hours for a candidate to do then you're you're not being respectful to the candidates time who who has the time to do a takehome that takes a whole weekend for every company that they'd apply to um so typically what we try to do is figure out the list of things we want to assess on the candidate which is normally can they write clean code does it is it something that we as a reviewer can read through and understand does their stuff actually work and work well without bugs and can they display somewhat intermediateish comprehension of whatever languages or frameworks they're working in for example our frontend takehome would be in react and you'd write a page and react and we test that you're able to make react components and manage page state which is like the core fundamentals of react um i think ours typically what does it take like four to six hours recommended but it's totally fine to take yay it's totally fine to take more uh we we we want to give candidates a time recommendation so they don't feel like it's going to take them 20 hours but if it takes you longer that's fine too we don't want to rush you um and then lastly i'd say we we codecademy actually publish what we grade on online it's open source like you can read it but in general it's what i mentioned before of like code clarity does it work well um and what was the last one uh does it demonstrate good usage of the the foundation framework and language did i cover everything you were looking for there yeah i think so i mean if i were a candidate applying for a code academy i think uh i might kind of understand that you know my code has to be readable usable and it has to show that i know what i'm writing the id and copy and paste it from somewhere else right so that seems to be pretty straightforward when it comes to state homes um i always wonder if take homes you know i talked to professors in university where they would say i write an exam that takes me 10 minutes and that's an hour exam for you guys so there's like a like that's one to six ratio or something in minutes uh of what me knowing the material takes to solve versus you is that is that something that happens i gotta get like when you put it together do you think well this would have probably taken me like an hour solid work so that's like a fair assessment for somebody that is applying for this role um we do take the take home like it's not like we just write something we think is fun and then throw it out so that unsuspecting candidates have to suffer like we have an actual process internally of we figure out what we want we make some hypotheses of like we think these would be good sample challenges uh and then like we have especially a range not just the senior or just the junior engineers take the take home to make sure it's like a reasonable problem um but yeah i do want to defer now to rebecca as the author of how to ace our apprenticeship take home most uh yeah i don't know how to get something to the actual viewers i don't know if they'll share it yeah uh i put together a post um that compiles a lot of advice from our former apprentices um tips for using our apprenticeship take them so not necessarily like fully applicable to all of our take homes at different levels but um for your first job i would say there's some pretty good tips and advice there on how to how to make sure that you're submitting a quality takehome assignment um and yeah ideally the company shares what they're looking for uh but i would say like for most companies you'll want to make sure that you're submitting clean code taking a look at what you're submitting beforehand to make sure you don't leave in any like console logs or um you know make sure you're running it one last time before you submit it to make sure you didn't like introduce a bug right before you submitted it and there's there's some some more advice in that in that post i love console logs what's wrong with console logs oh no okay everybody uh watching the stream now or in the future console logs apparently are not pretty in your code if you're submitted for an application um so i think one question that a lot of people might be having right now when they hear about take homes is well but is that sufficient like are people cheating how does the company know that take home is good um and i think it's important to clarify that take homes usually are not the only way that a company is assessing you through the interview process correct there's several steps and take home might be one of them but it's not usually the only step right no you're very you're you're correct there fede but it is a little correlated in the sense that you must you usually have to get through that takehome exercise to get to the final rounds um where you'll kind of do the other types of technical exercises um and so yeah it's it's not the be all endall but um it usually is quite an important um just component of the process um that you need to ace or you need to you know get to an adequate position based on the level and the expectation um to make it to those next levels um and so one other thing is you know take homes are always evolving too like we usually are uh you know they exist for a while but then um you know it's something that's constantly being um updated um or at least looked at um you know from a company's perspective and so um trying to maintain and make sure it's as accurate to reflect the types of you know daytoday challenges so just one other little tidbit to add there okay and okay last question about take homes uh rebecca how far can a candida do with a takehome before you say this is way overengineered we asked two questions and they answered ten is that is there a point where it becomes a flag of red flag for the reviewers of like too much submission like you went too far i don't think that would be a flag like i don't think we would say you cannot move on to the next stage but i do think uh it's up to us to be clear in our like our grading rubrics to make sure we don't judge them more favorably because we're giving you an assignment for a reason we think it's you know a good amount of time um fair for you and for us to be able to grade so i would uh suggest not going above and beyond to you know it'll be annoying for the greater honestly it'll take them more time to look through what you did um so i would try to make sure you're like taking the boxes of what's required there may be some delighters or bonuses that you could add on as well but yeah i i don't think it would be a red flag i just would suggest you don't do it do you know if that's a common practice maybe during the prompt like the takehome prompt there might be like a line at the bottom but that says bonus like this or whatever like okay we have that in ours um i think most companies have something like that where it's like if you have time you can do this delighter or whatever um also some people will want to make it look nice but like some people will focus less on the css styles um those kinds of things i think are nice but again i wouldn't go like you don't need like a whole design system that we're not asking for like a production ready app okay yeah no that makes sense i was just wondering uh you know like uh when you're doing running for example if you're doing a race that will always tell you run a little bit more than the tracker says just to make sure right that you cross the finish line if you're doing a virtual race so uh it's sort of the idea of like i checked the boxes but did i really so maybe you want to like do a bit more just for flair i guess okay so you finish you take home let's say that you're okay we are candid go and then we hear back from code academy says you know what you're thinking what's great we would love to talk to you a bit more what's usually the next step that i can get encounters after i take phone yeah so just in terms of process after a successful take home the recruiter will send that over to one of our engineering um members uh we usually have a couple folks take a look at it um and then they evaluate it based on a rubric um and if we get thumbs up we would then sort of move forward to schedule you for that final round of interviews which uh usually takes about half a day for us and every company is a little bit different um you know these days from what i hear you know i think very you know remote interview practices are very common still and seem to be um quite heavily utilized across the board so um but usually in that final round is when you'd be um you know meeting with more members of the team potentially some folks outside the direct team and uh you know running through some more of those exercises like the whiteboard or some of the pair programming that we discussed earlier and stuff like that okay so because rebecca said that she likes pair programming and just as he likes to take home i'm going to start with rebecca this time around let's say that the next step in the process of the company imaginary company applying for is a pair programming challenge they say you're going to be paired with an engineer you're going to work through something what is the typical programming experience for a candidate like what do you usually expect every company more or less will throw your way and how do you prepare for that yeah so i would say there's probably three different options you could have for that and we use two out of those three so the first one we do for apprentices is we extend the take home together um so in that case you'll want to review your take home and again hopefully you'll be have like been given this information from the recruiter ahead of time or you can ask um but in that case you'll want to review your code to make sure you know what's going on yourself so that it's easier to extend it with whatever features we throw at you um so that's one type the second type would be uh here is a new small app we want to build together um and that we do for like nonapprentices we'll say uh build this view and we give you like a design to mock it off of um and work on like kind of related but arbitrary and not not really guitar uh not like from our code base but um like related to something we would do on a daytoday job the third one which i don't think we've we've done but i know other companies do uh is they'll say like uh i'm working on this task that my product manager assigned our team um and this candidate will work with me as i move through that that ticket um and so it'll be actually like working on code that might end up in production um but it'll be more uh more true to like what a pair programming experience would be like if you did get a job so one thing that i hear a lot from from candidates that are going or preparing for these kind of interviews is that you need to be able to really talk through your code a lot like because usually if you're on your own and your computer just you know listen to music or something just working on your code and it doesn't come naturally that every time you write three lines of code or every time you're gonna define something new that you have to out loud say why you're doing what you're doing uh josh do you come across anyone that that is kind of like super quiet or super verbose or like something how how do you what is your experience with these kind of interviews yeah most candidates um don't have problems discussing their code but very few of them are extremely quiet or extremely verbose the reason why people often say you should talk to your code a lot or it'll be asked to is because as the reviewer or the interviewer we're trying to figure out what's going through your mind what do you think and how well do you understand the code so um candidates who can explain that are great if they don't explain it we'll ask if if we ask someone repeatedly to explain them themselves or their code and they can't give us information that's kind of a like a little bit of a red flag like i'm trying to understand your thing and you're not giving me the information i need uh similarly if a candidate won't stop talking which does happen uh that's also a red flag because i'm trying to communicate effectively and i can't if you won't stop talking uh but again most people aren't in those extremes most people it's it's fine okay and i mean i would imagine that you know we're all human beings so um a fear that candidates have is that this is gonna be this antagonistic figure interviewer that is like coming to get you or like they want you to fail right um do you do you think that i mean i'm assuming that that's not true and that in most cases if you're being too verbose or if you are being too quiet the interviewer will just like try to you know engage with you tries to get you in the right direction right like if you are at that point where you already went through the screening through the take home you're in the in this round of interviewing they've obviously seen something interesting you has a candidate and i'm assuming that the person interviewing you wants you to succeed in general right so so you also can take these cues and not immediately think oh my gosh they said this thing that this is done like you finish the interview you go home you know you turn off your cameras like oh that i blew it i'm assuming that there's there's a bit of give and a bit of back and forth this goes back to the conversation of if there isn't that's a red flag again not everyone has the the you know privilege to be able to be as choosy with their interviews but if you show up in an interview and you're not given any information from the interviewer as to like what you should be doing and they're not helping you at all i prop probably would not want to work with them i know i i was one time at a company this is a while ago i was interviewing and the i had like a mental block and i couldn't remember the difference between um 4h and uh map or something something like i couldn't figure out why my app wasn't running and they were all just staring at me while i was struggling uh and at that point like i personally if i were on the other side i probably would have just helped out and said like you know maybe try this instead um and after the fact you can decide if that's you know enough to not hire them or not but i think in the moment most interviewers who are kind and people that you would hopefully want to work with would help you out if you were struggling or not speaking enough speaking too much i would hope they would give you feedback yeah for sure oh well go ahead yeah just just to add a little bit there yeah i can definitely vouch for the fact that uh you know 10 times out of 10 if you're meeting someone in the room they definitely want to hire you if it's possible but they also are going to be very you know um have a certain standard that they're adhering to in terms of what we're evaluating what we're looking for and so um back to the communication josh said it you know specifically effective communication and so when you're you know either talking through your code or being asked to explain something it's it's usually you know a way for us to get a sense as to that communication because you know whether it's codecademy or whether it's another you know you know startup late stage startup we're building stuff and so the ability to communicate effectively and work together is something that's you know a lot more important at a you know growing organization that's not just working on huge legacy code bases all the time and so what i hear in huddle sometimes um you know how some of these exercises have gone um communication is always something that's mentioned and so um josh is correct in the sense there's no one right way to do it and usually people are somewhere in the middle um but being prepared that you know to talk through it or to be ready to you know answer some of those questions because they will come up especially you know if you're interviewing at companies um like a codecademy or like you know late stage startups and stuff like that okay um so if you get let's say that you're you're going through this interview and like the person is like hey maybe this way maybe that way um and you're starting to feel a little nervous you're starting to feel a little like uh you don't know this is that is it fair for a candidate to ask for a pause or to ask for a moment to to collect their thoughts and like i feel like sometimes you are in this interview and you feel like it's an exam like it has a time a time it's like we got 30 minutes and this has to be done in 30 minutes if you don't finish building this thing or if you don't deliver on this it's done it's over um have you ever come across any candidates that might be like you know can you like give me a second to collect my thoughts or like you look at them and you realize they're going through a lot of stress but they're getting very stressed out like is that is that common i don't know how common but you can totally do it that's great and it shows that you're thoughtful and you recognize it like you're you know you need a second to regroup i think that's totally reasonable okay um i'm asking these questions because i'm trying to imagine that you know a lot of you a lot of our users especially when they're new they have a huge you know weight on the shoulders of impostor syndrome or like i don't even know why they call me back i'm a i'm a fluke you know i don't really know react i don't really know any of this oh my gosh like you know i my abs barely run and so i'm trying to ask all these questions because i imagine that it's a lot of questions that people go through through when they're applying for this like oh can i can i ask for a pause how antagonistic are my interviews going to be do they want me to succeed is it fair to ask questions so and i would imagine that has a general practice to practice for this for this uh interviews you can just explain it to anyone like just get a friend and say like here's the code i wrote and i'm gonna explain it to you for 10 minutes like is that is that how people practice for these kind of interviews our our code also barely runs just kidding yeah uh is nerve wracking for many like it's an important thing this is your career your future like it would be weird if you didn't feel any nervousness when you're getting started interviewing um so yes as rebecca was saying plus one the the reviewer interviewer should be compassionate and help you through um we generally at codecademy try to make sure that all of our interviewers are kind compassionate collaborators not angry antagonizers that would be bad and yeah having a friend look at your code is always a good idea explaining to the friend the code i recommend people first of all try to get as realistic if a simulation as possible like actually tell a friend hey give me this problem or some problem like it and work with me to solve it in an hour or whatever time period and then i'd also recommend people keep track of the questions you get whether it's a simulation from a friend or actually from take homes and interviews and then go over them later to see if there are any common threads of things you do really well or not so well at like when i was interviewing i always messed up hashmaps or maps or sets or whatever your language calls them at the beginning so i got real good at those just by rehearsing them over and over again because i was really annoyed at not doing them well okay yeah i guess practice oh i also just shared i don't know if we're allowed to like promote different websites but uh pramp lets you do these practices for free um so if you don't have someone around to do to run through a practice um check them out that's awesome thank you so much i shared it in the youtube chat okay so final type of interview so we've talked about take homes pair programming code challenges there is the infamous most famous type of coding interview question and it is the algorithmic whiteboard questions the ones that you see in the movies the ones that you see at places like facebook or google where it's like here's this very abstract obscure coding problem i want you to do it in you know a big old notation and like i want you to optimize it in front of me um these kind of whiteboarding exercises in your experience is this something that's still a common practice are they going away getting replaced by pair programming questions are they still very much part of the of the you know a candidate's repertoire when they're applying for jobs how come on how come on how likely are you to run into these kind of questions when you're applying for tech companies they're still somewhat common unfortunately i think they're slowly becoming less common um the reason why companies often uh gave or give the kind of algorithmic highlevel mathy problems because they wanted to see how people think about tough challenges which is a good idea something you should try to quiz on the problem is that these most of the time most of the work people do in most software development roles has nothing to do with really advanced algorithms beyond things like uh of one versus of n lookups like hash tables stuff like that like there's very very little so the things are unrelated to not all but most jobs and are slowly being phased out for example most of codecademy at least i can vouch for our frontend areas we don't ask for anything around like binary search trees or linked list shenanigans like i would never ask a candidate to reverse a singly linked list like notorious pinnacle of roots we just revamped our back end interview to not do that so i think we're good there too how about that you just heard it i mean um are does it fit in the definition of white boarding exercises this kind of the ones that don't even have coding in them you know like you could ask questions like you have three people on one side of the river and one boat that only fits two people how do you get this many people to those other like these kind of questions that are sort of algorithmic but they are not even code um i think even google i don't think people do those anymore i think like google even stopped doing those ones but uh like you're saying like the random like how many people are in a taxi cab in new york right now yeah yeah like hey if you toss a you toss an ant on a blender you know how do you escape before the i don't think anyone should move anymore i actually my most recent round of hiring where i ended up at codecademy whoop uh i got a question from a major tech company i'd feel bad naming where was uh you have two robots that land on mars really and they can only go in circles and they have the same programming and all they know is each other like they can tell when they bump into each other and they can tell when they bump into like this one uh crash site from the other like how do you get the pro like this weird question that makes me not want to work there again as we were saying red flag yeah um i thought so too uhhuh yes some companies will give you these still and again the goal is to make you think so get get the person to explain to you in detail what is what are the inputs and what are the expected outputs and then you're going to have to work with them to figure out how to map from input to output okay and figuring out what the outputs are is hard like what the expectations what you're given what they want you to do that that's a big part of working with an interviewer am i asking because oh i was going to say like i'm asking because uh you know when when you're a candidate applying for jobs uh you might be time constrained too like let's say that you go through code academy you finish one of the career paths you build a couple portfolio projects and say you know what i want to get a job before you know spring break okay uh you really don't have all the time in the world to prepare for every sort of possibility every sort of a scenario and it sounds to me like being solid and clean with your work which for takehome exercises and being able to explain your code for peer programming exercises seems to be a better use of your time has a candidate has going through a thousand katas of like algorithmic problems or things like that because they have their place but like the proportionality of what kind of problems you're gonna come across is more likely that you're gonna come across the other kind a problem is that is that fair i think it depends on where you want to work if you want to work at a fan company you might have to do more of that um also probably if you want to work in fintech they might ask more like matthew questions um so yeah i think it's it's back to your like first question uh what company you're interested in talking reaching out to people who work there to figure out what might be expected of you will you want to say oh um i was just gonna touch on the uh algorithmic piece just a little bit in the sense of uh what josh was mentioning usually it's really hard because they want to see the kind of questions you're gonna ask so half the battle is asking those questions and so usually just keep asking questions in those situations but uh yeah no i think rebecca you know said it all right there um you know you definitely can use the hiring process that you experience is a good gauge a little bit or some insight into the company and so um obviously there's you know the perception outside um in terms of if they have a product or service that you really like or can empathize with but uh when you actually start to chat with people get to know them learn how they assess folks you can start to get a better idea as to what you know working that might look like and whether that would be a good fit for you okay cool well i mean we've got a lot of interview stuff so i want to give the audience a chance to ask questions and do some a little q a i'm going to go through the chat and start answering questions from the back to the front and one of the questions that came through while we were discussing this was would this advice apply equally to all levels of developers are there things that are more important for a junior developer that wouldn't apply to a more senior position obviously in the context of you know applying for a job we're talking here i think one of the things that you will probably encounter more the more senior you are are systems design architectural questions explain a project to us that you've worked on um when you're a junior engineer i think it's unlikely to get those kinds of questions and if you do the expectations aren't as stringent um but the more senior you get yeah like you'll be asked to present a project you've worked on and walk through the architecture of what you built or you know diagram an architectural like go through a system design for a new feature anything to add josh plus one all right plus one all right so uh junior developers more coding senior developers more about why you coded that way or like architectural like the kind of decisions behind of like why it was built that way i guess of the more project stuff okay um is it okay to reach out to the recruiter and ask questions in case the problem statement seems not a hundred percent precise once you start working i'm assuming started working in the problem for the take home i'm assuming yeah yeah no for sure for sure and usually um there should be a disclaimer or a little you know um if you have questions please contact so and so um because usually the recruiter's probably not going to be able to help you troubleshoot a technical question but they'll obviously be able to get your question in the hands of the right person so absolutely if something doesn't make sense um it's always good to ask questions rather than you know do the work that could potentially be just in the wrong direction so always feel free to be able to reach out to the recruiter and get some clarification all right fair enough uh another question yeah if you all have a res word more like a request if you all have a resource of common technical interview scenarios that will be helpful to me um do you have any preferred places will you go practice this okay rebecca just share a link i'll take that okay i'm sharing the links that one link two links all right chat so you got two links there for preparing for your interviews scenarios and i'm assuming that i mean there's probably like a lot out there but uh here's a couple of them uh i don't know if rebecca or josh you have like any preferred places or things that you know that they're like pretty good or they usually get it right when it comes to preparing for interviews rebecca's firing away some great resources in the chat um plus one also just generally working on your own projects is my personal favorite way uh codecademy recently showed off some code challenges features where we have challenges you can work with on platform and then also even better doing like fully fledged projects on your own off platform and whatever editor you use is always a good idea okay cool is there something i can start doing while i'm a beginner to prepare me for future interviews so i'm assuming they mean as a beginner like they're learning to code is there something they should be doing along learning code well i can't speak to the coding side of things but in terms of keeping your interview chops um you know up to par and being ready to go for things like that it never hurts to have conversations you know throughout the year or um even if maybe a job opportunity or um something comes across your desk that maybe isn't exactly what you're interested in doing but um having a conversation doesn't ever doesn't ever hurt it also helps you practice um presenting yourself talking through your experience so then when you do get um you know into the interview that you're really excited about uh you're a little bit more prepared so um and that's just definitely wouldn't hurt to have some interview practice so take some of those calls even if the job doesn't exactly align with what you're looking to do okay anything to add nope all right good uh let's see if any other questions come through i'm looking through the chat i actually do have something i wanted to bring up someone asked earlier in the commented earlier in the chat that they think some companies trying to find it uh prefer not to do uh take homes because they're worried about candidates cheating uh that is an unfortunate that is correct some some companies don't like uh take homes i would say it's real obvious when someone cheats either in a malicious way like copy and pasting or if they kind of don't understand what's going on and have kind of thrown stuff together from stack overflow so we're not worried about that and i don't think other companies generally should be because even though they might unfairly get ahead in one part of the process it gives them a disadvantage when they inevitably have to explain their code to someone and don't understand how it works so not a problem okay i mean it's interesting i guess um yeah go ahead i'm just gonna say it's an annoying waste of everyone's time but it's not like you figure it out eventually yeah i think it goes back to what we're saying right it's just one step in the process like yeah okay let's say that you cheated your way through the take home guess what's going to happen in the next step of the interview you're not going to cheat through the programming preorder um i mean have you had that in the past like have you had people like try to like have like a second screen like copy and paste or have something like that like it just seems a little silly almost but but it's a high stakes like if you really want the job you might get pushed to those limits anything in the chair is there better to be is it better to be best at one language to have more under your belt lots of entry levels say that requirements you need to know yeah so i think this goes into um you know you're looking for junior level roles where they ask you for this crazy amount of requirements like lots of framework lots of languages lots of technical stuff uh and i think this person is just asking like you know is it better to know a little bit of everything or is it better that i'm good at one thing and just say like i don't know the others sorry for full disclosure someone said i looked like the ceo of mint mobile and now we're giggling about this in slack but uh all right first of all if a job requirement says you need like multiple multiple languages that is a like like more than four like that's a little bit of a red flag for a junior position uh do you i don't think juniors should be expected to know like front end and back end and full stack like that's weird um second of all a lot of job requirements will say recommended you you know what some of all of these things but then the actual requirements are a subset of that or they will say you need to know one or two of all these but it doesn't matter which i say that for junior developers it's i think less about what language like number counts you know and more of like you know how to do a general classification of task like if you're a web developer and you're doing frontend work you should know three languages html css javascript if you're like a python data analyst i'm not super familiar but i'm guessing it's like you need to know one of like python or r and then probably also sql depending on the type of work you do um someone should correct me if i'm wrong there but uh wait did you just call did you just call html a language did you say they need to know three languages html css and javascript we're not going to get to this we're not doing this is it all right here folks codecademy's official company position um whatever i i'd say that um finally lastly three or three um a lot of people feel nervous applying to jobs that they don't meet every single criteria for or feel nervous if they only meet the core and not all of the like optional this will make you stand out i'd say if you meet most of the criteria you should apply if you meet some of the criteria you should probably still apply like don't don't feel like you're wasting anyone's time by applying to a job that you aren't quite qualified for um you never know i think that kind of answers the a question that somebody just posted about when you're ready to start applying for jobs which is a pretty common question that we get in accord academy is like you know do i need to finish three courses five courses three career paths like you know when am i ready for for a job right so i think you kind of just touch on that uh if you know i mean will you deal with candidates all the time um do you get candidates that know like what is the ratio like 50 of the requirements is that good enough that you you might get through is it you know you asked for five languages they know three of the five yeah so yeah yeah so it's it's interesting because and again i don't mean to keep kicking this back to every company is different but at the end of the day every company is different and i've worked at places that um you know were java shops and every part of the interview process was java centric and you could have java ruby um and python and be experts in all three of them they would only be assessing like onethird of what you'd be bringing to the table and then there's other companies that are a little bit more you know language agnostic maybe they want to see your ability to have um you know a little bit of experience with a lot of languages i think it depends on the type of company what they're building you know if they are super early on having more of that jackofalltrades background might be super valuable because you can help out with some infrastructure stuff or you could do some database work but as you start applying to more mature companies that are going to have more segmented teams i find that being specialized and being an expert in like what you love doing um is usually kind of in a perfect world what the hiring teams are looking for and so um having an ability to specialize you know for what it's worth in my opinion i think um would be helpful um and then really trying to target jobs that align with you know really where you signed up excel the most at is it's kind of how i would handle it okay that's fair well we are that time we've been here for about an hour answering questions and uh i mean i'm going through questions the identical interview i want to give everyone here in the room one last chance to share maybe your one or two generic approaches and tips for success in the technical interviews and then we'll close it off josh you want to go first yeah i'll give two tips because i'm reading the chat one don't believe anything you read on reddit people are weird on the internet i don't know if that's a known fact but more importantly know your fundamentals if you're working in a language know how to use that language you don't have to be like a compiler expert but you should really understand how loops functions closures classes if they have it whatever work in that language it makes it so much easier to build things and explain your code rebecca don't apply to your dream job first find some companies that you're like lukewarm about use them as practice if it doesn't go well you'll learn from it and then when you do get to your dream job interview you'll have more practice and be more comfortable and will yeah i would just say you know ask questions you know throughout the entire process um it's good to be informed from your end and it shows initiative and curiosity on the company's end um you know whether it's process question whether it's about a piece of a technical interview um there are no stupid questions so feel free to ask whatever you need to feel confident and you know ready to do your best all right and my pro tip for everybody is don't code alone you hear it here again and again in the past hour you need to be able to explain your code you need to be able to share your code and to showcase your code so don't code along if you come to code academy for example out of all the platforms out there you should codeacademy.com uh when you're learning don't forget to step by step back for a second and go talk to your community engage in the forums engage in the discord server engage on your chapters program on a facebook group go talk to people see what they're building see get proficient at looking at other people's code you know if you can troubleshoot somebody's code you're getting better as well when you're trying to explain code right so go explore the community go get better talking to other people and building that network that is so important to get your first job in tech if that's what you're trying to do and thank you everybody josh rebecca will for stopping by today and we'll catch you on the next live stream goodbye everybody have a good weekend that's it
