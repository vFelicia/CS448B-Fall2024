in this video we are gonna look at docker volumes in practice and this is a simple node.js MongoDB application that we're gonna attach the volume to so that we don't lose the database data every time we restart them I'm going to be container so let's head over to the console and I'm gonna start the MongoDB with the docker compose so this is how the compose looks like we're gonna start the MongoDB on container in the Express container so that we have a UI to it so I'm gonna execute the docker compose which is gonna start MongoDB and the Express so when it started I'm gonna check that Express is running on port 8080 and here we see just a default databases so these are just created by default on startup and we're gonna create our own one for the node.js application and inside of that database I'm gonna create users collection so these are the prerequisites or these are the things that my node.js application needs so this one here in order to connect so the database my DB this is what we just created my DB and inside of that to the collection called users so let's start the application which is running on port 3000 so here and this is our app which when I edit something here will write the changes to my database now if I were to restart now the MongoDB container I would lose all this data so because of that way to do it as explained in the previous video docker volumes we're gonna use named volumes inside of the docker compose file persist all this data in the MongoDB let's head over to dr. Campos so the first step is to define what volumes I'm gonna be using in any of my containers and I'm gonna do that on the services level so here I define the list of all the volumes that I'm gonna need in any of my containers and since we need data persistence in for MongoDB we're gonna create data volume here now this is gonna be the name of the volume reference but we also need to provide here a driver local so the actual storage path that we're gonna see later once it's created it is actually created by toker itself and this is a kind of an information additional information for docker to create that physical storage on a local file system so once we have a name reference to a volume defined we can actually use it in the container so here I'm gonna save volumes and here I will define a mapping between the data volume that we have on our host and the second one will be the path inside of the MongoDB container but it has to be the path where MongoDB explicitly persists its data so for example if you check it out online you see that the default path where MongoDB stores its data is data slash data slash to B and we can actually check that out so if I say doc repeat s and go inside the container it's minus 80 I can actually see data DP and here is all the data that MongoDB actually holds but this is of course only the container so when the container restarts the data get regenerated so nothing persists here so this is the path inside of the container not on my host that we need to reference in the volumes here so we're attaching our volume on the host to data slash data slash to be inside of a container so for example for my sequel it's going to be far leap my sequel for Postgres it's also going to be Varley Postgres sequel slash data so each database will have its own so you have to actually find the right one so what this means is that all the data with that we just so here all of this will be replicated on a container start up on our host on this persistent volume that we defined here and viceversa meaning when a container restarts all the data that is here will be replicated inside of that directory inside of a container so now that we have defined that let's actually restart the document post and restart it so once we create the data and I'm gonna collection and let's actually change this one and update it so we have the data here so now that we have the persistent volume defined if I were to restart all these containers these data should be persisted so on the next restart I should see the database my DB collection ends the entry here so let's do that great so let's check see the database is here the collection is here and the entry has persisted so now let's actually see where the darker volumes are located on our local machine and that actually differs between the operating systems for example on a Windows laptop or computer the path of the docker volume will be at program data docker slash volumes the program data docker folder actually contains all the other container information so you would see other folders in this docker directory besides the volumes on Linux the path is actually /var leap docker volumes which is comparable to the Windows path so this is where the docker saves all this configuration in the data end on the Mac it's also the same one inside of this volumes director you actually have a list of all the volumes that one or many containers are using and each volume has its own hash which is or which has to be unique and then slash underscore data will actually contain all the files and all the data that is persisted let's head over to the command line and actually see the volumes that we persisted for MongoDB now interesting a note here is that if I were to go to this path that I just showed you in the presentation which is var Lib docker C there is no such directory so that could be a little little bit confusing but the way it works on Mac specifically on Linux you would actually have that path directly on your host but none Mac it's a little bit different and actually I learned this fact from the stack or a flow discussion so basically what happens is that docker for Mac applications seems to actually create a Linux VM in the background and store all the docker information or toker data at all the containers and the volumes etc inside of that VMs storage so if we execute this command here so this is actually the physical storage on my laptop that I have where all the data is stored but if I execute this command I actually get the terminal of that VM and inside here if I look I have a virtual different virtual file system and I can find that path that I showed you here so it's var leap docker see so I have all this docker information here I have the containers folder and I have volumes folder so this is the one we need sort of that is usually go to the volumes and this is a list of volumes that I have created and this is the one that came from our docker compose right this is the name of our F this is the this is what docker compose actually takes as the name you can actually take a look here so when it's creating this containers it depends this name is a prefix and then there is MongoDB and our volume has the same pattern it has the prefix and then data this is the name that we defined here so now if we look inside of that data volume directory we see that underscore data and if you have seen my previous video where I explain the different types of docdoctor volumes this would be the anonymous volumes so basically here you don't have a name reference it's just some random unique ID but it's the same kind of directory as this one here the difference being that this one has a name so it's more it's easier to reference it with the name so this is anonymous volume this is a named volume but the contents will be used in the same way so here as you see in this underscore data we have all the data that MongoDB uses so this will be where it gets the date the default databases and the changes that we make through our application inside and if I go inside of containers so remember this volume is attached to MongoDB and is replicated in side of the container under path slash data / dB so if we go inside of the container here PS / DP we'll see actually the same kind of data here so we have all this index and collection files just like we did in this one so now whenever we make changes to our application for example we change it to Smith and this will make the container update its data and that will cascade into these volumes directory that we have here so that on the next startup of a container when the slash data slash to be is totally empty it will actually populate this directory with the data from this persistent volume so that we will see all the data that we created through our application again on startup and that's how docker volumes work in order to end that screen session that we just started because exceeds doesn't work in this case somehow on Mac you can actually click on ctrl a K and then just type Y and the session will be closed so when you do screen LS you should see actually it's terminating thanks for watching the video I hope it was helpful and if it was don't forget to like it this is a video series so I will create a new one every week so if you want to be notified whenever a new video comes out then subscribe to my channel if you have any questions if something wasn't clear in the video please post them in the comment section below and I will try to answer them so thank you and see you in the next video