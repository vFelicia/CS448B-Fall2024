hello and welcome to kubernetes tutorial kubernetes is an open source technology developed by google in order to make orchestrating containerized applications easier that's why an official definition of kubernetes is actually a container orchestration tool so as you can see containers are the base part of kubernetes technology so if you want to learn kubernetes you first have to understand what a container is and why we use them so in this video series we'll talk about container concepts and one of its most popular implementations which is Ducker so we'll talk about what a container is and what problems it solves we will also look at a container repository which is basically a storage for containers we'll see how container can actually make the development process much easier and more efficient and also how they solve some of the problems that we have in the deployment process of applications so let's dive right into it what a container is a container is a way to package applications with everything they need inside of that package including the dependencies and all the configuration necessary and that package is portable just like any other artifact is and that package can be easily shared and moved around between a development team or development and operations team and that portability of containers Plus everything packaged in one isolated environment gives it some of the advantages that makes development and deployment process more efficient and we'll see some of the examples of how that works in later slides so as I mentioned containers are portable so there must be some kind of a storage for those containers so that you can share them and move them around so containers leave in a container repository this is a specific this is a special type of storage for containers many companies have their own private repositories where they host or the way they store all the containers and this will look something like this where you you can push all of the containers that you have but there is also a public repository for docker containers where you can browse and probably find any application container that you want so let's head over to the browser and see how that looks like so if I here search for a docker hub which is the name of the public repository for Tucker I will see this official website so here if you scroll down you see that there are more than hundred thousand container images of different applications hosted or stored in this docker repository so here you see just some of the examples and for every application there is this official docker container container image but if you are looking for something else you can search it here and I see there's an official image for let's say Jenkins but there's also a lot of non official images or container images that developers or or even from Jenkins itself they actually store it here so public repository is where you usually get started when you're using or when you are starting to use the containers where you can find any application image so now let's see how containers improve the development process by specific examples how did we develop applications before the containers usually when you have a team of developers working on some application you would have to install most of the services on your operating system directly right for example you are developing developing some JavaScript application and you need a post Chris Kuehl and you need Redis for messaging and every developer in the team would then have to go and install the binaries of those services and configure them and run them on their local development environment and depending on which operating system they're using the installation process will look actually different also another thing with installing services like this is that you have multiple steps of installation so you have couple of commands that you have to execute and the chances of something going wrong and error happening is actually pretty high because because of the number of steps required to install each service and this and this approach or this process of setting up a new environment can actually be pretty tedious depending on how complex your application is for example if you have 10 services that your application is using and you would have to do that 10 times on each operating system environment so now let's see how containers solve some of these problems with containers you actually do not have to install any of the services directly on your operating system because the container is its own isolated operating system layer with Linux base image as we saw in the previous slides you have everything packaged in one isolated environment so you have the PostgreSQL with a specific version packaged with the configuration in the start script inside inside of one container so the developer you have to go and look for the binaries to download on your machine but rather you just go ahead and check out the container repository to find that specific container and download on your local machine and the Downloads step is just one docker command which fetches the container and starts it at the same time and regardless of which operating system you're on the command the docker command for starting the container will not be different it will be exactly the same so we have ten applications that your app that your JavaScript application you depends on you would just have to run $10 comments for each container and that will be it which makes the setting up your local development environment actually much easier and much more efficient than the previous version also as we saw in the demonstration before you can actually have different versions of the same application running on your local environment without having any conflict so now let's see how containers can improve the deployment process before the containers a traditional deployment process will look like this developer development team will produce artifacts together with set of instructions of how to actually install and configure those artifacts on the server so you would have a jar file or something similar for your application and in addition you would have some kind of a database service or some other service also with a set of instructions of how to configure and set it up on the server so development team would give those artifacts over to the operations team and the operation team will handle setting up the environments to deploy those applications now the problem with this kind of approach is that first of all you need to configure everything and install everything directly on the operating system which we saw in the previous example that could actually lead to conflicts with dependency versions and and the service is running on the same host another problem that could arise from this kind of process is when there is misunderstanding between the development team and operations because everything is in a textual guide there could be cases where developers miss to mention some important point about configuration and when that fails the operations team have to go back to the developers and ask for more details and this could lead to some backandforth communication and the application is successfully deployed on the server with containers this process is actually simplified because now you have the developers and operations working in one team to package the whole configuration dependencies inside the application just as we saw previously and since it's already encapsulated in one environment you don't have to configure any of this directly on the server so the only thing you need to do is run a docker command that pulls that container that you've stored somewhere in the repository and then runs it and that makes the process this is of course a simplify simplified version but then makes exactly the problem that we saw on the previous slide much more easier no environmental configuration needed on the server the only thing of course you need to do is you have to prepare you have to install the and set up the docker runtime on the server before you will be able to run containers there but that's just one time effort and later in this tutorial we will also see how kubernetes actually offers even more abstraction of the deployment environment to make the deploying of super complex applications much much easier than it was possible with the traditional approach thanks for watching the video I hope it was helpful and if it was don't forget to like it this is a video series so I will create a new one every week so if you want to be notified whenever a new video comes out then subscribe to my channel if you have any questions if something wasn't clear in the video please post them in a comment section below and I will try to answer them so thank you and see you in the next video