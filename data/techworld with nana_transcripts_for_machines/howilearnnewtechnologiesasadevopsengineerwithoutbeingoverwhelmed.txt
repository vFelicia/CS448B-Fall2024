hi in this video we're going to talk about the challenge of learning multiple technologies and staying up to date with new ones in the devops field and how i personally manage not to be overwhelmed by it and make the learning process much easier as a devops engineer you need to learn so many tools to even start your job as a junior devops engineer so the minimum entry requirement is already super high which is logical because devops is about creating endtoend processes for the complete software development and deployment and there are many tools involved in creating these processes but in addition to having to learn five to ten technologies right at the beginning which is you can't just learn them in isolation but you have to know how to combine them as well how to integrate them together to build those processes but it doesn't stop there to add to this challenge the devops space is developing really fast and we see new technologies new concepts emerging all the time so many engineers feel pressure to learn new tools to use in their projects so how can you keep an overview and not get too overwhelmed by all this but at the same time still stay up to date and know when a new tool comes up that can actually make your work easier and more efficient or help you and your team in your software development and deployment process so first of all when we're talking about developments in the devops space there are two main categories the concepts and the tools and it's important to separate them concepts are the foundational basis of devops processes they are guidelines to how things should be done therefore understanding the concepts before learning the tools is super important it's also important to understand that tools are just means to an end every tool is there to solve a problem or to serve some purpose so understanding the concepts helps you know what processes you have what problems and challenges are in those processes and when you have that as a basis then you can start learning the tools that can actually solve those challenges or implement those concepts to give you some examples before learning any devops tool you should actually learn the ci city concept first what does a cicd process look like what challenges does it have what is its purpose which is to release application improvements fast and in an automated way to the end users what does it include what steps does it have like building the application testing deploying to development to staging and so on and then you learn the tools that implement this concept and help you achieve its goals so if you're just getting started in the devops field this will be the first step or the first concept to learn and actually have a video exactly on the topic that you can check out or another example would be before learning any infrastructure is code tool for example you should learn the infrastructure as code concept first again asking yourself why is it needed what is its purpose like doing manual work versus automated code for infrastructure provisioning because manual work is more effort it has more mistakes it is less transparent and so on and also understand what are the challenges of the infrastructure as code concept and then again you learn the tools that implement these concepts and you also understand how these different tools address those challenges so now when you're learning devops tools or you know a bunch of them already and the new tool comes up your first question to challenge that technology is to understand what problem does it actually solve and is that problem relevant for you so you have a big picture of the concepts and the devops processes because you learned the concepts first so now you can easily fit each tool into that big picture by just understanding the main purpose of the tool on a high level so when i start learning a new tool the first thing i want to find out is another cool features that it has or the cool ui that it provides or that it can integrate with 100 other technologies in the ecosystem or that it's super cloud native kubernetes native with automated workflow fancy stuff but instead my first question is what problem or problems does it solve and where does it fit on the big picture of devops the simpler the answer the better and there are tools that solve one main problem but there are also tools that solve multiple problems in which case i want to find out which one of those problems are the most important the main ones because a tool is usually good at one or two things and the rest of the stuff or rest of the use cases are additional bonus features so to say so in this step i investigate the use cases of the tool once the problem is clear then you can evaluate and measure how important or relevant that problem is to decide whether you want to dig into that tool deeper and basically learn more about it and for already established tools like kubernetes docker terraform and so on which you anyways have to learn it's still the first step because you may know that everyone is using kubernetes and docker but you may not know why and that's the first thing you should understand and find out when approaching any new technology after that you can dive in the how the tool solves that problem there are many tools that address the same issue but in different ways so if you are learning an infrastructure as code tool like terraform you should find out how it does its job like terraform uses state management it has modules and providers it uses declarative approach and it has a command line interface with its own commands and how it connects to the cloud platforms that you want to provision infrastructure on and so on and also how does it compare to alternative tools that you may already know about so you learn about the core concept of the tool itself on a high level overview once i understand the problem and the use cases of the tool now i know why i'm even learning it i also understand how it works theoretically so i know more or less how i could integrate it into my existing workflow processes so now it's time to get started and actually use the tool because the confidence comes from practice and here is a super important thing to understand about practicing a tool handson you should always practice with an actual example use case something you can actually apply in real life projects so the way i do it is i first define the actual simple but realistic use case with the tool because starting with handson practice without an example use case can be demotivating and confusing let me give you some examples if you want to learn how to use docker just take a simple application and dockerize it with dockerfile to learn how this process works then think about how you can build and run this dockerized application by implementing these simple steps you will actually learn much more than just randomly learning some concepts about the tool through the official documentation or some blog articles so you create a use case like i have a basic node.js application i dockerize it i build it i build an image push it to the repository then i run it and test that the application is accessible and for each step you can learn how to do it and what are the docker concepts related to implementing those steps later you can expand that use case like you want to add a database connection to your dockerized node.js application and you want to run multiple docker containers so you learn about docker compose and how to use it another example would be if you're learning kubernetes again think of a simple use case like you already have a dockerized application with two other services so you want to deploy all of them in kubernetes with multiple replicas by doing just that one simple use case you will already learn so much about how kubernetes works and how to deploy applications in it and again you can expand on that use case and add more steps or let's say you're learning terraform as a use case you may decide to automate a process of creating eks cluster on aws or creating an ec2 instance with a security group in a new vpc and so on now of course you need some resources to be able to learn how to do this right i personally go to the official documentation or blog articles and video tutorials to learn how to do each step individually so specifically on that topic because it's much easier to find out resources on specific individual steps than just learning about the whole setup and while i'm implementing that individual step i also learn all the concepts related to that on the way or find tutorials and online courses like ours where the instructor actually guides you exactly through this kind of simple but realistic use case that you can follow along and again you can expand on that finding more advanced use cases at your work or just by yourself and trying to implement those as well now there is another super important thing i want to point out when learning the basics of a tool especially if it's a tool like kubernetes or docker that you know you will definitely need long term in your devops career and it is to have patience while learning so take your time when learning the foundational concepts of the tool in order to avoid leaving any knowledge gaps and trust me it always pays off at the end because building on a good foundational knowledge is way easier because you always have reference knowledge for new stuff and the more you learn the more things make sense the things just click more and learning new stuff becomes more and more easier in comparison if you rush into things because you don't have patience or you don't have time without really understanding the main concepts and learning things kind of chaotically with lots of knowledge gaps you may actually get more and more confused if you just add stuff to it so learning new things may actually become more challenging and finally you have to understand as an i.t professional learning never stops because the tech world is rapidly changing new versions of the existing tools are being released as well as new tools are being developed all the time so with the above techniques that i mentioned you will have a good foundation for quickly evaluating new tools whether they are relevant for you and worth learning but also if you have a good understanding of a specific tool you can easily learn the new features of that tool as well so it's also a mindset of lifelong continuous learning and finally you of course need to be aware when a new version of a popular tool gets released or a new technology is becoming more mainstream and popular so you have to adopt that and for that you also have many ways to stay up to date with industry developments like you can follow some industry peers on social media accounts or blog platforms that basically post about these kind of new developments you can join devops communities either online or offline communities where people exchange this kind of information or you can also subscribe to youtube channels like ours tech work with nana but also many other channels that make really great devops videos on devops trends as well and much more ways like podcasts newsletters and so on so if you're interested you will find a way to stay up to date now i hope sharing my experience and tips on this topic was useful for you please share below how you are tackling this challenge and which of these tips was actually the most helpful for you and generally share your experiences how do you keep up with technology developments and what are some of your tips on that and with that thank you for watching and see you in the next video you