let's go ahead and create a Jenkins file in dev branch and I'm gonna do that using the get UI so let's go to dev and I'm gonna create a new file and this is the most basic Jenkins file that basically does nothing but this is the basic syntax we're going to go through a Jenkins file syntax in more detail in a later section but here I'm gonna explain you the required attributes for Jenkins file so the first thing is that Jenkins file can be written as a scripted pipeline or a declarative pipeline so the scripted pipeline was the first syntax of Jenkins file so what it is is basically it allows to write the whole configuration of the Jenkins file using groovy script so the only structure that you have there is this here and inside of this is basically groovy scripts and you can write the whole configuration here in a flexible manner as you wish so there is no predefined structure there however for people who didn't know or doesn't know groovy syntax or who hasn't worked with groovy is little bit difficult to start with that's why as a recent addition they actually edit declarative pipeline syntax from Jenkins file which is easier to get started with it has of course it's not as powerful as the scripted pipeline because here you're not limited in any way but it's easier to get started with because you have a predefined structure so this what you see here is basically pre given structure that you have to follow but again you don't have to think about how to script all this so you just fill in the gaps so what we saw here the note definition is basically same as these two lines here so in a declarative pipeline you declare that you are writing a pipeline and agent any basically means that this build is gonna run on any available Jenkins agent and agent can be a note it could be executors on that note whatever and this is more relevant when you have a Jenkins cluster so to say with master and slaves where you have Windows nodes and Linux nodes etc but here for the beginning for base we just say agent any so we'll just run with the next available agent and as I said these two are equivalent to this one here and they are required attributes you always have to use them the next required attribute is stages and this is where the whole work actually happens so you have different stages of that pipeline and inside the stages you define stage name and you can define as many stages as you want usually you have something like this so you have a build stage let's get rid of this one actually have a build stage maybe you have a test stage and then you have a deploy stage like this you can have additional ones like for example you might have a check out stage stage here and I don't know cleanup stage afterwards whatever and as you see inside the stage you have the steps and here goes the script that actually executes some comment on the Jenkins server or Jenkins agent so for example if you're building a JavaScript application all the NPM install NPM build etc scripts will go here like this if you are you know running tests or for Java backend all the text execution scripts will be here and the deployment script will be here so right now let's just write simple echo comments to kind of test this so here we're gonna say building the application and here we're gonna say testing the application in here we are deploying the application and this is a very Jenkins file and this should work already so let's actually now we committed it and let's go back to our pipeline and let's scan it again and see the locks and it's doing something so as you see here it found Jenkins file in dev and now it's actually executing the Jenkins file right here so if I go back to my pipeline view I already see the first branch was built and that's a dev branch let's go inside and see the first execution so what happened here the first step that you see is check out the code the second one was built test deploy and here you can see the logs and this is what we echoed in each stage testing the application etc so now the question is where did this come from so this stage is something we didn't define before and it basically checks out the code so how does this happen this actually comes from let's go back to my pipeline and configure this actually comes from this one right here so by defining or by configuring that we want git repository with this URL to be checked out we basically in UI declaring that we want that checkout stage to happen right so it automatically adds to the pipeline stage now you could do that in your Jenkins file instead of configuring it in the pipeline configuration but I actually prefer to have that step configured in the pipeline you eye configuration so this is the result of Jenkins file execution and here inside of that branch configuration you also have some options like where you can build the branch manually and see the configuration but at this point it's important to note that most of the configuration will be done in Jenkins file or on the pipeline level in the configure mask so right here and not on the individual branch level so you wouldn't be doing anything here that's why you can only see the configuration but not edit the configuration so now what if you want to test some stuff or some changes in a Jenkins file let's say add one of the steps you want to test some groovy expression and you are new to groovy so you're just learning and you just want to try this out and it will be more effort to you know adjust the Jenkins filed and commit it and you know it has to check out again the changes and rebuild it again etc so there is actually a handy way to do that in Jenkins so we can test and execute the Jenkins file changes without having to commit each change so the way to do that is go to one of the branches so let's say in the dev and here you have the history of the build and if you click inside one of those builds and here you have a bunch of options and one of them is replay and what replay does is basically allows you to adjust the last run jenkins file and rerun it again so here let's say i want to try some groovy expression so the thing is in this inside the steps you can only write the command line comments so if you want to try it or if you want to execute groovy script then you have to enclose it inside script so script will be one of the steps so here you can have echo I delete it again so building the application and inside script we can write some groovy expression so let's say let's just write something whatever so if this is true then we're gonna say cool if not no not cool and then I'm gonna echo this and let's run okay so it's building now and here if I open this I see filling the application and the new message so when now we tested the changes in the Jenkins file without having to actually commit it to the repository another thing that you can do with the specific build is also so if you click on this triangle you actually see all this commands as well replace there but you can also do restart from stage so if you click here you see a list a drop down list of all the stages that you have defined so if one of the stages fails or I don't know you need to repeat this stage again you can actually choose one of the stages without having to repeat all the other so let's actually choose the deploy and if I run in again you see you will skip the previous stages and just do the last one which also could be pretty handy sometimes