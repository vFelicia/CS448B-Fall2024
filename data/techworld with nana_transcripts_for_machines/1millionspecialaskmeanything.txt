we did it we hit 1 million subscribers on Tech Nana channel so I wanted to create this special video to celebrate with you guys and thank all of you because of course we couldn't have reached this Milestone without you I want to shout out the very first subscribers of techr banana you guys were the first ones to watch our videos and appreciate them I appreciate your support over the years and I believe that we are just getting started here we are more motivated than ever to keep on creating awesome and useful content for you so in this video I want to give you some interesting insights into our journey from 0 to 1 million subscribers then I will answer your questions that you guys have submitted over the past week I have selected the most asked questions and will answer them for you and last but not least and this is the most important part of this video to show our gratitude of making Tech proana into such a large amazing and supportive Community I have prepared a special giveaway with really cool stuff for our community members and not only one but five of you guys will get this giveaway so I will give you the details about what the giveaway is and how to participate exactly at the end of this video so make sure to stay till the end it took us 115 videos to reach this Milestone and what a journey this has been when we started this channel I could not imagine that techro withana would become the biggest cloud and devops channel on YouTube I wasn't even sure I would be creating videos for the channel this long I actually didn't even start out with the goal to make this into this professional channel that Tech Rana has turned into it wasn't a big plan to become an educator of cloud and devops topics it was actually originally meant as a shortterm site project just to document my knowledge of kubernetes in a video format and also when we started off we had no knowledge in recording video editing no professional equipment Bad audio and as you can see the quality was pretty horrible still people loved it because of information in the videos and the value that we were delivering now some of you may be wondering now when I say Wii who am I referring to who is this Wii and how many people are in Wii it's actually me and my cofounder Nicole who was a react developer back then we started this channel together and have been creating YouTube videos ourselves ever since without any professional video editors so we kind of learned the content creation skills as we moved along fast forward to now we are not only a YouTube channel but the entire online educational platform that we built behind the channel so we created complete boot camps and educational courses where we educate thousands of people to become devops and Cloud Engineers or even get into it and accelerate their career with devop skills and then we built a small team of Highly capable amazing Engineers who do everything to support our students and make their Learning Journey a success now here's the most impressive part of this for us not only individual Engineers are learning in our courses and boot camps but some of the largest companies and organizations in the world have been training their Engineers with our programs we have universities Ministries military and government organizations around the world even space companies who use our programs it's crazy to think how credible techr nanab brand has become that established large companies with the best engineers and resources are using our trainings to educate their engineers and also pretty crazy in how many Industries and projects kubernetes and devops is needed another interesting thing is I said it took us5 videos to reach 1 million subscribers and four years which is very few videos for such a large Channel it usually takes thousands of videos over a decade with multiple subscribe or smash the like button CT to to reach this size but you guys know I'm more lowkey and try to keep it authentic and focus on giving the information and value and still we achieved such a huge growth I believe because of the focus on value talking about value and useful information let's get straight to answering your questions and what you wanted to know the first one is very interesting and relevant for many people I am 46 years old wanting to change career into it am I considered old to get hired in tech industry as a new here's the thing would it have been better if you got into it at the age of 16 or 26 yes absolutely will it still pay off if you start it now also yes but to make sure this is not just a cliche motivational answer let's break this down into logical answer and actually calculate it with ears first you need to be selfaware and ask yourself do you enjoy learning are you curious and open to learning new things so basically check your Readiness second ask yourself do do you think you will be using the skills you acquire in whatever it field you get into for at least 5 years for example let's say you get into it learn and work in the field for 10 years and at the age of 56 you decide to start a tech company and use your skills for several more years for that or you learn Cloud engineering and you stay and grow within that field for next 10 years if you plan on using those skills for at least 6 to 7 years it already pays off to start in te plus if you like learning new things figuring out stuff you will actually enjoy every single one of those ears there is no lack of growth and learning opportunities any it field now how much time will you need on average to learn the skills and start productively working as an engineer in any it field if you are motivated you will need around 2 to 3 years to build good foundation and become a skilled engineer this is the phase where you can start really enjoying using your skills where you can use your knowledge more effortlessly while also extending your skills and experience now if time is an important element and you want to avoid any time wasters and detours and just follow a straightforward laid out path so you can get there much faster and easier well I have to mention this because that's literally why I created the it beginners course and DeVos boot camp for people who wanted to get into the field with proper guidance and support them all the way through this journey because that's exactly the pain Point most people have so it was a nobrainer for me I just created solution for that problem exactly because I knew how challenging it was for me personally both starting in software engineering back then and then starting in devops and Cloud so my advice is think of this as a longterm game start learning now use our courses to get to this super enjoyable phase of building the foundation knowledge that you can effortlessly deploy at work and this whole journey will already have paid off this next question was by far the most asked one which is how to get into devops in 2024 where and how to start devops with zero knowledge which tools do I need to learn and it is a complex questions but I will try to simplify this here if you want to get into devops in 2024 I have two answers short answer with a simple guide and a bit longer answer with more element and more complex guide the short answer is if you already have some IT background like test engineer software developer Cloud engineer or even Junior devops engineer you enroll in our devop boot camp directly it takes around 6 months to complete it fully by working through all the HandsOn projects so before end of 2024 you will be a certified devops engineer and I will confidently say you won't need any other resources other than this boot camp to get into devops or find your first job in that role now if you have no it background or your IT background is from systems Administration side or network engineering for example it's going to be more challenging to dive into devops directly because you are going to be lacking some Foundation prerequisite knowledge specifically in the area of software development life cycle in that case you simply enroll in our it beginners course to learn those prerequisites and then you will have enough knowledge to enroll in the devops boot camp and start learning devops tools and Technologies now this will probably take you around 8 months in total but you will have an equivalent knowledge of a midlevel devops engineer before the end of this year whichever path you have to take you get support from us all the way through every day including weekends so you will not be learning alone you will have all the guidance you need from us now the long answer and the longer path is you watch this video where I explained devops road map and I will link it in the video description as well and then you watch the video called what is devops on our Channel with these two videos you will know exactly what skills you need and which ones you are missing from this you can put together a learning plan to follow the road map that I described in the video in exactly the defined order because it's counterproductive to learn everything at once or learn Tools in random order because often you may need pre knowledge of one tool before you learn another one so for each concept or technology you learn them one at a time and this is very important you need to learn things handson theory is great but it's nowhere as efficient as HandsOn practice find projects online to build endtoend processes like complete cicd pipeline or complete kubernetes cluster or if you do my tutorials on Docker and kubernetes I already have HandsOn demo projects that I use to teach those Technologies so you can find tutorials like that that integrate realistic HandsOn projects in the technology and as I said this is more complex because it requires you to research those resources put them in order identify how much of each technology you need to learn like how much is enough to move on to the next technology and this is probably the most challenging part the Integrations learning how to integrate various tools with each other to build complete processes this whole process will require a lot of selfdiscipline and consistency and honestly I personally use this longer challenging path myself to build my expertise because I couldn't find any properly structured guide and it was frustrating and overwhelming very often and I could have saved myself a lot of time that's why I didn't want to create individual courses where you don't learn those Integrations and complete use cases instead I wanted to design a complete boot camp where I could cover everything in exactly the right order and when I created this devop SP Camp it was actually the first one in the world with exactly this kind of structure and Clarity but either way get started with high level understand the big picture then learn the concepts and once you have that then move on to the individual Technologies you will see how it goes if it gets overwhelming and too much of course you always have an option to use our Devil's boot camp and it beginners course third question also a very common one will AI replace devops Engineers or how do you see AI impacting the devops or SRE field in the future do you suggest focusing more on HandsOn skill sets because of ai's potential impact on the IT job market doing things that AI can't do now here's one interesting thing about devops specifically compared to programming for example devops involves a lot of architecting skills you need to think like a systems architect you need to make multiple decisions in your head based on many tools and Concepts you know about in order to design and Implement efficient devops processes using that same knowledge you can detect the issues or optimization opportunities in the existing systems like something can be automated can be made faster more efficient and even though we talk a lot about devops and Cloud Technologies a lot of personal and cultural elements are involved in this as well like how do you involve different engineering roles to support you in building those devop processes how do you play intermediary between different engineering roles so they work together to share responsibilities on parts of devops processes this becomes even more important in devops when you take this huge topic of security from security and compliance engineers and try to spread that knowledge throughout the development and operations and maybe some other teams as well at least 80% of these tasks will be very challenging to do with AI right now and the rest of the 20% that you can do with AI like create automation scripts and configurations give you a pipeline code suggests different optimizations and so on you still will have to validate those scripts and configurations and suggestions so you may use AI to help you with many tasks just like use automation tools like terraform to help you automate some tasks but you still have to be highly involved in the whole process yourself you can fully delegate that in programming that percentage is much higher you can delegate probably up to 50% of work to AI like suggestions to write better code to refactor the code to write automation tests um write an algorithm based on natural language input things that are currently harder to delegate are the product knowledge the more contextual knowledge of your application the decisions and changes on the software archit texture level uh knowledge of feature requirements and this kind of stuff so these things still remain predominantly within the software developer skill set I have gotten this question many times how do you manage to learn and teach so many tools how are you able to remember all the Technologies which are unique to one another there is one powerful strategy for this which I call Concepts before tools basically decoupling underlying Concepts from the features of the tool now how is this strategy helpful in devops and Cloud for example there are hundreds of tools but only a handful of Concepts if you learn the tools you will learn bits and pieces of those Concepts but you will have many holes in that knowledge so if you have to switch to another tool it will be very challenging because your knowledge is tied to the tool and its features and you will be focusing on the features of the new tools as well and it's much harder to navigate on this level the way I approach this is if I'm learning a completely new tool I extract the concepts from a tool to understand why this 900s devops tool was even created what issues does it solve after understanding the concepts and use cases then I start learning the tool Itself by asking the questions like how does this tool implement this specific use case how does it solve this issues how does the tool work and finally I learned how to actually use the tool like the syntax configuration options various features Etc so before I even get to the syntax I already know all the strength and weaknesses and the why is behind the tool and of course I use the same approach and sequence when I teach different tools now here's a really interesting thing and this was actually big advantage that starting YouTube channel gave me as a practitioner I had to implement things fast often with tight deadlines and often didn't have enough time to really dig deeper into the concepts and the wise to understand the best practices or zoom out to understand a big picture of what I was implementing because you can create a fully functional cic pipeline that deploys to a fully functional communes cluster on a fully functional Cloud infrastructure and everything will be working but it may have many inefficiencies and holes and security issues so just because you got all those systems to work doesn't mean that you understand how everything works or why you have done certain things and configurations like that deep deep understanding of things are often missing even with practitioners so when I started creating tutorials I realized that I needed to understand the wise behind the tools and every single feature and configuration of those tools and the best practices to be able to teach the complete picture of not only what you are doing but why you are doing it on the other side the Practical knowledge and experience that I had was extremely important but for the reason that you may not expect the troubleshooting experience the no happy path of things not working the issues the mistakes and misconfigurations getting stuck and figuring out how to work around the blockers the limitations of different tools basically things that are not covered in the official documentations or tutorials so you can't really learn them from Theory you have to learn them the hard way so that means when I decide that I want to learn a new tool to the level that I can teach it to others I need to go through both of these experiences to get the full spectrum of knowledge and the last question I wanted to address here is a bit more specific but very interesting one I am a junior Cloud developer who has just landed her first tech job in a very large organization I want to move into devop space and am finding it hard to gain trust for my team lead I work completely remotely from my team how can I build trust in this space and how can I find ways to demonstrate that I have potential and am willing to learn how can I be brave and ask for guidance without feeling like I'm lacking if the lead hesitates first of all thanks for such wonderfully formulated question I know that there are many Junior Engineers who have this challenge as well so here is my direct answer to that show them your work to prove that you can do it for example go and analyze the release pipeline in your team from start to finish find something that you can optimize or improve there are thousands of things only in that pipeline that can be made better you know devops is all about Automation and efficiency less manual work so find something to make faster more efficient to automate a manual process and suggest that Improvement to your team lead go for loow hanging fruit optimizations something that has immediate value and won't be that hard for a junior engineer to do this is not easy to do I understand understand that you will need to do some research and learning for that on your own but you only need to do enough research to understand what can be done better because you can figure out how to actually do it once you start working on the task so once you have identified such Improvement task propose it to your team lead and ask if you can start working on it right away and use that specific task to actually learn how to do it this will create a track record with your team and supervisor that you are capable to bring value proactively so when you propose the next task you will get a yes or easily now very very important you may be thinking but what if I have no idea how to make that optimization what if I propose something but I can't figure it out that may create a lot of pressure and doubt and it's okay to feel selfconscious and insecure you are still in experience so it's normal but don't let it stop you from doing tasks that you may have no idea how to do at the beginning because you will learn and you will figure it out my favorite quote from Marie forio is everything is figure out and even if you don't figure it out there's no punishment for being proactive and trying something and you will have undoubtedly have learned a lot in the process anyways this may be a very uncomfortable way of learning things but a very efficient one now again if you want to have a faster more comfortable way of learning devops production grade practices best practices security best practices included and then go back to your team and use that knowledge to identify issues and know already from the start how to fix them what to implement where and why in which order and maybe even educate your team on some of the improvements then of course you can learn all that in our Devil's boot camp and later in depops boot camp as well and then you can go and do exactly what I suggested with less anxiety so you can save yourself some stress because I understand how nervewracking this kind of work can be when you are trying to prove your skills as a junior engineer at work while trying to learn those skills at the same time I've been there done that I understand how it is and now the best and most important part of this video the giveaway is a token of our appreciation to all of you for being part of our journey and part of techin Nana Community we want to give out five spots in our devops boot camp for completely free including the support the handouts the digital certification exercises everything that it includes and this way I want to empower five of you to level up your career this year and become a certified devops practitioner note that if you've already bought devops boot camp and are going through this right now absolutely no worries you can still participate and if you win you will get the whole amount back because we don't want to limit anyone from participating here but that's not all in that giveaway we will include the exclusive techr Nana swag as well it's exclusive because they aren't available anywhere for purchase we basically created them for ourselves our friends and family or personal meetups and we want to share them with you as well as a really unique way to celebrate this special occasion with you and I will personally handw write a note for each winner to express my appreciation and gratitude and give you some motivation to dive in the devil's boot camp and get the most out of it how do you participate it's pretty easy we don't want to over complicate things here I'll leave all the details in the video description please check it out follow the steps and I can't wait to announce the winners in exactly 10 days and to get this gift to all five of you and if you made it this far thank you for watching and see you in the next video