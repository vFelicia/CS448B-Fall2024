in this video we're going to talk about sre or site reliability engineering which is becoming a very popular term in the devops and generally the software development world and i'm sure many of you are interested to know what it is exactly so first we will see how sre emerged and why was there even a need for sre then we will see what sre definition is what system reliability means exactly and how sre actually works in practice like measuring reliability with slas and so on after which we will go into detail and see exactly what are the tasks and responsibilities of an sre role this will make it clear how the work process of an sre team looks like and what are their daily activities and finally we will talk about how sre compares to devops which is a commonly discussed question nowadays so i recommend that you watch my recent devops video first where i explain devops in detail because this will make it definitely easier to understand the topics in this video so let's get started in a traditional software development process we have developers and operations as two separate teams each of them with their own goal while developers want to push out application changes as fast as possible to the end users operations want to keep the application stable so they are very careful about each and every change and this causes a conflict of interest between these two rows forcing them to work against each other instead of collaborate and devops was actually introduced to help fix exactly this issue again as you learned in my what is devops video however while devos made release process faster these releases were not as stable as ideally wished by devops principles plus in devops team there was no dedicated role or person that actually focused full time on keeping systems reliable and that's how the need for sre and a site reliability engineer as a separate role emerged specifically sre was conceptualized at google by ben traynor a software engineer who was given a task to run a small team of other software engineers to do what used to be operations work and according to his own definition sre is what happens when you treat operations as a software problem and stuff it with a bunch of software engineers and at its core sre teams are made up of software engineers who build and implement software to improve the reliability of their systems but this definition is of course too vague and high level to really understand how it's implemented in practice so let's break it down and analyze each part of this definition step by step so first of all what is a system that we want to keep reliable or what does a system even mean in this definition well the system is the server's infrastructure the platform so the whole deployment environment where the application runs now what exactly is reliability and why is it so important to keep our systems reliable imagine you work with emails daily and your email provider is down once a week or your online banking application is down and not accessible regularly this would be unreliable services you can rely that it's available when you need it on the other hand many popular services like gmail twitter youtube etc are rarely inaccessible so these systems are pretty reliable but the thing is users usually do not notice reliability of the system it only becomes visible when something goes wrong and the services are down do you remember the recent outage of facebook instagram and other related services that made huge news what about aws server outages that also affected other applications that were hosted on aws of course everybody noticed and knew about it when it happened so the more popular and bigger the product or service and the more used the more impact it will have if the service had an outage which means more their team should worry about its reliability now what are the effects or impact of outages or system unreliability well for most of the services this is a lot of unhappy customers and lots of lost revenue like imagine online shop is down on a holiday or online bank is not working because of traffic overload this means lots of lost business because people cannot order anything on that shop so system reliability is very important for business okay so we understood that systems need to be reliable but how do we make a system reliable or ask differently what makes system unreliable what affects its reliability well the main cause of system becoming unreliable is when you make changes to your system like change something in the infrastructure the platform where the application is running the application itself and its services and so on and this may cause a disruption and break something in the whole setup well as a solution we can say no changes allowed or limit the amount of changes to keep systems reliable but that really limits the business we want to make changes and improvements to our application to make it better and increase its business value and stay competitive etc because if our competitor is bringing out new features we need to keep up and that's the main focus of software developers to make those changes and improvements but on the other hand if the application is not accessible that's also bad for business because you may have awesome features but nobody can use it because application is down and it's the operations job to take care of that and make sure the application is accessible this means devs want to release fast and ops want to keep stability so traditionally devs would make a change and ops would analyze with hundreds of checklists and mechanisms to make sure the change would not affect the system and this whole analysis and evaluations slows down the release process and that's been the major challenge of the traditional way of software development and that's exactly what devops and sre try to solve so what's the specific solution of sre here well sre tries to automate the process of analyzing and evaluating the effects the change will have on our system reliability automation means no checklists or discussions of operations team whether to release the change or not or what threats and risks are involved instead the evaluation is based on automated process and this makes releasing changes fast and safe at the same time now before moving on i want to give a shout out to our sponsor loft loft is actually the first platform for platform engineers it lets teams build a selfservice kubernetes platform in days rather than years so how it works is that platform teams usually sit in the intersection between sre teams and engineering teams they build selfservice systems for the engineering teams to be able to get access to cloud computing resources that usually only sres have access to the goal is a better developer experience and that developers can build more resilient applications and test distributed systems more realistically early on in the development process locked is actually also the creator of the cluster which is an open source project for creating virtual kubernetes clusters vcluster is the first certified kubernetes distribution for virtual clusters and it allows to spin up lightweight clusters inside the namespaces of kubernetes clusters which is a great way for securing multitenancy in shared clusters for my followers loft actually provides six months free for their paid subscription for the first 500 people so if you want to try it out check out my special link and use my promo code for that and now let's continue with our video now how is that automated evaluation done the way it works is using what's called slas so what is an sla sla is basically how reliable a system is going to be to its end users so how often it's going to be up and how often it's going to be down and it's expressed in percentage a service that works all the time is never down has a hundred percent sla now you may be thinking of course any service should be 100 reliable right isn't that a natural goal well not really first of all it's very hard to achieve 100 reliability however there are very few things in the world that actually need a hundred percent sla so for example if your internet provider or the customer's device itself is 100 reliable which is the case with most laptops mobile phones and so on then your service does not need to be either it can be available maximum at the same rate as the underlying network or device and in those cases a reliability of three nines or four five nines may be enough so that users don't even notice that there is an issue and the more closer you try to get to hundred percent the more effort it is which as you see is an unneeded effort because you don't need 100 sla for most applications now what is an example of an sla you define a service level agreement about the accessibility of your application so for example a 99 sla for application accessibility would mean that the system can be down maximum 3.65 days in a year an sla with 5 9 or 99.99 allows an application to be unaccessible maximum five minutes a year so the rest of the time it should work and you can actually define multiple such agreements or slas not just the accessibility or availability of the system but also things like application response time or an error rate and so on for example if you have an application that serves a million requests a week with 99 sla you define that 990 000 of those requests will be successful okay now you may be wondering who defines these slas so basically who decides how many requests must be successful out of these million requests or how much downtime is allowed for the application who makes this kind of decisions well this decision affects the end users and their user experience so naturally business people are also involved in this process so basically business people together with the engineers like sre and devos engineers decide together what service level agreements they want to define for their application and based on the industry benchmarks competition user feedback and so on business people will define the desired slas on a higher level and the engineers will then define them on a technical level and also make sure to integrate them into their devops and sre processes as i said sla for availability defines how long the service should be available or how much downtime is allowed for that service and that allowed downtime is also what's called an error budget in sre and a team can quote unquote spend that error budget on making unreliable changes so basically that error budget says that we're allowed to have that much downtime in our system without losing business making customers unhappy etc so sla is like a barometer you can turn it up or down based on how reliable your system needs to be and of course the closer to 100 the more effort you need to put in to guarantee the reliability of your systems now once the sla is defined the system performance can be measured against this number if systems are more unreliable than the sla allows then more resources from the sre team will be put to make the systems reliable again because we have exceeded that allowed amount of downtime and until the system is recovered to be within the defined sla fewer changes will be allowed on the other hand if the system is performing well beyond the defined sla developers in the sre team can release more changes so it's a simple way to regulate the release speed of developers if we turn up the sla releases will slow down and vice versa and the sre or the site reliability engineer is the one who creates automated processes to calculate and evaluate whether the service is within the sla or not so now the policy for launching is not the endless checklist that operations use to decide whether to launch or not instead an sre helped design processes that can automatically evaluate an sla now of course to measure the performance of our systems and whether services are within the sla we need proper monitoring of our systems so as another big part of sre tasks and responsibilities is to configure proper monitoring and logging of the systems to get visibility of what's going on inside now we said that for most applications sla is not a hundred percent which means we accept that it won't work 100 of the time so at some point we will have an outage now the question is what do we do when an outage happens or how do we prepare for it and that's where another big part of sre tasks and responsibilities comes in the first one is monitoring and alerting which i already mentioned so in addition to giving you a visibility to measure your system's performance but more importantly it helps you detect any indications for issues before they happen or very early when they happen and then alert the teams about it now another important part of this whole configuration is that when the issue is alerted and ideally the right person in the team gets the message the alert message should contain all the needed information to identify and fix the issue fast so instead of something is wrong in the cluster a more detailed message like surveys a in cluster b is throwing 500 error for example so know exactly which service is having a problem in which cluster and what that problem exactly is so more detail the alert message the better in many cases sres will develop their own custom services to achieve this proper monitoring alerting and login configuration for their systems another thing that sres do is oncall support so basically when things go wrong and users need realtime support somebody is responsible for doing that and that is oncall support team and putting sres on this support team helps them really see and understand what issues to expect how the support deals with the issues and what improvements can be made to make the support process more efficient such as do alert messages and logs have enough information to quickly identify the issue and the cause where issues identified too late etc so overall the main goal of sre is to make sure the scope of outage is small when it happens which means the outage doesn't last long and is fixed very quickly and less people and few services are affected by that outage now there is one challenge about detecting the issues that you may not think about immediately and one reason why it's important to prevent issues or identify them as early as possible in practice when the system is configured properly you usually have multiple mechanisms for high availability reliability selfhealing etc so one small bug in such systems will not cause an outage because you have protection mechanisms for that and this means that multiple things must go wrong before system becomes unreliable and before you actually have an outage so when an outage does happen you don't have one thing that you need to fix but rather multiple issues or a chain of issues on multiple levels that you need to fix so fixing that array of issues is more complicated and takes more time before the system has recovered and is back available for users so this additional protection mechanisms do protect the system and make it more reliable but they also make it more challenging to detect the issues early so in this case it's even more important to configure a proper monitoring logging and alerting configuration to overcome this challenge now fixing an issue or an outage is not the end of the sre team's work we want to use that outage as a chance for lessons learned and of course avoid that this happens in the future so as a principle of sre team is to do what's called post mortem which is latin for after death so in sre terms after issue or after outage analysis and this includes a thorough analysis meaning taking time to really go deeper and understand the issues what caused this outage go through the whole chain of who did what who fixed what how you were able to deal with it etc but of course during this analysis it's super important to stay blameless which is one of the major points of this postmortem analysis in order to encourage people to admit and learn from their and other people's mistakes and finally it's important to document everything for future reference now you may be thinking how much more should software developers learn they already have to know all these software development technologies now they also have to take over the operations tasks and learn all these operations tools and that's why we have sre as its own role so a dedicated person whose fulltime responsibility is to work on keeping systems reliable so in many projects along with developers you have sre teams which are the new ops team basically a team that does the operations where both teams work for the same goal of keeping the systems within the defined slas so the sre team maintains and takes care of the automated delivery operations and all sorts of automation that will help developers release their changes safely and fast however it's also common to have one team of srs and software developers where sres also do the software development job and this means that sr engineers must know software development as well unlike devops engineers but in both cases as you see we started off with a traditional way of software development with separate dev and ops with opposing incentives and with sre we gave devs and ops the same incentives and put them on the same side and finally one of the majorly discussed questions in this area is what is the difference between sre and devops engineer or generally between these two concepts if you already watched my what is devops video you know that there are two definitions of devops the original definition which is more high level and more broad and doesn't specify how exactly devops should be implemented and a more practical one which evolved over time with its own devops engineer role so when we compare devops with sre it's important to know which definition of devops we're using for this comparison so with the first broader definition of devops devops is a more high level concept that defines what needs to be done to achieve the automated streamlined release process while sre is more specific about how to exactly implement this process and how to implement devops principles so many people would say that sre is a specific implementation of the devops concepts but as you saw in my what is devops video devops itself also became more practical with its own role and specific technologies and ways to implement it so what's the comparison here well in many companies devops implementation this practical devops implementation became more focused and concentrated on the speed of delivery for the application changes and of course even though it's part of the devops principles to not only release fast but release quality code many devops teams in practice again seemed to optimize more for the speed than reliability so as a great complementary part of devops sre emerged with the same principles and goals in mind which is release quality code fast but as the name suggests more focused on reliability and keeping systems stable while allowing for fast changes so sre is its own role with its own set of tools for making systems reliable so these two were kind of parallel developments and are now often seen as two sides of the same coin and it's not uncommon for teams to have both devops engineer and sre helping implement the devops principles now i hope you learned a lot in this video and that i was able to answer all of your questions about sre now if you have work or are currently working as an sre please share your experience in the comments because i'm sure it will be very interesting for others one thing i also want to mention is to be sure to check out our course roadmap for this year because based on your feedback we have planned to create a few courses we may not be able to create all of them this year because we try to create the courses with a super high quality content instead of creating as many as possible so the process takes longer so sign up to get notified when we release the courses and with that thank you for watching and see you in the next video