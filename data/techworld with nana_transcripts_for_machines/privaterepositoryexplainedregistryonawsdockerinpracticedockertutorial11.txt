so in this video we're gonna create a private repository for docker images on aws ecr there are many more options for docker registries among them nexus and digitalocean so we're gonna see how to create a registry there build and tag an image so that we can push them into that repository and in order to push the images into a private repository you first have to log into that repository so we're going to see how that works this video is part of a video series of how to use docker in practice in a software development and later in deploying that application so if you want to go through the whole series here's a link to the playlist and make sure to check it out so let's see how it all works so the first step is to actually create a private repository for docker it's also called docker registry um in this case we're gonna do it on aws so let's see so i already have an account on avws so the service that we're going to use is called elastic container registry so ecr docker container registry and because i don't have a repository there yes i am presenting with the screen so in order to create a repository click on get started and here we have a repository name and we are actually going to name it the name of the application that we have so i'm actually going to name it my app this is the domain of the registry from aws and this is the repository name which is the same as my image name and don't worry about the other stuff right now and just create a repository it's as simple as that now one thing i think specific to amazon container service is that here you create a docker repository per image so you don't have a repository where you have uh where you can actually push multiple images of different applications but rather for each image you have its own repository and when i when you go inside of the repository here it's empty now but what you store in a repository are the different tags or different versions of the same image so this is how the amazon container service actually works there are other docker registries that work differently for example you create a repository and you can just throw all of your container images inside of that one repository so i think this is more or less specific for aws so anyways we have repository which is called my app and let's actually see how we can push the image that we have locally so actually check that once more so we want to push this image here into that repository so how do we do that if you click on this one the view push commands will be highlighted this is different for each registry but basically what you need to do in order to push an image into repository are two things one you have to login into the private repository because you have to authenticate yourself so if you are pushing from your local laptop or local environment you have to tell that private repository hey i have access to it this is my credentials if a docker image is built and pushed from a jenkins server then you have to give jenkins credentials to login into the repository so docker login is always the first step that you need to do so here aws actually provides a docker login command for aws so it doesn't say docker login but in the background it uses one so i'm going to execute this login command for aws docker repository so in the background it uses actually docker login to authenticate so in order to be able to execute this you need to have aws command line interface and the credentials configured for it so if you don't i'm gonna put a link to uh the guide of how to do that in the description i have configured both of them so i can execute this command and i should be logged in successfully to the docker repository so now i have authenticated myself to the docker repository here so i'm able to push the image that i have locally to that repository but before i do that there is one step i need to do so i've already built my image so that's fine and now i have to tag my image and if this command here looks a little bit uh too complicated for you or too strange let's actually go and look at image naming concepts in docker repositories so this is the naming in docker registries this is how it works the first part of the image name the image full name is the registry domain so that is the host port etc slash repository or image name and the tag now you may be wondering every time we were pulling an image out of docker hub we actually never had this complex long name of the image right so when we were pulling an image it looked like this docker poll 4.2 the thing is with docker hub we're actually able to pull an image with a shorthand without having to specify a registry domain but this command here is actually a shorthand for this command what actually gets executed in the background when we say docker pull is docker pull the repo the registry domain so docker dot io slash library is a registry domain then you have the image name and then you have the tag so because we were working with docker hub we were able to use a shortcut so to say in the private registries we can't just skip that part because there is no default configuration for it so in our case in aws ecr what we're gonna do is we're gonna execute docker pull the full registry domain of the repository this is what we're gonna see here and a tag and this is how aws just generates uh the docker registry name that's why we see this long image name with the tag here and we have to take our image like this so let's go back and take a look at our images our image that we built again and under the repository it says my app now the problem is we can just push an image with this name because when we say docker push my app like this docker wouldn't know to which repository we're trying to push by default it will actually assume we're trying to push to docker hub but it's not going to work obviously because we want to push it to aws so in order to tell docker you know what i want this image to be pushed to aws repository with the name my app we have to take the image so we have to include that information in the name of the image and that is why we have to tag the image tag basically means that we are renaming our image to include the repository uh domain or the address and the name okay and aws already gives us the command that we can execute we want to use the specific version so i'm gonna use 1.0 in both so what this is going to do is it's going to rename this is what tech does my app 1.0 this is what we have locally this is what the name is to this one here so let's execute that and let's see what the outcome is and as you see it took the image that we had made a copy and renamed it into this one so these two are identical images um they're just called in a different way and now when we go back we see the docker push command so basically this thing here is the same as docker push and name of the image and the take so this push command will tell docker you know what i want to take the image with take 1.0 and push it into a repository at this address so when i execute this command see the push command will actually push those layers of the docker image one by one this is the same thing as when we're pulling it we already we also pulled the images layer by layer and this is what happens in the reverse direction when we push it so this is also gonna take a little bit great so the push command was complete and we should be able to see that image in the aws repository now so if i go inside see i have image tag with 1.0 this is our tag here and push the time the digest which is the unique hash of that image and the image uri which is again the name of the image using the the repository address image name or repository name in this case and the tag so now let's say i made some changes in the docker file um you know let's say i re renamed this home slash home slash app to node app like this or what could also lead to need to recreate an image is obviously where when i um change something in the code right so you know let's say i were to delete this line because i don't want to console.log to be in my code and now i have a different version of the application where i have changes in the application so now i want to have those changes in the new docker image so now let's build a new docker image out of it so docker build let's call it my app with a version 1.1 and a path to a docker file and now i have a second image which is called my app with version 1.1 so now again because i want to push this to a repository i have to rename it to include the repository address inside of it so i'm going to do docker tag the first parameter is the image that i want to rename and the second one is the name of that image a new name so it's going to be the same as the previous one because the repository name and the address is the same remember we have one repository for one image but for different versions so we're building a version 1.1 so it should end up in the same repository so now here we have 1.1 and if i take that and images i have a second image here so i'm gonna copy that and i'm gonna do docker build and do not forget the tag it's important because it's part of the complete name sorry it's docker push and now some of the layers that i already pushed are there only the ones that changed are being repushed so to say and also know that i just have to do docker login once at the beginning and then i can pull and push images uh from this repository uh as as many times as i want so docker login is done once so now that is complete let's actually reload this so my repository now has two versions so this is pretty practical if you are for example testing with different versions and you want to have a history of um those were image tags um if you want to for example test a previous version and i think in aws the repos each repository has a capacity of holding up to 1 000 image versions so for example my app here you can have a thousand different tags of the same image okay so now again to compare it to the initial diagram that we saw for this complete flow let's actually switch back to it quickly so here what we did is basically simulate how jenkins would push an image to a docker repository so whatever we did on our laptop will be the same commands executed on a docker on the jenkins server and again jenkins user or jenkins server user has to have credentials to the docker repository to execute docker login depending on the registry or repository configuration will look different and jenkins needs to tag the image and then push it to the repository and this is how it it's done and the next step uh of course we need to use that image that that is lying now in the repository and we're gonna see how it's uh pulled from that repository and again we're gonna do it on the local environment but it's the same thing that's a development server or any other environment will actually execute thanks for watching the video i hope it was helpful and if it was don't forget to like it this is a video series so i will create a new one every week so if you want to be notified whenever a new video comes out then subscribe to my channel if you have any questions if something wasn't clear in the video please post them in the comment section below and i will try to answer them so thank you and see you in the next video