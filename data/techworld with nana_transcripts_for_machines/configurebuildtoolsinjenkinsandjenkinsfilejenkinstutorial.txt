so in this video I'm going to show you how to configure different build tools in Jenkins so the development flow usually looks like this so you develop your application and now using Jenkins you want to build and package that application as an artifact so in order to build the application in the package you need some kind of build tool depending on which technology which language you use you are going to need a different build tool for example the four main tools that I've used commonly in projects and there some more but this four main are maven and Gradle four beckon applications like if you're developing your java application you probably use one of those and if you have a JavaScript application then you are going to be using either NPM or yarn so for example if you have frontend in JavaScript you will build it using NPM or yarn and backend you will build it using maven on Gradle and you will need at least one of those build tools in your Jenkins build configuration because Jenkins bill has to run these commands so how does it work how does Jenkins allow you to use these build tools some of these tools are available or installed in Jenkins out of the box the rest of them you have to install as plugins and configure them so the first step that you need to do is to go to the Jenkins configuration and check whether your tool is already there out of the box if it is you just use it if not you go to the plugins you install it go back to the configuration and then you configure it once you have that already in a Jenkins configuration you can actually use it and the usage depends on what type of built of Jenkins use I'm going to show you example of using two of these tools actually in Jenkins file so let's actually go ahead and check it on Jenkins so the step one I said you need to go to Jenkins manage engines and global tool configurations that's where all the tools are configured here you can see the list of the outofthebox available tools so if I scroll here I see I have Gradle and I have maven which is already configured for me and I have docker what I don't have here is NPM or yarn so what I'm gonna do now is I'm gonna create an example Jenkins pipeline using a demo application that I have and this demo application that I have uses Gradle and yarn to build backend and frontend respectively which means I don't need the maven installation radishes here I only need Grail from here and in addition to that I will need yarn and by the way when below the task of the tool you have this button button with installations dot the dot that means there is at least one of that installation configured if not you have to add one and to see how it looks like this is maven installations and I have one so if I hover here this is one installation of version three six three which is installed directly from Apache so from internet so how this configuration works is we can see it on Gradle example if I do add Gradle I just give it a name whenever I want and here I choose the version actually I'm gonna go with the latest one you can also fix it a different version if your project needs that and Jenkins will install that tool automatically for me I don't have to go and install that on a Jenkins server or whatever Jenkins does automatically form which is extremely convenient and this is basically the type of installer so if you see here the button it installer one of the options is installed from Gradle torg which is what I have by default here so I'm gonna leave it at that and that's it Gradle is configured I can use Gradle now in my Jenkins file right so I I can save that but as I showed you I don't have n PM or yarn installed in order to do that I go to manage plugins go to available there is a specific NPM plugin as well and PM pipeline plugin the way I do this is I'm gonna install in nodejs plugin which will give me the NPM as well so install so I'm gonna install that success and after I restart my Jenkins because you need to restart it so that the plugin changes take effect now if I go to global tool configuration I should see the no J's in the list so I'm gonna add nodejs and the project demo project that I'm using actually works with the older no J's version it has some backwards compatibility problem issues so I'm gonna fix a the no J's version to 1017 so that's the version that the application works on and here's the part where you can automatically like in addition to Jenkins automatically installing the no J's with this version you can make it install global packages maintain packages and yarn is one of the NPM packages so if I write a yarn here it's gonna install that automatically as well so I'm gonna give it a name let's call it node there is a common practice to name the installation with the version because if you have multiple of them you want to differentiate between node 1 no 2 so you can do something like this 17 like this and you can also fix 8 the version of NPM packages and I'm gonna need that as well because again my app doesn't work with the latest yarn version so I'm gonna fix that it like this that's a syntax for it it it actually says here in the description and the yarn version I need is 113 0 and I'm gonna save that so now when I create a pipeline I should have both Gradle and yarn available so I'm gonna create that pipeline it's gonna be my Nemo project multibranch pipeline so that's my repository I have the credentials already configured and I'm gonna build only master so let's master here and it's gonna scan the project for master and the Jenkins file and I don't have a drink as well in the master branch so let's go and create some very super simple Jenkins file just to demonstrate the usage of these two tools so here I'm gonna create a jenkees file so this is a very basic pipeline syntax that has two stages we run frontend or we build frontend and we build the backend and if you want to learn the details of it jenkees file syntax I have other videos about it so you can check them out so the plan is to use yarn command in the first step where we build the frontend and to use Gradle in the second step so the way to do that is using following syntax and this is called wrapper of those tools that we've configured so the the wrapper is no J's it's not called and here I have to provide the name of that installation which I don't remember actually so let's go back and check that so no J's installations and that's the name I'm gonna copy that and you have to provide it here so it knows that you are using that installation of node in here we create a block and the way you can run these commands is using SH so the shell command for windows you would use bench if your Jenkins is executing on a Windows node and here in this command I can already use yarn so imagine this is your command line for Jenkins and you have yarn installed so I'm gonna do a yarn I'm just gonna do yarn install just to demonstrate that the command is there so again a wrapper of that installation and inside of that I can execute yarn comments so if I have a second command I can do yarn build whatever and here we're gonna use the Gradle command and the wrapper for that is with Gradle which doesn't take anything as a parameter so it's just with Gradle and inside of that block we are gonna execute another shell command and it's gonna be Gradle W so the wrapper commends because it sound like project is set up so we're just gonna print out the version of Gradle so for now jsut have to provide the name of the installation for with Gradle upper you don't so I'm gonna commit that okay so you see the master branch is scanning jenkees file was found and if I go to this one here it's building master if I go inside let's actually check the console output and here you see that yarn is executing so yarn installed and this is a version that we provided 117 zero and yarn install is running and now the Gradle be version command ran and output the Gradle so basically they just this just proves that those build tools were installed by Jenkins automatically with the versions that I specified and the commands rein successfully so obviously the same way you can use maven and npm as well so for example here since we have no J's which has NPM already installed instead of yarn you would just use NPM comments now there's an alternative to using those tools without the wrapper you may have seen it already in the jenkees file syntax there is an attribute called tools and inside that you can configure which tools you are gonna be using in a Jenkins file so it works the same as a wrapper however that tools plugin or the tools attribute supports only three tools by now and these three tools are maven Gradle and JDK so the way I can use it is I'm gonna define cradle here so Jake is knows I need Gradle and the side I'm gonna have to define then the Gradle installation that I have configured in Jenkins so this will be the installation name so this one right here so I have to configure that so basically these indicates to Jenkins I want to use Gradle in my Jenkins file please go and fetch me the Gradle configuration that I've configured in the global tool configuration and now using that definition I can use Gradle commands without the wrapper so I can remove this and this should work as well so let's actually update this and I'm gonna scan my project go to master and see that it's building let's see okay so it's built and it ran so if I see the logs it locked the version so I guess my preferred way is to do it like this so all the tools that are supported using this tools attribute I'm gonna use them right like this because the steps part will be cleaner without the wrappers and for the rest you're just gonna have to use the wrapper like this so that's how you configure build tools and use them in Jenkins thanks for watching the video I hope it was helpful and if it was don't forget to like it if you want to be notified whenever a new video comes out then subscribe to my channel if you have any questions if something wasn't clear in the video please post them in a comment section below and I will try to answer them so thank you and see you in the next video