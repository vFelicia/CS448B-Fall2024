so in this video I'm gonna show you some basic doc recommends at the beginning I'm gonna explain what the difference between container and image is because that's something a lot of people confuse then very quickly go through version intake and then show you a demo of how to use the basic docker comments commands that will be enough to pull an image locally to start a container to configure a container and even debug the container so with that said let's get started so what is the difference between container and image mostly people use those terms interchangeably but actually there is a fine difference between the two to see theoretically image is just the part of the container runtime so container is the running environment for an image so as you see in this graphic the application image that runs the application could be Postgres Reddy's some other application needs let's say a file system where it can save the log files or where it can store some configuration files it also needs some environmental configuration like environmental variables and so on so all this environmental stuff are provided by container and container also has a port that is binded to it which makes it possible to talk to the application which is running inside of a container and of course it should be noted here that the file system is virtual in the constant container so the container has its own abstraction of an operating system including the file system and the environment which is of course different from the file system and environment of the host machine so in order to see the difference between container and image in action let's head over to the talker hub and find example a Redis image another thing is that docker hub all the artifacts that are in the docker hub are images so we're not talking about containers here all of these things are images talker official image so we're gonna go ahead and pull a Redis image out of the docker hub to my laptop so you see the different layers of the image are downloaded and this will take a couple of minutes so once the download is complete I can check all the existing images on my laptop using docker images command so I see I have two images readies and Postgres with text image IDs and so on another important aspect of images is that they have texts or versions so for example if we go back to the dock hub each one each image that you look up in the docker hub will have many different versions the latest is always the one that you get when you don't specify the version of course but if you have a dependency on a specific version you can actually choose the version you want and specified you can select one from here so this is what you see here the tag is basically the version of the image so I just downloaded the latest and I can also see the size of the image so now to this point we have only worked with images there is no container involved and there's no Redis running so now let's say I need readies running so that my application can connect to it I'll have to create a container of the Redis image that will make it possible to connect to the Redis application and I can do it by running the Redis image so if I say docker run Redis this will actually start the image in a container so as I said before container is a running environment of an image so now if I open a new tab and do docker PS I will get stairs of all the running docker containers so I can see the container radius is running with a container ID based on the image of Redis and some other information about it for example the port that it's running on and so on so as you see here the docker run readies command will start the race container in the terminal in an attached mode so for example if I were to terminate this with a control C you see that Redis application stops and the container will be stopped as well so if I do docker PS again I see that no container is running so there is an option for docker run command that makes it able makes it possible to run the container in a detached mode and that is minus D so if I do docker run t Redis I will just get the ID of the container as an output and the container will stop running so if we check again docker PS I see the container with the ID starting with 8 3 8 which is the same thing here is running so this is how you can start it in a detached mode now for example if you would want to restart a container because I don't know some the application crashed inside or some error happens so you want to restart it you would need the container ID so just the first part of it not the whole string and you can simply say doctor stop idea of the container and that will stop the docker container I think running if you want to start it again you can use the same ID to start the game so let's say you stopped docker container at the end of the day you go home you come back the next day open your laptop and you want to restart the stop container right so if you do dr. PS there is the output it's empty you don't see any containers so what you can do alternative to just looking up your history commandline history is you can do docker PS a which will show you all the containers which are running or not running so here you see the container ID again and you can restart it okay so let's try another thing let's say you have two parallel applications that both use Redis but in different versions so you would need to read ease containers with different image versions running on your laptop right at different times maybe or at the same time so so here we have the latest one which is ready 506 and let's head over to the docker hub in select version let's say you need version 4.0 so remember the first time that we downloaded the Redis image we did dr. pol Redis however if you run docker if you use docker run with Redis image and the tech which was 4.0 it will pull the image and start the container right away after it so it does two commands basically in one so it's dr. pol that doctor start in one comment so if I do this it says it can find the image locally so it goes and pulls the image from the repository to my laptop and again we see some layers are downloaded and the container is started right away and now if I do dr. PS you see that I have two radiuses running so this is where it gets interesting now how do you actually use the any container that you just started so in this output we you also see the ports section which specifies on which port the container is listening to the incoming requests so both containers open the same port which is what was specified in the image so in the logs of the container you can see the information running mode standalone port six three seven nine so how does that actually work and how do we not have conflicts while both are running on the same port so to explain that let's head over to our slide and see how this works as you know container is just a virtual environment running on your host and you can have multiple containers running simultaneously on your host which is your laptop PC whatever you working on and your laptop has certain poe ports available then you can open for certain applications so how it works is that you need to create a socalled binding between a port that your laptop your host machine has and the container so for example in the first container part here you see container is listening on port 5000 and you bind your laptop's port 5000 to that containers now you will have conflict if you open to 5,000 ports on your hosts because you will get a message the port is already bound or is already in use you can do that however you can have two containers as you see in the second and third containers are both listening on port 3000 which is absolutely okay as long as you bind them to two different ports from your host machine so once the port binding between the host and the container is already done you can actually connect to the running container using the port of the host so in this example you are I you would have some F local host and then the port of the host and the host then we'll know how to forward the request to the container using the port binding so if we head back here you see that containers have their ports and their report running on the same one however we have made any binding between my laptop's ports and the container port and because of that the container is basically unreachable by any application so I won't be able to use it so the way we actually do that is by specifying the binding of the ports during the run command so I'm gonna break this and check that there is just one container running no I'm gonna stop the other one as well so we can start them in you okay so we see both containers are here so now we want to start them using the binding between the host and the container ports but again we have to read is's so we need to bind them to two different ports on my laptop so the way to do it is you do docker run and you specify with P the port of the host that's the first one so let's go with 6000 it doesn't really in this case and the second one is the port that you're binding this tube which is the container port so we know the container port will be six three seven nine and this is where we bind our so my laptop's port 6002 and if I do this here so you know if I do PS that's actually clean this here you see the binding here alright so your laptop's 6,000 port is bound to the containers six three seven nine so now let's do another thing and let's start it in a detached mode like this let's check again it's running again and now I want to start the second container that's clear this again so here you see it created a bunch of containers because when I specified different options with the port binding it actually created new containers that's why you see a couple of them over here so I'm gonna copy the image name with the tag for that o p so for example if I were to do this now and I would try to run the other readies the second readies container with the same port on my laptop I would get an error saying port is already allocated so I can do six thousand one and run it again I'll run it in detached mode and if I go over here and say docker PS I see that i have two different Redis versions running both of them bound to different ports on my laptop and they the containers themselves listening to requests on the same port thanks for watching the video I hope it was helpful and if it was don't forget to like it this is a video series so I will create a new one every week so if you want to be notified whenever a new video comes out then subscribe to my channel if you have any questions if something wasn't clear in the video please post them in the comment section below and I will try to answer them so thank you and see you in the next video