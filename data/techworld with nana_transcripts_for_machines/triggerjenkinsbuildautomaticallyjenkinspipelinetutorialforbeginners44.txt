so till now you saw that every time I made changes in the repository I had to manually scan the pipeline so that the changes could be built but obviously that's not very practical because usually you would want this whole process to work automatically so whenever there is a change or a new commit into the git repository you want Jenkins to be notified in the whole process to be triggered and changes builds so how do you configure all of this now there are two ways that the changes in a git repository can trigger Jenkins built job pipeline etc so one way is through push notifications meaning that a source code management system detects the changes and whenever a new commit comes in it notifies Jenkins about those changes a second way is where Jenkins itself pulls this information in regular intervals so it basically checks itself is their new change is their new change from the repository itself and in Jenkins you can configure both ways so push notifications is actually more efficient because the communication happens only when there is a relevant change that needs to be built but also there's a common practice to configure a builtin jenkins to pull the changes so how do you configure each one of those to configure the push notifications from a git repository you would need to configure both jenkins in your source code management so that they can communicate with each other and depending on which source code management's you use and I use git lab here depending on that you would have to install a respective plugin in Jenkins you just have to write the repository server hostname and the access token or credentials to access the source code management host so not the repository itself not the project that you want to build but the actual host and you should give Jenkins access token of a gitlab user or your source code management user and that configuration is done here in system configuration and for example I have get lab one here and I have github here so I'm not going to do it because it will depend on which ever source code management you have but here you can figure how to connect to that repository host in the same way in your source code management if you go to settings and integration or is it here you see have web hooks project hooks right so you basically say that this is gonna be Jenkins URL but not just the host but a web hook URL of Jenkins so I can show you on let's here for example this is for github and here you can see the Jenkins URL for github webhook so to say so basically this is a URL where Jenkins will listen to code changes in github repository and this will be obviously different forked lab or bitbucket or whatever and this is the URL you're gonna point here but since I have my Jenkins running on localhost it won't work actually because I can't refer to localhost plus some web book URL here because it doesn't accept localhost it needs a proper domain but this is how you configure it you just say by default that you want to listen to all the push events and whenever gitlab in this case has new changes like a new commit is made to a project it's gonna push that change notification to web hook URL of Jenkins so Jenkins will now know okay there has been a change made in the repository let me trigger that built so this is how the whole process works and a polling request it can be configured inside of that drinking shop so if I go here in my pipeline there is a configuration option which which is called skin multi branch pipeline triggers and if I click here I can configure how often Jenkins should pull the changes so this is an alternative to what I show previously so if I configure one minute interval this will basically mean that Jenkins will check itself if there has been any changes in a git repository of the project every one minutes so if I save this go back and if I go to dev branch let's say I make a change to Jenkins file some change and commit the changes now I don't have to manually scan the build again I just wait for maximum one minute and it should automatically trigger the skin so let's see how this can work so here say I didn't do anything and it's scanned the project itself it was automatically triggered and the change I made is here so if I see the logs I see filling the application application built but of course having it at one minute interval is too much so it's it's too much load on Jenkins so usually you would have you would set it at 15 minutes or maybe half an hour or an hour and also what what's a common practice is that sometimes those webhooks or those push notifications can be unreliable when does this happen for example when Jenkins survey is not available when a source code management system pushes a notification or it could be that that notification gets blocked by a Jenkins firewall like in case something happens in that notification doesn't go through basically Jenkins doesn't know that it should trigger a build so as a sort of a backup plan for that it's a common practice to use both and set the interval it's a couple of hours maybe one hour so that Jenkins would itself scan the project again and this is what I personally would use I would actually configure both and set the interval at one or two hours thanks for watching the video I hope it was helpful and if it was don't forget to like it if you want to be notified whenever a new video comes out then subscribe to my channel if you have any questions if something wasn't clear in the video please post them in a comment section below and I will try to answer them so thank you and see you in the next video