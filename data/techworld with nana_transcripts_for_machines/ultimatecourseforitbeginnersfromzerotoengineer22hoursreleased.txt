Hi guys If you're watching this video it probably means that you want to start a career in this highly demanded IT field maybe you want to get into DevOps and that's how you came across my content maybe you want to get into software development or Cloud engineering and you've seen our python course or Docker full course as your first step into it but whatever field you choose this IT beginners course or kind of a mini bootcamp that we created will be the foundation knowledge you need to enter this seemingly overwhelming Tech world I know that when you're at the very beginning of an IT Journey it can be extremely overwhelming I receive questions from many of you about not knowing where to start what to learn first there are so many options so many IT fields and professions there is so much to learn and often you don't even know where to start if you're transitioning from another career you may be even thinking will it pay off? am I too late to start my it career? because there's so much to learn I can never catch up with those who already started at an early age many of you have also asked me how to get into devops field specifically without an IT background and I've explained in some of my other videos that starting into devops without any it preknowledge is very difficult because you need to first learn the fundamentals of the software development and release life cycle to even understand why devops is relevant and why we want to use any of the devops concepts and tools in software development projects and I understand all of these concerns the selfdoubt the time pressure insecurity Etc and that's exactly why I created this course I have structured and planned out this course with the main goal to make your Learning Journey into IT easy and fun completely dissolve the fear and insecurity of software development being so hard to understand I have structured it to teach you exactly what you need to build a strong solid foundation and focus on the most important Concepts understanding the complete process of software development life cycle and every step of it which is something many Junior Engineers with a couple of years of work experience may not even fully understand so I focus on giving you a lot of very important and sometimes even Advanced knowledge but in a super easily digestible manner I have broken down every complex topic into simple explanations so that at no point in the course you will feel overwhelmed by the content or have trouble understanding something and that as I said was my absolute priority when creating this course and if you follow the course without skipping any parts take time to do all the demo projects along with me by end of the course you'll have an exceptional Foundation knowledge to build on whatever IT specialization you choose to follow but if you choose to go into devops specifically this course will actually be the perfect entry to get you prepared for transitioning into devops since we made it as a perfect prerequisite course to our devops bootcamp so the combination of these two programs will take you from literally zero IT experience or knowledge to your very first devops engineer job and if you do choose this path I'll be very happy and honored to help you and accompany you on this journey now let's see what we will actually learn throughout this course for that you need to First understand that in IT there is something called a software development life cycle it's basically the complete process of developing and releasing a software all the way from planning to development testing packaging and running it on a configured server to make it available for the end users each of these steps are done by various roles like a developer tester systems administrator product owner Etc and we are simulating this entire process in an example software development project covering various roles and going through what each role does and how they work together so we will plan the project on a scrum board we'll create a Sprint we will program the application as a full stack developer with frontend backend and database for data persistence we will then write automated tests for our code we will then package it into an application artifact and after that we will create a virtual server on a cloud platform and prepare the server for running our application on it as a server administrator role and finally we deploy the application artifact on that server and make our application available publicly from a browser and of course along the way we'll learn all the relevant concepts and tools of each of those tasks we took our time structuring this course perfectly to include exactly the right amount of knowledge to pick the most important core concepts and explain them with engaging animations and examples without rushing into things we'll be taking time to learn every important underlying concept and more importantly understand all the whys in the process and of course the best way to learn anything is by doing it yourself so we will practice all steps with HandsOn projects and that's why I mentioned this is also kind of a mini boot camp considering the scope of things you learn now what does this course give you that you can't get in other courses or even boot camps well my goal with the course was to give you an equivalent of Junior developers work experience now of course if we take Junior developer who has been programming for a year that's a lot of coding practice so they will have more knowledge in coding specifically that you have to catch up but here is where it gets really interesting very often Junior developers with even two years of experience have knowledge gaps and miss knowledge in some parts of the software development life cycle and this is true in most cases how do I know? because I was a junior software developer myself once and I know many of my developer friends had the same issue so you know how to program frontend how to program in backend you can make connections to database so you can work with parts of things that have been set up already and basically do the small tasks in the project but most Junior developers have not set up the project from scratch like frontend backend database they haven't learned the concepts of why we are using a JavaScript framework why are we using libraries what's the comparison why are we using package Manager Tools what are the best practices there what's the underlying concept of all of this how do I connect front and to backend why do I have to connect my front end to backend and then database and what's even more how do I take the application that I just developed package it and deployed on a remote server how do I even create a virtual server what about installing packages on an operating system package manager tools and operating systems what is all that why do we need them and how they work and finally why do we use Jira boards what's scrum agile how the whole workflow actually works and why are software development projects using it so these are all knowledge gaps and whys of every step of the software development life cycle which really makes you understand the underlying Concepts because when you start at a tool level or a technology level you know how to use the technology and its features but you don't always know why you are using them you just join a project and start working with what they have set up already but nobody explains to you really what the purpose of each tool and technology used in the project is or the reason why they are using this workflow and when you have a clear understanding of those whys and a big picture of the software development life cycle trust me you have a solid foundation that many beginner Engineers will envy and when you start working you will not feel like you need much hand holding from your team they will be actually amazed to how good of an understanding you have of their processes for a beginner engineer now of course you will have to learn new tools and practice programming learn new concepts Etc because being in IT is an ongoing learning process but for each new concept or tool that you'll have to learn you will have some kind of tie points and connections on your knowledge base so you will be able to easily retain the knowledge because you have a point this new information can tie into with knowledge gaps and holes you may miss much information and get overwhelmed because you don't know where they fit as a junior I actually learned too many things things that I didn't necessarily need but I didn't know exactly what was relevant and what wasn't and I didn't know in which order I needed to learn those things either so it took me longer to learn certain things and understand the big picture because I wasn't always learning the right things at the right time it's like putting the puzzle pieces together without knowing what you're actually Building without having the end picture so it takes you longer and only once you get close to completing the puzzle you start actually understanding the picture oh that's what I've been building this whole time good to know versus having the picture as a road map and guide from the very beginning plus by learning the right things in right order will let you get the necessary knowledge in shorter period because you learn exactly what you need in a compressed curriculum and you're not wasting any time and that's exactly what we are achieving with this course so this allaround knowledge of Concepts and roles that covers the entire software development life cycle is very rare because most courses usually focus on one specific part of this life cycle and not the whole picture so it's very rare but extremely valuable and this can actually put your head even a lot of Junior engineer who have more work experience than you do so let's see in detail what you will learn in this course we will start with the first part of the software development life cycle which is planning first we start by setting up a Jira board for a scrum project and learn about concepts of agile scrum and how to work on a scrum project with Jira and we will be developing and working with a web application called Teamable as a practice project for the entire software development lifecycle process once the first development tasks are planned in in the second chapter we will start with the development part of the software development life cycle and learn how to develop a web application first we'll learn JavaScript basics syntax and concepts of course we will then learn HTML and CSS and create an example web application with HTML CSS and JavaScript to practice using them together during this process we will learn about code editors how to use them as well as how to make use of the browser's developer tools which help immensely when creating web applications troubleshooting them etc so that's a very useful and valuable skill to have equipped with this knowledge we will then create the first version of the Teamable application frontend with HTML CSS and vanilla JavaScript after that we will learn about JavaScript Frameworks and one popular JavaScript framework specifically called VueJS we will build an example VueJS project and once we've learned how to use vue.js we will replace the vanilla JavaScript of our Teamable application with vue.js framework and in the process we will see exactly why Frameworks are good and what benefits they bring and in that process we'll also learn a very important concept of versioning applications frameworks programming languages with that we will have the front end of our web application developed with HTML CSS and vue.js now it's time to create a backend for our frontend application so we'll learn why we need this construct of frontend and backend in web applications at all how the communication and connection between those work on a high level and all the concepts involved in this we'll start by learning a backhand JavaScript framework called node.js and create an example web server application with it we will also learn about libraries why we need them and how to use them we will learn about npm package repositories modules how to install packages for an application etc we will also learn the core building blocks of the web itself such as HTTP protocol https ports IP addresses URLs and how are they relevant in the software development life cycle and once we've learned all these concepts as well as how to use node.js to write web server applications we will implement the backend for our Teamable application once we have frontend and backend we will connect our application to a database to persist data so first we will learn generally about databases different types of databases and their usages and for our application we will use mongodb database specifically so we'll learn how to install and configure mongodb database and connect our backend application to it and with that we'll have a fully functioning web application with frontend backend and database where users can now make updates in our application that will be persisted in the database so this completes the development part of the software development life cycle and brings us to the next section which is testing so we will learn all about application testing and test automation different types of testing and their purposes and for our Teamable application we will write unit tests and integration tests to see how it actually works in practice then we move on to the next part of the software development lifecycle which is application release in this scope we will learn how to package an application and more importantly why we need to create a package or application artifact and then comes an extremely important part of understanding the server Basics learning the concepts of servers operating systems Cloud platforms how to create a virtual machine on a cloud platform and so on as part of the operating system's Basics we will also learn about command line package managers how to install packages and software on an operating system like Mac OS windows and Linux concept of SSH and securing access to servers and I explain all of this by often giving comparisons between Mac OS windows and Linux operating systems so you learn this on a high level not just specifically for One OS equipped with this knowledge we will then go ahead and create a Linux Ubuntu Server machine on a cloud platform we will learn how to connect to it install packages on it and so on so basically preparing our server for the deployment we will then get our application package and run it on our configured server in this scope we will also learn about firewalls securing our server about the different deployment environments for an application like development testing staging production and what is the purpose of each of these environments so this completes the whole process of developing and deploying the first version of our application but we won't stop there because the life cycle continues so we will simulate completing our first Sprint and planning the next one in which we will learn how to secure a database and configure access to it in our node.js application using environment variables this teaches you an important concept and skill of configuring an application for multiple deployment environments with this new application changes we will release the second version of our Teamable application on our deployment server and finally in the last chapter we will learn the concept of collaborating on application development and working on code using a version control system like Git first we will learn generally why Version Control tools are needed and then we will of course learn using git in practice with our Teamable project and this will fully complete your broad skill set of essential Concepts and tools in the whole software development lifecycle here I want to point out one thing that's very important to me throughout the course I teach you things to enable and empower you to then go and do similar things independently so when we install things for example instead of giving you some commands you just copy and execute blindly I teach you how to use and follow official documentations of those tools to install them like I or any senior engineer would actually do in practice in their regular job so I teach you the concepts as well so you can apply them to any other similar use case and not just what we learn in this specific course and this should give you confidence and dissolve the fear of doing such things in practice by yourself now if all this sounds a lot for you don't worry because my team and I have put a lot of work and effort to make sure this course is the most informative and valuable but also most fun and engaging course out there to get you started in IT I have broken down every complex topic into simple explanations so that at no point in the course you will feel overwhelmed by the content or have trouble understanding something so this should make it very clear that this is not just a coding course or a coding bootcamp because they are focusing on the programming part only because that's their main focus and objective to teach you software development while we in this course are focusing on going through each part of the life cycle understanding the process of complete software development and release life cycle now let's talk about what's included in the course first of all the core part is the videos which are mostly handsOn demos often with accompanying explanations and whenever a new concept is taught I break it down in a simple manner with lots of helpful animations we also created human translated English subtitles for the entire course in each lecture we have also added all the relevant links commands and repositories where you can access the code that I show in the demos so every video will be accompanied with any relevant code from that video with all of this it should make it very easy to follow the demos the course is carefully planned in a specific order to give you the full understanding of different parts so to really make the most out of this course you should actually follow it without skipping any parts even if you already have some preknowledge in any of the areas you may still learn something new when I give some side notes or explain things from a different perspective and you can even control if you want to speed up the videos if you are a bit impatient like me you can also trick your progress like this which may be some extra motivation in the learning process and last but not least a very important part of the course is the accompanying group to the course where you get support from us if you have any questions during the learning process but also a place where you can exchange with other students of the course so with this I'm already super excited to welcome you in our it beginners course you can check more details in the video description and of course you can write us anytime if you have any questions that I haven't answered here so with that thank you and see you in the next video