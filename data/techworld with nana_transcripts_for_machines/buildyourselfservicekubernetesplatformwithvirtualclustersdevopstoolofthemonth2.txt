hello and welcome to the second devops tool of the month video with loft and the exciting topic of selfservice virtual clusters for developers first i will explain what problem loft solves how it works and then we will see it in action with a simple demo let's say in your company there are 10 project teams all using kubernetes and each team would need three clusters for development staging and production now as you might think each team creating and managing their own kubernetes cluster is very inefficient especially because administration of kubernetes cluster is a lot of effort and you don't want to do it 30 times in a company because you have 10 kubernetes projects but it's also expensive because you need more servers for all those master nodes so you need more resources and a common approach of companies to solve this is to create a companywide kubernetes cluster and a dedicated team managing this companywide kubernetes cluster so now your company would only need to administer this one shared cluster and they can now give developers access to the shared cluster using isolation with namespaces so each team can deploy their applications however this comes with following challenges first of all how do you give different teams and individual developers access to this shared cluster or how do you restrict this access how do you make sure each team only gets access to their project resources to keep the cluster secure or even restrict the access within the team to define who has access to what based on their role and tasks in the team also how do you restrict how much cluster resources each team can use because you don't want one team using up most of the cluster resources and finally how do you isolate the resources and applications of each project from each other because obviously you don't want the project resources to be exceededly mixed up and all this is especially important in development environments where things will be tested and tried out but also in production environment where everything has to run smoothly and loft helps solve exactly those challenges using a concept of virtual clusters so what is a virtual cluster it's simply a cluster inside a cluster and the way loft implements virtual clusters is when user creates a virtual cluster in this shared companywide kubernetes cluster loft creates a new namespace and deploys a lightweight kubernetes cluster based on k3s inside that new namespace so basically this lightweight virtual cluster has its own api server and controller which are two of the master processes and this way virtual clusters will be completely isolated from each other so now one developer can create a virtual cluster to test a new feature for example and even if he blows up and messes up his virtual cluster nothing else gets affected maybe a product manager wants to demo new feature to the potential application users so they can very easily spin up a virtual cluster to deploy the application and then just remove that virtual cluster when the demo is over so now let's see the complete flow to how you as a user can set it up and use it usually you already have existing kubernetes clusters in your company which may have been created using eks or openshift or wrencher and you already have ingress controller monitoring and some clusterwide resources already configured now loft comes into the picture and usually devops engineers will install loft in one of the clusters and then start connecting all the other clusters to it basically creating one big selfservice cluster for the whole company so now using loft ui or loft command line interface or even cube ctl cluster admins can create users for the teams or individual developers and give them permissions and access to create and use virtual clusters after that developers of different teams can basically start creating virtual clusters themselves and deploying applications inside so as you see loft solves quite a lot of challenges for managing and also using kubernetes clusters within the company and to see that let's jump right into a demo where we can see all these in action it's actually very easy to get started with loft and for the demo i'm gonna use my local mini cube cluster to install loft and then basically see some of its features so my cluster is already running and it is basically empty because i have no resources inside and the first step will be to install loft cli and on the loft documentation page basically you see the installation command for each operating system i'm just going to copy this very simple execute and loft is installed locally now as a next step we want to install loft in our mini cube cluster so basically loft has to start somewhere right it has to be installed somewhere and that is inside a kubernetes cluster and we can do that very easily using loft start command and let's execute and see what happens first of all love detected that i have a mini cube cluster running so it is asking me whether i want to use that let's do yes email address i'm just gonna tap in this and now as you see loft is getting installed inside our mini cube cluster using this command right here and as you see the installation was successful and we have a loft ui url that was exposed automatically at this address and we have username and password so let's go back to the browser and let's open loft ui and we're going to log in with this admin user and this is a loft ui and obviously in your real projects at work you would install loft in an existing remote kubernetes cluster it could be a cloud kubernetes cluster or onpremise and the admin user will basically have the whole management permissions for all the clusters that loft is basically managing right and the admin user also has this configuration tab here for administering all those clusters so usually it will work like this you as an admin user if you're a devops engineer for example you will basically connect all the clusters that your company has to this loft management cluster right so basically one cluster that you install the lofting automatically gets connected and that's why we see this loft cluster right here this is actually our mini cube cluster in which we installed loft so as a second step as the administrator of the clusters you will connect an additional cluster using loft in my case i have created a lino to kubernetes cluster because it's just very easy to get started with and i'm going to connect lke cluster in loft and this is my lenod cluster very simple i just have one node and here is my cubeconfig for connecting to the cluster so let's go back and see how easy it is to connect existing kubernetes clusters to loft and note that this could be any kubernetes cluster it doesn't really matter it will work for all the same connect cluster let's call it lke cluster now as a next step we basically just need to provide a cube config for the cluster i am simply just going to copy that from here and paste it in connect and now you see as a next step kiosk is being installed in this remote lynode cluster so i don't have to do anything as an admin basically loft takes care of it kiosk is basically an open source project that loft uses to manage those remote clusters that are connected to loft and that got installed and we have a new cluster connected that we can now use and if i click finish i am inside this lke cluster that we just edit and you see that kiosk was installed and loft also gives you very handy way of installing any additional helm charts basically in that remote cluster if you don't already have them like nginx ingress cert manager prometheus etc so you could actually install all those things in the remote clusters using loft very easily so i'm going to go back to the cluster so this is our lke this is our mini cube clusters so we are all set up to use them now who would use those clusters these are going to be developers maybe devops engineers or other team members right people who actually want to deploy applications or test out different stuff in those clusters and create virtual clusters basically right so that means that i as an admin should give people permission to create and use those virtual clusters so in user section basically i can add new users and let's say this is a new user let's call her nicole provide email address and as an admin user obviously you can limit permissions and access to that user right so you can basically decide which clusters they have access to and how much resources they can actually use and so on so in our case we're gonna use all the defaults basically that loft provides so this will be a users that doesn't have admin privileges but can use basically all the clusters that are connected so we're going to leave everything as is and create that user and we get a link that i could as an admin send that user and say hey you can log in with this url so that they can start basically using this selfmanaged cluster so now that my job as an admin is done here i can log out and open that url for the new user there you go and now i am logging in as this developer called nicole that basically has permission to create virtual clusters and start deploying her applications inside so i am a developer i'm a backend engineer and this is my account i don't see an admin tab here because it's not an admin user and if we go to clusters basically see both of these host clusters right the actual clusters that were connected here and right here i'm able to create virtual clusters let's actually do that create virtual cluster and here i can select which cluster which host cluster i should create the virtual cluster in let's actually choose lke and let's say i want to create this cluster to test my new feature payment so i'm going to call this cluster payment test again i'm going to leave all the defaults because we're doing a simple demo and create that virtual cluster and soon enough our virtual cluster is up and running and we actually created two things now one is space so space basically creates a namespace inside that lke cluster v cluster payment test so if i actually connect to my lk cluster and let's do cube ctl get namespace right here i have this v cluster payment test right so this namespace got created inside the lke cluster and inside the namespace a new virtual cluster got created now again i want to use this cluster to deploy my applications so how do i connect to the virtual cluster instead of the host cluster right because now i'm connected to lke and if i do cube ctl apply basically i will be creating stuff inside here but i want to connect to and use the virtual cluster inside that namespace let's actually see the parts that are running inside the namespace and here you see we have two pods running and these two parts are basically part of the virtual cluster right as i mentioned previously it's a lightweight k3s cluster that has its own api server that we can actually talk to so now how do we configure our cube context to talk to that virtual cluster instead of the host cluster in order to connect to this virtual cluster we can actually click on this button here connect and we will see loft command that will configure our local cube context to point to that virtual cluster so the way it works is that any user who has access to this virtual cluster and who has permission to use it can log in to loft using loft cli to this address in our case we're logging in as user recall because that's the developer who created the virtual cluster and provide the access key of that user so in profile access key i can create my access key and use it to login to loft and let's add an insecure flag here because it's complaining that we're logging into insecure instance and there you go and now because luckily i'm authenticated with loft i can actually execute this connect command because now loft knows that i as this user have a permission to use that virtual cluster so let's execute and there you go cube context changed so now let's do cube ctl get namespace first of all and we're seeing the namespaces of the virtual cluster and in addition we can do cluster info as well and here you see kubernetes master is pointing to api server of our virtual cluster vcluster payment test so this is the endpoint of the api server and here as you see we have some of the master processes running as well so now this developer backend engineer user can basically do anything in a virtual cluster without affecting anybody else within the resource limits and permission limits that this user was given by admin of the loft cluster and last but not least a very important feature of loft is a sleep mode which lets you save significantly on your infrastructure costs so when i'm done using the cluster or when i'm done testing basically and i don't need it for some time you can either manually trigger a sleep mode for a space so basically the virtual cluster in that namespace will scale down all the resources so nothing will run anymore however data and all the kubernetes components will be persisted or you can also configure spaces to go to sleep mode automatically after some period of time and then whenever you start using the cluster again for example if we do ctl get namespace command so basically with the first interaction with that space or with that virtual cluster the space becomes active again as you see and this is a very convenient way of using the sleep mode to save lots of infrastructure cost